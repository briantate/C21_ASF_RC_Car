
C21_ASF_RC_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000609c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  0000609c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000db4  20000070  0000610c  00010070  2**2
                  ALLOC
  3 .stack        00002004  20000e24  00006ec0  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00041fb6  00000000  00000000  00010126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007850  00000000  00000000  000520dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e351  00000000  00000000  0005992c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000cf8  00000000  00000000  00067c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001400  00000000  00000000  00068975  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00029c56  00000000  00000000  00069d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00021c19  00000000  00000000  000939cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a2cff  00000000  00000000  000b55e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002668  00000000  00000000  001582e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002e28 	.word	0x20002e28
       4:	000047a5 	.word	0x000047a5
       8:	000047a1 	.word	0x000047a1
       c:	000047a1 	.word	0x000047a1
	...
      2c:	000047a1 	.word	0x000047a1
	...
      38:	000047a1 	.word	0x000047a1
      3c:	000047a1 	.word	0x000047a1
      40:	000047a1 	.word	0x000047a1
      44:	000047a1 	.word	0x000047a1
      48:	000047a1 	.word	0x000047a1
      4c:	00003241 	.word	0x00003241
      50:	000047a1 	.word	0x000047a1
      54:	000047a1 	.word	0x000047a1
      58:	000047a1 	.word	0x000047a1
      5c:	000047a1 	.word	0x000047a1
      60:	000047a1 	.word	0x000047a1
      64:	000038a1 	.word	0x000038a1
      68:	000038b1 	.word	0x000038b1
      6c:	000038c1 	.word	0x000038c1
      70:	000038d1 	.word	0x000038d1
      74:	000038e1 	.word	0x000038e1
      78:	000038f1 	.word	0x000038f1
      7c:	000047a1 	.word	0x000047a1
      80:	000047a1 	.word	0x000047a1
      84:	000047a1 	.word	0x000047a1
      88:	000047a1 	.word	0x000047a1
      8c:	000047a1 	.word	0x000047a1
      90:	00004391 	.word	0x00004391
      94:	000043a1 	.word	0x000043a1
      98:	000043b1 	.word	0x000043b1
      9c:	000043c1 	.word	0x000043c1
      a0:	000043d1 	.word	0x000043d1
      a4:	00002cf1 	.word	0x00002cf1
      a8:	00002d01 	.word	0x00002d01
      ac:	000047a1 	.word	0x000047a1
      b0:	000047a1 	.word	0x000047a1
      b4:	000047a1 	.word	0x000047a1
      b8:	000047a1 	.word	0x000047a1

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000070 	.word	0x20000070
      dc:	00000000 	.word	0x00000000
      e0:	0000609c 	.word	0x0000609c

000000e4 <frame_dummy>:
      e4:	b508      	push	{r3, lr}
      e6:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4908      	ldr	r1, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd08      	pop	{r3, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	0000609c 	.word	0x0000609c
     110:	20000074 	.word	0x20000074
     114:	0000609c 	.word	0x0000609c
     118:	00000000 	.word	0x00000000

0000011c <spi_init>:

					/* Write the data to send */
					spi_write(module, data_to_send);
					length--;
				}
				if (spi_is_ready_to_read(module)) {
     11c:	b5f0      	push	{r4, r5, r6, r7, lr}
     11e:	b08b      	sub	sp, #44	; 0x2c
     120:	6001      	str	r1, [r0, #0]
		spi_write(module, data_to_send);

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     122:	680c      	ldr	r4, [r1, #0]
     124:	231c      	movs	r3, #28
     126:	07a4      	lsls	r4, r4, #30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     128:	d500      	bpl.n	12c <spi_init+0x10>
				if (spi_is_ready_to_read(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     12a:	e0e7      	b.n	2fc <spi_init+0x1e0>
     12c:	680c      	ldr	r4, [r1, #0]
     12e:	3b17      	subs	r3, #23
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     130:	07e4      	lsls	r4, r4, #31
     132:	d500      	bpl.n	136 <spi_init+0x1a>
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
     134:	e0e2      	b.n	2fc <spi_init+0x1e0>
     136:	1c16      	adds	r6, r2, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     138:	1c0c      	adds	r4, r1, #0
			}

			if (!spi_is_ready_to_read(module)) {
     13a:	1c05      	adds	r5, r0, #0
     13c:	1c08      	adds	r0, r1, #0
     13e:	4b71      	ldr	r3, [pc, #452]	; (304 <spi_init+0x1e8>)
     140:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     142:	2805      	cmp	r0, #5

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     144:	d002      	beq.n	14c <spi_init+0x30>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
     146:	1c47      	adds	r7, r0, #1
     148:	3013      	adds	r0, #19
		}

		enum status_code retval;
		uint16_t received_data = 0;
		rx_length--;
     14a:	e001      	b.n	150 <spi_init+0x34>
     14c:	2019      	movs	r0, #25
     14e:	2706      	movs	r7, #6
     150:	496d      	ldr	r1, [pc, #436]	; (308 <spi_init+0x1ec>)
     152:	69ca      	ldr	r2, [r1, #28]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     154:	2301      	movs	r3, #1
     156:	40bb      	lsls	r3, r7

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     158:	4313      	orrs	r3, r2
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     15a:	61cb      	str	r3, [r1, #28]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     15c:	a909      	add	r1, sp, #36	; 0x24
     15e:	2724      	movs	r7, #36	; 0x24
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     160:	5df3      	ldrb	r3, [r6, r7]
     162:	700b      	strb	r3, [r1, #0]
     164:	b2c3      	uxtb	r3, r0
     166:	9301      	str	r3, [sp, #4]
     168:	1c18      	adds	r0, r3, #0
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     16a:	4b68      	ldr	r3, [pc, #416]	; (30c <spi_init+0x1f0>)
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     16c:	4798      	blx	r3
     16e:	9801      	ldr	r0, [sp, #4]
     170:	4b67      	ldr	r3, [pc, #412]	; (310 <spi_init+0x1f4>)
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     172:	4798      	blx	r3
     174:	5df0      	ldrb	r0, [r6, r7]
     176:	2100      	movs	r1, #0
     178:	4b66      	ldr	r3, [pc, #408]	; (314 <spi_init+0x1f8>)
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     17a:	4798      	blx	r3
     17c:	7833      	ldrb	r3, [r6, #0]

		retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
     17e:	2b01      	cmp	r3, #1
     180:	d103      	bne.n	18a <spi_init+0x6e>
     182:	6822      	ldr	r2, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
     184:	330b      	adds	r3, #11
			/* Overflow, abort */
			return retval;
     186:	4313      	orrs	r3, r2
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     188:	6023      	str	r3, [r4, #0]
     18a:	7833      	ldrb	r3, [r6, #0]
     18c:	2b00      	cmp	r3, #0
     18e:	d000      	beq.n	192 <spi_init+0x76>
     190:	e0ae      	b.n	2f0 <spi_init+0x1d4>
     192:	6822      	ldr	r2, [r4, #0]
     194:	3308      	adds	r3, #8

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     196:	4313      	orrs	r3, r2
     198:	6023      	str	r3, [r4, #0]
     19a:	e0a9      	b.n	2f0 <spi_init+0x1d4>
			rx_data[rx_pos++] = (received_data >> 8);
     19c:	c304      	stmia	r3!, {r2}
     19e:	428b      	cmp	r3, r1
     1a0:	d1fc      	bne.n	19c <spi_init+0x80>
     1a2:	2300      	movs	r3, #0
     1a4:	62eb      	str	r3, [r5, #44]	; 0x2c
     1a6:	62ab      	str	r3, [r5, #40]	; 0x28
     1a8:	2400      	movs	r4, #0
     1aa:	86ab      	strh	r3, [r5, #52]	; 0x34
     1ac:	862b      	strh	r3, [r5, #48]	; 0x30
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     1ae:	3336      	adds	r3, #54	; 0x36
	uint16_t tx_pos = 0;
	uint16_t rx_pos = 0;
	uint16_t rx_length = length;

	/* Send and receive buffer */
	while (length--) {
     1b0:	54ec      	strb	r4, [r5, r3]
     1b2:	3301      	adds	r3, #1
     1b4:	54ec      	strb	r4, [r5, r3]
     1b6:	3301      	adds	r3, #1
     1b8:	54ec      	strb	r4, [r5, r3]
		while (!spi_is_ready_to_read(module)) {
		}

		enum status_code retval;
		uint16_t received_data = 0;
		rx_length--;
     1ba:	3b35      	subs	r3, #53	; 0x35
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     1bc:	726b      	strb	r3, [r5, #9]
     1be:	712c      	strb	r4, [r5, #4]
     1c0:	6828      	ldr	r0, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1c2:	4b50      	ldr	r3, [pc, #320]	; (304 <spi_init+0x1e8>)

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     1c4:	4798      	blx	r3
     1c6:	1c07      	adds	r7, r0, #0
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
     1c8:	4953      	ldr	r1, [pc, #332]	; (318 <spi_init+0x1fc>)
     1ca:	4b54      	ldr	r3, [pc, #336]	; (31c <spi_init+0x200>)
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     1cc:	4798      	blx	r3
     1ce:	00bf      	lsls	r7, r7, #2
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     1d0:	4b53      	ldr	r3, [pc, #332]	; (320 <spi_init+0x204>)
     1d2:	50fd      	str	r5, [r7, r3]
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     1d4:	682f      	ldr	r7, [r5, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		while (rx_length) {
     1d6:	ab04      	add	r3, sp, #16
     1d8:	2280      	movs	r2, #128	; 0x80
     1da:	701a      	strb	r2, [r3, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     1dc:	705c      	strb	r4, [r3, #1]
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
     1de:	3a7f      	subs	r2, #127	; 0x7f
     1e0:	709a      	strb	r2, [r3, #2]
     1e2:	70dc      	strb	r4, [r3, #3]

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		while (rx_length) {
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     1e4:	7833      	ldrb	r3, [r6, #0]
     1e6:	2b00      	cmp	r3, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1e8:	d102      	bne.n	1f0 <spi_init+0xd4>
     1ea:	2200      	movs	r2, #0

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     1ec:	ab04      	add	r3, sp, #16
				if (spi_is_ready_to_read(module)) {
					break;
				}
			}
			if (!spi_is_ready_to_read(module)) {
     1ee:	709a      	strb	r2, [r3, #2]
     1f0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
			}
			enum status_code retval;
			uint16_t received_data = 0;
			rx_length--;
     1f2:	9305      	str	r3, [sp, #20]
     1f4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     1f6:	9306      	str	r3, [sp, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     1f8:	6b33      	ldr	r3, [r6, #48]	; 0x30
     1fa:	9307      	str	r3, [sp, #28]

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     1fc:	6b73      	ldr	r3, [r6, #52]	; 0x34
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     1fe:	9308      	str	r3, [sp, #32]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     200:	2400      	movs	r4, #0
     202:	b2e1      	uxtb	r1, r4
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     204:	00a3      	lsls	r3, r4, #2
     206:	aa05      	add	r2, sp, #20
     208:	5898      	ldr	r0, [r3, r2]
     20a:	2800      	cmp	r0, #0
     20c:	d102      	bne.n	214 <spi_init+0xf8>
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     20e:	1c38      	adds	r0, r7, #0
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     210:	4b44      	ldr	r3, [pc, #272]	; (324 <spi_init+0x208>)
     212:	4798      	blx	r3
     214:	1c43      	adds	r3, r0, #1
     216:	d006      	beq.n	226 <spi_init+0x10a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     218:	ab02      	add	r3, sp, #8
     21a:	7218      	strb	r0, [r3, #8]
     21c:	0c00      	lsrs	r0, r0, #16
     21e:	b2c0      	uxtb	r0, r0
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     220:	a904      	add	r1, sp, #16
     222:	4b41      	ldr	r3, [pc, #260]	; (328 <spi_init+0x20c>)

			retval = spi_read(module, &received_data);

			if (retval != STATUS_OK) {
     224:	4798      	blx	r3
     226:	3401      	adds	r4, #1
     228:	2c04      	cmp	r4, #4
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
     22a:	d1ea      	bne.n	202 <spi_init+0xe6>
				/* Overflow, abort */
				return retval;
     22c:	7833      	ldrb	r3, [r6, #0]
			}
			/* Read value will be at least 8-bits long */
			rx_data[rx_pos++] = received_data;
     22e:	716b      	strb	r3, [r5, #5]
     230:	7c33      	ldrb	r3, [r6, #16]
     232:	71ab      	strb	r3, [r5, #6]
     234:	7cb3      	ldrb	r3, [r6, #18]
     236:	71eb      	strb	r3, [r5, #7]
     238:	7d33      	ldrb	r3, [r6, #20]

			/* If 9-bit data, write next received byte to the buffer */
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     23a:	722b      	strb	r3, [r5, #8]
     23c:	2200      	movs	r2, #0
     23e:	ab02      	add	r3, sp, #8
     240:	80da      	strh	r2, [r3, #6]
				rx_data[rx_pos++] = (received_data >> 8);
     242:	7833      	ldrb	r3, [r6, #0]
     244:	2b01      	cmp	r3, #1
     246:	d113      	bne.n	270 <spi_init+0x154>
     248:	6828      	ldr	r0, [r5, #0]
     24a:	4b2e      	ldr	r3, [pc, #184]	; (304 <spi_init+0x1e8>)
     24c:	4798      	blx	r3
     24e:	3013      	adds	r0, #19
     250:	b2c0      	uxtb	r0, r0
			if (retval != STATUS_OK) {
				/* Overflow, abort */
				return retval;
			}
			/* Read value will be at least 8-bits long */
			rx_data[rx_pos++] = received_data;
     252:	4b36      	ldr	r3, [pc, #216]	; (32c <spi_init+0x210>)
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		while (rx_length) {
     254:	4798      	blx	r3
     256:	1c01      	adds	r1, r0, #0
     258:	69b0      	ldr	r0, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     25a:	ab02      	add	r3, sp, #8
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
     25c:	1d9a      	adds	r2, r3, #6
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     25e:	4b34      	ldr	r3, [pc, #208]	; (330 <spi_init+0x214>)

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     260:	4798      	blx	r3
     262:	2317      	movs	r3, #23
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     264:	2800      	cmp	r0, #0
     266:	d149      	bne.n	2fc <spi_init+0x1e0>
     268:	ab02      	add	r3, sp, #8
     26a:	3306      	adds	r3, #6
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     26c:	781b      	ldrb	r3, [r3, #0]
     26e:	733b      	strb	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     270:	7833      	ldrb	r3, [r6, #0]
     272:	2b00      	cmp	r3, #0
     274:	d10f      	bne.n	296 <spi_init+0x17a>
     276:	69b0      	ldr	r0, [r6, #24]
     278:	8bb3      	ldrh	r3, [r6, #28]
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     27a:	6a79      	ldr	r1, [r7, #36]	; 0x24
     27c:	7ff2      	ldrb	r2, [r6, #31]
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
     27e:	0412      	lsls	r2, r2, #16
     280:	7fb4      	ldrb	r4, [r6, #30]
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     282:	4322      	orrs	r2, r4
     284:	430a      	orrs	r2, r1
					break;
				}
			}
			if (!spi_is_ready_to_read(module)) {
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
     286:	627a      	str	r2, [r7, #36]	; 0x24
     288:	2220      	movs	r2, #32
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     28a:	5cb2      	ldrb	r2, [r6, r2]
     28c:	2a00      	cmp	r2, #0
		/* Write the data to send */
		spi_write(module, data_to_send);

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     28e:	d004      	beq.n	29a <spi_init+0x17e>
     290:	2140      	movs	r1, #64	; 0x40
     292:	430b      	orrs	r3, r1
     294:	e001      	b.n	29a <spi_init+0x17e>
     296:	2300      	movs	r3, #0
     298:	2000      	movs	r0, #0
			}
		}
	}
#  endif
	return STATUS_OK;
}
     29a:	68b2      	ldr	r2, [r6, #8]
     29c:	6871      	ldr	r1, [r6, #4]
     29e:	430a      	orrs	r2, r1
     2a0:	68f1      	ldr	r1, [r6, #12]
     2a2:	430a      	orrs	r2, r1
     2a4:	4302      	orrs	r2, r0
     2a6:	7c31      	ldrb	r1, [r6, #16]
     2a8:	430b      	orrs	r3, r1
     2aa:	7c71      	ldrb	r1, [r6, #17]
     2ac:	2900      	cmp	r1, #0
     2ae:	d103      	bne.n	2b8 <spi_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     2b0:	4920      	ldr	r1, [pc, #128]	; (334 <spi_init+0x218>)
     2b2:	7889      	ldrb	r1, [r1, #2]

	/* Set SPI character size */
	ctrlb |= config->character_size;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     2b4:	0789      	lsls	r1, r1, #30
     2b6:	d501      	bpl.n	2bc <spi_init+0x1a0>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     2b8:	2180      	movs	r1, #128	; 0x80
     2ba:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     2bc:	7cb1      	ldrb	r1, [r6, #18]
     2be:	2900      	cmp	r1, #0
     2c0:	d002      	beq.n	2c8 <spi_init+0x1ac>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     2c2:	2180      	movs	r1, #128	; 0x80
     2c4:	0289      	lsls	r1, r1, #10
     2c6:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     2c8:	7cf1      	ldrb	r1, [r6, #19]
     2ca:	2900      	cmp	r1, #0
     2cc:	d002      	beq.n	2d4 <spi_init+0x1b8>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     2ce:	2180      	movs	r1, #128	; 0x80
     2d0:	0089      	lsls	r1, r1, #2
     2d2:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     2d4:	7d31      	ldrb	r1, [r6, #20]
     2d6:	2900      	cmp	r1, #0
     2d8:	d002      	beq.n	2e0 <spi_init+0x1c4>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     2da:	2180      	movs	r1, #128	; 0x80
     2dc:	0189      	lsls	r1, r1, #6
     2de:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     2e0:	6839      	ldr	r1, [r7, #0]
     2e2:	430a      	orrs	r2, r1
     2e4:	603a      	str	r2, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     2e6:	687a      	ldr	r2, [r7, #4]
     2e8:	4313      	orrs	r3, r2
     2ea:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
     2ec:	2300      	movs	r3, #0
     2ee:	e005      	b.n	2fc <spi_init+0x1e0>
     2f0:	1c2b      	adds	r3, r5, #0
     2f2:	330c      	adds	r3, #12
     2f4:	1c29      	adds	r1, r5, #0
     2f6:	3128      	adds	r1, #40	; 0x28
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     2f8:	2200      	movs	r2, #0
     2fa:	e74f      	b.n	19c <spi_init+0x80>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     2fc:	1c18      	adds	r0, r3, #0
     2fe:	b00b      	add	sp, #44	; 0x2c
     300:	bdf0      	pop	{r4, r5, r6, r7, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	000037f9 	.word	0x000037f9
     308:	40000800 	.word	0x40000800
     30c:	000041a9 	.word	0x000041a9
     310:	00004141 	.word	0x00004141
     314:	00003621 	.word	0x00003621
     318:	00000431 	.word	0x00000431
     31c:	00003839 	.word	0x00003839
     320:	20000de4 	.word	0x20000de4
     324:	0000366d 	.word	0x0000366d
     328:	000042a5 	.word	0x000042a5
     32c:	000041cd 	.word	0x000041cd
     330:	00003431 	.word	0x00003431
     334:	41002000 	.word	0x41002000

00000338 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     338:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     33a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     33c:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     33e:	2c01      	cmp	r4, #1
     340:	d174      	bne.n	42c <spi_select_slave+0xf4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     342:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     344:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     346:	2c00      	cmp	r4, #0
     348:	d170      	bne.n	42c <spi_select_slave+0xf4>
#  endif
	{
		if (select) {
     34a:	2a00      	cmp	r2, #0
     34c:	d05d      	beq.n	40a <spi_select_slave+0xd2>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     34e:	784b      	ldrb	r3, [r1, #1]
     350:	2b00      	cmp	r3, #0
     352:	d048      	beq.n	3e6 <spi_select_slave+0xae>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     354:	6803      	ldr	r3, [r0, #0]
     356:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     358:	07db      	lsls	r3, r3, #31
     35a:	d411      	bmi.n	380 <spi_select_slave+0x48>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     35c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     35e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     360:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     362:	2900      	cmp	r1, #0
     364:	d105      	bne.n	372 <spi_select_slave+0x3a>
		return &(ports[port_index]->Group[group_index]);
     366:	095a      	lsrs	r2, r3, #5
     368:	01d2      	lsls	r2, r2, #7
     36a:	2182      	movs	r1, #130	; 0x82
     36c:	05c9      	lsls	r1, r1, #23
     36e:	468c      	mov	ip, r1
     370:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     372:	211f      	movs	r1, #31
     374:	400b      	ands	r3, r1
     376:	391e      	subs	r1, #30
     378:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     37a:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     37c:	2305      	movs	r3, #5
     37e:	e055      	b.n	42c <spi_select_slave+0xf4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     380:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     382:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     384:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     386:	2c00      	cmp	r4, #0
     388:	d105      	bne.n	396 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
     38a:	095a      	lsrs	r2, r3, #5
     38c:	01d2      	lsls	r2, r2, #7
     38e:	2482      	movs	r4, #130	; 0x82
     390:	05e4      	lsls	r4, r4, #23
     392:	46a4      	mov	ip, r4
     394:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     396:	241f      	movs	r4, #31
     398:	4023      	ands	r3, r4
     39a:	3c1e      	subs	r4, #30
     39c:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     39e:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     3a0:	788a      	ldrb	r2, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3a2:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     3a4:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     3a6:	07c9      	lsls	r1, r1, #31
     3a8:	d500      	bpl.n	3ac <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     3aa:	629a      	str	r2, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
     3ac:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     3ae:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     3b0:	2a00      	cmp	r2, #0
     3b2:	d13b      	bne.n	42c <spi_select_slave+0xf4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3b4:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     3b6:	2104      	movs	r1, #4
     3b8:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     3ba:	420b      	tst	r3, r1
     3bc:	d0fc      	beq.n	3b8 <spi_select_slave+0x80>
     3be:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     3c0:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     3c2:	0749      	lsls	r1, r1, #29
     3c4:	d532      	bpl.n	42c <spi_select_slave+0xf4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     3c6:	8b53      	ldrh	r3, [r2, #26]
     3c8:	075b      	lsls	r3, r3, #29
     3ca:	d503      	bpl.n	3d4 <spi_select_slave+0x9c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     3cc:	8b51      	ldrh	r1, [r2, #26]
     3ce:	2304      	movs	r3, #4
     3d0:	430b      	orrs	r3, r1
     3d2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     3d4:	7983      	ldrb	r3, [r0, #6]
     3d6:	2b01      	cmp	r3, #1
     3d8:	d102      	bne.n	3e0 <spi_select_slave+0xa8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     3da:	6a93      	ldr	r3, [r2, #40]	; 0x28
     3dc:	2300      	movs	r3, #0
     3de:	e025      	b.n	42c <spi_select_slave+0xf4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     3e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
     3e2:	2300      	movs	r3, #0
     3e4:	e022      	b.n	42c <spi_select_slave+0xf4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     3e6:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3e8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     3ea:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3ec:	2900      	cmp	r1, #0
     3ee:	d105      	bne.n	3fc <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     3f0:	095a      	lsrs	r2, r3, #5
     3f2:	01d2      	lsls	r2, r2, #7
     3f4:	2182      	movs	r1, #130	; 0x82
     3f6:	05c9      	lsls	r1, r1, #23
     3f8:	468c      	mov	ip, r1
     3fa:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3fc:	211f      	movs	r1, #31
     3fe:	400b      	ands	r3, r1
     400:	391e      	subs	r1, #30
     402:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     404:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     406:	2300      	movs	r3, #0
     408:	e010      	b.n	42c <spi_select_slave+0xf4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     40a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     40c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     40e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     410:	2900      	cmp	r1, #0
     412:	d105      	bne.n	420 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
     414:	095a      	lsrs	r2, r3, #5
     416:	01d2      	lsls	r2, r2, #7
     418:	2182      	movs	r1, #130	; 0x82
     41a:	05c9      	lsls	r1, r1, #23
     41c:	468c      	mov	ip, r1
     41e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     420:	211f      	movs	r1, #31
     422:	400b      	ands	r3, r1
     424:	391e      	subs	r1, #30
     426:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     428:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     42a:	2300      	movs	r3, #0
}
     42c:	1c18      	adds	r0, r3, #0
     42e:	bd10      	pop	{r4, pc}

00000430 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     432:	0080      	lsls	r0, r0, #2
     434:	4b7b      	ldr	r3, [pc, #492]	; (624 <_spi_interrupt_handler+0x1f4>)
     436:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     438:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     43a:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     43c:	5ce3      	ldrb	r3, [r4, r3]
     43e:	2237      	movs	r2, #55	; 0x37
     440:	5ca7      	ldrb	r7, [r4, r2]
     442:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     444:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     446:	7db5      	ldrb	r5, [r6, #22]
     448:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     44a:	07eb      	lsls	r3, r5, #31
     44c:	d543      	bpl.n	4d6 <_spi_interrupt_handler+0xa6>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     44e:	7963      	ldrb	r3, [r4, #5]
     450:	2b01      	cmp	r3, #1
     452:	d116      	bne.n	482 <_spi_interrupt_handler+0x52>
			(module->dir == SPI_DIRECTION_READ)) {
     454:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     456:	2b00      	cmp	r3, #0
     458:	d10f      	bne.n	47a <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
     45a:	4b73      	ldr	r3, [pc, #460]	; (628 <_spi_interrupt_handler+0x1f8>)
     45c:	881b      	ldrh	r3, [r3, #0]
     45e:	62b3      	str	r3, [r6, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     460:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     462:	3b01      	subs	r3, #1
     464:	b29b      	uxth	r3, r3
     466:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
     468:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     46a:	b29b      	uxth	r3, r3
     46c:	2b00      	cmp	r3, #0
     46e:	d101      	bne.n	474 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     470:	3301      	adds	r3, #1
     472:	7533      	strb	r3, [r6, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     474:	7963      	ldrb	r3, [r4, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
     476:	2b01      	cmp	r3, #1
     478:	d103      	bne.n	482 <_spi_interrupt_handler+0x52>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
     47a:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     47c:	2b00      	cmp	r3, #0
     47e:	d105      	bne.n	48c <_spi_interrupt_handler+0x5c>
     480:	e029      	b.n	4d6 <_spi_interrupt_handler+0xa6>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     482:	2b00      	cmp	r3, #0
     484:	d127      	bne.n	4d6 <_spi_interrupt_handler+0xa6>
			(module->dir != SPI_DIRECTION_READ))
     486:	7a63      	ldrb	r3, [r4, #9]
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     488:	2b00      	cmp	r3, #0
     48a:	d024      	beq.n	4d6 <_spi_interrupt_handler+0xa6>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     48c:	6820      	ldr	r0, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     48e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     490:	780b      	ldrb	r3, [r1, #0]
     492:	b2da      	uxtb	r2, r3
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     494:	1c4b      	adds	r3, r1, #1
     496:	62e3      	str	r3, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     498:	79a3      	ldrb	r3, [r4, #6]
     49a:	2b01      	cmp	r3, #1
     49c:	d001      	beq.n	4a2 <_spi_interrupt_handler+0x72>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     49e:	b293      	uxth	r3, r2
     4a0:	e004      	b.n	4ac <_spi_interrupt_handler+0x7c>
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     4a2:	784b      	ldrb	r3, [r1, #1]
     4a4:	021b      	lsls	r3, r3, #8
     4a6:	4313      	orrs	r3, r2
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
     4a8:	3102      	adds	r1, #2
     4aa:	62e1      	str	r1, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     4ac:	05db      	lsls	r3, r3, #23
     4ae:	0ddb      	lsrs	r3, r3, #23
     4b0:	6283      	str	r3, [r0, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     4b2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     4b4:	3b01      	subs	r3, #1
     4b6:	b29b      	uxth	r3, r3
     4b8:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     4ba:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     4bc:	b29b      	uxth	r3, r3
     4be:	2b00      	cmp	r3, #0
     4c0:	d109      	bne.n	4d6 <_spi_interrupt_handler+0xa6>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     4c2:	3301      	adds	r3, #1
     4c4:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     4c6:	7a63      	ldrb	r3, [r4, #9]
     4c8:	2b01      	cmp	r3, #1
     4ca:	d104      	bne.n	4d6 <_spi_interrupt_handler+0xa6>
     4cc:	79e3      	ldrb	r3, [r4, #7]
     4ce:	2b00      	cmp	r3, #0
     4d0:	d101      	bne.n	4d6 <_spi_interrupt_handler+0xa6>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     4d2:	3302      	adds	r3, #2
     4d4:	75b3      	strb	r3, [r6, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     4d6:	076b      	lsls	r3, r5, #29
     4d8:	d561      	bpl.n	59e <_spi_interrupt_handler+0x16e>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     4da:	8b73      	ldrh	r3, [r6, #26]
     4dc:	075b      	lsls	r3, r3, #29
     4de:	d514      	bpl.n	50a <_spi_interrupt_handler+0xda>
			if (module->dir != SPI_DIRECTION_WRITE) {
     4e0:	7a63      	ldrb	r3, [r4, #9]
     4e2:	2b01      	cmp	r3, #1
     4e4:	d00b      	beq.n	4fe <_spi_interrupt_handler+0xce>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     4e6:	221e      	movs	r2, #30
     4e8:	2338      	movs	r3, #56	; 0x38
     4ea:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     4ec:	3b35      	subs	r3, #53	; 0x35
     4ee:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     4f0:	3302      	adds	r3, #2
     4f2:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     4f4:	073b      	lsls	r3, r7, #28
     4f6:	d502      	bpl.n	4fe <_spi_interrupt_handler+0xce>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     4f8:	1c20      	adds	r0, r4, #0
     4fa:	69a3      	ldr	r3, [r4, #24]
     4fc:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     4fe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     500:	8b72      	ldrh	r2, [r6, #26]
     502:	2304      	movs	r3, #4
     504:	4313      	orrs	r3, r2
     506:	8373      	strh	r3, [r6, #26]
     508:	e049      	b.n	59e <_spi_interrupt_handler+0x16e>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
     50a:	7a63      	ldrb	r3, [r4, #9]
     50c:	2b01      	cmp	r3, #1
     50e:	d116      	bne.n	53e <_spi_interrupt_handler+0x10e>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     510:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
     512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     514:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     516:	3b01      	subs	r3, #1
     518:	b29b      	uxth	r3, r3
     51a:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
     51c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     51e:	b29b      	uxth	r3, r3
     520:	2b00      	cmp	r3, #0
     522:	d13c      	bne.n	59e <_spi_interrupt_handler+0x16e>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     524:	3304      	adds	r3, #4
     526:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
     528:	2200      	movs	r2, #0
     52a:	3334      	adds	r3, #52	; 0x34
     52c:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     52e:	3b35      	subs	r3, #53	; 0x35
     530:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
     532:	07fb      	lsls	r3, r7, #31
     534:	d533      	bpl.n	59e <_spi_interrupt_handler+0x16e>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     536:	1c20      	adds	r0, r4, #0
     538:	68e3      	ldr	r3, [r4, #12]
     53a:	4798      	blx	r3
     53c:	e02f      	b.n	59e <_spi_interrupt_handler+0x16e>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     53e:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     542:	05db      	lsls	r3, r3, #23
     544:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
     546:	b2da      	uxtb	r2, r3
     548:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     54a:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
     54c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     54e:	1c51      	adds	r1, r2, #1
     550:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     552:	79a1      	ldrb	r1, [r4, #6]
     554:	2901      	cmp	r1, #1
     556:	d104      	bne.n	562 <_spi_interrupt_handler+0x132>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
     558:	0a1b      	lsrs	r3, r3, #8
     55a:	7053      	strb	r3, [r2, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
     55c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     55e:	3301      	adds	r3, #1
     560:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
     562:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     564:	3b01      	subs	r3, #1
     566:	b29b      	uxth	r3, r3
     568:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
     56a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     56c:	b29b      	uxth	r3, r3
     56e:	2b00      	cmp	r3, #0
     570:	d115      	bne.n	59e <_spi_interrupt_handler+0x16e>
					module->status = STATUS_OK;
     572:	2200      	movs	r2, #0
     574:	3338      	adds	r3, #56	; 0x38
     576:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     578:	3b34      	subs	r3, #52	; 0x34
     57a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     57c:	7a63      	ldrb	r3, [r4, #9]
     57e:	2b02      	cmp	r3, #2
     580:	d105      	bne.n	58e <_spi_interrupt_handler+0x15e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     582:	077b      	lsls	r3, r7, #29
     584:	d50b      	bpl.n	59e <_spi_interrupt_handler+0x16e>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     586:	1c20      	adds	r0, r4, #0
     588:	6963      	ldr	r3, [r4, #20]
     58a:	4798      	blx	r3
     58c:	e007      	b.n	59e <_spi_interrupt_handler+0x16e>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
     58e:	7a63      	ldrb	r3, [r4, #9]
     590:	2b00      	cmp	r3, #0
     592:	d104      	bne.n	59e <_spi_interrupt_handler+0x16e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     594:	07bb      	lsls	r3, r7, #30
     596:	d502      	bpl.n	59e <_spi_interrupt_handler+0x16e>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     598:	1c20      	adds	r0, r4, #0
     59a:	6923      	ldr	r3, [r4, #16]
     59c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     59e:	07ab      	lsls	r3, r5, #30
     5a0:	d528      	bpl.n	5f4 <_spi_interrupt_handler+0x1c4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     5a2:	7963      	ldrb	r3, [r4, #5]
     5a4:	2b00      	cmp	r3, #0
     5a6:	d110      	bne.n	5ca <_spi_interrupt_handler+0x19a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     5a8:	3307      	adds	r3, #7
     5aa:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     5ac:	3b05      	subs	r3, #5
     5ae:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     5b0:	3301      	adds	r3, #1
     5b2:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
     5b4:	2300      	movs	r3, #0
     5b6:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     5b8:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     5ba:	3338      	adds	r3, #56	; 0x38
     5bc:	2200      	movs	r2, #0
     5be:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
     5c0:	06fb      	lsls	r3, r7, #27
     5c2:	d502      	bpl.n	5ca <_spi_interrupt_handler+0x19a>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
     5c4:	1c20      	adds	r0, r4, #0
     5c6:	69e3      	ldr	r3, [r4, #28]
     5c8:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     5ca:	7963      	ldrb	r3, [r4, #5]
     5cc:	2b01      	cmp	r3, #1
     5ce:	d111      	bne.n	5f4 <_spi_interrupt_handler+0x1c4>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     5d0:	7a63      	ldrb	r3, [r4, #9]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     5d2:	2b01      	cmp	r3, #1
     5d4:	d11b      	bne.n	60e <_spi_interrupt_handler+0x1de>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     5d6:	79e3      	ldrb	r3, [r4, #7]
     5d8:	2b00      	cmp	r3, #0
     5da:	d118      	bne.n	60e <_spi_interrupt_handler+0x1de>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     5dc:	3302      	adds	r3, #2
     5de:	7533      	strb	r3, [r6, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
     5e0:	3301      	adds	r3, #1
     5e2:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
     5e4:	2200      	movs	r2, #0
     5e6:	3335      	adds	r3, #53	; 0x35
     5e8:	54e2      	strb	r2, [r4, r3]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     5ea:	07fb      	lsls	r3, r7, #31
     5ec:	d502      	bpl.n	5f4 <_spi_interrupt_handler+0x1c4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
     5ee:	1c20      	adds	r0, r4, #0
     5f0:	68e3      	ldr	r3, [r4, #12]
     5f2:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     5f4:	072b      	lsls	r3, r5, #28
     5f6:	d50a      	bpl.n	60e <_spi_interrupt_handler+0x1de>
			if (module->mode == SPI_MODE_SLAVE) {
     5f8:	7963      	ldrb	r3, [r4, #5]
     5fa:	2b00      	cmp	r3, #0
     5fc:	d107      	bne.n	60e <_spi_interrupt_handler+0x1de>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     5fe:	3308      	adds	r3, #8
     600:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     602:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     604:	06bb      	lsls	r3, r7, #26
     606:	d502      	bpl.n	60e <_spi_interrupt_handler+0x1de>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     608:	1c20      	adds	r0, r4, #0
     60a:	6a23      	ldr	r3, [r4, #32]
     60c:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     60e:	09ed      	lsrs	r5, r5, #7
     610:	d007      	beq.n	622 <_spi_interrupt_handler+0x1f2>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     612:	2380      	movs	r3, #128	; 0x80
     614:	7533      	strb	r3, [r6, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     616:	7633      	strb	r3, [r6, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     618:	067b      	lsls	r3, r7, #25
     61a:	d502      	bpl.n	622 <_spi_interrupt_handler+0x1f2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     61c:	6a63      	ldr	r3, [r4, #36]	; 0x24
     61e:	1c20      	adds	r0, r4, #0
     620:	4798      	blx	r3
		}
	}
#  endif
}
     622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     624:	20000de4 	.word	0x20000de4
     628:	20000c34 	.word	0x20000c34

0000062c <radioTimerHandler>:
     62c:	4770      	bx	lr
     62e:	46c0      	nop			; (mov r8, r8)

00000630 <radioDataInd>:
     630:	b508      	push	{r3, lr}
     632:	6883      	ldr	r3, [r0, #8]
     634:	7819      	ldrb	r1, [r3, #0]
     636:	785a      	ldrb	r2, [r3, #1]
     638:	4804      	ldr	r0, [pc, #16]	; (64c <radioDataInd+0x1c>)
     63a:	4b05      	ldr	r3, [pc, #20]	; (650 <radioDataInd+0x20>)
     63c:	4798      	blx	r3
     63e:	2280      	movs	r2, #128	; 0x80
     640:	0212      	lsls	r2, r2, #8
     642:	2382      	movs	r3, #130	; 0x82
     644:	05db      	lsls	r3, r3, #23
     646:	61da      	str	r2, [r3, #28]
     648:	2001      	movs	r0, #1
     64a:	bd08      	pop	{r3, pc}
     64c:	00005d2c 	.word	0x00005d2c
     650:	00004ca9 	.word	0x00004ca9

00000654 <radioInit>:
     654:	b508      	push	{r3, lr}
     656:	2001      	movs	r0, #1
     658:	4b0b      	ldr	r3, [pc, #44]	; (688 <radioInit+0x34>)
     65a:	4798      	blx	r3
     65c:	480b      	ldr	r0, [pc, #44]	; (68c <radioInit+0x38>)
     65e:	4b0c      	ldr	r3, [pc, #48]	; (690 <radioInit+0x3c>)
     660:	4798      	blx	r3
     662:	2001      	movs	r0, #1
     664:	4b0b      	ldr	r3, [pc, #44]	; (694 <radioInit+0x40>)
     666:	4798      	blx	r3
     668:	2001      	movs	r0, #1
     66a:	4b0b      	ldr	r3, [pc, #44]	; (698 <radioInit+0x44>)
     66c:	4798      	blx	r3
     66e:	2001      	movs	r0, #1
     670:	490a      	ldr	r1, [pc, #40]	; (69c <radioInit+0x48>)
     672:	4b0b      	ldr	r3, [pc, #44]	; (6a0 <radioInit+0x4c>)
     674:	4798      	blx	r3
     676:	4b0b      	ldr	r3, [pc, #44]	; (6a4 <radioInit+0x50>)
     678:	2214      	movs	r2, #20
     67a:	609a      	str	r2, [r3, #8]
     67c:	2200      	movs	r2, #0
     67e:	731a      	strb	r2, [r3, #12]
     680:	4a09      	ldr	r2, [pc, #36]	; (6a8 <radioInit+0x54>)
     682:	611a      	str	r2, [r3, #16]
     684:	bd08      	pop	{r3, pc}
     686:	46c0      	nop			; (mov r8, r8)
     688:	00000701 	.word	0x00000701
     68c:	00001239 	.word	0x00001239
     690:	00000715 	.word	0x00000715
     694:	00001ba1 	.word	0x00001ba1
     698:	00001b8d 	.word	0x00001b8d
     69c:	00000631 	.word	0x00000631
     6a0:	00000729 	.word	0x00000729
     6a4:	2000008c 	.word	0x2000008c
     6a8:	0000062d 	.word	0x0000062d

000006ac <NWK_Init>:
     6ac:	b508      	push	{r3, lr}
     6ae:	4a0d      	ldr	r2, [pc, #52]	; (6e4 <NWK_Init+0x38>)
     6b0:	2300      	movs	r3, #0
     6b2:	7113      	strb	r3, [r2, #4]
     6b4:	7153      	strb	r3, [r2, #5]
     6b6:	8013      	strh	r3, [r2, #0]
     6b8:	2148      	movs	r1, #72	; 0x48
     6ba:	5253      	strh	r3, [r2, r1]
     6bc:	1c13      	adds	r3, r2, #0
     6be:	3240      	adds	r2, #64	; 0x40
     6c0:	2100      	movs	r1, #0
     6c2:	6099      	str	r1, [r3, #8]
     6c4:	3304      	adds	r3, #4
     6c6:	4293      	cmp	r3, r2
     6c8:	d1fb      	bne.n	6c2 <NWK_Init+0x16>
     6ca:	4b07      	ldr	r3, [pc, #28]	; (6e8 <NWK_Init+0x3c>)
     6cc:	4798      	blx	r3
     6ce:	4b07      	ldr	r3, [pc, #28]	; (6ec <NWK_Init+0x40>)
     6d0:	4798      	blx	r3
     6d2:	4b07      	ldr	r3, [pc, #28]	; (6f0 <NWK_Init+0x44>)
     6d4:	4798      	blx	r3
     6d6:	4b07      	ldr	r3, [pc, #28]	; (6f4 <NWK_Init+0x48>)
     6d8:	4798      	blx	r3
     6da:	4b07      	ldr	r3, [pc, #28]	; (6f8 <NWK_Init+0x4c>)
     6dc:	4798      	blx	r3
     6de:	4b07      	ldr	r3, [pc, #28]	; (6fc <NWK_Init+0x50>)
     6e0:	4798      	blx	r3
     6e2:	bd08      	pop	{r3, pc}
     6e4:	20000c38 	.word	0x20000c38
     6e8:	00001739 	.word	0x00001739
     6ec:	0000123d 	.word	0x0000123d
     6f0:	000008d5 	.word	0x000008d5
     6f4:	00000795 	.word	0x00000795
     6f8:	000009d9 	.word	0x000009d9
     6fc:	00000f5d 	.word	0x00000f5d

00000700 <NWK_SetAddr>:
     700:	b508      	push	{r3, lr}
     702:	4b02      	ldr	r3, [pc, #8]	; (70c <NWK_SetAddr+0xc>)
     704:	8018      	strh	r0, [r3, #0]
     706:	4b02      	ldr	r3, [pc, #8]	; (710 <NWK_SetAddr+0x10>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	20000c38 	.word	0x20000c38
     710:	00001bd5 	.word	0x00001bd5

00000714 <NWK_SetPanId>:
     714:	b508      	push	{r3, lr}
     716:	4b02      	ldr	r3, [pc, #8]	; (720 <NWK_SetPanId+0xc>)
     718:	8058      	strh	r0, [r3, #2]
     71a:	4b02      	ldr	r3, [pc, #8]	; (724 <NWK_SetPanId+0x10>)
     71c:	4798      	blx	r3
     71e:	bd08      	pop	{r3, pc}
     720:	20000c38 	.word	0x20000c38
     724:	00001bb5 	.word	0x00001bb5

00000728 <NWK_OpenEndpoint>:
     728:	3002      	adds	r0, #2
     72a:	0080      	lsls	r0, r0, #2
     72c:	4b01      	ldr	r3, [pc, #4]	; (734 <NWK_OpenEndpoint+0xc>)
     72e:	50c1      	str	r1, [r0, r3]
     730:	4770      	bx	lr
     732:	46c0      	nop			; (mov r8, r8)
     734:	20000c38 	.word	0x20000c38

00000738 <NWK_TaskHandler>:
     738:	b508      	push	{r3, lr}
     73a:	4b03      	ldr	r3, [pc, #12]	; (748 <NWK_TaskHandler+0x10>)
     73c:	4798      	blx	r3
     73e:	4b03      	ldr	r3, [pc, #12]	; (74c <NWK_TaskHandler+0x14>)
     740:	4798      	blx	r3
     742:	4b03      	ldr	r3, [pc, #12]	; (750 <NWK_TaskHandler+0x18>)
     744:	4798      	blx	r3
     746:	bd08      	pop	{r3, pc}
     748:	000012c9 	.word	0x000012c9
     74c:	00001929 	.word	0x00001929
     750:	000007a1 	.word	0x000007a1

00000754 <nwkDataReqTxConf>:
     754:	b508      	push	{r3, lr}
     756:	4b0d      	ldr	r3, [pc, #52]	; (78c <nwkDataReqTxConf+0x38>)
     758:	681b      	ldr	r3, [r3, #0]
     75a:	2b00      	cmp	r3, #0
     75c:	d012      	beq.n	784 <nwkDataReqTxConf+0x30>
     75e:	685a      	ldr	r2, [r3, #4]
     760:	4282      	cmp	r2, r0
     762:	d10c      	bne.n	77e <nwkDataReqTxConf+0x2a>
     764:	e002      	b.n	76c <nwkDataReqTxConf+0x18>
     766:	685a      	ldr	r2, [r3, #4]
     768:	4282      	cmp	r2, r0
     76a:	d108      	bne.n	77e <nwkDataReqTxConf+0x2a>
     76c:	2285      	movs	r2, #133	; 0x85
     76e:	5c82      	ldrb	r2, [r0, r2]
     770:	771a      	strb	r2, [r3, #28]
     772:	2288      	movs	r2, #136	; 0x88
     774:	5c82      	ldrb	r2, [r0, r2]
     776:	775a      	strb	r2, [r3, #29]
     778:	2202      	movs	r2, #2
     77a:	721a      	strb	r2, [r3, #8]
     77c:	e002      	b.n	784 <nwkDataReqTxConf+0x30>
     77e:	681b      	ldr	r3, [r3, #0]
     780:	2b00      	cmp	r3, #0
     782:	d1f0      	bne.n	766 <nwkDataReqTxConf+0x12>
     784:	4b02      	ldr	r3, [pc, #8]	; (790 <nwkDataReqTxConf+0x3c>)
     786:	4798      	blx	r3
     788:	bd08      	pop	{r3, pc}
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	200000a0 	.word	0x200000a0
     790:	00000961 	.word	0x00000961

00000794 <nwkDataReqInit>:
     794:	2200      	movs	r2, #0
     796:	4b01      	ldr	r3, [pc, #4]	; (79c <nwkDataReqInit+0x8>)
     798:	601a      	str	r2, [r3, #0]
     79a:	4770      	bx	lr
     79c:	200000a0 	.word	0x200000a0

000007a0 <nwkDataReqTaskHandler>:
     7a0:	b570      	push	{r4, r5, r6, lr}
     7a2:	4b46      	ldr	r3, [pc, #280]	; (8bc <nwkDataReqTaskHandler+0x11c>)
     7a4:	681a      	ldr	r2, [r3, #0]
     7a6:	2a00      	cmp	r2, #0
     7a8:	d100      	bne.n	7ac <nwkDataReqTaskHandler+0xc>
     7aa:	e085      	b.n	8b8 <nwkDataReqTaskHandler+0x118>
     7ac:	1c14      	adds	r4, r2, #0
     7ae:	7a23      	ldrb	r3, [r4, #8]
     7b0:	2b00      	cmp	r3, #0
     7b2:	d002      	beq.n	7ba <nwkDataReqTaskHandler+0x1a>
     7b4:	2b02      	cmp	r3, #2
     7b6:	d066      	beq.n	886 <nwkDataReqTaskHandler+0xe6>
     7b8:	e07a      	b.n	8b0 <nwkDataReqTaskHandler+0x110>
     7ba:	4b41      	ldr	r3, [pc, #260]	; (8c0 <nwkDataReqTaskHandler+0x120>)
     7bc:	4798      	blx	r3
     7be:	1e05      	subs	r5, r0, #0
     7c0:	d103      	bne.n	7ca <nwkDataReqTaskHandler+0x2a>
     7c2:	2302      	movs	r3, #2
     7c4:	7223      	strb	r3, [r4, #8]
     7c6:	7723      	strb	r3, [r4, #28]
     7c8:	e076      	b.n	8b8 <nwkDataReqTaskHandler+0x118>
     7ca:	6060      	str	r0, [r4, #4]
     7cc:	2601      	movs	r6, #1
     7ce:	7226      	strb	r6, [r4, #8]
     7d0:	4b3c      	ldr	r3, [pc, #240]	; (8c4 <nwkDataReqTaskHandler+0x124>)
     7d2:	2289      	movs	r2, #137	; 0x89
     7d4:	5483      	strb	r3, [r0, r2]
     7d6:	0a19      	lsrs	r1, r3, #8
     7d8:	1c02      	adds	r2, r0, #0
     7da:	3289      	adds	r2, #137	; 0x89
     7dc:	7051      	strb	r1, [r2, #1]
     7de:	0c19      	lsrs	r1, r3, #16
     7e0:	7091      	strb	r1, [r2, #2]
     7e2:	0e1b      	lsrs	r3, r3, #24
     7e4:	70d3      	strb	r3, [r2, #3]
     7e6:	7ba1      	ldrb	r1, [r4, #14]
     7e8:	0889      	lsrs	r1, r1, #2
     7ea:	2201      	movs	r2, #1
     7ec:	4011      	ands	r1, r2
     7ee:	2388      	movs	r3, #136	; 0x88
     7f0:	54c1      	strb	r1, [r0, r3]
     7f2:	7ba1      	ldrb	r1, [r4, #14]
     7f4:	4011      	ands	r1, r2
     7f6:	1c08      	adds	r0, r1, #0
     7f8:	7ae9      	ldrb	r1, [r5, #11]
     7fa:	43b1      	bics	r1, r6
     7fc:	4301      	orrs	r1, r0
     7fe:	72e9      	strb	r1, [r5, #11]
     800:	7ba3      	ldrb	r3, [r4, #14]
     802:	08db      	lsrs	r3, r3, #3
     804:	4013      	ands	r3, r2
     806:	009a      	lsls	r2, r3, #2
     808:	b2cb      	uxtb	r3, r1
     80a:	2104      	movs	r1, #4
     80c:	438b      	bics	r3, r1
     80e:	4313      	orrs	r3, r2
     810:	72eb      	strb	r3, [r5, #11]
     812:	4a2d      	ldr	r2, [pc, #180]	; (8c8 <nwkDataReqTaskHandler+0x128>)
     814:	7913      	ldrb	r3, [r2, #4]
     816:	3301      	adds	r3, #1
     818:	b2db      	uxtb	r3, r3
     81a:	7113      	strb	r3, [r2, #4]
     81c:	732b      	strb	r3, [r5, #12]
     81e:	7813      	ldrb	r3, [r2, #0]
     820:	736b      	strb	r3, [r5, #13]
     822:	7853      	ldrb	r3, [r2, #1]
     824:	73ab      	strb	r3, [r5, #14]
     826:	8963      	ldrh	r3, [r4, #10]
     828:	7aa2      	ldrb	r2, [r4, #10]
     82a:	73ea      	strb	r2, [r5, #15]
     82c:	0a1b      	lsrs	r3, r3, #8
     82e:	742b      	strb	r3, [r5, #16]
     830:	7b62      	ldrb	r2, [r4, #13]
     832:	200f      	movs	r0, #15
     834:	4002      	ands	r2, r0
     836:	1c11      	adds	r1, r2, #0
     838:	7c6a      	ldrb	r2, [r5, #17]
     83a:	230f      	movs	r3, #15
     83c:	439a      	bics	r2, r3
     83e:	430a      	orrs	r2, r1
     840:	746a      	strb	r2, [r5, #17]
     842:	7b22      	ldrb	r2, [r4, #12]
     844:	0112      	lsls	r2, r2, #4
     846:	7c6b      	ldrb	r3, [r5, #17]
     848:	4003      	ands	r3, r0
     84a:	4313      	orrs	r3, r2
     84c:	746b      	strb	r3, [r5, #17]
     84e:	2381      	movs	r3, #129	; 0x81
     850:	5ce9      	ldrb	r1, [r5, r3]
     852:	3301      	adds	r3, #1
     854:	5ceb      	ldrb	r3, [r5, r3]
     856:	021b      	lsls	r3, r3, #8
     858:	430b      	orrs	r3, r1
     85a:	1c1a      	adds	r2, r3, #0
     85c:	2383      	movs	r3, #131	; 0x83
     85e:	5ce8      	ldrb	r0, [r5, r3]
     860:	0400      	lsls	r0, r0, #16
     862:	1c03      	adds	r3, r0, #0
     864:	4313      	orrs	r3, r2
     866:	2284      	movs	r2, #132	; 0x84
     868:	5ca8      	ldrb	r0, [r5, r2]
     86a:	0600      	lsls	r0, r0, #24
     86c:	4318      	orrs	r0, r3
     86e:	7d22      	ldrb	r2, [r4, #20]
     870:	6921      	ldr	r1, [r4, #16]
     872:	4b16      	ldr	r3, [pc, #88]	; (8cc <nwkDataReqTaskHandler+0x12c>)
     874:	4798      	blx	r3
     876:	7d22      	ldrb	r2, [r4, #20]
     878:	786b      	ldrb	r3, [r5, #1]
     87a:	18d3      	adds	r3, r2, r3
     87c:	706b      	strb	r3, [r5, #1]
     87e:	1c28      	adds	r0, r5, #0
     880:	4b13      	ldr	r3, [pc, #76]	; (8d0 <nwkDataReqTaskHandler+0x130>)
     882:	4798      	blx	r3
     884:	e018      	b.n	8b8 <nwkDataReqTaskHandler+0x118>
     886:	4294      	cmp	r4, r2
     888:	d104      	bne.n	894 <nwkDataReqTaskHandler+0xf4>
     88a:	4b0c      	ldr	r3, [pc, #48]	; (8bc <nwkDataReqTaskHandler+0x11c>)
     88c:	6822      	ldr	r2, [r4, #0]
     88e:	601a      	str	r2, [r3, #0]
     890:	e005      	b.n	89e <nwkDataReqTaskHandler+0xfe>
     892:	1c1a      	adds	r2, r3, #0
     894:	6813      	ldr	r3, [r2, #0]
     896:	429c      	cmp	r4, r3
     898:	d1fb      	bne.n	892 <nwkDataReqTaskHandler+0xf2>
     89a:	6823      	ldr	r3, [r4, #0]
     89c:	6013      	str	r3, [r2, #0]
     89e:	490a      	ldr	r1, [pc, #40]	; (8c8 <nwkDataReqTaskHandler+0x128>)
     8a0:	2248      	movs	r2, #72	; 0x48
     8a2:	5a8b      	ldrh	r3, [r1, r2]
     8a4:	3b01      	subs	r3, #1
     8a6:	528b      	strh	r3, [r1, r2]
     8a8:	69a3      	ldr	r3, [r4, #24]
     8aa:	1c20      	adds	r0, r4, #0
     8ac:	4798      	blx	r3
     8ae:	e003      	b.n	8b8 <nwkDataReqTaskHandler+0x118>
     8b0:	6824      	ldr	r4, [r4, #0]
     8b2:	2c00      	cmp	r4, #0
     8b4:	d000      	beq.n	8b8 <nwkDataReqTaskHandler+0x118>
     8b6:	e77a      	b.n	7ae <nwkDataReqTaskHandler+0xe>
     8b8:	bd70      	pop	{r4, r5, r6, pc}
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	200000a0 	.word	0x200000a0
     8c0:	000008f1 	.word	0x000008f1
     8c4:	00000755 	.word	0x00000755
     8c8:	20000c38 	.word	0x20000c38
     8cc:	00004c85 	.word	0x00004c85
     8d0:	0000176d 	.word	0x0000176d

000008d4 <nwkFrameInit>:
     8d4:	4b04      	ldr	r3, [pc, #16]	; (8e8 <nwkFrameInit+0x14>)
     8d6:	4a05      	ldr	r2, [pc, #20]	; (8ec <nwkFrameInit+0x18>)
     8d8:	1899      	adds	r1, r3, r2
     8da:	2200      	movs	r2, #0
     8dc:	701a      	strb	r2, [r3, #0]
     8de:	338d      	adds	r3, #141	; 0x8d
     8e0:	428b      	cmp	r3, r1
     8e2:	d1fb      	bne.n	8dc <nwkFrameInit+0x8>
     8e4:	4770      	bx	lr
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	200000a4 	.word	0x200000a4
     8ec:	00000582 	.word	0x00000582

000008f0 <nwkFrameAlloc>:
     8f0:	b570      	push	{r4, r5, r6, lr}
     8f2:	4b18      	ldr	r3, [pc, #96]	; (954 <nwkFrameAlloc+0x64>)
     8f4:	781b      	ldrb	r3, [r3, #0]
     8f6:	2b00      	cmp	r3, #0
     8f8:	d007      	beq.n	90a <nwkFrameAlloc+0x1a>
     8fa:	4a16      	ldr	r2, [pc, #88]	; (954 <nwkFrameAlloc+0x64>)
     8fc:	328d      	adds	r2, #141	; 0x8d
     8fe:	2301      	movs	r3, #1
     900:	1c18      	adds	r0, r3, #0
     902:	7811      	ldrb	r1, [r2, #0]
     904:	2900      	cmp	r1, #0
     906:	d11d      	bne.n	944 <nwkFrameAlloc+0x54>
     908:	e000      	b.n	90c <nwkFrameAlloc+0x1c>
     90a:	2000      	movs	r0, #0
     90c:	4e11      	ldr	r6, [pc, #68]	; (954 <nwkFrameAlloc+0x64>)
     90e:	248d      	movs	r4, #141	; 0x8d
     910:	4344      	muls	r4, r0
     912:	1935      	adds	r5, r6, r4
     914:	1c28      	adds	r0, r5, #0
     916:	2100      	movs	r1, #0
     918:	228d      	movs	r2, #141	; 0x8d
     91a:	4b0f      	ldr	r3, [pc, #60]	; (958 <nwkFrameAlloc+0x68>)
     91c:	4798      	blx	r3
     91e:	2310      	movs	r3, #16
     920:	706b      	strb	r3, [r5, #1]
     922:	1c28      	adds	r0, r5, #0
     924:	3012      	adds	r0, #18
     926:	1c2b      	adds	r3, r5, #0
     928:	3381      	adds	r3, #129	; 0x81
     92a:	7018      	strb	r0, [r3, #0]
     92c:	0a02      	lsrs	r2, r0, #8
     92e:	705a      	strb	r2, [r3, #1]
     930:	0c02      	lsrs	r2, r0, #16
     932:	709a      	strb	r2, [r3, #2]
     934:	0e00      	lsrs	r0, r0, #24
     936:	70d8      	strb	r0, [r3, #3]
     938:	4908      	ldr	r1, [pc, #32]	; (95c <nwkFrameAlloc+0x6c>)
     93a:	2248      	movs	r2, #72	; 0x48
     93c:	5a8b      	ldrh	r3, [r1, r2]
     93e:	3301      	adds	r3, #1
     940:	528b      	strh	r3, [r1, r2]
     942:	e004      	b.n	94e <nwkFrameAlloc+0x5e>
     944:	3301      	adds	r3, #1
     946:	328d      	adds	r2, #141	; 0x8d
     948:	2b0a      	cmp	r3, #10
     94a:	d1d9      	bne.n	900 <nwkFrameAlloc+0x10>
     94c:	2500      	movs	r5, #0
     94e:	1c28      	adds	r0, r5, #0
     950:	bd70      	pop	{r4, r5, r6, pc}
     952:	46c0      	nop			; (mov r8, r8)
     954:	200000a4 	.word	0x200000a4
     958:	00004c97 	.word	0x00004c97
     95c:	20000c38 	.word	0x20000c38

00000960 <nwkFrameFree>:
     960:	2300      	movs	r3, #0
     962:	7003      	strb	r3, [r0, #0]
     964:	4902      	ldr	r1, [pc, #8]	; (970 <nwkFrameFree+0x10>)
     966:	2248      	movs	r2, #72	; 0x48
     968:	5a8b      	ldrh	r3, [r1, r2]
     96a:	3b01      	subs	r3, #1
     96c:	528b      	strh	r3, [r1, r2]
     96e:	4770      	bx	lr
     970:	20000c38 	.word	0x20000c38

00000974 <nwkFrameNext>:
     974:	2800      	cmp	r0, #0
     976:	d007      	beq.n	988 <nwkFrameNext+0x14>
     978:	308d      	adds	r0, #141	; 0x8d
     97a:	4b0d      	ldr	r3, [pc, #52]	; (9b0 <nwkFrameNext+0x3c>)
     97c:	4a0d      	ldr	r2, [pc, #52]	; (9b4 <nwkFrameNext+0x40>)
     97e:	4694      	mov	ip, r2
     980:	4463      	add	r3, ip
     982:	4298      	cmp	r0, r3
     984:	d301      	bcc.n	98a <nwkFrameNext+0x16>
     986:	e010      	b.n	9aa <nwkFrameNext+0x36>
     988:	4809      	ldr	r0, [pc, #36]	; (9b0 <nwkFrameNext+0x3c>)
     98a:	7803      	ldrb	r3, [r0, #0]
     98c:	2b00      	cmp	r3, #0
     98e:	d10d      	bne.n	9ac <nwkFrameNext+0x38>
     990:	4a07      	ldr	r2, [pc, #28]	; (9b0 <nwkFrameNext+0x3c>)
     992:	4b08      	ldr	r3, [pc, #32]	; (9b4 <nwkFrameNext+0x40>)
     994:	469c      	mov	ip, r3
     996:	4462      	add	r2, ip
     998:	e002      	b.n	9a0 <nwkFrameNext+0x2c>
     99a:	7803      	ldrb	r3, [r0, #0]
     99c:	2b00      	cmp	r3, #0
     99e:	d105      	bne.n	9ac <nwkFrameNext+0x38>
     9a0:	308d      	adds	r0, #141	; 0x8d
     9a2:	4290      	cmp	r0, r2
     9a4:	d3f9      	bcc.n	99a <nwkFrameNext+0x26>
     9a6:	2000      	movs	r0, #0
     9a8:	e000      	b.n	9ac <nwkFrameNext+0x38>
     9aa:	2000      	movs	r0, #0
     9ac:	4770      	bx	lr
     9ae:	46c0      	nop			; (mov r8, r8)
     9b0:	200000a4 	.word	0x200000a4
     9b4:	00000582 	.word	0x00000582

000009b8 <nwkFrameCommandInit>:
     9b8:	2200      	movs	r2, #0
     9ba:	2385      	movs	r3, #133	; 0x85
     9bc:	54c2      	strb	r2, [r0, r3]
     9be:	4a05      	ldr	r2, [pc, #20]	; (9d4 <nwkFrameCommandInit+0x1c>)
     9c0:	7913      	ldrb	r3, [r2, #4]
     9c2:	3301      	adds	r3, #1
     9c4:	b2db      	uxtb	r3, r3
     9c6:	7113      	strb	r3, [r2, #4]
     9c8:	7303      	strb	r3, [r0, #12]
     9ca:	7813      	ldrb	r3, [r2, #0]
     9cc:	7343      	strb	r3, [r0, #13]
     9ce:	7853      	ldrb	r3, [r2, #1]
     9d0:	7383      	strb	r3, [r0, #14]
     9d2:	4770      	bx	lr
     9d4:	20000c38 	.word	0x20000c38

000009d8 <nwkRouteInit>:
     9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9da:	4b09      	ldr	r3, [pc, #36]	; (a00 <nwkRouteInit+0x28>)
     9dc:	3302      	adds	r3, #2
     9de:	2200      	movs	r2, #0
     9e0:	2701      	movs	r7, #1
     9e2:	427f      	negs	r7, r7
     9e4:	4c06      	ldr	r4, [pc, #24]	; (a00 <nwkRouteInit+0x28>)
     9e6:	2601      	movs	r6, #1
     9e8:	2500      	movs	r5, #0
     9ea:	801f      	strh	r7, [r3, #0]
     9ec:	00d0      	lsls	r0, r2, #3
     9ee:	5d01      	ldrb	r1, [r0, r4]
     9f0:	43b1      	bics	r1, r6
     9f2:	5501      	strb	r1, [r0, r4]
     9f4:	711d      	strb	r5, [r3, #4]
     9f6:	3201      	adds	r2, #1
     9f8:	3308      	adds	r3, #8
     9fa:	2a64      	cmp	r2, #100	; 0x64
     9fc:	d1f5      	bne.n	9ea <nwkRouteInit+0x12>
     9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a00:	20000628 	.word	0x20000628

00000a04 <NWK_RouteFindEntry>:
     a04:	b570      	push	{r4, r5, r6, lr}
     a06:	4a0b      	ldr	r2, [pc, #44]	; (a34 <NWK_RouteFindEntry+0x30>)
     a08:	3202      	adds	r2, #2
     a0a:	2300      	movs	r3, #0
     a0c:	4e09      	ldr	r6, [pc, #36]	; (a34 <NWK_RouteFindEntry+0x30>)
     a0e:	8814      	ldrh	r4, [r2, #0]
     a10:	4284      	cmp	r4, r0
     a12:	d109      	bne.n	a28 <NWK_RouteFindEntry+0x24>
     a14:	00dc      	lsls	r4, r3, #3
     a16:	5da4      	ldrb	r4, [r4, r6]
     a18:	07a4      	lsls	r4, r4, #30
     a1a:	0fe4      	lsrs	r4, r4, #31
     a1c:	428c      	cmp	r4, r1
     a1e:	d103      	bne.n	a28 <NWK_RouteFindEntry+0x24>
     a20:	00dd      	lsls	r5, r3, #3
     a22:	4804      	ldr	r0, [pc, #16]	; (a34 <NWK_RouteFindEntry+0x30>)
     a24:	1940      	adds	r0, r0, r5
     a26:	e004      	b.n	a32 <NWK_RouteFindEntry+0x2e>
     a28:	3301      	adds	r3, #1
     a2a:	3208      	adds	r2, #8
     a2c:	2b64      	cmp	r3, #100	; 0x64
     a2e:	d1ee      	bne.n	a0e <NWK_RouteFindEntry+0xa>
     a30:	2000      	movs	r0, #0
     a32:	bd70      	pop	{r4, r5, r6, pc}
     a34:	20000628 	.word	0x20000628

00000a38 <NWK_RouteNewEntry>:
     a38:	b530      	push	{r4, r5, lr}
     a3a:	2200      	movs	r2, #0
     a3c:	4812      	ldr	r0, [pc, #72]	; (a88 <NWK_RouteNewEntry+0x50>)
     a3e:	2401      	movs	r4, #1
     a40:	1c03      	adds	r3, r0, #0
     a42:	25c8      	movs	r5, #200	; 0xc8
     a44:	00ad      	lsls	r5, r5, #2
     a46:	46ac      	mov	ip, r5
     a48:	4463      	add	r3, ip
     a4a:	1c19      	adds	r1, r3, #0
     a4c:	7803      	ldrb	r3, [r0, #0]
     a4e:	421c      	tst	r4, r3
     a50:	d10a      	bne.n	a68 <NWK_RouteNewEntry+0x30>
     a52:	7983      	ldrb	r3, [r0, #6]
     a54:	2b00      	cmp	r3, #0
     a56:	d00b      	beq.n	a70 <NWK_RouteNewEntry+0x38>
     a58:	2a00      	cmp	r2, #0
     a5a:	d004      	beq.n	a66 <NWK_RouteNewEntry+0x2e>
     a5c:	7995      	ldrb	r5, [r2, #6]
     a5e:	429d      	cmp	r5, r3
     a60:	d902      	bls.n	a68 <NWK_RouteNewEntry+0x30>
     a62:	1c02      	adds	r2, r0, #0
     a64:	e000      	b.n	a68 <NWK_RouteNewEntry+0x30>
     a66:	1c02      	adds	r2, r0, #0
     a68:	3008      	adds	r0, #8
     a6a:	4288      	cmp	r0, r1
     a6c:	d1ee      	bne.n	a4c <NWK_RouteNewEntry+0x14>
     a6e:	1c10      	adds	r0, r2, #0
     a70:	7803      	ldrb	r3, [r0, #0]
     a72:	2202      	movs	r2, #2
     a74:	4393      	bics	r3, r2
     a76:	320d      	adds	r2, #13
     a78:	4013      	ands	r3, r2
     a7a:	2230      	movs	r2, #48	; 0x30
     a7c:	4313      	orrs	r3, r2
     a7e:	7003      	strb	r3, [r0, #0]
     a80:	2380      	movs	r3, #128	; 0x80
     a82:	7183      	strb	r3, [r0, #6]
     a84:	bd30      	pop	{r4, r5, pc}
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	20000628 	.word	0x20000628

00000a8c <NWK_RouteFreeEntry>:
     a8c:	7803      	ldrb	r3, [r0, #0]
     a8e:	07db      	lsls	r3, r3, #31
     a90:	d404      	bmi.n	a9c <NWK_RouteFreeEntry+0x10>
     a92:	2301      	movs	r3, #1
     a94:	425b      	negs	r3, r3
     a96:	8043      	strh	r3, [r0, #2]
     a98:	2300      	movs	r3, #0
     a9a:	7183      	strb	r3, [r0, #6]
     a9c:	4770      	bx	lr
     a9e:	46c0      	nop			; (mov r8, r8)

00000aa0 <NWK_RouteNextHop>:
     aa0:	b508      	push	{r3, lr}
     aa2:	4b04      	ldr	r3, [pc, #16]	; (ab4 <NWK_RouteNextHop+0x14>)
     aa4:	4798      	blx	r3
     aa6:	2800      	cmp	r0, #0
     aa8:	d001      	beq.n	aae <NWK_RouteNextHop+0xe>
     aaa:	8880      	ldrh	r0, [r0, #4]
     aac:	e000      	b.n	ab0 <NWK_RouteNextHop+0x10>
     aae:	4802      	ldr	r0, [pc, #8]	; (ab8 <NWK_RouteNextHop+0x18>)
     ab0:	bd08      	pop	{r3, pc}
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	00000a05 	.word	0x00000a05
     ab8:	0000ffff 	.word	0x0000ffff

00000abc <nwkRouteUpdateEntry>:
     abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     abe:	1c06      	adds	r6, r0, #0
     ac0:	1c0c      	adds	r4, r1, #0
     ac2:	1c17      	adds	r7, r2, #0
     ac4:	1c1d      	adds	r5, r3, #0
     ac6:	4b0c      	ldr	r3, [pc, #48]	; (af8 <nwkRouteUpdateEntry+0x3c>)
     ac8:	4798      	blx	r3
     aca:	2800      	cmp	r0, #0
     acc:	d101      	bne.n	ad2 <nwkRouteUpdateEntry+0x16>
     ace:	4b0b      	ldr	r3, [pc, #44]	; (afc <nwkRouteUpdateEntry+0x40>)
     ad0:	4798      	blx	r3
     ad2:	8046      	strh	r6, [r0, #2]
     ad4:	8087      	strh	r7, [r0, #4]
     ad6:	2301      	movs	r3, #1
     ad8:	401c      	ands	r4, r3
     ada:	0063      	lsls	r3, r4, #1
     adc:	7804      	ldrb	r4, [r0, #0]
     ade:	2202      	movs	r2, #2
     ae0:	4394      	bics	r4, r2
     ae2:	431c      	orrs	r4, r3
     ae4:	230f      	movs	r3, #15
     ae6:	401c      	ands	r4, r3
     ae8:	2330      	movs	r3, #48	; 0x30
     aea:	431c      	orrs	r4, r3
     aec:	7004      	strb	r4, [r0, #0]
     aee:	2380      	movs	r3, #128	; 0x80
     af0:	7183      	strb	r3, [r0, #6]
     af2:	71c5      	strb	r5, [r0, #7]
     af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     af6:	46c0      	nop			; (mov r8, r8)
     af8:	00000a05 	.word	0x00000a05
     afc:	00000a39 	.word	0x00000a39

00000b00 <nwkRouteRemove>:
     b00:	b508      	push	{r3, lr}
     b02:	4b03      	ldr	r3, [pc, #12]	; (b10 <nwkRouteRemove+0x10>)
     b04:	4798      	blx	r3
     b06:	2800      	cmp	r0, #0
     b08:	d001      	beq.n	b0e <nwkRouteRemove+0xe>
     b0a:	4b02      	ldr	r3, [pc, #8]	; (b14 <nwkRouteRemove+0x14>)
     b0c:	4798      	blx	r3
     b0e:	bd08      	pop	{r3, pc}
     b10:	00000a05 	.word	0x00000a05
     b14:	00000a8d 	.word	0x00000a8d

00000b18 <nwkRouteFrameReceived>:
     b18:	4770      	bx	lr
     b1a:	46c0      	nop			; (mov r8, r8)

00000b1c <nwkRouteFrameSent>:
     b1c:	b510      	push	{r4, lr}
     b1e:	7bc2      	ldrb	r2, [r0, #15]
     b20:	7c03      	ldrb	r3, [r0, #16]
     b22:	021b      	lsls	r3, r3, #8
     b24:	4313      	orrs	r3, r2
     b26:	4a1d      	ldr	r2, [pc, #116]	; (b9c <nwkRouteFrameSent+0x80>)
     b28:	4293      	cmp	r3, r2
     b2a:	d035      	beq.n	b98 <nwkRouteFrameSent+0x7c>
     b2c:	1c04      	adds	r4, r0, #0
     b2e:	7ac1      	ldrb	r1, [r0, #11]
     b30:	0709      	lsls	r1, r1, #28
     b32:	0fc9      	lsrs	r1, r1, #31
     b34:	1c18      	adds	r0, r3, #0
     b36:	4b1a      	ldr	r3, [pc, #104]	; (ba0 <nwkRouteFrameSent+0x84>)
     b38:	4798      	blx	r3
     b3a:	2800      	cmp	r0, #0
     b3c:	d02c      	beq.n	b98 <nwkRouteFrameSent+0x7c>
     b3e:	7803      	ldrb	r3, [r0, #0]
     b40:	07db      	lsls	r3, r3, #31
     b42:	d429      	bmi.n	b98 <nwkRouteFrameSent+0x7c>
     b44:	2385      	movs	r3, #133	; 0x85
     b46:	5ce3      	ldrb	r3, [r4, r3]
     b48:	2b00      	cmp	r3, #0
     b4a:	d118      	bne.n	b7e <nwkRouteFrameSent+0x62>
     b4c:	7803      	ldrb	r3, [r0, #0]
     b4e:	220f      	movs	r2, #15
     b50:	4013      	ands	r3, r2
     b52:	2230      	movs	r2, #48	; 0x30
     b54:	4313      	orrs	r3, r2
     b56:	7003      	strb	r3, [r0, #0]
     b58:	7983      	ldrb	r3, [r0, #6]
     b5a:	3301      	adds	r3, #1
     b5c:	b2db      	uxtb	r3, r3
     b5e:	7183      	strb	r3, [r0, #6]
     b60:	2bff      	cmp	r3, #255	; 0xff
     b62:	d119      	bne.n	b98 <nwkRouteFrameSent+0x7c>
     b64:	490f      	ldr	r1, [pc, #60]	; (ba4 <nwkRouteFrameSent+0x88>)
     b66:	1d8a      	adds	r2, r1, #6
     b68:	4b0f      	ldr	r3, [pc, #60]	; (ba8 <nwkRouteFrameSent+0x8c>)
     b6a:	469c      	mov	ip, r3
     b6c:	4461      	add	r1, ip
     b6e:	7813      	ldrb	r3, [r2, #0]
     b70:	085b      	lsrs	r3, r3, #1
     b72:	3301      	adds	r3, #1
     b74:	7013      	strb	r3, [r2, #0]
     b76:	3208      	adds	r2, #8
     b78:	428a      	cmp	r2, r1
     b7a:	d1f8      	bne.n	b6e <nwkRouteFrameSent+0x52>
     b7c:	e00c      	b.n	b98 <nwkRouteFrameSent+0x7c>
     b7e:	7802      	ldrb	r2, [r0, #0]
     b80:	0913      	lsrs	r3, r2, #4
     b82:	330f      	adds	r3, #15
     b84:	240f      	movs	r4, #15
     b86:	4023      	ands	r3, r4
     b88:	0119      	lsls	r1, r3, #4
     b8a:	4022      	ands	r2, r4
     b8c:	430a      	orrs	r2, r1
     b8e:	7002      	strb	r2, [r0, #0]
     b90:	2b00      	cmp	r3, #0
     b92:	d101      	bne.n	b98 <nwkRouteFrameSent+0x7c>
     b94:	4b05      	ldr	r3, [pc, #20]	; (bac <nwkRouteFrameSent+0x90>)
     b96:	4798      	blx	r3
     b98:	bd10      	pop	{r4, pc}
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	0000ffff 	.word	0x0000ffff
     ba0:	00000a05 	.word	0x00000a05
     ba4:	20000628 	.word	0x20000628
     ba8:	00000326 	.word	0x00000326
     bac:	00000a8d 	.word	0x00000a8d

00000bb0 <nwkRoutePrepareTx>:
     bb0:	b510      	push	{r4, lr}
     bb2:	7bc2      	ldrb	r2, [r0, #15]
     bb4:	7c03      	ldrb	r3, [r0, #16]
     bb6:	021b      	lsls	r3, r3, #8
     bb8:	4313      	orrs	r3, r2
     bba:	4a10      	ldr	r2, [pc, #64]	; (bfc <nwkRoutePrepareTx+0x4c>)
     bbc:	4293      	cmp	r3, r2
     bbe:	d104      	bne.n	bca <nwkRoutePrepareTx+0x1a>
     bc0:	2301      	movs	r3, #1
     bc2:	425b      	negs	r3, r3
     bc4:	71c3      	strb	r3, [r0, #7]
     bc6:	7203      	strb	r3, [r0, #8]
     bc8:	e016      	b.n	bf8 <nwkRoutePrepareTx+0x48>
     bca:	7ac2      	ldrb	r2, [r0, #11]
     bcc:	0752      	lsls	r2, r2, #29
     bce:	d503      	bpl.n	bd8 <nwkRoutePrepareTx+0x28>
     bd0:	71c3      	strb	r3, [r0, #7]
     bd2:	0a1b      	lsrs	r3, r3, #8
     bd4:	7203      	strb	r3, [r0, #8]
     bd6:	e00f      	b.n	bf8 <nwkRoutePrepareTx+0x48>
     bd8:	1c04      	adds	r4, r0, #0
     bda:	7ac1      	ldrb	r1, [r0, #11]
     bdc:	0709      	lsls	r1, r1, #28
     bde:	0fc9      	lsrs	r1, r1, #31
     be0:	1c18      	adds	r0, r3, #0
     be2:	4b07      	ldr	r3, [pc, #28]	; (c00 <nwkRoutePrepareTx+0x50>)
     be4:	4798      	blx	r3
     be6:	71e0      	strb	r0, [r4, #7]
     be8:	0a03      	lsrs	r3, r0, #8
     bea:	7223      	strb	r3, [r4, #8]
     bec:	4b03      	ldr	r3, [pc, #12]	; (bfc <nwkRoutePrepareTx+0x4c>)
     bee:	4298      	cmp	r0, r3
     bf0:	d102      	bne.n	bf8 <nwkRoutePrepareTx+0x48>
     bf2:	1c20      	adds	r0, r4, #0
     bf4:	4b03      	ldr	r3, [pc, #12]	; (c04 <nwkRoutePrepareTx+0x54>)
     bf6:	4798      	blx	r3
     bf8:	bd10      	pop	{r4, pc}
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	0000ffff 	.word	0x0000ffff
     c00:	00000aa1 	.word	0x00000aa1
     c04:	00000f89 	.word	0x00000f89

00000c08 <nwkRouteFrame>:
     c08:	b5f0      	push	{r4, r5, r6, r7, lr}
     c0a:	4647      	mov	r7, r8
     c0c:	b480      	push	{r7}
     c0e:	1c06      	adds	r6, r0, #0
     c10:	7bc2      	ldrb	r2, [r0, #15]
     c12:	7c07      	ldrb	r7, [r0, #16]
     c14:	023f      	lsls	r7, r7, #8
     c16:	4317      	orrs	r7, r2
     c18:	7ac4      	ldrb	r4, [r0, #11]
     c1a:	0724      	lsls	r4, r4, #28
     c1c:	0fe4      	lsrs	r4, r4, #31
     c1e:	b2e1      	uxtb	r1, r4
     c20:	1c38      	adds	r0, r7, #0
     c22:	4b2a      	ldr	r3, [pc, #168]	; (ccc <nwkRouteFrame+0xc4>)
     c24:	4798      	blx	r3
     c26:	4b2a      	ldr	r3, [pc, #168]	; (cd0 <nwkRouteFrame+0xc8>)
     c28:	4298      	cmp	r0, r3
     c2a:	d00e      	beq.n	c4a <nwkRouteFrame+0x42>
     c2c:	2200      	movs	r2, #0
     c2e:	2389      	movs	r3, #137	; 0x89
     c30:	54f2      	strb	r2, [r6, r3]
     c32:	1c33      	adds	r3, r6, #0
     c34:	3389      	adds	r3, #137	; 0x89
     c36:	705a      	strb	r2, [r3, #1]
     c38:	709a      	strb	r2, [r3, #2]
     c3a:	70da      	strb	r2, [r3, #3]
     c3c:	3202      	adds	r2, #2
     c3e:	2388      	movs	r3, #136	; 0x88
     c40:	54f2      	strb	r2, [r6, r3]
     c42:	1c30      	adds	r0, r6, #0
     c44:	4b23      	ldr	r3, [pc, #140]	; (cd4 <nwkRouteFrame+0xcc>)
     c46:	4798      	blx	r3
     c48:	e03d      	b.n	cc6 <nwkRouteFrame+0xbe>
     c4a:	7b72      	ldrb	r2, [r6, #13]
     c4c:	7bb3      	ldrb	r3, [r6, #14]
     c4e:	021b      	lsls	r3, r3, #8
     c50:	4313      	orrs	r3, r2
     c52:	4698      	mov	r8, r3
     c54:	4b20      	ldr	r3, [pc, #128]	; (cd8 <nwkRouteFrame+0xd0>)
     c56:	4798      	blx	r3
     c58:	1e05      	subs	r5, r0, #0
     c5a:	d031      	beq.n	cc0 <nwkRouteFrame+0xb8>
     c5c:	4b1f      	ldr	r3, [pc, #124]	; (cdc <nwkRouteFrame+0xd4>)
     c5e:	4798      	blx	r3
     c60:	786b      	ldrb	r3, [r5, #1]
     c62:	3306      	adds	r3, #6
     c64:	706b      	strb	r3, [r5, #1]
     c66:	2200      	movs	r2, #0
     c68:	2389      	movs	r3, #137	; 0x89
     c6a:	54ea      	strb	r2, [r5, r3]
     c6c:	1c2b      	adds	r3, r5, #0
     c6e:	3389      	adds	r3, #137	; 0x89
     c70:	705a      	strb	r2, [r3, #1]
     c72:	709a      	strb	r2, [r3, #2]
     c74:	70da      	strb	r2, [r3, #3]
     c76:	23ff      	movs	r3, #255	; 0xff
     c78:	4642      	mov	r2, r8
     c7a:	401a      	ands	r2, r3
     c7c:	4694      	mov	ip, r2
     c7e:	73ea      	strb	r2, [r5, #15]
     c80:	4643      	mov	r3, r8
     c82:	0a1b      	lsrs	r3, r3, #8
     c84:	4698      	mov	r8, r3
     c86:	742b      	strb	r3, [r5, #16]
     c88:	2381      	movs	r3, #129	; 0x81
     c8a:	5ce8      	ldrb	r0, [r5, r3]
     c8c:	3301      	adds	r3, #1
     c8e:	5cea      	ldrb	r2, [r5, r3]
     c90:	0212      	lsls	r2, r2, #8
     c92:	4302      	orrs	r2, r0
     c94:	3301      	adds	r3, #1
     c96:	5ceb      	ldrb	r3, [r5, r3]
     c98:	041b      	lsls	r3, r3, #16
     c9a:	4313      	orrs	r3, r2
     c9c:	1c1a      	adds	r2, r3, #0
     c9e:	2384      	movs	r3, #132	; 0x84
     ca0:	5ceb      	ldrb	r3, [r5, r3]
     ca2:	061b      	lsls	r3, r3, #24
     ca4:	4313      	orrs	r3, r2
     ca6:	2201      	movs	r2, #1
     ca8:	701a      	strb	r2, [r3, #0]
     caa:	4662      	mov	r2, ip
     cac:	705a      	strb	r2, [r3, #1]
     cae:	4642      	mov	r2, r8
     cb0:	709a      	strb	r2, [r3, #2]
     cb2:	70df      	strb	r7, [r3, #3]
     cb4:	0a3f      	lsrs	r7, r7, #8
     cb6:	711f      	strb	r7, [r3, #4]
     cb8:	715c      	strb	r4, [r3, #5]
     cba:	1c28      	adds	r0, r5, #0
     cbc:	4b05      	ldr	r3, [pc, #20]	; (cd4 <nwkRouteFrame+0xcc>)
     cbe:	4798      	blx	r3
     cc0:	1c30      	adds	r0, r6, #0
     cc2:	4b07      	ldr	r3, [pc, #28]	; (ce0 <nwkRouteFrame+0xd8>)
     cc4:	4798      	blx	r3
     cc6:	bc04      	pop	{r2}
     cc8:	4690      	mov	r8, r2
     cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ccc:	00000aa1 	.word	0x00000aa1
     cd0:	0000ffff 	.word	0x0000ffff
     cd4:	0000176d 	.word	0x0000176d
     cd8:	000008f1 	.word	0x000008f1
     cdc:	000009b9 	.word	0x000009b9
     ce0:	00000961 	.word	0x00000961

00000ce4 <nwkRouteErrorReceived>:
     ce4:	b508      	push	{r3, lr}
     ce6:	6882      	ldr	r2, [r0, #8]
     ce8:	7b03      	ldrb	r3, [r0, #12]
     cea:	2000      	movs	r0, #0
     cec:	2b06      	cmp	r3, #6
     cee:	d107      	bne.n	d00 <nwkRouteErrorReceived+0x1c>
     cf0:	78d3      	ldrb	r3, [r2, #3]
     cf2:	7910      	ldrb	r0, [r2, #4]
     cf4:	0200      	lsls	r0, r0, #8
     cf6:	4318      	orrs	r0, r3
     cf8:	7951      	ldrb	r1, [r2, #5]
     cfa:	4b02      	ldr	r3, [pc, #8]	; (d04 <nwkRouteErrorReceived+0x20>)
     cfc:	4798      	blx	r3
     cfe:	2001      	movs	r0, #1
     d00:	bd08      	pop	{r3, pc}
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	00000b01 	.word	0x00000b01

00000d08 <nwkRouteDiscoveryFindEntry>:
     d08:	b5f0      	push	{r4, r5, r6, r7, lr}
     d0a:	4b0d      	ldr	r3, [pc, #52]	; (d40 <nwkRouteDiscoveryFindEntry+0x38>)
     d0c:	2400      	movs	r4, #0
     d0e:	895d      	ldrh	r5, [r3, #10]
     d10:	2d00      	cmp	r5, #0
     d12:	d00e      	beq.n	d32 <nwkRouteDiscoveryFindEntry+0x2a>
     d14:	881d      	ldrh	r5, [r3, #0]
     d16:	4285      	cmp	r5, r0
     d18:	d10b      	bne.n	d32 <nwkRouteDiscoveryFindEntry+0x2a>
     d1a:	885d      	ldrh	r5, [r3, #2]
     d1c:	428d      	cmp	r5, r1
     d1e:	d108      	bne.n	d32 <nwkRouteDiscoveryFindEntry+0x2a>
     d20:	791d      	ldrb	r5, [r3, #4]
     d22:	4295      	cmp	r5, r2
     d24:	d105      	bne.n	d32 <nwkRouteDiscoveryFindEntry+0x2a>
     d26:	0060      	lsls	r0, r4, #1
     d28:	1906      	adds	r6, r0, r4
     d2a:	00b6      	lsls	r6, r6, #2
     d2c:	4804      	ldr	r0, [pc, #16]	; (d40 <nwkRouteDiscoveryFindEntry+0x38>)
     d2e:	1980      	adds	r0, r0, r6
     d30:	e004      	b.n	d3c <nwkRouteDiscoveryFindEntry+0x34>
     d32:	3401      	adds	r4, #1
     d34:	330c      	adds	r3, #12
     d36:	2c05      	cmp	r4, #5
     d38:	d1e9      	bne.n	d0e <nwkRouteDiscoveryFindEntry+0x6>
     d3a:	2000      	movs	r0, #0
     d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	2000095c 	.word	0x2000095c

00000d44 <nwkRouteDiscoveryNewEntry>:
     d44:	b538      	push	{r3, r4, r5, lr}
     d46:	4b11      	ldr	r3, [pc, #68]	; (d8c <nwkRouteDiscoveryNewEntry+0x48>)
     d48:	895b      	ldrh	r3, [r3, #10]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d007      	beq.n	d5e <nwkRouteDiscoveryNewEntry+0x1a>
     d4e:	4a0f      	ldr	r2, [pc, #60]	; (d8c <nwkRouteDiscoveryNewEntry+0x48>)
     d50:	3216      	adds	r2, #22
     d52:	2301      	movs	r3, #1
     d54:	1c1c      	adds	r4, r3, #0
     d56:	8811      	ldrh	r1, [r2, #0]
     d58:	2900      	cmp	r1, #0
     d5a:	d110      	bne.n	d7e <nwkRouteDiscoveryNewEntry+0x3a>
     d5c:	e000      	b.n	d60 <nwkRouteDiscoveryNewEntry+0x1c>
     d5e:	2400      	movs	r4, #0
     d60:	4b0a      	ldr	r3, [pc, #40]	; (d8c <nwkRouteDiscoveryNewEntry+0x48>)
     d62:	0062      	lsls	r2, r4, #1
     d64:	1915      	adds	r5, r2, r4
     d66:	00ad      	lsls	r5, r5, #2
     d68:	195d      	adds	r5, r3, r5
     d6a:	2100      	movs	r1, #0
     d6c:	7229      	strb	r1, [r5, #8]
     d6e:	7269      	strb	r1, [r5, #9]
     d70:	23fa      	movs	r3, #250	; 0xfa
     d72:	009b      	lsls	r3, r3, #2
     d74:	816b      	strh	r3, [r5, #10]
     d76:	4806      	ldr	r0, [pc, #24]	; (d90 <nwkRouteDiscoveryNewEntry+0x4c>)
     d78:	4b06      	ldr	r3, [pc, #24]	; (d94 <nwkRouteDiscoveryNewEntry+0x50>)
     d7a:	4798      	blx	r3
     d7c:	e004      	b.n	d88 <nwkRouteDiscoveryNewEntry+0x44>
     d7e:	3301      	adds	r3, #1
     d80:	320c      	adds	r2, #12
     d82:	2b05      	cmp	r3, #5
     d84:	d1e6      	bne.n	d54 <nwkRouteDiscoveryNewEntry+0x10>
     d86:	2500      	movs	r5, #0
     d88:	1c28      	adds	r0, r5, #0
     d8a:	bd38      	pop	{r3, r4, r5, pc}
     d8c:	2000095c 	.word	0x2000095c
     d90:	20000948 	.word	0x20000948
     d94:	00001e55 	.word	0x00001e55

00000d98 <nwkRouteDiscoveryTimerHandler>:
     d98:	b5f0      	push	{r4, r5, r6, r7, lr}
     d9a:	4647      	mov	r7, r8
     d9c:	b480      	push	{r7}
     d9e:	b082      	sub	sp, #8
     da0:	9001      	str	r0, [sp, #4]
     da2:	4d23      	ldr	r5, [pc, #140]	; (e30 <nwkRouteDiscoveryTimerHandler+0x98>)
     da4:	1c2e      	adds	r6, r5, #0
     da6:	363c      	adds	r6, #60	; 0x3c
     da8:	2700      	movs	r7, #0
     daa:	9500      	str	r5, [sp, #0]
     dac:	896b      	ldrh	r3, [r5, #10]
     dae:	2b64      	cmp	r3, #100	; 0x64
     db0:	d903      	bls.n	dba <nwkRouteDiscoveryTimerHandler+0x22>
     db2:	3b64      	subs	r3, #100	; 0x64
     db4:	816b      	strh	r3, [r5, #10]
     db6:	2701      	movs	r7, #1
     db8:	e02d      	b.n	e16 <nwkRouteDiscoveryTimerHandler+0x7e>
     dba:	2300      	movs	r3, #0
     dbc:	816b      	strh	r3, [r5, #10]
     dbe:	882a      	ldrh	r2, [r5, #0]
     dc0:	4b1c      	ldr	r3, [pc, #112]	; (e34 <nwkRouteDiscoveryTimerHandler+0x9c>)
     dc2:	881b      	ldrh	r3, [r3, #0]
     dc4:	429a      	cmp	r2, r3
     dc6:	d126      	bne.n	e16 <nwkRouteDiscoveryTimerHandler+0x7e>
     dc8:	9b00      	ldr	r3, [sp, #0]
     dca:	7a5b      	ldrb	r3, [r3, #9]
     dcc:	4698      	mov	r8, r3
     dce:	2400      	movs	r4, #0
     dd0:	e01c      	b.n	e0c <nwkRouteDiscoveryTimerHandler+0x74>
     dd2:	7823      	ldrb	r3, [r4, #0]
     dd4:	2b40      	cmp	r3, #64	; 0x40
     dd6:	d119      	bne.n	e0c <nwkRouteDiscoveryTimerHandler+0x74>
     dd8:	7be2      	ldrb	r2, [r4, #15]
     dda:	7c23      	ldrb	r3, [r4, #16]
     ddc:	021b      	lsls	r3, r3, #8
     dde:	9900      	ldr	r1, [sp, #0]
     de0:	8849      	ldrh	r1, [r1, #2]
     de2:	4313      	orrs	r3, r2
     de4:	4299      	cmp	r1, r3
     de6:	d111      	bne.n	e0c <nwkRouteDiscoveryTimerHandler+0x74>
     de8:	7ae3      	ldrb	r3, [r4, #11]
     dea:	071b      	lsls	r3, r3, #28
     dec:	9a00      	ldr	r2, [sp, #0]
     dee:	7912      	ldrb	r2, [r2, #4]
     df0:	0fdb      	lsrs	r3, r3, #31
     df2:	429a      	cmp	r2, r3
     df4:	d10a      	bne.n	e0c <nwkRouteDiscoveryTimerHandler+0x74>
     df6:	4643      	mov	r3, r8
     df8:	2b00      	cmp	r3, #0
     dfa:	d003      	beq.n	e04 <nwkRouteDiscoveryTimerHandler+0x6c>
     dfc:	1c20      	adds	r0, r4, #0
     dfe:	4b0e      	ldr	r3, [pc, #56]	; (e38 <nwkRouteDiscoveryTimerHandler+0xa0>)
     e00:	4798      	blx	r3
     e02:	e003      	b.n	e0c <nwkRouteDiscoveryTimerHandler+0x74>
     e04:	1c20      	adds	r0, r4, #0
     e06:	2111      	movs	r1, #17
     e08:	4b0c      	ldr	r3, [pc, #48]	; (e3c <nwkRouteDiscoveryTimerHandler+0xa4>)
     e0a:	4798      	blx	r3
     e0c:	1c20      	adds	r0, r4, #0
     e0e:	4b0c      	ldr	r3, [pc, #48]	; (e40 <nwkRouteDiscoveryTimerHandler+0xa8>)
     e10:	4798      	blx	r3
     e12:	1e04      	subs	r4, r0, #0
     e14:	d1dd      	bne.n	dd2 <nwkRouteDiscoveryTimerHandler+0x3a>
     e16:	350c      	adds	r5, #12
     e18:	42b5      	cmp	r5, r6
     e1a:	d1c6      	bne.n	daa <nwkRouteDiscoveryTimerHandler+0x12>
     e1c:	2f00      	cmp	r7, #0
     e1e:	d002      	beq.n	e26 <nwkRouteDiscoveryTimerHandler+0x8e>
     e20:	9801      	ldr	r0, [sp, #4]
     e22:	4b08      	ldr	r3, [pc, #32]	; (e44 <nwkRouteDiscoveryTimerHandler+0xac>)
     e24:	4798      	blx	r3
     e26:	b002      	add	sp, #8
     e28:	bc04      	pop	{r2}
     e2a:	4690      	mov	r8, r2
     e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e2e:	46c0      	nop			; (mov r8, r8)
     e30:	2000095c 	.word	0x2000095c
     e34:	20000c38 	.word	0x20000c38
     e38:	0000176d 	.word	0x0000176d
     e3c:	000018dd 	.word	0x000018dd
     e40:	00000975 	.word	0x00000975
     e44:	00001e55 	.word	0x00001e55

00000e48 <nwkRouteDiscoverySendRequest>:
     e48:	b570      	push	{r4, r5, r6, lr}
     e4a:	1c05      	adds	r5, r0, #0
     e4c:	1c0e      	adds	r6, r1, #0
     e4e:	4b1e      	ldr	r3, [pc, #120]	; (ec8 <nwkRouteDiscoverySendRequest+0x80>)
     e50:	4798      	blx	r3
     e52:	1e04      	subs	r4, r0, #0
     e54:	d036      	beq.n	ec4 <nwkRouteDiscoverySendRequest+0x7c>
     e56:	4b1d      	ldr	r3, [pc, #116]	; (ecc <nwkRouteDiscoverySendRequest+0x84>)
     e58:	4798      	blx	r3
     e5a:	7863      	ldrb	r3, [r4, #1]
     e5c:	3307      	adds	r3, #7
     e5e:	7063      	strb	r3, [r4, #1]
     e60:	2200      	movs	r2, #0
     e62:	2389      	movs	r3, #137	; 0x89
     e64:	54e2      	strb	r2, [r4, r3]
     e66:	1c23      	adds	r3, r4, #0
     e68:	3389      	adds	r3, #137	; 0x89
     e6a:	705a      	strb	r2, [r3, #1]
     e6c:	709a      	strb	r2, [r3, #2]
     e6e:	70da      	strb	r2, [r3, #3]
     e70:	7ae2      	ldrb	r2, [r4, #11]
     e72:	2304      	movs	r3, #4
     e74:	4313      	orrs	r3, r2
     e76:	72e3      	strb	r3, [r4, #11]
     e78:	2301      	movs	r3, #1
     e7a:	425b      	negs	r3, r3
     e7c:	73e3      	strb	r3, [r4, #15]
     e7e:	7423      	strb	r3, [r4, #16]
     e80:	3382      	adds	r3, #130	; 0x82
     e82:	5ce0      	ldrb	r0, [r4, r3]
     e84:	3301      	adds	r3, #1
     e86:	5ce2      	ldrb	r2, [r4, r3]
     e88:	0212      	lsls	r2, r2, #8
     e8a:	4302      	orrs	r2, r0
     e8c:	3301      	adds	r3, #1
     e8e:	5ce3      	ldrb	r3, [r4, r3]
     e90:	041b      	lsls	r3, r3, #16
     e92:	4313      	orrs	r3, r2
     e94:	1c1a      	adds	r2, r3, #0
     e96:	2384      	movs	r3, #132	; 0x84
     e98:	5ce3      	ldrb	r3, [r4, r3]
     e9a:	061b      	lsls	r3, r3, #24
     e9c:	4313      	orrs	r3, r2
     e9e:	2202      	movs	r2, #2
     ea0:	701a      	strb	r2, [r3, #0]
     ea2:	882a      	ldrh	r2, [r5, #0]
     ea4:	705a      	strb	r2, [r3, #1]
     ea6:	0a12      	lsrs	r2, r2, #8
     ea8:	709a      	strb	r2, [r3, #2]
     eaa:	886a      	ldrh	r2, [r5, #2]
     eac:	78a9      	ldrb	r1, [r5, #2]
     eae:	70d9      	strb	r1, [r3, #3]
     eb0:	0a12      	lsrs	r2, r2, #8
     eb2:	711a      	strb	r2, [r3, #4]
     eb4:	792a      	ldrb	r2, [r5, #4]
     eb6:	715a      	strb	r2, [r3, #5]
     eb8:	719e      	strb	r6, [r3, #6]
     eba:	1c20      	adds	r0, r4, #0
     ebc:	4b04      	ldr	r3, [pc, #16]	; (ed0 <nwkRouteDiscoverySendRequest+0x88>)
     ebe:	4798      	blx	r3
     ec0:	2001      	movs	r0, #1
     ec2:	e000      	b.n	ec6 <nwkRouteDiscoverySendRequest+0x7e>
     ec4:	2000      	movs	r0, #0
     ec6:	bd70      	pop	{r4, r5, r6, pc}
     ec8:	000008f1 	.word	0x000008f1
     ecc:	000009b9 	.word	0x000009b9
     ed0:	0000176d 	.word	0x0000176d

00000ed4 <nwkRouteDiscoverySendReply>:
     ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ed6:	1c05      	adds	r5, r0, #0
     ed8:	1c0f      	adds	r7, r1, #0
     eda:	1c16      	adds	r6, r2, #0
     edc:	4b1c      	ldr	r3, [pc, #112]	; (f50 <nwkRouteDiscoverySendReply+0x7c>)
     ede:	4798      	blx	r3
     ee0:	1e04      	subs	r4, r0, #0
     ee2:	d034      	beq.n	f4e <nwkRouteDiscoverySendReply+0x7a>
     ee4:	4b1b      	ldr	r3, [pc, #108]	; (f54 <nwkRouteDiscoverySendReply+0x80>)
     ee6:	4798      	blx	r3
     ee8:	7863      	ldrb	r3, [r4, #1]
     eea:	3308      	adds	r3, #8
     eec:	7063      	strb	r3, [r4, #1]
     eee:	2200      	movs	r2, #0
     ef0:	2389      	movs	r3, #137	; 0x89
     ef2:	54e2      	strb	r2, [r4, r3]
     ef4:	1c23      	adds	r3, r4, #0
     ef6:	3389      	adds	r3, #137	; 0x89
     ef8:	705a      	strb	r2, [r3, #1]
     efa:	709a      	strb	r2, [r3, #2]
     efc:	70da      	strb	r2, [r3, #3]
     efe:	3204      	adds	r2, #4
     f00:	2388      	movs	r3, #136	; 0x88
     f02:	54e2      	strb	r2, [r4, r3]
     f04:	88eb      	ldrh	r3, [r5, #6]
     f06:	73e3      	strb	r3, [r4, #15]
     f08:	0a1b      	lsrs	r3, r3, #8
     f0a:	7423      	strb	r3, [r4, #16]
     f0c:	2381      	movs	r3, #129	; 0x81
     f0e:	5ce0      	ldrb	r0, [r4, r3]
     f10:	3301      	adds	r3, #1
     f12:	5ce2      	ldrb	r2, [r4, r3]
     f14:	0212      	lsls	r2, r2, #8
     f16:	4302      	orrs	r2, r0
     f18:	3301      	adds	r3, #1
     f1a:	5ce3      	ldrb	r3, [r4, r3]
     f1c:	041b      	lsls	r3, r3, #16
     f1e:	4313      	orrs	r3, r2
     f20:	1c1a      	adds	r2, r3, #0
     f22:	2384      	movs	r3, #132	; 0x84
     f24:	5ce3      	ldrb	r3, [r4, r3]
     f26:	061b      	lsls	r3, r3, #24
     f28:	4313      	orrs	r3, r2
     f2a:	2203      	movs	r2, #3
     f2c:	701a      	strb	r2, [r3, #0]
     f2e:	882a      	ldrh	r2, [r5, #0]
     f30:	705a      	strb	r2, [r3, #1]
     f32:	0a12      	lsrs	r2, r2, #8
     f34:	709a      	strb	r2, [r3, #2]
     f36:	886a      	ldrh	r2, [r5, #2]
     f38:	78a9      	ldrb	r1, [r5, #2]
     f3a:	70d9      	strb	r1, [r3, #3]
     f3c:	0a12      	lsrs	r2, r2, #8
     f3e:	711a      	strb	r2, [r3, #4]
     f40:	792a      	ldrb	r2, [r5, #4]
     f42:	715a      	strb	r2, [r3, #5]
     f44:	719f      	strb	r7, [r3, #6]
     f46:	71de      	strb	r6, [r3, #7]
     f48:	1c20      	adds	r0, r4, #0
     f4a:	4b03      	ldr	r3, [pc, #12]	; (f58 <nwkRouteDiscoverySendReply+0x84>)
     f4c:	4798      	blx	r3
     f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f50:	000008f1 	.word	0x000008f1
     f54:	000009b9 	.word	0x000009b9
     f58:	0000176d 	.word	0x0000176d

00000f5c <nwkRouteDiscoveryInit>:
     f5c:	4b07      	ldr	r3, [pc, #28]	; (f7c <nwkRouteDiscoveryInit+0x20>)
     f5e:	2200      	movs	r2, #0
     f60:	815a      	strh	r2, [r3, #10]
     f62:	82da      	strh	r2, [r3, #22]
     f64:	845a      	strh	r2, [r3, #34]	; 0x22
     f66:	85da      	strh	r2, [r3, #46]	; 0x2e
     f68:	875a      	strh	r2, [r3, #58]	; 0x3a
     f6a:	4b05      	ldr	r3, [pc, #20]	; (f80 <nwkRouteDiscoveryInit+0x24>)
     f6c:	3264      	adds	r2, #100	; 0x64
     f6e:	609a      	str	r2, [r3, #8]
     f70:	2200      	movs	r2, #0
     f72:	731a      	strb	r2, [r3, #12]
     f74:	4a03      	ldr	r2, [pc, #12]	; (f84 <nwkRouteDiscoveryInit+0x28>)
     f76:	611a      	str	r2, [r3, #16]
     f78:	4770      	bx	lr
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	2000095c 	.word	0x2000095c
     f80:	20000948 	.word	0x20000948
     f84:	00000d99 	.word	0x00000d99

00000f88 <nwkRouteDiscoveryRequest>:
     f88:	b510      	push	{r4, lr}
     f8a:	1c04      	adds	r4, r0, #0
     f8c:	4b17      	ldr	r3, [pc, #92]	; (fec <nwkRouteDiscoveryRequest+0x64>)
     f8e:	8818      	ldrh	r0, [r3, #0]
     f90:	7be3      	ldrb	r3, [r4, #15]
     f92:	7c21      	ldrb	r1, [r4, #16]
     f94:	0209      	lsls	r1, r1, #8
     f96:	4319      	orrs	r1, r3
     f98:	7ae2      	ldrb	r2, [r4, #11]
     f9a:	0712      	lsls	r2, r2, #28
     f9c:	0fd2      	lsrs	r2, r2, #31
     f9e:	4b14      	ldr	r3, [pc, #80]	; (ff0 <nwkRouteDiscoveryRequest+0x68>)
     fa0:	4798      	blx	r3
     fa2:	2800      	cmp	r0, #0
     fa4:	d002      	beq.n	fac <nwkRouteDiscoveryRequest+0x24>
     fa6:	2340      	movs	r3, #64	; 0x40
     fa8:	7023      	strb	r3, [r4, #0]
     faa:	e01e      	b.n	fea <nwkRouteDiscoveryRequest+0x62>
     fac:	4b11      	ldr	r3, [pc, #68]	; (ff4 <nwkRouteDiscoveryRequest+0x6c>)
     fae:	4798      	blx	r3
     fb0:	2800      	cmp	r0, #0
     fb2:	d016      	beq.n	fe2 <nwkRouteDiscoveryRequest+0x5a>
     fb4:	4b0d      	ldr	r3, [pc, #52]	; (fec <nwkRouteDiscoveryRequest+0x64>)
     fb6:	881b      	ldrh	r3, [r3, #0]
     fb8:	8003      	strh	r3, [r0, #0]
     fba:	7be1      	ldrb	r1, [r4, #15]
     fbc:	7c22      	ldrb	r2, [r4, #16]
     fbe:	0212      	lsls	r2, r2, #8
     fc0:	430a      	orrs	r2, r1
     fc2:	8042      	strh	r2, [r0, #2]
     fc4:	7ae3      	ldrb	r3, [r4, #11]
     fc6:	071b      	lsls	r3, r3, #28
     fc8:	0fdb      	lsrs	r3, r3, #31
     fca:	7103      	strb	r3, [r0, #4]
     fcc:	2301      	movs	r3, #1
     fce:	425b      	negs	r3, r3
     fd0:	80c3      	strh	r3, [r0, #6]
     fd2:	21ff      	movs	r1, #255	; 0xff
     fd4:	4b08      	ldr	r3, [pc, #32]	; (ff8 <nwkRouteDiscoveryRequest+0x70>)
     fd6:	4798      	blx	r3
     fd8:	2800      	cmp	r0, #0
     fda:	d002      	beq.n	fe2 <nwkRouteDiscoveryRequest+0x5a>
     fdc:	2340      	movs	r3, #64	; 0x40
     fde:	7023      	strb	r3, [r4, #0]
     fe0:	e003      	b.n	fea <nwkRouteDiscoveryRequest+0x62>
     fe2:	1c20      	adds	r0, r4, #0
     fe4:	2111      	movs	r1, #17
     fe6:	4b05      	ldr	r3, [pc, #20]	; (ffc <nwkRouteDiscoveryRequest+0x74>)
     fe8:	4798      	blx	r3
     fea:	bd10      	pop	{r4, pc}
     fec:	20000c38 	.word	0x20000c38
     ff0:	00000d09 	.word	0x00000d09
     ff4:	00000d45 	.word	0x00000d45
     ff8:	00000e49 	.word	0x00000e49
     ffc:	000018dd 	.word	0x000018dd

00001000 <nwkRouteDiscoveryRequestReceived>:
    1000:	b5f0      	push	{r4, r5, r6, r7, lr}
    1002:	4647      	mov	r7, r8
    1004:	b480      	push	{r7}
    1006:	6884      	ldr	r4, [r0, #8]
    1008:	7b02      	ldrb	r2, [r0, #12]
    100a:	2300      	movs	r3, #0
    100c:	2a07      	cmp	r2, #7
    100e:	d168      	bne.n	10e2 <nwkRouteDiscoveryRequestReceived+0xe2>
    1010:	7962      	ldrb	r2, [r4, #5]
    1012:	2a00      	cmp	r2, #0
    1014:	d15c      	bne.n	10d0 <nwkRouteDiscoveryRequestReceived+0xd0>
    1016:	78e3      	ldrb	r3, [r4, #3]
    1018:	7925      	ldrb	r5, [r4, #4]
    101a:	022d      	lsls	r5, r5, #8
    101c:	431d      	orrs	r5, r3
    101e:	4b33      	ldr	r3, [pc, #204]	; (10ec <nwkRouteDiscoveryRequestReceived+0xec>)
    1020:	8819      	ldrh	r1, [r3, #0]
    1022:	7866      	ldrb	r6, [r4, #1]
    1024:	78a3      	ldrb	r3, [r4, #2]
    1026:	021b      	lsls	r3, r3, #8
    1028:	4333      	orrs	r3, r6
    102a:	4299      	cmp	r1, r3
    102c:	d048      	beq.n	10c0 <nwkRouteDiscoveryRequestReceived+0xc0>
    102e:	428d      	cmp	r5, r1
    1030:	d005      	beq.n	103e <nwkRouteDiscoveryRequestReceived+0x3e>
    1032:	b209      	sxth	r1, r1
    1034:	2900      	cmp	r1, #0
    1036:	db45      	blt.n	10c4 <nwkRouteDiscoveryRequestReceived+0xc4>
    1038:	2100      	movs	r1, #0
    103a:	4688      	mov	r8, r1
    103c:	e001      	b.n	1042 <nwkRouteDiscoveryRequestReceived+0x42>
    103e:	2101      	movs	r1, #1
    1040:	4688      	mov	r8, r1
    1042:	1c05      	adds	r5, r0, #0
    1044:	79a6      	ldrb	r6, [r4, #6]
    1046:	7b41      	ldrb	r1, [r0, #13]
    1048:	434e      	muls	r6, r1
    104a:	0a36      	lsrs	r6, r6, #8
    104c:	78e0      	ldrb	r0, [r4, #3]
    104e:	7921      	ldrb	r1, [r4, #4]
    1050:	0209      	lsls	r1, r1, #8
    1052:	4301      	orrs	r1, r0
    1054:	1c18      	adds	r0, r3, #0
    1056:	4b26      	ldr	r3, [pc, #152]	; (10f0 <nwkRouteDiscoveryRequestReceived+0xf0>)
    1058:	4798      	blx	r3
    105a:	1e07      	subs	r7, r0, #0
    105c:	d004      	beq.n	1068 <nwkRouteDiscoveryRequestReceived+0x68>
    105e:	7a02      	ldrb	r2, [r0, #8]
    1060:	2301      	movs	r3, #1
    1062:	42b2      	cmp	r2, r6
    1064:	d304      	bcc.n	1070 <nwkRouteDiscoveryRequestReceived+0x70>
    1066:	e03c      	b.n	10e2 <nwkRouteDiscoveryRequestReceived+0xe2>
    1068:	4b22      	ldr	r3, [pc, #136]	; (10f4 <nwkRouteDiscoveryRequestReceived+0xf4>)
    106a:	4798      	blx	r3
    106c:	1e07      	subs	r7, r0, #0
    106e:	d02b      	beq.n	10c8 <nwkRouteDiscoveryRequestReceived+0xc8>
    1070:	7862      	ldrb	r2, [r4, #1]
    1072:	78a3      	ldrb	r3, [r4, #2]
    1074:	021b      	lsls	r3, r3, #8
    1076:	4313      	orrs	r3, r2
    1078:	803b      	strh	r3, [r7, #0]
    107a:	78e2      	ldrb	r2, [r4, #3]
    107c:	7923      	ldrb	r3, [r4, #4]
    107e:	021b      	lsls	r3, r3, #8
    1080:	4313      	orrs	r3, r2
    1082:	807b      	strh	r3, [r7, #2]
    1084:	7963      	ldrb	r3, [r4, #5]
    1086:	713b      	strb	r3, [r7, #4]
    1088:	882b      	ldrh	r3, [r5, #0]
    108a:	80fb      	strh	r3, [r7, #6]
    108c:	723e      	strb	r6, [r7, #8]
    108e:	4643      	mov	r3, r8
    1090:	2b00      	cmp	r3, #0
    1092:	d00f      	beq.n	10b4 <nwkRouteDiscoveryRequestReceived+0xb4>
    1094:	7863      	ldrb	r3, [r4, #1]
    1096:	78a0      	ldrb	r0, [r4, #2]
    1098:	0200      	lsls	r0, r0, #8
    109a:	4318      	orrs	r0, r3
    109c:	882a      	ldrh	r2, [r5, #0]
    109e:	2100      	movs	r1, #0
    10a0:	1c33      	adds	r3, r6, #0
    10a2:	4c15      	ldr	r4, [pc, #84]	; (10f8 <nwkRouteDiscoveryRequestReceived+0xf8>)
    10a4:	47a0      	blx	r4
    10a6:	1c38      	adds	r0, r7, #0
    10a8:	1c31      	adds	r1, r6, #0
    10aa:	22ff      	movs	r2, #255	; 0xff
    10ac:	4b13      	ldr	r3, [pc, #76]	; (10fc <nwkRouteDiscoveryRequestReceived+0xfc>)
    10ae:	4798      	blx	r3
    10b0:	2301      	movs	r3, #1
    10b2:	e016      	b.n	10e2 <nwkRouteDiscoveryRequestReceived+0xe2>
    10b4:	1c38      	adds	r0, r7, #0
    10b6:	1c31      	adds	r1, r6, #0
    10b8:	4b11      	ldr	r3, [pc, #68]	; (1100 <nwkRouteDiscoveryRequestReceived+0x100>)
    10ba:	4798      	blx	r3
    10bc:	2301      	movs	r3, #1
    10be:	e010      	b.n	10e2 <nwkRouteDiscoveryRequestReceived+0xe2>
    10c0:	2301      	movs	r3, #1
    10c2:	e00e      	b.n	10e2 <nwkRouteDiscoveryRequestReceived+0xe2>
    10c4:	2301      	movs	r3, #1
    10c6:	e00c      	b.n	10e2 <nwkRouteDiscoveryRequestReceived+0xe2>
    10c8:	2301      	movs	r3, #1
    10ca:	e00a      	b.n	10e2 <nwkRouteDiscoveryRequestReceived+0xe2>
    10cc:	2301      	movs	r3, #1
    10ce:	e008      	b.n	10e2 <nwkRouteDiscoveryRequestReceived+0xe2>
    10d0:	7861      	ldrb	r1, [r4, #1]
    10d2:	78a3      	ldrb	r3, [r4, #2]
    10d4:	021b      	lsls	r3, r3, #8
    10d6:	430b      	orrs	r3, r1
    10d8:	4904      	ldr	r1, [pc, #16]	; (10ec <nwkRouteDiscoveryRequestReceived+0xec>)
    10da:	8809      	ldrh	r1, [r1, #0]
    10dc:	428b      	cmp	r3, r1
    10de:	d1a8      	bne.n	1032 <nwkRouteDiscoveryRequestReceived+0x32>
    10e0:	e7f4      	b.n	10cc <nwkRouteDiscoveryRequestReceived+0xcc>
    10e2:	1c18      	adds	r0, r3, #0
    10e4:	bc04      	pop	{r2}
    10e6:	4690      	mov	r8, r2
    10e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	20000c38 	.word	0x20000c38
    10f0:	00000d09 	.word	0x00000d09
    10f4:	00000d45 	.word	0x00000d45
    10f8:	00000abd 	.word	0x00000abd
    10fc:	00000ed5 	.word	0x00000ed5
    1100:	00000e49 	.word	0x00000e49

00001104 <nwkRouteDiscoveryReplyReceived>:
    1104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1106:	6884      	ldr	r4, [r0, #8]
    1108:	7b03      	ldrb	r3, [r0, #12]
    110a:	2100      	movs	r1, #0
    110c:	2b08      	cmp	r3, #8
    110e:	d144      	bne.n	119a <nwkRouteDiscoveryReplyReceived+0x96>
    1110:	1c05      	adds	r5, r0, #0
    1112:	7863      	ldrb	r3, [r4, #1]
    1114:	78a0      	ldrb	r0, [r4, #2]
    1116:	0200      	lsls	r0, r0, #8
    1118:	4318      	orrs	r0, r3
    111a:	78e3      	ldrb	r3, [r4, #3]
    111c:	7921      	ldrb	r1, [r4, #4]
    111e:	0209      	lsls	r1, r1, #8
    1120:	4319      	orrs	r1, r3
    1122:	7962      	ldrb	r2, [r4, #5]
    1124:	4b1e      	ldr	r3, [pc, #120]	; (11a0 <nwkRouteDiscoveryReplyReceived+0x9c>)
    1126:	4798      	blx	r3
    1128:	1c06      	adds	r6, r0, #0
    112a:	79e7      	ldrb	r7, [r4, #7]
    112c:	7b6b      	ldrb	r3, [r5, #13]
    112e:	2800      	cmp	r0, #0
    1130:	d032      	beq.n	1198 <nwkRouteDiscoveryReplyReceived+0x94>
    1132:	79a0      	ldrb	r0, [r4, #6]
    1134:	7a72      	ldrb	r2, [r6, #9]
    1136:	2101      	movs	r1, #1
    1138:	4282      	cmp	r2, r0
    113a:	d22e      	bcs.n	119a <nwkRouteDiscoveryReplyReceived+0x96>
    113c:	7270      	strb	r0, [r6, #9]
    113e:	7861      	ldrb	r1, [r4, #1]
    1140:	78a2      	ldrb	r2, [r4, #2]
    1142:	0212      	lsls	r2, r2, #8
    1144:	4817      	ldr	r0, [pc, #92]	; (11a4 <nwkRouteDiscoveryReplyReceived+0xa0>)
    1146:	8800      	ldrh	r0, [r0, #0]
    1148:	430a      	orrs	r2, r1
    114a:	4290      	cmp	r0, r2
    114c:	d10a      	bne.n	1164 <nwkRouteDiscoveryReplyReceived+0x60>
    114e:	78e3      	ldrb	r3, [r4, #3]
    1150:	7920      	ldrb	r0, [r4, #4]
    1152:	0200      	lsls	r0, r0, #8
    1154:	4318      	orrs	r0, r3
    1156:	7961      	ldrb	r1, [r4, #5]
    1158:	882a      	ldrh	r2, [r5, #0]
    115a:	79a3      	ldrb	r3, [r4, #6]
    115c:	4c12      	ldr	r4, [pc, #72]	; (11a8 <nwkRouteDiscoveryReplyReceived+0xa4>)
    115e:	47a0      	blx	r4
    1160:	2101      	movs	r1, #1
    1162:	e01a      	b.n	119a <nwkRouteDiscoveryReplyReceived+0x96>
    1164:	437b      	muls	r3, r7
    1166:	0a1f      	lsrs	r7, r3, #8
    1168:	78e3      	ldrb	r3, [r4, #3]
    116a:	7920      	ldrb	r0, [r4, #4]
    116c:	0200      	lsls	r0, r0, #8
    116e:	4318      	orrs	r0, r3
    1170:	7961      	ldrb	r1, [r4, #5]
    1172:	882a      	ldrh	r2, [r5, #0]
    1174:	1c3b      	adds	r3, r7, #0
    1176:	4d0c      	ldr	r5, [pc, #48]	; (11a8 <nwkRouteDiscoveryReplyReceived+0xa4>)
    1178:	47a8      	blx	r5
    117a:	7863      	ldrb	r3, [r4, #1]
    117c:	78a0      	ldrb	r0, [r4, #2]
    117e:	0200      	lsls	r0, r0, #8
    1180:	4318      	orrs	r0, r3
    1182:	88f2      	ldrh	r2, [r6, #6]
    1184:	7a33      	ldrb	r3, [r6, #8]
    1186:	2100      	movs	r1, #0
    1188:	47a8      	blx	r5
    118a:	79a1      	ldrb	r1, [r4, #6]
    118c:	1c30      	adds	r0, r6, #0
    118e:	1c3a      	adds	r2, r7, #0
    1190:	4b06      	ldr	r3, [pc, #24]	; (11ac <nwkRouteDiscoveryReplyReceived+0xa8>)
    1192:	4798      	blx	r3
    1194:	2101      	movs	r1, #1
    1196:	e000      	b.n	119a <nwkRouteDiscoveryReplyReceived+0x96>
    1198:	2101      	movs	r1, #1
    119a:	1c08      	adds	r0, r1, #0
    119c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    119e:	46c0      	nop			; (mov r8, r8)
    11a0:	00000d09 	.word	0x00000d09
    11a4:	20000c38 	.word	0x20000c38
    11a8:	00000abd 	.word	0x00000abd
    11ac:	00000ed5 	.word	0x00000ed5

000011b0 <nwkRxSeriveDataInd>:
    11b0:	b508      	push	{r3, lr}
    11b2:	7b02      	ldrb	r2, [r0, #12]
    11b4:	2300      	movs	r3, #0
    11b6:	2a00      	cmp	r2, #0
    11b8:	d01b      	beq.n	11f2 <nwkRxSeriveDataInd+0x42>
    11ba:	6883      	ldr	r3, [r0, #8]
    11bc:	781b      	ldrb	r3, [r3, #0]
    11be:	2b01      	cmp	r3, #1
    11c0:	d00a      	beq.n	11d8 <nwkRxSeriveDataInd+0x28>
    11c2:	2b00      	cmp	r3, #0
    11c4:	d004      	beq.n	11d0 <nwkRxSeriveDataInd+0x20>
    11c6:	2b02      	cmp	r3, #2
    11c8:	d00a      	beq.n	11e0 <nwkRxSeriveDataInd+0x30>
    11ca:	2b03      	cmp	r3, #3
    11cc:	d00c      	beq.n	11e8 <nwkRxSeriveDataInd+0x38>
    11ce:	e00f      	b.n	11f0 <nwkRxSeriveDataInd+0x40>
    11d0:	4b09      	ldr	r3, [pc, #36]	; (11f8 <nwkRxSeriveDataInd+0x48>)
    11d2:	4798      	blx	r3
    11d4:	1c03      	adds	r3, r0, #0
    11d6:	e00c      	b.n	11f2 <nwkRxSeriveDataInd+0x42>
    11d8:	4b08      	ldr	r3, [pc, #32]	; (11fc <nwkRxSeriveDataInd+0x4c>)
    11da:	4798      	blx	r3
    11dc:	1c03      	adds	r3, r0, #0
    11de:	e008      	b.n	11f2 <nwkRxSeriveDataInd+0x42>
    11e0:	4b07      	ldr	r3, [pc, #28]	; (1200 <nwkRxSeriveDataInd+0x50>)
    11e2:	4798      	blx	r3
    11e4:	1c03      	adds	r3, r0, #0
    11e6:	e004      	b.n	11f2 <nwkRxSeriveDataInd+0x42>
    11e8:	4b06      	ldr	r3, [pc, #24]	; (1204 <nwkRxSeriveDataInd+0x54>)
    11ea:	4798      	blx	r3
    11ec:	1c03      	adds	r3, r0, #0
    11ee:	e000      	b.n	11f2 <nwkRxSeriveDataInd+0x42>
    11f0:	2300      	movs	r3, #0
    11f2:	1c18      	adds	r0, r3, #0
    11f4:	bd08      	pop	{r3, pc}
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	000018a5 	.word	0x000018a5
    11fc:	00000ce5 	.word	0x00000ce5
    1200:	00001001 	.word	0x00001001
    1204:	00001105 	.word	0x00001105

00001208 <nwkRxDuplicateRejectionTimerHandler>:
    1208:	b538      	push	{r3, r4, r5, lr}
    120a:	490a      	ldr	r1, [pc, #40]	; (1234 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    120c:	1d0b      	adds	r3, r1, #4
    120e:	3131      	adds	r1, #49	; 0x31
    1210:	31ff      	adds	r1, #255	; 0xff
    1212:	2400      	movs	r4, #0
    1214:	2501      	movs	r5, #1
    1216:	781a      	ldrb	r2, [r3, #0]
    1218:	2a00      	cmp	r2, #0
    121a:	d002      	beq.n	1222 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    121c:	3a01      	subs	r2, #1
    121e:	701a      	strb	r2, [r3, #0]
    1220:	1c2c      	adds	r4, r5, #0
    1222:	3306      	adds	r3, #6
    1224:	428b      	cmp	r3, r1
    1226:	d1f6      	bne.n	1216 <nwkRxDuplicateRejectionTimerHandler+0xe>
    1228:	2c00      	cmp	r4, #0
    122a:	d001      	beq.n	1230 <nwkRxDuplicateRejectionTimerHandler+0x28>
    122c:	4b02      	ldr	r3, [pc, #8]	; (1238 <nwkRxDuplicateRejectionTimerHandler+0x30>)
    122e:	4798      	blx	r3
    1230:	bd38      	pop	{r3, r4, r5, pc}
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	20000998 	.word	0x20000998
    1238:	00001e55 	.word	0x00001e55

0000123c <nwkRxInit>:
    123c:	b508      	push	{r3, lr}
    123e:	4a0a      	ldr	r2, [pc, #40]	; (1268 <nwkRxInit+0x2c>)
    1240:	1d13      	adds	r3, r2, #4
    1242:	3231      	adds	r2, #49	; 0x31
    1244:	32ff      	adds	r2, #255	; 0xff
    1246:	2100      	movs	r1, #0
    1248:	7019      	strb	r1, [r3, #0]
    124a:	3306      	adds	r3, #6
    124c:	4293      	cmp	r3, r2
    124e:	d1fb      	bne.n	1248 <nwkRxInit+0xc>
    1250:	4b06      	ldr	r3, [pc, #24]	; (126c <nwkRxInit+0x30>)
    1252:	2264      	movs	r2, #100	; 0x64
    1254:	609a      	str	r2, [r3, #8]
    1256:	2200      	movs	r2, #0
    1258:	731a      	strb	r2, [r3, #12]
    125a:	4a05      	ldr	r2, [pc, #20]	; (1270 <nwkRxInit+0x34>)
    125c:	611a      	str	r2, [r3, #16]
    125e:	2000      	movs	r0, #0
    1260:	4904      	ldr	r1, [pc, #16]	; (1274 <nwkRxInit+0x38>)
    1262:	4b05      	ldr	r3, [pc, #20]	; (1278 <nwkRxInit+0x3c>)
    1264:	4798      	blx	r3
    1266:	bd08      	pop	{r3, pc}
    1268:	20000998 	.word	0x20000998
    126c:	20000ac8 	.word	0x20000ac8
    1270:	00001209 	.word	0x00001209
    1274:	000011b1 	.word	0x000011b1
    1278:	00000729 	.word	0x00000729

0000127c <PHY_DataInd>:
    127c:	b510      	push	{r4, lr}
    127e:	6803      	ldr	r3, [r0, #0]
    1280:	785a      	ldrb	r2, [r3, #1]
    1282:	2a88      	cmp	r2, #136	; 0x88
    1284:	d11b      	bne.n	12be <PHY_DataInd+0x42>
    1286:	781b      	ldrb	r3, [r3, #0]
    1288:	3a68      	subs	r2, #104	; 0x68
    128a:	4393      	bics	r3, r2
    128c:	2b41      	cmp	r3, #65	; 0x41
    128e:	d116      	bne.n	12be <PHY_DataInd+0x42>
    1290:	7903      	ldrb	r3, [r0, #4]
    1292:	2b0f      	cmp	r3, #15
    1294:	d913      	bls.n	12be <PHY_DataInd+0x42>
    1296:	1c04      	adds	r4, r0, #0
    1298:	4b09      	ldr	r3, [pc, #36]	; (12c0 <PHY_DataInd+0x44>)
    129a:	4798      	blx	r3
    129c:	2800      	cmp	r0, #0
    129e:	d00e      	beq.n	12be <PHY_DataInd+0x42>
    12a0:	2320      	movs	r3, #32
    12a2:	7003      	strb	r3, [r0, #0]
    12a4:	7923      	ldrb	r3, [r4, #4]
    12a6:	7043      	strb	r3, [r0, #1]
    12a8:	7962      	ldrb	r2, [r4, #5]
    12aa:	2385      	movs	r3, #133	; 0x85
    12ac:	54c2      	strb	r2, [r0, r3]
    12ae:	79a2      	ldrb	r2, [r4, #6]
    12b0:	3301      	adds	r3, #1
    12b2:	54c2      	strb	r2, [r0, r3]
    12b4:	3002      	adds	r0, #2
    12b6:	7922      	ldrb	r2, [r4, #4]
    12b8:	6821      	ldr	r1, [r4, #0]
    12ba:	4b02      	ldr	r3, [pc, #8]	; (12c4 <PHY_DataInd+0x48>)
    12bc:	4798      	blx	r3
    12be:	bd10      	pop	{r4, pc}
    12c0:	000008f1 	.word	0x000008f1
    12c4:	00004c85 	.word	0x00004c85

000012c8 <nwkRxTaskHandler>:
    12c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ca:	b087      	sub	sp, #28
    12cc:	2400      	movs	r4, #0
    12ce:	4fd3      	ldr	r7, [pc, #844]	; (161c <nwkRxTaskHandler+0x354>)
    12d0:	e1c5      	b.n	165e <nwkRxTaskHandler+0x396>
    12d2:	7823      	ldrb	r3, [r4, #0]
    12d4:	2b22      	cmp	r3, #34	; 0x22
    12d6:	d100      	bne.n	12da <nwkRxTaskHandler+0x12>
    12d8:	e0d6      	b.n	1488 <nwkRxTaskHandler+0x1c0>
    12da:	b2da      	uxtb	r2, r3
    12dc:	2a22      	cmp	r2, #34	; 0x22
    12de:	d802      	bhi.n	12e6 <nwkRxTaskHandler+0x1e>
    12e0:	2b20      	cmp	r3, #32
    12e2:	d007      	beq.n	12f4 <nwkRxTaskHandler+0x2c>
    12e4:	e1bb      	b.n	165e <nwkRxTaskHandler+0x396>
    12e6:	2b23      	cmp	r3, #35	; 0x23
    12e8:	d100      	bne.n	12ec <nwkRxTaskHandler+0x24>
    12ea:	e192      	b.n	1612 <nwkRxTaskHandler+0x34a>
    12ec:	2b24      	cmp	r3, #36	; 0x24
    12ee:	d100      	bne.n	12f2 <nwkRxTaskHandler+0x2a>
    12f0:	e1b2      	b.n	1658 <nwkRxTaskHandler+0x390>
    12f2:	e1b4      	b.n	165e <nwkRxTaskHandler+0x396>
    12f4:	2324      	movs	r3, #36	; 0x24
    12f6:	7023      	strb	r3, [r4, #0]
    12f8:	7ae3      	ldrb	r3, [r4, #11]
    12fa:	220a      	movs	r2, #10
    12fc:	421a      	tst	r2, r3
    12fe:	d000      	beq.n	1302 <nwkRxTaskHandler+0x3a>
    1300:	e1ad      	b.n	165e <nwkRxTaskHandler+0x396>
    1302:	7961      	ldrb	r1, [r4, #5]
    1304:	79a2      	ldrb	r2, [r4, #6]
    1306:	0212      	lsls	r2, r2, #8
    1308:	430a      	orrs	r2, r1
    130a:	49c5      	ldr	r1, [pc, #788]	; (1620 <nwkRxTaskHandler+0x358>)
    130c:	428a      	cmp	r2, r1
    130e:	d10d      	bne.n	132c <nwkRxTaskHandler+0x64>
    1310:	7be2      	ldrb	r2, [r4, #15]
    1312:	7c23      	ldrb	r3, [r4, #16]
    1314:	021b      	lsls	r3, r3, #8
    1316:	4313      	orrs	r3, r2
    1318:	4ac2      	ldr	r2, [pc, #776]	; (1624 <nwkRxTaskHandler+0x35c>)
    131a:	8812      	ldrh	r2, [r2, #0]
    131c:	429a      	cmp	r2, r3
    131e:	d002      	beq.n	1326 <nwkRxTaskHandler+0x5e>
    1320:	428b      	cmp	r3, r1
    1322:	d000      	beq.n	1326 <nwkRxTaskHandler+0x5e>
    1324:	e19b      	b.n	165e <nwkRxTaskHandler+0x396>
    1326:	2322      	movs	r3, #34	; 0x22
    1328:	7023      	strb	r3, [r4, #0]
    132a:	e198      	b.n	165e <nwkRxTaskHandler+0x396>
    132c:	7be1      	ldrb	r1, [r4, #15]
    132e:	7c22      	ldrb	r2, [r4, #16]
    1330:	0212      	lsls	r2, r2, #8
    1332:	430a      	orrs	r2, r1
    1334:	49ba      	ldr	r1, [pc, #744]	; (1620 <nwkRxTaskHandler+0x358>)
    1336:	428a      	cmp	r2, r1
    1338:	d102      	bne.n	1340 <nwkRxTaskHandler+0x78>
    133a:	07db      	lsls	r3, r3, #31
    133c:	d500      	bpl.n	1340 <nwkRxTaskHandler+0x78>
    133e:	e18e      	b.n	165e <nwkRxTaskHandler+0x396>
    1340:	7b62      	ldrb	r2, [r4, #13]
    1342:	7ba3      	ldrb	r3, [r4, #14]
    1344:	021b      	lsls	r3, r3, #8
    1346:	49b7      	ldr	r1, [pc, #732]	; (1624 <nwkRxTaskHandler+0x35c>)
    1348:	8809      	ldrh	r1, [r1, #0]
    134a:	4313      	orrs	r3, r2
    134c:	4299      	cmp	r1, r3
    134e:	d100      	bne.n	1352 <nwkRxTaskHandler+0x8a>
    1350:	e185      	b.n	165e <nwkRxTaskHandler+0x396>
    1352:	1c20      	adds	r0, r4, #0
    1354:	4bb4      	ldr	r3, [pc, #720]	; (1628 <nwkRxTaskHandler+0x360>)
    1356:	4798      	blx	r3
    1358:	4bb4      	ldr	r3, [pc, #720]	; (162c <nwkRxTaskHandler+0x364>)
    135a:	2200      	movs	r2, #0
    135c:	2100      	movs	r1, #0
    135e:	9101      	str	r1, [sp, #4]
    1360:	1ca5      	adds	r5, r4, #2
    1362:	9200      	str	r2, [sp, #0]
    1364:	7919      	ldrb	r1, [r3, #4]
    1366:	2900      	cmp	r1, #0
    1368:	d050      	beq.n	140c <nwkRxTaskHandler+0x144>
    136a:	7aee      	ldrb	r6, [r5, #11]
    136c:	7b29      	ldrb	r1, [r5, #12]
    136e:	0209      	lsls	r1, r1, #8
    1370:	8818      	ldrh	r0, [r3, #0]
    1372:	430e      	orrs	r6, r1
    1374:	42b0      	cmp	r0, r6
    1376:	d14a      	bne.n	140e <nwkRxTaskHandler+0x146>
    1378:	7b20      	ldrb	r0, [r4, #12]
    137a:	1c11      	adds	r1, r2, #0
    137c:	0053      	lsls	r3, r2, #1
    137e:	4694      	mov	ip, r2
    1380:	4463      	add	r3, ip
    1382:	005b      	lsls	r3, r3, #1
    1384:	4aa9      	ldr	r2, [pc, #676]	; (162c <nwkRxTaskHandler+0x364>)
    1386:	18d3      	adds	r3, r2, r3
    1388:	789a      	ldrb	r2, [r3, #2]
    138a:	1a12      	subs	r2, r2, r0
    138c:	b2d2      	uxtb	r2, r2
    138e:	2a07      	cmp	r2, #7
    1390:	d827      	bhi.n	13e2 <nwkRxTaskHandler+0x11a>
    1392:	004b      	lsls	r3, r1, #1
    1394:	4463      	add	r3, ip
    1396:	005b      	lsls	r3, r3, #1
    1398:	48a4      	ldr	r0, [pc, #656]	; (162c <nwkRxTaskHandler+0x364>)
    139a:	18c3      	adds	r3, r0, r3
    139c:	78db      	ldrb	r3, [r3, #3]
    139e:	1c18      	adds	r0, r3, #0
    13a0:	4110      	asrs	r0, r2
    13a2:	07c1      	lsls	r1, r0, #31
    13a4:	d512      	bpl.n	13cc <nwkRxTaskHandler+0x104>
    13a6:	79e2      	ldrb	r2, [r4, #7]
    13a8:	7a23      	ldrb	r3, [r4, #8]
    13aa:	021b      	lsls	r3, r3, #8
    13ac:	499d      	ldr	r1, [pc, #628]	; (1624 <nwkRxTaskHandler+0x35c>)
    13ae:	8809      	ldrh	r1, [r1, #0]
    13b0:	4313      	orrs	r3, r2
    13b2:	4299      	cmp	r1, r3
    13b4:	d000      	beq.n	13b8 <nwkRxTaskHandler+0xf0>
    13b6:	e152      	b.n	165e <nwkRxTaskHandler+0x396>
    13b8:	7be3      	ldrb	r3, [r4, #15]
    13ba:	7c20      	ldrb	r0, [r4, #16]
    13bc:	0200      	lsls	r0, r0, #8
    13be:	4318      	orrs	r0, r3
    13c0:	7ae1      	ldrb	r1, [r4, #11]
    13c2:	0709      	lsls	r1, r1, #28
    13c4:	0fc9      	lsrs	r1, r1, #31
    13c6:	4b9a      	ldr	r3, [pc, #616]	; (1630 <nwkRxTaskHandler+0x368>)
    13c8:	4798      	blx	r3
    13ca:	e148      	b.n	165e <nwkRxTaskHandler+0x396>
    13cc:	9900      	ldr	r1, [sp, #0]
    13ce:	0048      	lsls	r0, r1, #1
    13d0:	1841      	adds	r1, r0, r1
    13d2:	0049      	lsls	r1, r1, #1
    13d4:	2001      	movs	r0, #1
    13d6:	4090      	lsls	r0, r2
    13d8:	4303      	orrs	r3, r0
    13da:	4a94      	ldr	r2, [pc, #592]	; (162c <nwkRxTaskHandler+0x364>)
    13dc:	1852      	adds	r2, r2, r1
    13de:	70d3      	strb	r3, [r2, #3]
    13e0:	e143      	b.n	166a <nwkRxTaskHandler+0x3a2>
    13e2:	4d92      	ldr	r5, [pc, #584]	; (162c <nwkRxTaskHandler+0x364>)
    13e4:	9900      	ldr	r1, [sp, #0]
    13e6:	004e      	lsls	r6, r1, #1
    13e8:	1873      	adds	r3, r6, r1
    13ea:	005b      	lsls	r3, r3, #1
    13ec:	18eb      	adds	r3, r5, r3
    13ee:	7098      	strb	r0, [r3, #2]
    13f0:	78d8      	ldrb	r0, [r3, #3]
    13f2:	4252      	negs	r2, r2
    13f4:	b2d2      	uxtb	r2, r2
    13f6:	4090      	lsls	r0, r2
    13f8:	1c02      	adds	r2, r0, #0
    13fa:	2001      	movs	r0, #1
    13fc:	4302      	orrs	r2, r0
    13fe:	70da      	strb	r2, [r3, #3]
    1400:	1871      	adds	r1, r6, r1
    1402:	0049      	lsls	r1, r1, #1
    1404:	186b      	adds	r3, r5, r1
    1406:	2215      	movs	r2, #21
    1408:	711a      	strb	r2, [r3, #4]
    140a:	e12e      	b.n	166a <nwkRxTaskHandler+0x3a2>
    140c:	9301      	str	r3, [sp, #4]
    140e:	3201      	adds	r2, #1
    1410:	3306      	adds	r3, #6
    1412:	2a32      	cmp	r2, #50	; 0x32
    1414:	d1a5      	bne.n	1362 <nwkRxTaskHandler+0x9a>
    1416:	9801      	ldr	r0, [sp, #4]
    1418:	2800      	cmp	r0, #0
    141a:	d100      	bne.n	141e <nwkRxTaskHandler+0x156>
    141c:	e11f      	b.n	165e <nwkRxTaskHandler+0x396>
    141e:	7b61      	ldrb	r1, [r4, #13]
    1420:	7ba2      	ldrb	r2, [r4, #14]
    1422:	0212      	lsls	r2, r2, #8
    1424:	430a      	orrs	r2, r1
    1426:	8002      	strh	r2, [r0, #0]
    1428:	7b23      	ldrb	r3, [r4, #12]
    142a:	7083      	strb	r3, [r0, #2]
    142c:	2301      	movs	r3, #1
    142e:	70c3      	strb	r3, [r0, #3]
    1430:	3314      	adds	r3, #20
    1432:	7103      	strb	r3, [r0, #4]
    1434:	487f      	ldr	r0, [pc, #508]	; (1634 <nwkRxTaskHandler+0x36c>)
    1436:	4b80      	ldr	r3, [pc, #512]	; (1638 <nwkRxTaskHandler+0x370>)
    1438:	4798      	blx	r3
    143a:	e116      	b.n	166a <nwkRxTaskHandler+0x3a2>
    143c:	4b79      	ldr	r3, [pc, #484]	; (1624 <nwkRxTaskHandler+0x35c>)
    143e:	8819      	ldrh	r1, [r3, #0]
    1440:	7be2      	ldrb	r2, [r4, #15]
    1442:	7c23      	ldrb	r3, [r4, #16]
    1444:	021b      	lsls	r3, r3, #8
    1446:	4313      	orrs	r3, r2
    1448:	4299      	cmp	r1, r3
    144a:	d010      	beq.n	146e <nwkRxTaskHandler+0x1a6>
    144c:	7ae2      	ldrb	r2, [r4, #11]
    144e:	0752      	lsls	r2, r2, #29
    1450:	d40a      	bmi.n	1468 <nwkRxTaskHandler+0x1a0>
    1452:	1c20      	adds	r0, r4, #0
    1454:	4b79      	ldr	r3, [pc, #484]	; (163c <nwkRxTaskHandler+0x374>)
    1456:	4798      	blx	r3
    1458:	4b72      	ldr	r3, [pc, #456]	; (1624 <nwkRxTaskHandler+0x35c>)
    145a:	8819      	ldrh	r1, [r3, #0]
    145c:	7be2      	ldrb	r2, [r4, #15]
    145e:	7c23      	ldrb	r3, [r4, #16]
    1460:	021b      	lsls	r3, r3, #8
    1462:	4313      	orrs	r3, r2
    1464:	4299      	cmp	r1, r3
    1466:	d002      	beq.n	146e <nwkRxTaskHandler+0x1a6>
    1468:	4a6d      	ldr	r2, [pc, #436]	; (1620 <nwkRxTaskHandler+0x358>)
    146a:	4293      	cmp	r3, r2
    146c:	d102      	bne.n	1474 <nwkRxTaskHandler+0x1ac>
    146e:	2322      	movs	r3, #34	; 0x22
    1470:	7023      	strb	r3, [r4, #0]
    1472:	e0f4      	b.n	165e <nwkRxTaskHandler+0x396>
    1474:	79e2      	ldrb	r2, [r4, #7]
    1476:	7a23      	ldrb	r3, [r4, #8]
    1478:	021b      	lsls	r3, r3, #8
    147a:	4313      	orrs	r3, r2
    147c:	4299      	cmp	r1, r3
    147e:	d000      	beq.n	1482 <nwkRxTaskHandler+0x1ba>
    1480:	e0ed      	b.n	165e <nwkRxTaskHandler+0x396>
    1482:	2323      	movs	r3, #35	; 0x23
    1484:	7023      	strb	r3, [r4, #0]
    1486:	e0ea      	b.n	165e <nwkRxTaskHandler+0x396>
    1488:	2300      	movs	r3, #0
    148a:	4a6d      	ldr	r2, [pc, #436]	; (1640 <nwkRxTaskHandler+0x378>)
    148c:	7013      	strb	r3, [r2, #0]
    148e:	7c60      	ldrb	r0, [r4, #17]
    1490:	0900      	lsrs	r0, r0, #4
    1492:	b2c3      	uxtb	r3, r0
    1494:	3302      	adds	r3, #2
    1496:	009b      	lsls	r3, r3, #2
    1498:	4a62      	ldr	r2, [pc, #392]	; (1624 <nwkRxTaskHandler+0x35c>)
    149a:	589d      	ldr	r5, [r3, r2]
    149c:	2d00      	cmp	r5, #0
    149e:	d05a      	beq.n	1556 <nwkRxTaskHandler+0x28e>
    14a0:	1ca6      	adds	r6, r4, #2
    14a2:	7b63      	ldrb	r3, [r4, #13]
    14a4:	7ba2      	ldrb	r2, [r4, #14]
    14a6:	0212      	lsls	r2, r2, #8
    14a8:	431a      	orrs	r2, r3
    14aa:	4694      	mov	ip, r2
    14ac:	ab02      	add	r3, sp, #8
    14ae:	801a      	strh	r2, [r3, #0]
    14b0:	7be3      	ldrb	r3, [r4, #15]
    14b2:	7c21      	ldrb	r1, [r4, #16]
    14b4:	0209      	lsls	r1, r1, #8
    14b6:	4319      	orrs	r1, r3
    14b8:	ab02      	add	r3, sp, #8
    14ba:	8059      	strh	r1, [r3, #2]
    14bc:	7c63      	ldrb	r3, [r4, #17]
    14be:	071b      	lsls	r3, r3, #28
    14c0:	0f1b      	lsrs	r3, r3, #28
    14c2:	aa02      	add	r2, sp, #8
    14c4:	7113      	strb	r3, [r2, #4]
    14c6:	7150      	strb	r0, [r2, #5]
    14c8:	2381      	movs	r3, #129	; 0x81
    14ca:	5ce3      	ldrb	r3, [r4, r3]
    14cc:	2082      	movs	r0, #130	; 0x82
    14ce:	5c20      	ldrb	r0, [r4, r0]
    14d0:	0200      	lsls	r0, r0, #8
    14d2:	4318      	orrs	r0, r3
    14d4:	2383      	movs	r3, #131	; 0x83
    14d6:	5ce3      	ldrb	r3, [r4, r3]
    14d8:	041b      	lsls	r3, r3, #16
    14da:	4318      	orrs	r0, r3
    14dc:	2384      	movs	r3, #132	; 0x84
    14de:	5ce3      	ldrb	r3, [r4, r3]
    14e0:	061b      	lsls	r3, r3, #24
    14e2:	4303      	orrs	r3, r0
    14e4:	9304      	str	r3, [sp, #16]
    14e6:	1af3      	subs	r3, r6, r3
    14e8:	7860      	ldrb	r0, [r4, #1]
    14ea:	181b      	adds	r3, r3, r0
    14ec:	7313      	strb	r3, [r2, #12]
    14ee:	2385      	movs	r3, #133	; 0x85
    14f0:	5ce3      	ldrb	r3, [r4, r3]
    14f2:	7353      	strb	r3, [r2, #13]
    14f4:	2386      	movs	r3, #134	; 0x86
    14f6:	5ce3      	ldrb	r3, [r4, r3]
    14f8:	7393      	strb	r3, [r2, #14]
    14fa:	7ae3      	ldrb	r3, [r4, #11]
    14fc:	2003      	movs	r0, #3
    14fe:	4018      	ands	r0, r3
    1500:	1c06      	adds	r6, r0, #0
    1502:	0758      	lsls	r0, r3, #29
    1504:	0fc0      	lsrs	r0, r0, #31
    1506:	0140      	lsls	r0, r0, #5
    1508:	4330      	orrs	r0, r6
    150a:	071b      	lsls	r3, r3, #28
    150c:	0fdb      	lsrs	r3, r3, #31
    150e:	019b      	lsls	r3, r3, #6
    1510:	4318      	orrs	r0, r3
    1512:	4b4c      	ldr	r3, [pc, #304]	; (1644 <nwkRxTaskHandler+0x37c>)
    1514:	18cb      	adds	r3, r1, r3
    1516:	4259      	negs	r1, r3
    1518:	414b      	adcs	r3, r1
    151a:	009b      	lsls	r3, r3, #2
    151c:	4303      	orrs	r3, r0
    151e:	7a60      	ldrb	r0, [r4, #9]
    1520:	7aa1      	ldrb	r1, [r4, #10]
    1522:	0209      	lsls	r1, r1, #8
    1524:	4301      	orrs	r1, r0
    1526:	4662      	mov	r2, ip
    1528:	1a52      	subs	r2, r2, r1
    152a:	4251      	negs	r1, r2
    152c:	414a      	adcs	r2, r1
    152e:	00d2      	lsls	r2, r2, #3
    1530:	4313      	orrs	r3, r2
    1532:	aa02      	add	r2, sp, #8
    1534:	7193      	strb	r3, [r2, #6]
    1536:	7961      	ldrb	r1, [r4, #5]
    1538:	79a2      	ldrb	r2, [r4, #6]
    153a:	0212      	lsls	r2, r2, #8
    153c:	430a      	orrs	r2, r1
    153e:	4941      	ldr	r1, [pc, #260]	; (1644 <nwkRxTaskHandler+0x37c>)
    1540:	468c      	mov	ip, r1
    1542:	4462      	add	r2, ip
    1544:	4251      	negs	r1, r2
    1546:	414a      	adcs	r2, r1
    1548:	0112      	lsls	r2, r2, #4
    154a:	4313      	orrs	r3, r2
    154c:	aa02      	add	r2, sp, #8
    154e:	7193      	strb	r3, [r2, #6]
    1550:	1c10      	adds	r0, r2, #0
    1552:	47a8      	blx	r5
    1554:	e000      	b.n	1558 <nwkRxTaskHandler+0x290>
    1556:	2000      	movs	r0, #0
    1558:	7ae1      	ldrb	r1, [r4, #11]
    155a:	07cb      	lsls	r3, r1, #31
    155c:	17db      	asrs	r3, r3, #31
    155e:	4018      	ands	r0, r3
    1560:	79e2      	ldrb	r2, [r4, #7]
    1562:	7a23      	ldrb	r3, [r4, #8]
    1564:	021b      	lsls	r3, r3, #8
    1566:	4313      	orrs	r3, r2
    1568:	4a2d      	ldr	r2, [pc, #180]	; (1620 <nwkRxTaskHandler+0x358>)
    156a:	4293      	cmp	r3, r2
    156c:	d10a      	bne.n	1584 <nwkRxTaskHandler+0x2bc>
    156e:	7be2      	ldrb	r2, [r4, #15]
    1570:	7c23      	ldrb	r3, [r4, #16]
    1572:	021b      	lsls	r3, r3, #8
    1574:	4d2b      	ldr	r5, [pc, #172]	; (1624 <nwkRxTaskHandler+0x35c>)
    1576:	882d      	ldrh	r5, [r5, #0]
    1578:	4313      	orrs	r3, r2
    157a:	429d      	cmp	r5, r3
    157c:	d102      	bne.n	1584 <nwkRxTaskHandler+0x2bc>
    157e:	070b      	lsls	r3, r1, #28
    1580:	d400      	bmi.n	1584 <nwkRxTaskHandler+0x2bc>
    1582:	2001      	movs	r0, #1
    1584:	7962      	ldrb	r2, [r4, #5]
    1586:	79a3      	ldrb	r3, [r4, #6]
    1588:	021b      	lsls	r3, r3, #8
    158a:	4313      	orrs	r3, r2
    158c:	4a24      	ldr	r2, [pc, #144]	; (1620 <nwkRxTaskHandler+0x358>)
    158e:	4293      	cmp	r3, r2
    1590:	d03c      	beq.n	160c <nwkRxTaskHandler+0x344>
    1592:	4b24      	ldr	r3, [pc, #144]	; (1624 <nwkRxTaskHandler+0x35c>)
    1594:	881a      	ldrh	r2, [r3, #0]
    1596:	4b22      	ldr	r3, [pc, #136]	; (1620 <nwkRxTaskHandler+0x358>)
    1598:	429a      	cmp	r2, r3
    159a:	d037      	beq.n	160c <nwkRxTaskHandler+0x344>
    159c:	2800      	cmp	r0, #0
    159e:	d035      	beq.n	160c <nwkRxTaskHandler+0x344>
    15a0:	4b29      	ldr	r3, [pc, #164]	; (1648 <nwkRxTaskHandler+0x380>)
    15a2:	4798      	blx	r3
    15a4:	1e05      	subs	r5, r0, #0
    15a6:	d031      	beq.n	160c <nwkRxTaskHandler+0x344>
    15a8:	4b28      	ldr	r3, [pc, #160]	; (164c <nwkRxTaskHandler+0x384>)
    15aa:	4798      	blx	r3
    15ac:	786b      	ldrb	r3, [r5, #1]
    15ae:	3303      	adds	r3, #3
    15b0:	706b      	strb	r3, [r5, #1]
    15b2:	2200      	movs	r2, #0
    15b4:	2389      	movs	r3, #137	; 0x89
    15b6:	54ea      	strb	r2, [r5, r3]
    15b8:	1c2b      	adds	r3, r5, #0
    15ba:	3389      	adds	r3, #137	; 0x89
    15bc:	705a      	strb	r2, [r3, #1]
    15be:	709a      	strb	r2, [r3, #2]
    15c0:	70da      	strb	r2, [r3, #3]
    15c2:	7ae2      	ldrb	r2, [r4, #11]
    15c4:	2302      	movs	r3, #2
    15c6:	401a      	ands	r2, r3
    15c8:	7aeb      	ldrb	r3, [r5, #11]
    15ca:	2102      	movs	r1, #2
    15cc:	438b      	bics	r3, r1
    15ce:	4313      	orrs	r3, r2
    15d0:	72eb      	strb	r3, [r5, #11]
    15d2:	7b62      	ldrb	r2, [r4, #13]
    15d4:	7ba3      	ldrb	r3, [r4, #14]
    15d6:	73ea      	strb	r2, [r5, #15]
    15d8:	742b      	strb	r3, [r5, #16]
    15da:	2381      	movs	r3, #129	; 0x81
    15dc:	5ce8      	ldrb	r0, [r5, r3]
    15de:	3301      	adds	r3, #1
    15e0:	5cea      	ldrb	r2, [r5, r3]
    15e2:	0212      	lsls	r2, r2, #8
    15e4:	4302      	orrs	r2, r0
    15e6:	3301      	adds	r3, #1
    15e8:	5ceb      	ldrb	r3, [r5, r3]
    15ea:	041b      	lsls	r3, r3, #16
    15ec:	4313      	orrs	r3, r2
    15ee:	1c1a      	adds	r2, r3, #0
    15f0:	2384      	movs	r3, #132	; 0x84
    15f2:	5ceb      	ldrb	r3, [r5, r3]
    15f4:	061b      	lsls	r3, r3, #24
    15f6:	4313      	orrs	r3, r2
    15f8:	2200      	movs	r2, #0
    15fa:	701a      	strb	r2, [r3, #0]
    15fc:	4a10      	ldr	r2, [pc, #64]	; (1640 <nwkRxTaskHandler+0x378>)
    15fe:	7812      	ldrb	r2, [r2, #0]
    1600:	709a      	strb	r2, [r3, #2]
    1602:	7b22      	ldrb	r2, [r4, #12]
    1604:	705a      	strb	r2, [r3, #1]
    1606:	1c28      	adds	r0, r5, #0
    1608:	4b11      	ldr	r3, [pc, #68]	; (1650 <nwkRxTaskHandler+0x388>)
    160a:	4798      	blx	r3
    160c:	2324      	movs	r3, #36	; 0x24
    160e:	7023      	strb	r3, [r4, #0]
    1610:	e025      	b.n	165e <nwkRxTaskHandler+0x396>
    1612:	1c20      	adds	r0, r4, #0
    1614:	4b0f      	ldr	r3, [pc, #60]	; (1654 <nwkRxTaskHandler+0x38c>)
    1616:	4798      	blx	r3
    1618:	e021      	b.n	165e <nwkRxTaskHandler+0x396>
    161a:	46c0      	nop			; (mov r8, r8)
    161c:	00000975 	.word	0x00000975
    1620:	0000ffff 	.word	0x0000ffff
    1624:	20000c38 	.word	0x20000c38
    1628:	00000b19 	.word	0x00000b19
    162c:	20000998 	.word	0x20000998
    1630:	00000b01 	.word	0x00000b01
    1634:	20000ac8 	.word	0x20000ac8
    1638:	00001e55 	.word	0x00001e55
    163c:	0000181d 	.word	0x0000181d
    1640:	20000ac4 	.word	0x20000ac4
    1644:	ffff0001 	.word	0xffff0001
    1648:	000008f1 	.word	0x000008f1
    164c:	000009b9 	.word	0x000009b9
    1650:	0000176d 	.word	0x0000176d
    1654:	00000c09 	.word	0x00000c09
    1658:	1c20      	adds	r0, r4, #0
    165a:	4b09      	ldr	r3, [pc, #36]	; (1680 <nwkRxTaskHandler+0x3b8>)
    165c:	4798      	blx	r3
    165e:	1c20      	adds	r0, r4, #0
    1660:	47b8      	blx	r7
    1662:	1e04      	subs	r4, r0, #0
    1664:	d000      	beq.n	1668 <nwkRxTaskHandler+0x3a0>
    1666:	e634      	b.n	12d2 <nwkRxTaskHandler+0xa>
    1668:	e008      	b.n	167c <nwkRxTaskHandler+0x3b4>
    166a:	79e2      	ldrb	r2, [r4, #7]
    166c:	7a23      	ldrb	r3, [r4, #8]
    166e:	021b      	lsls	r3, r3, #8
    1670:	4313      	orrs	r3, r2
    1672:	4a04      	ldr	r2, [pc, #16]	; (1684 <nwkRxTaskHandler+0x3bc>)
    1674:	4293      	cmp	r3, r2
    1676:	d000      	beq.n	167a <nwkRxTaskHandler+0x3b2>
    1678:	e6ee      	b.n	1458 <nwkRxTaskHandler+0x190>
    167a:	e6df      	b.n	143c <nwkRxTaskHandler+0x174>
    167c:	b007      	add	sp, #28
    167e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1680:	00000961 	.word	0x00000961
    1684:	0000ffff 	.word	0x0000ffff

00001688 <nwkTxDelayTimerHandler>:
    1688:	b5f0      	push	{r4, r5, r6, r7, lr}
    168a:	b083      	sub	sp, #12
    168c:	9001      	str	r0, [sp, #4]
    168e:	2400      	movs	r4, #0
    1690:	2000      	movs	r0, #0
    1692:	4d10      	ldr	r5, [pc, #64]	; (16d4 <nwkTxDelayTimerHandler+0x4c>)
    1694:	2686      	movs	r6, #134	; 0x86
    1696:	2787      	movs	r7, #135	; 0x87
    1698:	e012      	b.n	16c0 <nwkTxDelayTimerHandler+0x38>
    169a:	7803      	ldrb	r3, [r0, #0]
    169c:	2b11      	cmp	r3, #17
    169e:	d10f      	bne.n	16c0 <nwkTxDelayTimerHandler+0x38>
    16a0:	5d82      	ldrb	r2, [r0, r6]
    16a2:	5dc3      	ldrb	r3, [r0, r7]
    16a4:	021b      	lsls	r3, r3, #8
    16a6:	4313      	orrs	r3, r2
    16a8:	3b01      	subs	r3, #1
    16aa:	b29b      	uxth	r3, r3
    16ac:	5583      	strb	r3, [r0, r6]
    16ae:	0a19      	lsrs	r1, r3, #8
    16b0:	1c02      	adds	r2, r0, #0
    16b2:	3286      	adds	r2, #134	; 0x86
    16b4:	7051      	strb	r1, [r2, #1]
    16b6:	2401      	movs	r4, #1
    16b8:	2b00      	cmp	r3, #0
    16ba:	d101      	bne.n	16c0 <nwkTxDelayTimerHandler+0x38>
    16bc:	3313      	adds	r3, #19
    16be:	7003      	strb	r3, [r0, #0]
    16c0:	47a8      	blx	r5
    16c2:	2800      	cmp	r0, #0
    16c4:	d1e9      	bne.n	169a <nwkTxDelayTimerHandler+0x12>
    16c6:	2c00      	cmp	r4, #0
    16c8:	d002      	beq.n	16d0 <nwkTxDelayTimerHandler+0x48>
    16ca:	9801      	ldr	r0, [sp, #4]
    16cc:	4b02      	ldr	r3, [pc, #8]	; (16d8 <nwkTxDelayTimerHandler+0x50>)
    16ce:	4798      	blx	r3
    16d0:	b003      	add	sp, #12
    16d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16d4:	00000975 	.word	0x00000975
    16d8:	00001e55 	.word	0x00001e55

000016dc <nwkTxAckWaitTimerHandler>:
    16dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16de:	b083      	sub	sp, #12
    16e0:	9001      	str	r0, [sp, #4]
    16e2:	2400      	movs	r4, #0
    16e4:	2000      	movs	r0, #0
    16e6:	4d12      	ldr	r5, [pc, #72]	; (1730 <nwkTxAckWaitTimerHandler+0x54>)
    16e8:	2686      	movs	r6, #134	; 0x86
    16ea:	2787      	movs	r7, #135	; 0x87
    16ec:	e015      	b.n	171a <nwkTxAckWaitTimerHandler+0x3e>
    16ee:	7803      	ldrb	r3, [r0, #0]
    16f0:	2b16      	cmp	r3, #22
    16f2:	d112      	bne.n	171a <nwkTxAckWaitTimerHandler+0x3e>
    16f4:	5d82      	ldrb	r2, [r0, r6]
    16f6:	5dc3      	ldrb	r3, [r0, r7]
    16f8:	021b      	lsls	r3, r3, #8
    16fa:	4313      	orrs	r3, r2
    16fc:	3b01      	subs	r3, #1
    16fe:	b29b      	uxth	r3, r3
    1700:	5583      	strb	r3, [r0, r6]
    1702:	0a19      	lsrs	r1, r3, #8
    1704:	1c02      	adds	r2, r0, #0
    1706:	3286      	adds	r2, #134	; 0x86
    1708:	7051      	strb	r1, [r2, #1]
    170a:	2401      	movs	r4, #1
    170c:	2b00      	cmp	r3, #0
    170e:	d104      	bne.n	171a <nwkTxAckWaitTimerHandler+0x3e>
    1710:	3317      	adds	r3, #23
    1712:	7003      	strb	r3, [r0, #0]
    1714:	2210      	movs	r2, #16
    1716:	336e      	adds	r3, #110	; 0x6e
    1718:	54c2      	strb	r2, [r0, r3]
    171a:	47a8      	blx	r5
    171c:	2800      	cmp	r0, #0
    171e:	d1e6      	bne.n	16ee <nwkTxAckWaitTimerHandler+0x12>
    1720:	2c00      	cmp	r4, #0
    1722:	d002      	beq.n	172a <nwkTxAckWaitTimerHandler+0x4e>
    1724:	9801      	ldr	r0, [sp, #4]
    1726:	4b03      	ldr	r3, [pc, #12]	; (1734 <nwkTxAckWaitTimerHandler+0x58>)
    1728:	4798      	blx	r3
    172a:	b003      	add	sp, #12
    172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    172e:	46c0      	nop			; (mov r8, r8)
    1730:	00000975 	.word	0x00000975
    1734:	00001e55 	.word	0x00001e55

00001738 <nwkTxInit>:
    1738:	2200      	movs	r2, #0
    173a:	4b07      	ldr	r3, [pc, #28]	; (1758 <nwkTxInit+0x20>)
    173c:	601a      	str	r2, [r3, #0]
    173e:	4b07      	ldr	r3, [pc, #28]	; (175c <nwkTxInit+0x24>)
    1740:	2132      	movs	r1, #50	; 0x32
    1742:	6099      	str	r1, [r3, #8]
    1744:	731a      	strb	r2, [r3, #12]
    1746:	4906      	ldr	r1, [pc, #24]	; (1760 <nwkTxInit+0x28>)
    1748:	6119      	str	r1, [r3, #16]
    174a:	4b06      	ldr	r3, [pc, #24]	; (1764 <nwkTxInit+0x2c>)
    174c:	210a      	movs	r1, #10
    174e:	6099      	str	r1, [r3, #8]
    1750:	731a      	strb	r2, [r3, #12]
    1752:	4a05      	ldr	r2, [pc, #20]	; (1768 <nwkTxInit+0x30>)
    1754:	611a      	str	r2, [r3, #16]
    1756:	4770      	bx	lr
    1758:	20000af0 	.word	0x20000af0
    175c:	20000adc 	.word	0x20000adc
    1760:	000016dd 	.word	0x000016dd
    1764:	20000af4 	.word	0x20000af4
    1768:	00001689 	.word	0x00001689

0000176c <nwkTxFrame>:
    176c:	b510      	push	{r4, lr}
    176e:	1c04      	adds	r4, r0, #0
    1770:	2388      	movs	r3, #136	; 0x88
    1772:	5cc3      	ldrb	r3, [r0, r3]
    1774:	079a      	lsls	r2, r3, #30
    1776:	d502      	bpl.n	177e <nwkTxFrame+0x12>
    1778:	2212      	movs	r2, #18
    177a:	7002      	strb	r2, [r0, #0]
    177c:	e001      	b.n	1782 <nwkTxFrame+0x16>
    177e:	2212      	movs	r2, #18
    1780:	7002      	strb	r2, [r0, #0]
    1782:	2100      	movs	r1, #0
    1784:	2285      	movs	r2, #133	; 0x85
    1786:	54a1      	strb	r1, [r4, r2]
    1788:	07da      	lsls	r2, r3, #31
    178a:	d504      	bpl.n	1796 <nwkTxFrame+0x2a>
    178c:	2201      	movs	r2, #1
    178e:	4252      	negs	r2, r2
    1790:	7162      	strb	r2, [r4, #5]
    1792:	71a2      	strb	r2, [r4, #6]
    1794:	e004      	b.n	17a0 <nwkTxFrame+0x34>
    1796:	4a1d      	ldr	r2, [pc, #116]	; (180c <nwkTxFrame+0xa0>)
    1798:	7891      	ldrb	r1, [r2, #2]
    179a:	7161      	strb	r1, [r4, #5]
    179c:	78d2      	ldrb	r2, [r2, #3]
    179e:	71a2      	strb	r2, [r4, #6]
    17a0:	2205      	movs	r2, #5
    17a2:	421a      	tst	r2, r3
    17a4:	d103      	bne.n	17ae <nwkTxFrame+0x42>
    17a6:	1c20      	adds	r0, r4, #0
    17a8:	4b19      	ldr	r3, [pc, #100]	; (1810 <nwkTxFrame+0xa4>)
    17aa:	4798      	blx	r3
    17ac:	e003      	b.n	17b6 <nwkTxFrame+0x4a>
    17ae:	7be2      	ldrb	r2, [r4, #15]
    17b0:	7c23      	ldrb	r3, [r4, #16]
    17b2:	71e2      	strb	r2, [r4, #7]
    17b4:	7223      	strb	r3, [r4, #8]
    17b6:	4915      	ldr	r1, [pc, #84]	; (180c <nwkTxFrame+0xa0>)
    17b8:	780b      	ldrb	r3, [r1, #0]
    17ba:	7263      	strb	r3, [r4, #9]
    17bc:	784b      	ldrb	r3, [r1, #1]
    17be:	72a3      	strb	r3, [r4, #10]
    17c0:	794b      	ldrb	r3, [r1, #5]
    17c2:	3301      	adds	r3, #1
    17c4:	b2db      	uxtb	r3, r3
    17c6:	714b      	strb	r3, [r1, #5]
    17c8:	7123      	strb	r3, [r4, #4]
    17ca:	79e1      	ldrb	r1, [r4, #7]
    17cc:	7a23      	ldrb	r3, [r4, #8]
    17ce:	021b      	lsls	r3, r3, #8
    17d0:	430b      	orrs	r3, r1
    17d2:	4a10      	ldr	r2, [pc, #64]	; (1814 <nwkTxFrame+0xa8>)
    17d4:	4293      	cmp	r3, r2
    17d6:	d10e      	bne.n	17f6 <nwkTxFrame+0x8a>
    17d8:	2341      	movs	r3, #65	; 0x41
    17da:	70a3      	strb	r3, [r4, #2]
    17dc:	3bb9      	subs	r3, #185	; 0xb9
    17de:	70e3      	strb	r3, [r4, #3]
    17e0:	4b0d      	ldr	r3, [pc, #52]	; (1818 <nwkTxFrame+0xac>)
    17e2:	4798      	blx	r3
    17e4:	2307      	movs	r3, #7
    17e6:	4018      	ands	r0, r3
    17e8:	3001      	adds	r0, #1
    17ea:	337f      	adds	r3, #127	; 0x7f
    17ec:	54e0      	strb	r0, [r4, r3]
    17ee:	3486      	adds	r4, #134	; 0x86
    17f0:	2300      	movs	r3, #0
    17f2:	7063      	strb	r3, [r4, #1]
    17f4:	e009      	b.n	180a <nwkTxFrame+0x9e>
    17f6:	2361      	movs	r3, #97	; 0x61
    17f8:	70a3      	strb	r3, [r4, #2]
    17fa:	3bd9      	subs	r3, #217	; 0xd9
    17fc:	70e3      	strb	r3, [r4, #3]
    17fe:	2200      	movs	r2, #0
    1800:	33fe      	adds	r3, #254	; 0xfe
    1802:	54e2      	strb	r2, [r4, r3]
    1804:	3486      	adds	r4, #134	; 0x86
    1806:	2300      	movs	r3, #0
    1808:	7063      	strb	r3, [r4, #1]
    180a:	bd10      	pop	{r4, pc}
    180c:	20000c38 	.word	0x20000c38
    1810:	00000bb1 	.word	0x00000bb1
    1814:	0000ffff 	.word	0x0000ffff
    1818:	00004db5 	.word	0x00004db5

0000181c <nwkTxBroadcastFrame>:
    181c:	b538      	push	{r3, r4, r5, lr}
    181e:	1c05      	adds	r5, r0, #0
    1820:	4b1c      	ldr	r3, [pc, #112]	; (1894 <nwkTxBroadcastFrame+0x78>)
    1822:	4798      	blx	r3
    1824:	1e04      	subs	r4, r0, #0
    1826:	d033      	beq.n	1890 <nwkTxBroadcastFrame+0x74>
    1828:	2312      	movs	r3, #18
    182a:	7003      	strb	r3, [r0, #0]
    182c:	786b      	ldrb	r3, [r5, #1]
    182e:	7043      	strb	r3, [r0, #1]
    1830:	2200      	movs	r2, #0
    1832:	2385      	movs	r3, #133	; 0x85
    1834:	54c2      	strb	r2, [r0, r3]
    1836:	4b18      	ldr	r3, [pc, #96]	; (1898 <nwkTxBroadcastFrame+0x7c>)
    1838:	4798      	blx	r3
    183a:	2307      	movs	r3, #7
    183c:	4018      	ands	r0, r3
    183e:	3001      	adds	r0, #1
    1840:	337f      	adds	r3, #127	; 0x7f
    1842:	54e0      	strb	r0, [r4, r3]
    1844:	0c00      	lsrs	r0, r0, #16
    1846:	1c23      	adds	r3, r4, #0
    1848:	3386      	adds	r3, #134	; 0x86
    184a:	7058      	strb	r0, [r3, #1]
    184c:	2200      	movs	r2, #0
    184e:	2389      	movs	r3, #137	; 0x89
    1850:	54e2      	strb	r2, [r4, r3]
    1852:	1c23      	adds	r3, r4, #0
    1854:	3389      	adds	r3, #137	; 0x89
    1856:	705a      	strb	r2, [r3, #1]
    1858:	709a      	strb	r2, [r3, #2]
    185a:	70da      	strb	r2, [r3, #3]
    185c:	1ca0      	adds	r0, r4, #2
    185e:	786a      	ldrb	r2, [r5, #1]
    1860:	1ca9      	adds	r1, r5, #2
    1862:	4b0e      	ldr	r3, [pc, #56]	; (189c <nwkTxBroadcastFrame+0x80>)
    1864:	4798      	blx	r3
    1866:	2341      	movs	r3, #65	; 0x41
    1868:	70a3      	strb	r3, [r4, #2]
    186a:	3bb9      	subs	r3, #185	; 0xb9
    186c:	70e3      	strb	r3, [r4, #3]
    186e:	3377      	adds	r3, #119	; 0x77
    1870:	71e3      	strb	r3, [r4, #7]
    1872:	7223      	strb	r3, [r4, #8]
    1874:	796a      	ldrb	r2, [r5, #5]
    1876:	79ab      	ldrb	r3, [r5, #6]
    1878:	7162      	strb	r2, [r4, #5]
    187a:	71a3      	strb	r3, [r4, #6]
    187c:	4a08      	ldr	r2, [pc, #32]	; (18a0 <nwkTxBroadcastFrame+0x84>)
    187e:	7813      	ldrb	r3, [r2, #0]
    1880:	7263      	strb	r3, [r4, #9]
    1882:	7853      	ldrb	r3, [r2, #1]
    1884:	72a3      	strb	r3, [r4, #10]
    1886:	7953      	ldrb	r3, [r2, #5]
    1888:	3301      	adds	r3, #1
    188a:	b2db      	uxtb	r3, r3
    188c:	7153      	strb	r3, [r2, #5]
    188e:	7123      	strb	r3, [r4, #4]
    1890:	bd38      	pop	{r3, r4, r5, pc}
    1892:	46c0      	nop			; (mov r8, r8)
    1894:	000008f1 	.word	0x000008f1
    1898:	00004db5 	.word	0x00004db5
    189c:	00004c85 	.word	0x00004c85
    18a0:	20000c38 	.word	0x20000c38

000018a4 <nwkTxAckReceived>:
    18a4:	b538      	push	{r3, r4, r5, lr}
    18a6:	6885      	ldr	r5, [r0, #8]
    18a8:	7b03      	ldrb	r3, [r0, #12]
    18aa:	2000      	movs	r0, #0
    18ac:	2b03      	cmp	r3, #3
    18ae:	d112      	bne.n	18d6 <nwkTxAckReceived+0x32>
    18b0:	4c09      	ldr	r4, [pc, #36]	; (18d8 <nwkTxAckReceived+0x34>)
    18b2:	e00d      	b.n	18d0 <nwkTxAckReceived+0x2c>
    18b4:	7803      	ldrb	r3, [r0, #0]
    18b6:	2b16      	cmp	r3, #22
    18b8:	d10a      	bne.n	18d0 <nwkTxAckReceived+0x2c>
    18ba:	7b02      	ldrb	r2, [r0, #12]
    18bc:	786b      	ldrb	r3, [r5, #1]
    18be:	429a      	cmp	r2, r3
    18c0:	d106      	bne.n	18d0 <nwkTxAckReceived+0x2c>
    18c2:	2317      	movs	r3, #23
    18c4:	7003      	strb	r3, [r0, #0]
    18c6:	78aa      	ldrb	r2, [r5, #2]
    18c8:	3371      	adds	r3, #113	; 0x71
    18ca:	54c2      	strb	r2, [r0, r3]
    18cc:	2001      	movs	r0, #1
    18ce:	e002      	b.n	18d6 <nwkTxAckReceived+0x32>
    18d0:	47a0      	blx	r4
    18d2:	2800      	cmp	r0, #0
    18d4:	d1ee      	bne.n	18b4 <nwkTxAckReceived+0x10>
    18d6:	bd38      	pop	{r3, r4, r5, pc}
    18d8:	00000975 	.word	0x00000975

000018dc <nwkTxConfirm>:
    18dc:	2317      	movs	r3, #23
    18de:	7003      	strb	r3, [r0, #0]
    18e0:	336e      	adds	r3, #110	; 0x6e
    18e2:	54c1      	strb	r1, [r0, r3]
    18e4:	4770      	bx	lr
    18e6:	46c0      	nop			; (mov r8, r8)

000018e8 <PHY_DataConf>:
    18e8:	4b0d      	ldr	r3, [pc, #52]	; (1920 <PHY_DataConf+0x38>)
    18ea:	681b      	ldr	r3, [r3, #0]
    18ec:	2801      	cmp	r0, #1
    18ee:	d005      	beq.n	18fc <PHY_DataConf+0x14>
    18f0:	2800      	cmp	r0, #0
    18f2:	d007      	beq.n	1904 <PHY_DataConf+0x1c>
    18f4:	2221      	movs	r2, #33	; 0x21
    18f6:	2802      	cmp	r0, #2
    18f8:	d005      	beq.n	1906 <PHY_DataConf+0x1e>
    18fa:	e001      	b.n	1900 <PHY_DataConf+0x18>
    18fc:	2220      	movs	r2, #32
    18fe:	e002      	b.n	1906 <PHY_DataConf+0x1e>
    1900:	2201      	movs	r2, #1
    1902:	e000      	b.n	1906 <PHY_DataConf+0x1e>
    1904:	2200      	movs	r2, #0
    1906:	2185      	movs	r1, #133	; 0x85
    1908:	545a      	strb	r2, [r3, r1]
    190a:	2215      	movs	r2, #21
    190c:	701a      	strb	r2, [r3, #0]
    190e:	2200      	movs	r2, #0
    1910:	4b03      	ldr	r3, [pc, #12]	; (1920 <PHY_DataConf+0x38>)
    1912:	601a      	str	r2, [r3, #0]
    1914:	4903      	ldr	r1, [pc, #12]	; (1924 <PHY_DataConf+0x3c>)
    1916:	3248      	adds	r2, #72	; 0x48
    1918:	5a8b      	ldrh	r3, [r1, r2]
    191a:	3b01      	subs	r3, #1
    191c:	528b      	strh	r3, [r1, r2]
    191e:	4770      	bx	lr
    1920:	20000af0 	.word	0x20000af0
    1924:	20000c38 	.word	0x20000c38

00001928 <nwkTxTaskHandler>:
    1928:	b570      	push	{r4, r5, r6, lr}
    192a:	2400      	movs	r4, #0
    192c:	4d38      	ldr	r5, [pc, #224]	; (1a10 <nwkTxTaskHandler+0xe8>)
    192e:	4e39      	ldr	r6, [pc, #228]	; (1a14 <nwkTxTaskHandler+0xec>)
    1930:	e068      	b.n	1a04 <nwkTxTaskHandler+0xdc>
    1932:	7823      	ldrb	r3, [r4, #0]
    1934:	2b13      	cmp	r3, #19
    1936:	d01a      	beq.n	196e <nwkTxTaskHandler+0x46>
    1938:	b2da      	uxtb	r2, r3
    193a:	2a13      	cmp	r2, #19
    193c:	d802      	bhi.n	1944 <nwkTxTaskHandler+0x1c>
    193e:	2b12      	cmp	r3, #18
    1940:	d005      	beq.n	194e <nwkTxTaskHandler+0x26>
    1942:	e05f      	b.n	1a04 <nwkTxTaskHandler+0xdc>
    1944:	2b15      	cmp	r3, #21
    1946:	d022      	beq.n	198e <nwkTxTaskHandler+0x66>
    1948:	2b17      	cmp	r3, #23
    194a:	d042      	beq.n	19d2 <nwkTxTaskHandler+0xaa>
    194c:	e05a      	b.n	1a04 <nwkTxTaskHandler+0xdc>
    194e:	2386      	movs	r3, #134	; 0x86
    1950:	5ce2      	ldrb	r2, [r4, r3]
    1952:	3301      	adds	r3, #1
    1954:	5ce3      	ldrb	r3, [r4, r3]
    1956:	021b      	lsls	r3, r3, #8
    1958:	4313      	orrs	r3, r2
    195a:	d005      	beq.n	1968 <nwkTxTaskHandler+0x40>
    195c:	2311      	movs	r3, #17
    195e:	7023      	strb	r3, [r4, #0]
    1960:	482d      	ldr	r0, [pc, #180]	; (1a18 <nwkTxTaskHandler+0xf0>)
    1962:	4b2e      	ldr	r3, [pc, #184]	; (1a1c <nwkTxTaskHandler+0xf4>)
    1964:	4798      	blx	r3
    1966:	e04d      	b.n	1a04 <nwkTxTaskHandler+0xdc>
    1968:	2313      	movs	r3, #19
    196a:	7023      	strb	r3, [r4, #0]
    196c:	e04a      	b.n	1a04 <nwkTxTaskHandler+0xdc>
    196e:	6833      	ldr	r3, [r6, #0]
    1970:	2b00      	cmp	r3, #0
    1972:	d147      	bne.n	1a04 <nwkTxTaskHandler+0xdc>
    1974:	4b27      	ldr	r3, [pc, #156]	; (1a14 <nwkTxTaskHandler+0xec>)
    1976:	601c      	str	r4, [r3, #0]
    1978:	2314      	movs	r3, #20
    197a:	7023      	strb	r3, [r4, #0]
    197c:	1c60      	adds	r0, r4, #1
    197e:	4b28      	ldr	r3, [pc, #160]	; (1a20 <nwkTxTaskHandler+0xf8>)
    1980:	4798      	blx	r3
    1982:	4928      	ldr	r1, [pc, #160]	; (1a24 <nwkTxTaskHandler+0xfc>)
    1984:	2248      	movs	r2, #72	; 0x48
    1986:	5a8b      	ldrh	r3, [r1, r2]
    1988:	3301      	adds	r3, #1
    198a:	528b      	strh	r3, [r1, r2]
    198c:	e03a      	b.n	1a04 <nwkTxTaskHandler+0xdc>
    198e:	2385      	movs	r3, #133	; 0x85
    1990:	5ce3      	ldrb	r3, [r4, r3]
    1992:	2b00      	cmp	r3, #0
    1994:	d11a      	bne.n	19cc <nwkTxTaskHandler+0xa4>
    1996:	7b62      	ldrb	r2, [r4, #13]
    1998:	7ba3      	ldrb	r3, [r4, #14]
    199a:	021b      	lsls	r3, r3, #8
    199c:	4921      	ldr	r1, [pc, #132]	; (1a24 <nwkTxTaskHandler+0xfc>)
    199e:	8809      	ldrh	r1, [r1, #0]
    19a0:	4313      	orrs	r3, r2
    19a2:	4299      	cmp	r1, r3
    19a4:	d10f      	bne.n	19c6 <nwkTxTaskHandler+0x9e>
    19a6:	7ae3      	ldrb	r3, [r4, #11]
    19a8:	07db      	lsls	r3, r3, #31
    19aa:	d50c      	bpl.n	19c6 <nwkTxTaskHandler+0x9e>
    19ac:	2316      	movs	r3, #22
    19ae:	7023      	strb	r3, [r4, #0]
    19b0:	2215      	movs	r2, #21
    19b2:	3370      	adds	r3, #112	; 0x70
    19b4:	54e2      	strb	r2, [r4, r3]
    19b6:	2200      	movs	r2, #0
    19b8:	1c23      	adds	r3, r4, #0
    19ba:	3386      	adds	r3, #134	; 0x86
    19bc:	705a      	strb	r2, [r3, #1]
    19be:	481a      	ldr	r0, [pc, #104]	; (1a28 <nwkTxTaskHandler+0x100>)
    19c0:	4b16      	ldr	r3, [pc, #88]	; (1a1c <nwkTxTaskHandler+0xf4>)
    19c2:	4798      	blx	r3
    19c4:	e01e      	b.n	1a04 <nwkTxTaskHandler+0xdc>
    19c6:	2317      	movs	r3, #23
    19c8:	7023      	strb	r3, [r4, #0]
    19ca:	e01b      	b.n	1a04 <nwkTxTaskHandler+0xdc>
    19cc:	2317      	movs	r3, #23
    19ce:	7023      	strb	r3, [r4, #0]
    19d0:	e018      	b.n	1a04 <nwkTxTaskHandler+0xdc>
    19d2:	1c20      	adds	r0, r4, #0
    19d4:	4b15      	ldr	r3, [pc, #84]	; (1a2c <nwkTxTaskHandler+0x104>)
    19d6:	4798      	blx	r3
    19d8:	2389      	movs	r3, #137	; 0x89
    19da:	5ce0      	ldrb	r0, [r4, r3]
    19dc:	3301      	adds	r3, #1
    19de:	5ce2      	ldrb	r2, [r4, r3]
    19e0:	0212      	lsls	r2, r2, #8
    19e2:	4302      	orrs	r2, r0
    19e4:	3301      	adds	r3, #1
    19e6:	5ce3      	ldrb	r3, [r4, r3]
    19e8:	041b      	lsls	r3, r3, #16
    19ea:	4313      	orrs	r3, r2
    19ec:	1c1a      	adds	r2, r3, #0
    19ee:	238c      	movs	r3, #140	; 0x8c
    19f0:	5ce3      	ldrb	r3, [r4, r3]
    19f2:	061b      	lsls	r3, r3, #24
    19f4:	4313      	orrs	r3, r2
    19f6:	d103      	bne.n	1a00 <nwkTxTaskHandler+0xd8>
    19f8:	1c20      	adds	r0, r4, #0
    19fa:	4b0d      	ldr	r3, [pc, #52]	; (1a30 <nwkTxTaskHandler+0x108>)
    19fc:	4798      	blx	r3
    19fe:	e001      	b.n	1a04 <nwkTxTaskHandler+0xdc>
    1a00:	1c20      	adds	r0, r4, #0
    1a02:	4798      	blx	r3
    1a04:	1c20      	adds	r0, r4, #0
    1a06:	47a8      	blx	r5
    1a08:	1e04      	subs	r4, r0, #0
    1a0a:	d192      	bne.n	1932 <nwkTxTaskHandler+0xa>
    1a0c:	bd70      	pop	{r4, r5, r6, pc}
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	00000975 	.word	0x00000975
    1a14:	20000af0 	.word	0x20000af0
    1a18:	20000af4 	.word	0x20000af4
    1a1c:	00001e55 	.word	0x00001e55
    1a20:	00001c01 	.word	0x00001c01
    1a24:	20000c38 	.word	0x20000c38
    1a28:	20000adc 	.word	0x20000adc
    1a2c:	00000b1d 	.word	0x00000b1d
    1a30:	00000961 	.word	0x00000961

00001a34 <phySetChannel>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    1a34:	b538      	push	{r3, r4, r5, lr}
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1a36:	200c      	movs	r0, #12
    1a38:	4b13      	ldr	r3, [pc, #76]	; (1a88 <phySetChannel+0x54>)
    1a3a:	4798      	blx	r3
*****************************************************************************/
static void phySetChannel(void)
{
	uint8_t reg;

	reg = phyReadRegister(TRX_CTRL_2_REG) & ~0x3f;
    1a3c:	233f      	movs	r3, #63	; 0x3f
    1a3e:	1c01      	adds	r1, r0, #0
    1a40:	4399      	bics	r1, r3
	phyWriteRegister(TRX_CTRL_2_REG, reg | phyModulation);
    1a42:	4b12      	ldr	r3, [pc, #72]	; (1a8c <phySetChannel+0x58>)
    1a44:	781b      	ldrb	r3, [r3, #0]
    1a46:	4319      	orrs	r1, r3

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1a48:	b2c9      	uxtb	r1, r1
    1a4a:	200c      	movs	r0, #12
    1a4c:	4d10      	ldr	r5, [pc, #64]	; (1a90 <phySetChannel+0x5c>)
    1a4e:	47a8      	blx	r5
	uint8_t reg;

	reg = phyReadRegister(TRX_CTRL_2_REG) & ~0x3f;
	phyWriteRegister(TRX_CTRL_2_REG, reg | phyModulation);

	phyWriteRegister(CC_CTRL_1_REG, phyBand);
    1a50:	4c10      	ldr	r4, [pc, #64]	; (1a94 <phySetChannel+0x60>)

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1a52:	7821      	ldrb	r1, [r4, #0]
    1a54:	2014      	movs	r0, #20
    1a56:	47a8      	blx	r5
	reg = phyReadRegister(TRX_CTRL_2_REG) & ~0x3f;
	phyWriteRegister(TRX_CTRL_2_REG, reg | phyModulation);

	phyWriteRegister(CC_CTRL_1_REG, phyBand);

	if (0 == phyBand) {
    1a58:	7823      	ldrb	r3, [r4, #0]
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d10d      	bne.n	1a7a <phySetChannel+0x46>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1a5e:	2008      	movs	r0, #8
    1a60:	4b09      	ldr	r3, [pc, #36]	; (1a88 <phySetChannel+0x54>)
    1a62:	4798      	blx	r3
	phyWriteRegister(TRX_CTRL_2_REG, reg | phyModulation);

	phyWriteRegister(CC_CTRL_1_REG, phyBand);

	if (0 == phyBand) {
		reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    1a64:	231f      	movs	r3, #31
    1a66:	1c01      	adds	r1, r0, #0
    1a68:	4399      	bics	r1, r3
		phyWriteRegister(PHY_CC_CCA_REG, reg | phyChannel);
    1a6a:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <phySetChannel+0x64>)
    1a6c:	781b      	ldrb	r3, [r3, #0]
    1a6e:	4319      	orrs	r1, r3

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1a70:	b2c9      	uxtb	r1, r1
    1a72:	2008      	movs	r0, #8
    1a74:	4b06      	ldr	r3, [pc, #24]	; (1a90 <phySetChannel+0x5c>)
    1a76:	4798      	blx	r3
    1a78:	e004      	b.n	1a84 <phySetChannel+0x50>

	if (0 == phyBand) {
		reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
		phyWriteRegister(PHY_CC_CCA_REG, reg | phyChannel);
	} else {
		phyWriteRegister(CC_CTRL_0_REG, phyChannel);
    1a7a:	4b07      	ldr	r3, [pc, #28]	; (1a98 <phySetChannel+0x64>)

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1a7c:	7819      	ldrb	r1, [r3, #0]
    1a7e:	2013      	movs	r0, #19
    1a80:	4b03      	ldr	r3, [pc, #12]	; (1a90 <phySetChannel+0x5c>)
    1a82:	4798      	blx	r3
		reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
		phyWriteRegister(PHY_CC_CCA_REG, reg | phyChannel);
	} else {
		phyWriteRegister(CC_CTRL_0_REG, phyChannel);
	}
}
    1a84:	bd38      	pop	{r3, r4, r5, pc}
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	000021f1 	.word	0x000021f1
    1a8c:	20000b08 	.word	0x20000b08
    1a90:	000022e9 	.word	0x000022e9
    1a94:	20000b8e 	.word	0x20000b8e
    1a98:	20000b8f 	.word	0x20000b8f

00001a9c <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    1a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a9e:	1c04      	adds	r4, r0, #0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1aa0:	4f0b      	ldr	r7, [pc, #44]	; (1ad0 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1aa2:	4e0c      	ldr	r6, [pc, #48]	; (1ad4 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do {  phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1aa4:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1aa6:	2002      	movs	r0, #2
    1aa8:	2103      	movs	r1, #3
    1aaa:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1aac:	2001      	movs	r0, #1
    1aae:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do {  phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1ab0:	4028      	ands	r0, r5
    1ab2:	2808      	cmp	r0, #8
    1ab4:	d1f7      	bne.n	1aa6 <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1ab6:	4f06      	ldr	r7, [pc, #24]	; (1ad0 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1ab8:	4e06      	ldr	r6, [pc, #24]	; (1ad4 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do {phyWriteRegister(TRX_STATE_REG,
			    state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1aba:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1abc:	2002      	movs	r0, #2
    1abe:	1c21      	adds	r1, r4, #0
    1ac0:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1ac2:	2001      	movs	r0, #1
    1ac4:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do {phyWriteRegister(TRX_STATE_REG,
			    state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1ac6:	4028      	ands	r0, r5
    1ac8:	4284      	cmp	r4, r0
    1aca:	d1f7      	bne.n	1abc <phyTrxSetState+0x20>
}
    1acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ace:	46c0      	nop			; (mov r8, r8)
    1ad0:	000022e9 	.word	0x000022e9
    1ad4:	000021f1 	.word	0x000021f1

00001ad8 <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    1ad8:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    1ada:	2008      	movs	r0, #8
    1adc:	4b06      	ldr	r3, [pc, #24]	; (1af8 <phySetRxState+0x20>)
    1ade:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1ae0:	200f      	movs	r0, #15
    1ae2:	4b06      	ldr	r3, [pc, #24]	; (1afc <phySetRxState+0x24>)
    1ae4:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    1ae6:	4b06      	ldr	r3, [pc, #24]	; (1b00 <phySetRxState+0x28>)
    1ae8:	781b      	ldrb	r3, [r3, #0]
    1aea:	2b00      	cmp	r3, #0
    1aec:	d002      	beq.n	1af4 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    1aee:	2016      	movs	r0, #22
    1af0:	4b01      	ldr	r3, [pc, #4]	; (1af8 <phySetRxState+0x20>)
    1af2:	4798      	blx	r3
	}
}
    1af4:	bd08      	pop	{r3, pc}
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	00001a9d 	.word	0x00001a9d
    1afc:	000021f1 	.word	0x000021f1
    1b00:	20000b8d 	.word	0x20000b8d

00001b04 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    1b04:	b570      	push	{r4, r5, r6, lr}
	uint8_t reg;
	trx_spi_init();
    1b06:	4b19      	ldr	r3, [pc, #100]	; (1b6c <PHY_Init+0x68>)
    1b08:	4798      	blx	r3
	PhyReset();
    1b0a:	4b19      	ldr	r3, [pc, #100]	; (1b70 <PHY_Init+0x6c>)
    1b0c:	4798      	blx	r3

	phyRxState = false;
    1b0e:	2300      	movs	r3, #0
    1b10:	4a18      	ldr	r2, [pc, #96]	; (1b74 <PHY_Init+0x70>)
    1b12:	7013      	strb	r3, [r2, #0]
	phyBand = 0;
    1b14:	4a18      	ldr	r2, [pc, #96]	; (1b78 <PHY_Init+0x74>)
    1b16:	7013      	strb	r3, [r2, #0]
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1b18:	200c      	movs	r0, #12
    1b1a:	4b18      	ldr	r3, [pc, #96]	; (1b7c <PHY_Init+0x78>)
    1b1c:	4798      	blx	r3
	trx_spi_init();
	PhyReset();

	phyRxState = false;
	phyBand = 0;
	phyModulation = phyReadRegister(TRX_CTRL_2_REG) & 0x3f;
    1b1e:	233f      	movs	r3, #63	; 0x3f
    1b20:	4018      	ands	r0, r3
    1b22:	4b17      	ldr	r3, [pc, #92]	; (1b80 <PHY_Init+0x7c>)
    1b24:	7018      	strb	r0, [r3, #0]
	phyState = PHY_STATE_IDLE;
    1b26:	2201      	movs	r2, #1
    1b28:	4b16      	ldr	r3, [pc, #88]	; (1b84 <PHY_Init+0x80>)
    1b2a:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1b2c:	4e16      	ldr	r6, [pc, #88]	; (1b88 <PHY_Init+0x84>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1b2e:	4d13      	ldr	r5, [pc, #76]	; (1b7c <PHY_Init+0x78>)
	phyModulation = phyReadRegister(TRX_CTRL_2_REG) & 0x3f;
	phyState = PHY_STATE_IDLE;

	do {  phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1b30:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1b32:	2002      	movs	r0, #2
    1b34:	2108      	movs	r1, #8
    1b36:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1b38:	2001      	movs	r0, #1
    1b3a:	47a8      	blx	r5
	phyModulation = phyReadRegister(TRX_CTRL_2_REG) & 0x3f;
	phyState = PHY_STATE_IDLE;

	do {  phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1b3c:	4020      	ands	r0, r4
    1b3e:	2808      	cmp	r0, #8
    1b40:	d1f7      	bne.n	1b32 <PHY_Init+0x2e>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1b42:	300e      	adds	r0, #14
    1b44:	4b0d      	ldr	r3, [pc, #52]	; (1b7c <PHY_Init+0x78>)
    1b46:	4798      	blx	r3

	do {  phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	reg = phyReadRegister(RF_CTRL_0_REG) & ~0x03;
    1b48:	2303      	movs	r3, #3
    1b4a:	1c01      	adds	r1, r0, #0
    1b4c:	4399      	bics	r1, r3
	phyWriteRegister(RF_CTRL_0_REG, reg | 0X03); /* GC_TX_OFFS =3 for BPSK */
    1b4e:	4319      	orrs	r1, r3

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1b50:	b2c9      	uxtb	r1, r1
    1b52:	2016      	movs	r0, #22
    1b54:	4c0c      	ldr	r4, [pc, #48]	; (1b88 <PHY_Init+0x84>)
    1b56:	47a0      	blx	r4
    1b58:	2005      	movs	r0, #5
    1b5a:	2100      	movs	r1, #0
    1b5c:	47a0      	blx	r4
    1b5e:	2004      	movs	r0, #4
    1b60:	212e      	movs	r1, #46	; 0x2e
    1b62:	47a0      	blx	r4
    1b64:	200c      	movs	r0, #12
    1b66:	2180      	movs	r1, #128	; 0x80
    1b68:	47a0      	blx	r4
	phyWriteRegister(TRX_CTRL_1_REG,
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG, (1 << RX_SAFE_MODE));
}
    1b6a:	bd70      	pop	{r4, r5, r6, pc}
    1b6c:	000020a1 	.word	0x000020a1
    1b70:	000021c5 	.word	0x000021c5
    1b74:	20000b8d 	.word	0x20000b8d
    1b78:	20000b8e 	.word	0x20000b8e
    1b7c:	000021f1 	.word	0x000021f1
    1b80:	20000b08 	.word	0x20000b08
    1b84:	20000b8c 	.word	0x20000b8c
    1b88:	000022e9 	.word	0x000022e9

00001b8c <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    1b8c:	b508      	push	{r3, lr}
	phyRxState = rx;
    1b8e:	4b02      	ldr	r3, [pc, #8]	; (1b98 <PHY_SetRxState+0xc>)
    1b90:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    1b92:	4b02      	ldr	r3, [pc, #8]	; (1b9c <PHY_SetRxState+0x10>)
    1b94:	4798      	blx	r3
}
    1b96:	bd08      	pop	{r3, pc}
    1b98:	20000b8d 	.word	0x20000b8d
    1b9c:	00001ad9 	.word	0x00001ad9

00001ba0 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    1ba0:	b508      	push	{r3, lr}
	phyChannel = channel;
    1ba2:	4b02      	ldr	r3, [pc, #8]	; (1bac <PHY_SetChannel+0xc>)
    1ba4:	7018      	strb	r0, [r3, #0]
	phySetChannel();
    1ba6:	4b02      	ldr	r3, [pc, #8]	; (1bb0 <PHY_SetChannel+0x10>)
    1ba8:	4798      	blx	r3
}
    1baa:	bd08      	pop	{r3, pc}
    1bac:	20000b8f 	.word	0x20000b8f
    1bb0:	00001a35 	.word	0x00001a35

00001bb4 <PHY_SetPanId>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    1bb4:	b530      	push	{r4, r5, lr}
    1bb6:	b083      	sub	sp, #12
    1bb8:	466b      	mov	r3, sp
    1bba:	1d9d      	adds	r5, r3, #6
    1bbc:	80d8      	strh	r0, [r3, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1bbe:	b2c1      	uxtb	r1, r0
    1bc0:	2022      	movs	r0, #34	; 0x22
    1bc2:	4c03      	ldr	r4, [pc, #12]	; (1bd0 <PHY_SetPanId+0x1c>)
    1bc4:	47a0      	blx	r4
    1bc6:	7869      	ldrb	r1, [r5, #1]
    1bc8:	2023      	movs	r0, #35	; 0x23
    1bca:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    1bcc:	b003      	add	sp, #12
    1bce:	bd30      	pop	{r4, r5, pc}
    1bd0:	000022e9 	.word	0x000022e9

00001bd4 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    1bd4:	b570      	push	{r4, r5, r6, lr}
    1bd6:	b082      	sub	sp, #8
    1bd8:	466b      	mov	r3, sp
    1bda:	1d9e      	adds	r6, r3, #6
    1bdc:	80d8      	strh	r0, [r3, #6]
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    1bde:	b2c4      	uxtb	r4, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1be0:	2020      	movs	r0, #32
    1be2:	1c21      	adds	r1, r4, #0
    1be4:	4d05      	ldr	r5, [pc, #20]	; (1bfc <PHY_SetShortAddr+0x28>)
    1be6:	47a8      	blx	r5
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    1be8:	7876      	ldrb	r6, [r6, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1bea:	2021      	movs	r0, #33	; 0x21
    1bec:	1c31      	adds	r1, r6, #0
    1bee:	47a8      	blx	r5
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    1bf0:	1931      	adds	r1, r6, r4

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1bf2:	b2c9      	uxtb	r1, r1
    1bf4:	202d      	movs	r0, #45	; 0x2d
    1bf6:	47a8      	blx	r5
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    1bf8:	b002      	add	sp, #8
    1bfa:	bd70      	pop	{r4, r5, r6, pc}
    1bfc:	000022e9 	.word	0x000022e9

00001c00 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    1c00:	b510      	push	{r4, lr}
    1c02:	1c04      	adds	r4, r0, #0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    1c04:	2019      	movs	r0, #25
    1c06:	4b0c      	ldr	r3, [pc, #48]	; (1c38 <PHY_DataReq+0x38>)
    1c08:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c0a:	200f      	movs	r0, #15
    1c0c:	4b0b      	ldr	r3, [pc, #44]	; (1c3c <PHY_DataReq+0x3c>)
    1c0e:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    1c10:	7821      	ldrb	r1, [r4, #0]
    1c12:	1c8b      	adds	r3, r1, #2
    1c14:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    1c16:	3101      	adds	r1, #1
    1c18:	b2c9      	uxtb	r1, r1
    1c1a:	1c20      	adds	r0, r4, #0
    1c1c:	4b08      	ldr	r3, [pc, #32]	; (1c40 <PHY_DataReq+0x40>)
    1c1e:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    1c20:	2203      	movs	r2, #3
    1c22:	4b08      	ldr	r3, [pc, #32]	; (1c44 <PHY_DataReq+0x44>)
    1c24:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1c26:	4b08      	ldr	r3, [pc, #32]	; (1c48 <PHY_DataReq+0x48>)
    1c28:	2280      	movs	r2, #128	; 0x80
    1c2a:	0212      	lsls	r2, r2, #8
    1c2c:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c32:	615a      	str	r2, [r3, #20]
	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    1c34:	bd10      	pop	{r4, pc}
    1c36:	46c0      	nop			; (mov r8, r8)
    1c38:	00001a9d 	.word	0x00001a9d
    1c3c:	000021f1 	.word	0x000021f1
    1c40:	00002521 	.word	0x00002521
    1c44:	20000b8c 	.word	0x20000b8c
    1c48:	41000080 	.word	0x41000080

00001c4c <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c4e:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    1c50:	4b31      	ldr	r3, [pc, #196]	; (1d18 <PHY_TaskHandler+0xcc>)
    1c52:	781b      	ldrb	r3, [r3, #0]
    1c54:	2b02      	cmp	r3, #2
    1c56:	d05c      	beq.n	1d12 <PHY_TaskHandler+0xc6>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c58:	200f      	movs	r0, #15
    1c5a:	4b30      	ldr	r3, [pc, #192]	; (1d1c <PHY_TaskHandler+0xd0>)
    1c5c:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    1c5e:	0703      	lsls	r3, r0, #28
    1c60:	d557      	bpl.n	1d12 <PHY_TaskHandler+0xc6>
		if (PHY_STATE_IDLE == phyState) {
    1c62:	4b2d      	ldr	r3, [pc, #180]	; (1d18 <PHY_TaskHandler+0xcc>)
    1c64:	781b      	ldrb	r3, [r3, #0]
    1c66:	2b01      	cmp	r3, #1
    1c68:	d139      	bne.n	1cde <PHY_TaskHandler+0x92>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c6a:	2007      	movs	r0, #7
    1c6c:	4b2b      	ldr	r3, [pc, #172]	; (1d1c <PHY_TaskHandler+0xd0>)
    1c6e:	4798      	blx	r3
    1c70:	1c05      	adds	r5, r0, #0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    1c72:	466b      	mov	r3, sp
    1c74:	1ddc      	adds	r4, r3, #7
    1c76:	1c20      	adds	r0, r4, #0
    1c78:	2101      	movs	r1, #1
    1c7a:	4f29      	ldr	r7, [pc, #164]	; (1d20 <PHY_TaskHandler+0xd4>)
    1c7c:	47b8      	blx	r7

			trx_frame_read(phyRxBuffer, size + 2);
    1c7e:	4e29      	ldr	r6, [pc, #164]	; (1d24 <PHY_TaskHandler+0xd8>)
    1c80:	7821      	ldrb	r1, [r4, #0]
    1c82:	3102      	adds	r1, #2
    1c84:	b2c9      	uxtb	r1, r1
    1c86:	1c30      	adds	r0, r6, #0
    1c88:	47b8      	blx	r7

			ind.data = phyRxBuffer + 1;
    1c8a:	aa02      	add	r2, sp, #8
    1c8c:	1c73      	adds	r3, r6, #1
    1c8e:	9302      	str	r3, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    1c90:	7823      	ldrb	r3, [r4, #0]
    1c92:	1e99      	subs	r1, r3, #2
    1c94:	7111      	strb	r1, [r2, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    1c96:	18f3      	adds	r3, r6, r3
    1c98:	785b      	ldrb	r3, [r3, #1]
    1c9a:	7153      	strb	r3, [r2, #5]

/*************************************************************************//**
*****************************************************************************/
static int8_t phyRssiBaseVal(void)
{
	bool oqpsk = (phyModulation & (1 << BPSK_OQPSK));
    1c9c:	4b22      	ldr	r3, [pc, #136]	; (1d28 <PHY_TaskHandler+0xdc>)
    1c9e:	7819      	ldrb	r1, [r3, #0]
	bool sub   = (phyModulation & (1 << SUB_MODE));
    1ca0:	074b      	lsls	r3, r1, #29
    1ca2:	0fda      	lsrs	r2, r3, #31
	bool rc    = (phyModulation & (1 << 4 /*ALT_SPEC*/));

	if (0 == oqpsk) {
    1ca4:	070b      	lsls	r3, r1, #28
    1ca6:	d404      	bmi.n	1cb2 <PHY_TaskHandler+0x66>
		if (0 == sub) {
			return PHY_RSSI_BASE_VAL_BPSK_20;
		} else {
			return PHY_RSSI_BASE_VAL_BPSK_40;
    1ca8:	4253      	negs	r3, r2
    1caa:	415a      	adcs	r2, r3
    1cac:	239d      	movs	r3, #157	; 0x9d
    1cae:	1a9b      	subs	r3, r3, r2
    1cb0:	e008      	b.n	1cc4 <PHY_TaskHandler+0x78>
		}
	} else {
		if (0 == sub) {
			return PHY_RSSI_BASE_VAL_OQPSK_SIN_RC_100;
    1cb2:	239e      	movs	r3, #158	; 0x9e
			return PHY_RSSI_BASE_VAL_BPSK_20;
		} else {
			return PHY_RSSI_BASE_VAL_BPSK_40;
		}
	} else {
		if (0 == sub) {
    1cb4:	2a00      	cmp	r2, #0
    1cb6:	d005      	beq.n	1cc4 <PHY_TaskHandler+0x78>
			return PHY_RSSI_BASE_VAL_OQPSK_SIN_RC_100;
		} else {
			if (0 == rc) {
    1cb8:	2210      	movs	r2, #16
    1cba:	4011      	ands	r1, r2
				return PHY_RSSI_BASE_VAL_OQPSK_SIN_250;
			} else {
				return PHY_RSSI_BASE_VAL_OQPSK_RC_250;
    1cbc:	424a      	negs	r2, r1
    1cbe:	414a      	adcs	r2, r1
    1cc0:	3301      	adds	r3, #1
    1cc2:	1a9b      	subs	r3, r3, r2

			ind.data = phyRxBuffer + 1;

			ind.size = size - PHY_CRC_SIZE;
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + phyRssiBaseVal();
    1cc4:	a802      	add	r0, sp, #8
    1cc6:	18eb      	adds	r3, r5, r3
    1cc8:	7183      	strb	r3, [r0, #6]
			PHY_DataInd(&ind);
    1cca:	4b18      	ldr	r3, [pc, #96]	; (1d2c <PHY_TaskHandler+0xe0>)
    1ccc:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1cce:	4d13      	ldr	r5, [pc, #76]	; (1d1c <PHY_TaskHandler+0xd0>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    1cd0:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1cd2:	2001      	movs	r0, #1
    1cd4:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    1cd6:	4020      	ands	r0, r4
    1cd8:	2816      	cmp	r0, #22
    1cda:	d1fa      	bne.n	1cd2 <PHY_TaskHandler+0x86>
    1cdc:	e019      	b.n	1d12 <PHY_TaskHandler+0xc6>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + phyRssiBaseVal();
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    1cde:	2b03      	cmp	r3, #3
    1ce0:	d117      	bne.n	1d12 <PHY_TaskHandler+0xc6>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1ce2:	2002      	movs	r0, #2
    1ce4:	4b0d      	ldr	r3, [pc, #52]	; (1d1c <PHY_TaskHandler+0xd0>)
    1ce6:	4798      	blx	r3
			ind.rssi = rssi + phyRssiBaseVal();
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    1ce8:	0940      	lsrs	r0, r0, #5
    1cea:	b2c4      	uxtb	r4, r0
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    1cec:	2c00      	cmp	r4, #0
    1cee:	d008      	beq.n	1d02 <PHY_TaskHandler+0xb6>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    1cf0:	2c03      	cmp	r4, #3
    1cf2:	d005      	beq.n	1d00 <PHY_TaskHandler+0xb4>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
    1cf4:	3c05      	subs	r4, #5
    1cf6:	4263      	negs	r3, r4
    1cf8:	4163      	adcs	r3, r4
    1cfa:	2403      	movs	r4, #3
    1cfc:	1ae4      	subs	r4, r4, r3
    1cfe:	e000      	b.n	1d02 <PHY_TaskHandler+0xb6>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1d00:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    1d02:	4b0b      	ldr	r3, [pc, #44]	; (1d30 <PHY_TaskHandler+0xe4>)
    1d04:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    1d06:	2201      	movs	r2, #1
    1d08:	4b03      	ldr	r3, [pc, #12]	; (1d18 <PHY_TaskHandler+0xcc>)
    1d0a:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    1d0c:	1c20      	adds	r0, r4, #0
    1d0e:	4b09      	ldr	r3, [pc, #36]	; (1d34 <PHY_TaskHandler+0xe8>)
    1d10:	4798      	blx	r3
		}
	}
}
    1d12:	b005      	add	sp, #20
    1d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d16:	46c0      	nop			; (mov r8, r8)
    1d18:	20000b8c 	.word	0x20000b8c
    1d1c:	000021f1 	.word	0x000021f1
    1d20:	000023e5 	.word	0x000023e5
    1d24:	20000b0c 	.word	0x20000b0c
    1d28:	20000b08 	.word	0x20000b08
    1d2c:	0000127d 	.word	0x0000127d
    1d30:	00001ad9 	.word	0x00001ad9
    1d34:	000018e9 	.word	0x000018e9

00001d38 <SYS_Init>:
    1d38:	b508      	push	{r3, lr}
    1d3a:	4b03      	ldr	r3, [pc, #12]	; (1d48 <SYS_Init+0x10>)
    1d3c:	4798      	blx	r3
    1d3e:	4b03      	ldr	r3, [pc, #12]	; (1d4c <SYS_Init+0x14>)
    1d40:	4798      	blx	r3
    1d42:	4b03      	ldr	r3, [pc, #12]	; (1d50 <SYS_Init+0x18>)
    1d44:	4798      	blx	r3
    1d46:	bd08      	pop	{r3, pc}
    1d48:	00001ded 	.word	0x00001ded
    1d4c:	00001b05 	.word	0x00001b05
    1d50:	000006ad 	.word	0x000006ad

00001d54 <SYS_TaskHandler>:
    1d54:	b508      	push	{r3, lr}
    1d56:	4b03      	ldr	r3, [pc, #12]	; (1d64 <SYS_TaskHandler+0x10>)
    1d58:	4798      	blx	r3
    1d5a:	4b03      	ldr	r3, [pc, #12]	; (1d68 <SYS_TaskHandler+0x14>)
    1d5c:	4798      	blx	r3
    1d5e:	4b03      	ldr	r3, [pc, #12]	; (1d6c <SYS_TaskHandler+0x18>)
    1d60:	4798      	blx	r3
    1d62:	bd08      	pop	{r3, pc}
    1d64:	00001c4d 	.word	0x00001c4d
    1d68:	00000739 	.word	0x00000739
    1d6c:	00001e71 	.word	0x00001e71

00001d70 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1d70:	b530      	push	{r4, r5, lr}
	if (timers) {
    1d72:	4b15      	ldr	r3, [pc, #84]	; (1dc8 <placeTimer+0x58>)
    1d74:	681d      	ldr	r5, [r3, #0]
    1d76:	2d00      	cmp	r5, #0
    1d78:	d01e      	beq.n	1db8 <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    1d7a:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    1d7c:	6869      	ldr	r1, [r5, #4]
    1d7e:	428a      	cmp	r2, r1
    1d80:	d305      	bcc.n	1d8e <placeTimer+0x1e>
    1d82:	1c2c      	adds	r4, r5, #0
    1d84:	e009      	b.n	1d9a <placeTimer+0x2a>
    1d86:	6859      	ldr	r1, [r3, #4]
    1d88:	4291      	cmp	r1, r2
    1d8a:	d905      	bls.n	1d98 <placeTimer+0x28>
    1d8c:	e001      	b.n	1d92 <placeTimer+0x22>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1d8e:	1c2b      	adds	r3, r5, #0
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    1d90:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    1d92:	1a89      	subs	r1, r1, r2
    1d94:	6059      	str	r1, [r3, #4]
				break;
    1d96:	e004      	b.n	1da2 <placeTimer+0x32>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1d98:	1c1c      	adds	r4, r3, #0
			if (timeout < t->timeout) {
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    1d9a:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1d9c:	6823      	ldr	r3, [r4, #0]
    1d9e:	2b00      	cmp	r3, #0
    1da0:	d1f1      	bne.n	1d86 <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    1da2:	6042      	str	r2, [r0, #4]

		if (prev) {
    1da4:	2c00      	cmp	r4, #0
    1da6:	d003      	beq.n	1db0 <placeTimer+0x40>
			timer->next = prev->next;
    1da8:	6823      	ldr	r3, [r4, #0]
    1daa:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    1dac:	6020      	str	r0, [r4, #0]
    1dae:	e009      	b.n	1dc4 <placeTimer+0x54>
		} else {
			timer->next = timers;
    1db0:	6005      	str	r5, [r0, #0]
			timers = timer;
    1db2:	4b05      	ldr	r3, [pc, #20]	; (1dc8 <placeTimer+0x58>)
    1db4:	6018      	str	r0, [r3, #0]
    1db6:	e005      	b.n	1dc4 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    1db8:	2300      	movs	r3, #0
    1dba:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    1dbc:	6883      	ldr	r3, [r0, #8]
    1dbe:	6043      	str	r3, [r0, #4]
		timers = timer;
    1dc0:	4b01      	ldr	r3, [pc, #4]	; (1dc8 <placeTimer+0x58>)
    1dc2:	6018      	str	r0, [r3, #0]
	}
}
    1dc4:	bd30      	pop	{r4, r5, pc}
    1dc6:	46c0      	nop			; (mov r8, r8)
    1dc8:	20000b90 	.word	0x20000b90

00001dcc <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    1dcc:	b508      	push	{r3, lr}
	SysTimerIrqCount++;
    1dce:	4a04      	ldr	r2, [pc, #16]	; (1de0 <SYS_HwExpiry_Cb+0x14>)
    1dd0:	7813      	ldrb	r3, [r2, #0]
    1dd2:	3301      	adds	r3, #1
    1dd4:	b2db      	uxtb	r3, r3
    1dd6:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1dd8:	4802      	ldr	r0, [pc, #8]	; (1de4 <SYS_HwExpiry_Cb+0x18>)
    1dda:	4b03      	ldr	r3, [pc, #12]	; (1de8 <SYS_HwExpiry_Cb+0x1c>)
    1ddc:	4798      	blx	r3
}
    1dde:	bd08      	pop	{r3, pc}
    1de0:	20000c84 	.word	0x20000c84
    1de4:	00002710 	.word	0x00002710
    1de8:	000049c5 	.word	0x000049c5

00001dec <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    1dec:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    1dee:	2400      	movs	r4, #0
    1df0:	4b06      	ldr	r3, [pc, #24]	; (1e0c <SYS_TimerInit+0x20>)
    1df2:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    1df4:	4806      	ldr	r0, [pc, #24]	; (1e10 <SYS_TimerInit+0x24>)
    1df6:	4b07      	ldr	r3, [pc, #28]	; (1e14 <SYS_TimerInit+0x28>)
    1df8:	4798      	blx	r3
	common_tc_init();
    1dfa:	4b07      	ldr	r3, [pc, #28]	; (1e18 <SYS_TimerInit+0x2c>)
    1dfc:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1dfe:	4807      	ldr	r0, [pc, #28]	; (1e1c <SYS_TimerInit+0x30>)
    1e00:	4b07      	ldr	r3, [pc, #28]	; (1e20 <SYS_TimerInit+0x34>)
    1e02:	4798      	blx	r3
	timers = NULL;
    1e04:	4b07      	ldr	r3, [pc, #28]	; (1e24 <SYS_TimerInit+0x38>)
    1e06:	601c      	str	r4, [r3, #0]
}
    1e08:	bd10      	pop	{r4, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	20000c84 	.word	0x20000c84
    1e10:	00001dcd 	.word	0x00001dcd
    1e14:	00004ab5 	.word	0x00004ab5
    1e18:	00004a31 	.word	0x00004a31
    1e1c:	00002710 	.word	0x00002710
    1e20:	000049c5 	.word	0x000049c5
    1e24:	20000b90 	.word	0x20000b90

00001e28 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1e28:	4b09      	ldr	r3, [pc, #36]	; (1e50 <SYS_TimerStarted+0x28>)
    1e2a:	681b      	ldr	r3, [r3, #0]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d009      	beq.n	1e44 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    1e30:	4283      	cmp	r3, r0
    1e32:	d102      	bne.n	1e3a <SYS_TimerStarted+0x12>
    1e34:	e008      	b.n	1e48 <SYS_TimerStarted+0x20>
    1e36:	4298      	cmp	r0, r3
    1e38:	d008      	beq.n	1e4c <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1e3a:	681b      	ldr	r3, [r3, #0]
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d1fa      	bne.n	1e36 <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    1e40:	2000      	movs	r0, #0
    1e42:	e004      	b.n	1e4e <SYS_TimerStarted+0x26>
    1e44:	2000      	movs	r0, #0
    1e46:	e002      	b.n	1e4e <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    1e48:	2001      	movs	r0, #1
    1e4a:	e000      	b.n	1e4e <SYS_TimerStarted+0x26>
    1e4c:	2001      	movs	r0, #1
		}
	}
	return false;
}
    1e4e:	4770      	bx	lr
    1e50:	20000b90 	.word	0x20000b90

00001e54 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1e54:	b510      	push	{r4, lr}
    1e56:	1c04      	adds	r4, r0, #0
	if (!SYS_TimerStarted(timer)) {
    1e58:	4b03      	ldr	r3, [pc, #12]	; (1e68 <SYS_TimerStart+0x14>)
    1e5a:	4798      	blx	r3
    1e5c:	2800      	cmp	r0, #0
    1e5e:	d102      	bne.n	1e66 <SYS_TimerStart+0x12>
		placeTimer(timer);
    1e60:	1c20      	adds	r0, r4, #0
    1e62:	4b02      	ldr	r3, [pc, #8]	; (1e6c <SYS_TimerStart+0x18>)
    1e64:	4798      	blx	r3
	}
}
    1e66:	bd10      	pop	{r4, pc}
    1e68:	00001e29 	.word	0x00001e29
    1e6c:	00001d71 	.word	0x00001d71

00001e70 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    1e72:	4b1a      	ldr	r3, [pc, #104]	; (1edc <SYS_TimerTaskHandler+0x6c>)
    1e74:	781b      	ldrb	r3, [r3, #0]
    1e76:	2b00      	cmp	r3, #0
    1e78:	d02f      	beq.n	1eda <SYS_TimerTaskHandler+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1e7a:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1e7e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1e80:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1e84:	2000      	movs	r0, #0
    1e86:	4b16      	ldr	r3, [pc, #88]	; (1ee0 <SYS_TimerTaskHandler+0x70>)
    1e88:	7018      	strb	r0, [r3, #0]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    1e8a:	4914      	ldr	r1, [pc, #80]	; (1edc <SYS_TimerTaskHandler+0x6c>)
    1e8c:	780b      	ldrb	r3, [r1, #0]
    1e8e:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    1e90:	7008      	strb	r0, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1e92:	2a00      	cmp	r2, #0
    1e94:	d105      	bne.n	1ea2 <SYS_TimerTaskHandler+0x32>
		cpu_irq_enable();
    1e96:	2101      	movs	r1, #1
    1e98:	4a11      	ldr	r2, [pc, #68]	; (1ee0 <SYS_TimerTaskHandler+0x70>)
    1e9a:	7011      	strb	r1, [r2, #0]
    1e9c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1ea0:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    1ea2:	009d      	lsls	r5, r3, #2
    1ea4:	18ed      	adds	r5, r5, r3
    1ea6:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    1ea8:	4e0e      	ldr	r6, [pc, #56]	; (1ee4 <SYS_TimerTaskHandler+0x74>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    1eaa:	1c37      	adds	r7, r6, #0
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    1eac:	e00d      	b.n	1eca <SYS_TimerTaskHandler+0x5a>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    1eae:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    1eb0:	6823      	ldr	r3, [r4, #0]
    1eb2:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    1eb4:	7b23      	ldrb	r3, [r4, #12]
    1eb6:	2b01      	cmp	r3, #1
    1eb8:	d102      	bne.n	1ec0 <SYS_TimerTaskHandler+0x50>
			placeTimer(timer);
    1eba:	1c20      	adds	r0, r4, #0
    1ebc:	4b0a      	ldr	r3, [pc, #40]	; (1ee8 <SYS_TimerTaskHandler+0x78>)
    1ebe:	4798      	blx	r3
		}

		if (timer->handler) {
    1ec0:	6923      	ldr	r3, [r4, #16]
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	d001      	beq.n	1eca <SYS_TimerTaskHandler+0x5a>
			timer->handler(timer);
    1ec6:	1c20      	adds	r0, r4, #0
    1ec8:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    1eca:	6834      	ldr	r4, [r6, #0]
    1ecc:	2c00      	cmp	r4, #0
    1ece:	d004      	beq.n	1eda <SYS_TimerTaskHandler+0x6a>
    1ed0:	6863      	ldr	r3, [r4, #4]
    1ed2:	429d      	cmp	r5, r3
    1ed4:	d2eb      	bcs.n	1eae <SYS_TimerTaskHandler+0x3e>
			timer->handler(timer);
		}
	}

	if (timers) {
		timers->timeout -= elapsed;
    1ed6:	1b5d      	subs	r5, r3, r5
    1ed8:	6065      	str	r5, [r4, #4]
	}
}
    1eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1edc:	20000c84 	.word	0x20000c84
    1ee0:	20000008 	.word	0x20000008
    1ee4:	20000b90 	.word	0x20000b90
    1ee8:	00001d71 	.word	0x00001d71

00001eec <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    1eec:	b508      	push	{r3, lr}
	tmr_cca_callback();
    1eee:	4b01      	ldr	r3, [pc, #4]	; (1ef4 <tc_cca_callback+0x8>)
    1ef0:	4798      	blx	r3
}
    1ef2:	bd08      	pop	{r3, pc}
    1ef4:	00004a99 	.word	0x00004a99

00001ef8 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    1ef8:	b508      	push	{r3, lr}
	tmr_ovf_callback();
    1efa:	4b01      	ldr	r3, [pc, #4]	; (1f00 <tc_ovf_callback+0x8>)
    1efc:	4798      	blx	r3
}
    1efe:	bd08      	pop	{r3, pc}
    1f00:	00004a51 	.word	0x00004a51

00001f04 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    1f04:	b508      	push	{r3, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    1f06:	4802      	ldr	r0, [pc, #8]	; (1f10 <tmr_read_count+0xc>)
    1f08:	4b02      	ldr	r3, [pc, #8]	; (1f14 <tmr_read_count+0x10>)
    1f0a:	4798      	blx	r3
    1f0c:	b280      	uxth	r0, r0
}
    1f0e:	bd08      	pop	{r3, pc}
    1f10:	20000cc0 	.word	0x20000cc0
    1f14:	000046d5 	.word	0x000046d5

00001f18 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    1f18:	4b03      	ldr	r3, [pc, #12]	; (1f28 <tmr_disable_cc_interrupt+0x10>)
    1f1a:	2110      	movs	r1, #16
    1f1c:	681a      	ldr	r2, [r3, #0]
    1f1e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    1f20:	7e5a      	ldrb	r2, [r3, #25]
    1f22:	438a      	bics	r2, r1
    1f24:	765a      	strb	r2, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    1f26:	4770      	bx	lr
    1f28:	20000cc0 	.word	0x20000cc0

00001f2c <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    1f2c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1f2e:	4c0a      	ldr	r4, [pc, #40]	; (1f58 <tmr_enable_cc_interrupt+0x2c>)
    1f30:	6820      	ldr	r0, [r4, #0]
    1f32:	4b0a      	ldr	r3, [pc, #40]	; (1f5c <tmr_enable_cc_interrupt+0x30>)
    1f34:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1f36:	4b0a      	ldr	r3, [pc, #40]	; (1f60 <tmr_enable_cc_interrupt+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1f38:	5c1b      	ldrb	r3, [r3, r0]
    1f3a:	221f      	movs	r2, #31
    1f3c:	4013      	ands	r3, r2
    1f3e:	3a1e      	subs	r2, #30
    1f40:	409a      	lsls	r2, r3
    1f42:	1c13      	adds	r3, r2, #0
    1f44:	4a07      	ldr	r2, [pc, #28]	; (1f64 <tmr_enable_cc_interrupt+0x38>)
    1f46:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1f48:	7e62      	ldrb	r2, [r4, #25]
    1f4a:	2310      	movs	r3, #16
    1f4c:	4313      	orrs	r3, r2
    1f4e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1f50:	6823      	ldr	r3, [r4, #0]
    1f52:	2210      	movs	r2, #16
    1f54:	725a      	strb	r2, [r3, #9]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    1f56:	bd10      	pop	{r4, pc}
    1f58:	20000cc0 	.word	0x20000cc0
    1f5c:	000043e1 	.word	0x000043e1
    1f60:	00005da4 	.word	0x00005da4
    1f64:	e000e100 	.word	0xe000e100

00001f68 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    1f68:	b508      	push	{r3, lr}
    1f6a:	1c02      	adds	r2, r0, #0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    1f6c:	4802      	ldr	r0, [pc, #8]	; (1f78 <tmr_write_cmpreg+0x10>)
    1f6e:	2100      	movs	r1, #0
    1f70:	4b02      	ldr	r3, [pc, #8]	; (1f7c <tmr_write_cmpreg+0x14>)
    1f72:	4798      	blx	r3
			(uint32_t)compare_value);
}
    1f74:	bd08      	pop	{r3, pc}
    1f76:	46c0      	nop			; (mov r8, r8)
    1f78:	20000cc0 	.word	0x20000cc0
    1f7c:	00004715 	.word	0x00004715

00001f80 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    1f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f82:	464f      	mov	r7, r9
    1f84:	4646      	mov	r6, r8
    1f86:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1f88:	4a30      	ldr	r2, [pc, #192]	; (204c <STACK_SIZE+0x4c>)
    1f8a:	2100      	movs	r1, #0
    1f8c:	2300      	movs	r3, #0
    1f8e:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    1f90:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    1f92:	2000      	movs	r0, #0
    1f94:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1f96:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1f98:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    1f9a:	7053      	strb	r3, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
    1f9c:	7093      	strb	r3, [r2, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1f9e:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1fa0:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1fa2:	7293      	strb	r3, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1fa4:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1fa6:	7313      	strb	r3, [r2, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1fa8:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    1faa:	7353      	strb	r3, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1fac:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1fae:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1fb0:	6191      	str	r1, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1fb2:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1fb4:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1fb6:	6251      	str	r1, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1fb8:	8511      	strh	r1, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1fba:	8591      	strh	r1, [r2, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    1fbc:	2334      	movs	r3, #52	; 0x34
    1fbe:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    1fc0:	3b35      	subs	r3, #53	; 0x35
    1fc2:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    1fc4:	4c22      	ldr	r4, [pc, #136]	; (2050 <STACK_SIZE+0x50>)
    1fc6:	1c20      	adds	r0, r4, #0
    1fc8:	4922      	ldr	r1, [pc, #136]	; (2054 <STACK_SIZE+0x54>)
    1fca:	4b23      	ldr	r3, [pc, #140]	; (2058 <STACK_SIZE+0x58>)
    1fcc:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    1fce:	1c20      	adds	r0, r4, #0
    1fd0:	4922      	ldr	r1, [pc, #136]	; (205c <STACK_SIZE+0x5c>)
    1fd2:	2200      	movs	r2, #0
    1fd4:	4d22      	ldr	r5, [pc, #136]	; (2060 <STACK_SIZE+0x60>)
    1fd6:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    1fd8:	1c20      	adds	r0, r4, #0
    1fda:	4922      	ldr	r1, [pc, #136]	; (2064 <STACK_SIZE+0x64>)
    1fdc:	2202      	movs	r2, #2
    1fde:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1fe0:	6820      	ldr	r0, [r4, #0]
    1fe2:	4b21      	ldr	r3, [pc, #132]	; (2068 <STACK_SIZE+0x68>)
    1fe4:	4698      	mov	r8, r3
    1fe6:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1fe8:	4f20      	ldr	r7, [pc, #128]	; (206c <STACK_SIZE+0x6c>)
    1fea:	5c3b      	ldrb	r3, [r7, r0]
    1fec:	261f      	movs	r6, #31
    1fee:	4033      	ands	r3, r6
    1ff0:	2501      	movs	r5, #1
    1ff2:	1c2a      	adds	r2, r5, #0
    1ff4:	409a      	lsls	r2, r3
    1ff6:	1c13      	adds	r3, r2, #0
    1ff8:	4a1d      	ldr	r2, [pc, #116]	; (2070 <STACK_SIZE+0x70>)
    1ffa:	4691      	mov	r9, r2
    1ffc:	6013      	str	r3, [r2, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1ffe:	7e62      	ldrb	r2, [r4, #25]
    2000:	2301      	movs	r3, #1
    2002:	4313      	orrs	r3, r2
    2004:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2006:	6823      	ldr	r3, [r4, #0]
    2008:	725d      	strb	r5, [r3, #9]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    200a:	1c18      	adds	r0, r3, #0
    200c:	47c0      	blx	r8
    200e:	5c3b      	ldrb	r3, [r7, r0]
    2010:	401e      	ands	r6, r3
    2012:	40b5      	lsls	r5, r6
    2014:	464b      	mov	r3, r9
    2016:	601d      	str	r5, [r3, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2018:	7e62      	ldrb	r2, [r4, #25]
    201a:	2310      	movs	r3, #16
    201c:	4313      	orrs	r3, r2
    201e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2020:	6822      	ldr	r2, [r4, #0]
    2022:	2310      	movs	r3, #16
    2024:	7253      	strb	r3, [r2, #9]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    2026:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    2028:	2b00      	cmp	r3, #0
    202a:	d1fc      	bne.n	2026 <STACK_SIZE+0x26>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    202c:	6811      	ldr	r1, [r2, #0]
    202e:	3302      	adds	r3, #2
    2030:	430b      	orrs	r3, r1
    2032:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    2034:	2000      	movs	r0, #0
    2036:	4b0f      	ldr	r3, [pc, #60]	; (2074 <STACK_SIZE+0x74>)
    2038:	4798      	blx	r3
    203a:	490f      	ldr	r1, [pc, #60]	; (2078 <STACK_SIZE+0x78>)
    203c:	4b0f      	ldr	r3, [pc, #60]	; (207c <STACK_SIZE+0x7c>)
    203e:	4798      	blx	r3
	#endif
	return timer_multiplier;
    2040:	b2c0      	uxtb	r0, r0
}
    2042:	bc0c      	pop	{r2, r3}
    2044:	4690      	mov	r8, r2
    2046:	4699      	mov	r9, r3
    2048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	20000c88 	.word	0x20000c88
    2050:	20000cc0 	.word	0x20000cc0
    2054:	42003c00 	.word	0x42003c00
    2058:	0000441d 	.word	0x0000441d
    205c:	00001ef9 	.word	0x00001ef9
    2060:	00004301 	.word	0x00004301
    2064:	00001eed 	.word	0x00001eed
    2068:	000043e1 	.word	0x000043e1
    206c:	00005da4 	.word	0x00005da4
    2070:	e000e100 	.word	0xe000e100
    2074:	000040d5 	.word	0x000040d5
    2078:	000f4240 	.word	0x000f4240
    207c:	00004ac1 	.word	0x00004ac1

00002080 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    2080:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2082:	2280      	movs	r2, #128	; 0x80
    2084:	01d2      	lsls	r2, r2, #7
    2086:	4b04      	ldr	r3, [pc, #16]	; (2098 <AT86RFX_ISR+0x18>)
    2088:	615a      	str	r2, [r3, #20]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    208a:	4b04      	ldr	r3, [pc, #16]	; (209c <AT86RFX_ISR+0x1c>)
    208c:	681b      	ldr	r3, [r3, #0]
    208e:	2b00      	cmp	r3, #0
    2090:	d000      	beq.n	2094 <AT86RFX_ISR+0x14>
		irq_hdl_trx();
    2092:	4798      	blx	r3
	}
}
    2094:	bd08      	pop	{r3, pc}
    2096:	46c0      	nop			; (mov r8, r8)
    2098:	40002800 	.word	0x40002800
    209c:	20000b94 	.word	0x20000b94

000020a0 <trx_spi_init>:

void trx_spi_init(void)
{
    20a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20a2:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    20a4:	4a36      	ldr	r2, [pc, #216]	; (2180 <trx_spi_init+0xe0>)
    20a6:	2300      	movs	r3, #0
    20a8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    20aa:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMC21 || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    20ac:	2111      	movs	r1, #17
    20ae:	7011      	strb	r1, [r2, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    20b0:	4c34      	ldr	r4, [pc, #208]	; (2184 <trx_spi_init+0xe4>)
    20b2:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    20b4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    20b6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    20b8:	2201      	movs	r2, #1
    20ba:	4669      	mov	r1, sp
    20bc:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    20be:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    20c0:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    20c2:	2011      	movs	r0, #17
    20c4:	4b30      	ldr	r3, [pc, #192]	; (2188 <trx_spi_init+0xe8>)
    20c6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    20c8:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    20ca:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    20cc:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    20ce:	2900      	cmp	r1, #0
    20d0:	d105      	bne.n	20de <trx_spi_init+0x3e>
		return &(ports[port_index]->Group[group_index]);
    20d2:	095a      	lsrs	r2, r3, #5
    20d4:	01d2      	lsls	r2, r2, #7
    20d6:	2182      	movs	r1, #130	; 0x82
    20d8:	05c9      	lsls	r1, r1, #23
    20da:	468c      	mov	ip, r1
    20dc:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    20de:	251f      	movs	r5, #31
    20e0:	402b      	ands	r3, r5
    20e2:	2401      	movs	r4, #1
    20e4:	1c21      	adds	r1, r4, #0
    20e6:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    20e8:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    20ea:	4a28      	ldr	r2, [pc, #160]	; (218c <trx_spi_init+0xec>)
    20ec:	7014      	strb	r4, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    20ee:	2300      	movs	r3, #0
    20f0:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    20f2:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    20f4:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    20f6:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    20f8:	7494      	strb	r4, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    20fa:	74d4      	strb	r4, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    20fc:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    20fe:	2124      	movs	r1, #36	; 0x24
    2100:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2102:	61d3      	str	r3, [r2, #28]
    2104:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    2106:	2380      	movs	r3, #128	; 0x80
    2108:	025b      	lsls	r3, r3, #9
    210a:	60d3      	str	r3, [r2, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    210c:	4b20      	ldr	r3, [pc, #128]	; (2190 <trx_spi_init+0xf0>)
    210e:	6193      	str	r3, [r2, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    2110:	4b20      	ldr	r3, [pc, #128]	; (2194 <trx_spi_init+0xf4>)
    2112:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    2114:	2301      	movs	r3, #1
    2116:	425b      	negs	r3, r3
    2118:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    211a:	4b1f      	ldr	r3, [pc, #124]	; (2198 <trx_spi_init+0xf8>)
    211c:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    211e:	4b1f      	ldr	r3, [pc, #124]	; (219c <trx_spi_init+0xfc>)
    2120:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    2122:	4f1f      	ldr	r7, [pc, #124]	; (21a0 <trx_spi_init+0x100>)
    2124:	1c38      	adds	r0, r7, #0
    2126:	491f      	ldr	r1, [pc, #124]	; (21a4 <trx_spi_init+0x104>)
    2128:	4b1f      	ldr	r3, [pc, #124]	; (21a8 <trx_spi_init+0x108>)
    212a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    212c:	683e      	ldr	r6, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    212e:	1c30      	adds	r0, r6, #0
    2130:	4b1e      	ldr	r3, [pc, #120]	; (21ac <trx_spi_init+0x10c>)
    2132:	4798      	blx	r3
    2134:	4005      	ands	r5, r0
    2136:	40ac      	lsls	r4, r5
    2138:	4b1d      	ldr	r3, [pc, #116]	; (21b0 <trx_spi_init+0x110>)
    213a:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    213c:	683a      	ldr	r2, [r7, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    213e:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    2140:	2b00      	cmp	r3, #0
    2142:	d1fc      	bne.n	213e <trx_spi_init+0x9e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2144:	6833      	ldr	r3, [r6, #0]
    2146:	2502      	movs	r5, #2
    2148:	432b      	orrs	r3, r5
    214a:	6033      	str	r3, [r6, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    214c:	ac01      	add	r4, sp, #4
    214e:	1c20      	adds	r0, r4, #0
    2150:	4b18      	ldr	r3, [pc, #96]	; (21b4 <trx_spi_init+0x114>)
    2152:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    2154:	232e      	movs	r3, #46	; 0x2e
    2156:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    2158:	23b8      	movs	r3, #184	; 0xb8
    215a:	039b      	lsls	r3, r3, #14
    215c:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    215e:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMC21)
	eint_chan_conf.enable_async_edge_detection = false;
    2160:	2300      	movs	r3, #0
    2162:	7263      	strb	r3, [r4, #9]
	#else
	eint_chan_conf.wake_if_sleeping    = true;
	#endif
	eint_chan_conf.filter_input_signal = false;
    2164:	72a3      	strb	r3, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    2166:	3301      	adds	r3, #1
    2168:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    216a:	200e      	movs	r0, #14
    216c:	1c21      	adds	r1, r4, #0
    216e:	4b12      	ldr	r3, [pc, #72]	; (21b8 <trx_spi_init+0x118>)
    2170:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    2172:	4812      	ldr	r0, [pc, #72]	; (21bc <trx_spi_init+0x11c>)
    2174:	210e      	movs	r1, #14
    2176:	2200      	movs	r2, #0
    2178:	4b11      	ldr	r3, [pc, #68]	; (21c0 <trx_spi_init+0x120>)
    217a:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    217c:	b005      	add	sp, #20
    217e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2180:	20000ce0 	.word	0x20000ce0
    2184:	20000ce4 	.word	0x20000ce4
    2188:	0000340d 	.word	0x0000340d
    218c:	20000ce8 	.word	0x20000ce8
    2190:	003d0900 	.word	0x003d0900
    2194:	00100002 	.word	0x00100002
    2198:	00120002 	.word	0x00120002
    219c:	00130002 	.word	0x00130002
    21a0:	20000d20 	.word	0x20000d20
    21a4:	42000800 	.word	0x42000800
    21a8:	0000011d 	.word	0x0000011d
    21ac:	00003875 	.word	0x00003875
    21b0:	e000e100 	.word	0xe000e100
    21b4:	0000336d 	.word	0x0000336d
    21b8:	00003381 	.word	0x00003381
    21bc:	00002081 	.word	0x00002081
    21c0:	00003215 	.word	0x00003215

000021c4 <PhyReset>:

void PhyReset(void)
{
    21c4:	b570      	push	{r4, r5, r6, lr}
    21c6:	4c08      	ldr	r4, [pc, #32]	; (21e8 <PhyReset+0x24>)
    21c8:	2580      	movs	r5, #128	; 0x80
    21ca:	016d      	lsls	r5, r5, #5
    21cc:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    21ce:	2380      	movs	r3, #128	; 0x80
    21d0:	021b      	lsls	r3, r3, #8
    21d2:	6163      	str	r3, [r4, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    21d4:	20a5      	movs	r0, #165	; 0xa5
    21d6:	0040      	lsls	r0, r0, #1
    21d8:	4e04      	ldr	r6, [pc, #16]	; (21ec <PhyReset+0x28>)
    21da:	47b0      	blx	r6
    21dc:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    21de:	200a      	movs	r0, #10
    21e0:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    21e2:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    21e4:	bd70      	pop	{r4, r5, r6, pc}
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	41000080 	.word	0x41000080
    21ec:	00002681 	.word	0x00002681

000021f0 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    21f0:	b570      	push	{r4, r5, r6, lr}
    21f2:	1c05      	adds	r5, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    21f4:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    21f8:	4263      	negs	r3, r4
    21fa:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    21fc:	b672      	cpsid	i
    21fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2202:	2200      	movs	r2, #0
    2204:	4b33      	ldr	r3, [pc, #204]	; (22d4 <trx_reg_read+0xe4>)
    2206:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMC21 || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2208:	4e33      	ldr	r6, [pc, #204]	; (22d8 <trx_reg_read+0xe8>)
    220a:	1c30      	adds	r0, r6, #0
    220c:	4933      	ldr	r1, [pc, #204]	; (22dc <trx_reg_read+0xec>)
    220e:	3201      	adds	r2, #1
    2210:	4b33      	ldr	r3, [pc, #204]	; (22e0 <trx_reg_read+0xf0>)
    2212:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2214:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2216:	2101      	movs	r1, #1
    2218:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    221a:	420a      	tst	r2, r1
    221c:	d0fc      	beq.n	2218 <trx_reg_read+0x28>
    221e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2220:	07d2      	lsls	r2, r2, #31
    2222:	d502      	bpl.n	222a <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2224:	2280      	movs	r2, #128	; 0x80
    2226:	4315      	orrs	r5, r2
    2228:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    222a:	2102      	movs	r1, #2
    222c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    222e:	420a      	tst	r2, r1
    2230:	d0fc      	beq.n	222c <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2232:	2104      	movs	r1, #4
    2234:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2236:	420a      	tst	r2, r1
    2238:	d0fc      	beq.n	2234 <trx_reg_read+0x44>
    223a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    223c:	0752      	lsls	r2, r2, #29
    223e:	d514      	bpl.n	226a <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2240:	8b5a      	ldrh	r2, [r3, #26]
    2242:	0752      	lsls	r2, r2, #29
    2244:	d503      	bpl.n	224e <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2246:	8b59      	ldrh	r1, [r3, #26]
    2248:	2204      	movs	r2, #4
    224a:	430a      	orrs	r2, r1
    224c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    224e:	4a22      	ldr	r2, [pc, #136]	; (22d8 <trx_reg_read+0xe8>)
    2250:	7992      	ldrb	r2, [r2, #6]
    2252:	2a01      	cmp	r2, #1
    2254:	d105      	bne.n	2262 <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2258:	05d2      	lsls	r2, r2, #23
    225a:	0dd2      	lsrs	r2, r2, #23
    225c:	4921      	ldr	r1, [pc, #132]	; (22e4 <trx_reg_read+0xf4>)
    225e:	800a      	strh	r2, [r1, #0]
    2260:	e003      	b.n	226a <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2264:	b2d2      	uxtb	r2, r2
    2266:	491f      	ldr	r1, [pc, #124]	; (22e4 <trx_reg_read+0xf4>)
    2268:	800a      	strh	r2, [r1, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    226a:	2101      	movs	r1, #1
    226c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    226e:	420a      	tst	r2, r1
    2270:	d0fc      	beq.n	226c <trx_reg_read+0x7c>
    2272:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2274:	07d2      	lsls	r2, r2, #31
    2276:	d501      	bpl.n	227c <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2278:	2200      	movs	r2, #0
    227a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    227c:	2102      	movs	r1, #2
    227e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    2280:	420a      	tst	r2, r1
    2282:	d0fc      	beq.n	227e <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2284:	2104      	movs	r1, #4
    2286:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    2288:	420a      	tst	r2, r1
    228a:	d0fc      	beq.n	2286 <trx_reg_read+0x96>
    228c:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMC21 || SAMR21 || SAML21
	uint16_t register_value = 0;
    228e:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2290:	0752      	lsls	r2, r2, #29
    2292:	d510      	bpl.n	22b6 <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2294:	8b5a      	ldrh	r2, [r3, #26]
    2296:	0752      	lsls	r2, r2, #29
    2298:	d503      	bpl.n	22a2 <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    229a:	8b59      	ldrh	r1, [r3, #26]
    229c:	2204      	movs	r2, #4
    229e:	430a      	orrs	r2, r1
    22a0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    22a2:	4a0d      	ldr	r2, [pc, #52]	; (22d8 <trx_reg_read+0xe8>)
    22a4:	7992      	ldrb	r2, [r2, #6]
    22a6:	2a01      	cmp	r2, #1
    22a8:	d103      	bne.n	22b2 <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    22aa:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    22ac:	05ed      	lsls	r5, r5, #23
    22ae:	0ded      	lsrs	r5, r5, #23
    22b0:	e001      	b.n	22b6 <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    22b2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    22b4:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    22b6:	4808      	ldr	r0, [pc, #32]	; (22d8 <trx_reg_read+0xe8>)
    22b8:	4908      	ldr	r1, [pc, #32]	; (22dc <trx_reg_read+0xec>)
    22ba:	2200      	movs	r2, #0
    22bc:	4b08      	ldr	r3, [pc, #32]	; (22e0 <trx_reg_read+0xf0>)
    22be:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    22c0:	2c00      	cmp	r4, #0
    22c2:	d005      	beq.n	22d0 <trx_reg_read+0xe0>
		cpu_irq_enable();
    22c4:	2201      	movs	r2, #1
    22c6:	4b03      	ldr	r3, [pc, #12]	; (22d4 <trx_reg_read+0xe4>)
    22c8:	701a      	strb	r2, [r3, #0]
    22ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    22ce:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    22d0:	b2e8      	uxtb	r0, r5
}
    22d2:	bd70      	pop	{r4, r5, r6, pc}
    22d4:	20000008 	.word	0x20000008
    22d8:	20000d20 	.word	0x20000d20
    22dc:	20000ce4 	.word	0x20000ce4
    22e0:	00000339 	.word	0x00000339
    22e4:	20000cdc 	.word	0x20000cdc

000022e8 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    22e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ea:	1c06      	adds	r6, r0, #0
    22ec:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    22ee:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    22f2:	426b      	negs	r3, r5
    22f4:	415d      	adcs	r5, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    22f6:	b672      	cpsid	i
    22f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    22fc:	2200      	movs	r2, #0
    22fe:	4b34      	ldr	r3, [pc, #208]	; (23d0 <trx_reg_write+0xe8>)
    2300:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMC21 || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2302:	4f34      	ldr	r7, [pc, #208]	; (23d4 <trx_reg_write+0xec>)
    2304:	1c38      	adds	r0, r7, #0
    2306:	4934      	ldr	r1, [pc, #208]	; (23d8 <trx_reg_write+0xf0>)
    2308:	3201      	adds	r2, #1
    230a:	4b34      	ldr	r3, [pc, #208]	; (23dc <trx_reg_write+0xf4>)
    230c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    230e:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2310:	2101      	movs	r1, #1
    2312:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    2314:	420a      	tst	r2, r1
    2316:	d0fc      	beq.n	2312 <trx_reg_write+0x2a>
    2318:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    231a:	07d2      	lsls	r2, r2, #31
    231c:	d502      	bpl.n	2324 <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    231e:	22c0      	movs	r2, #192	; 0xc0
    2320:	4316      	orrs	r6, r2
    2322:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2324:	2102      	movs	r1, #2
    2326:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    2328:	420a      	tst	r2, r1
    232a:	d0fc      	beq.n	2326 <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    232c:	2104      	movs	r1, #4
    232e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2330:	420a      	tst	r2, r1
    2332:	d0fc      	beq.n	232e <trx_reg_write+0x46>
    2334:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2336:	0752      	lsls	r2, r2, #29
    2338:	d514      	bpl.n	2364 <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    233a:	8b5a      	ldrh	r2, [r3, #26]
    233c:	0752      	lsls	r2, r2, #29
    233e:	d503      	bpl.n	2348 <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2340:	8b59      	ldrh	r1, [r3, #26]
    2342:	2204      	movs	r2, #4
    2344:	430a      	orrs	r2, r1
    2346:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2348:	4a22      	ldr	r2, [pc, #136]	; (23d4 <trx_reg_write+0xec>)
    234a:	7992      	ldrb	r2, [r2, #6]
    234c:	2a01      	cmp	r2, #1
    234e:	d105      	bne.n	235c <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2352:	05d2      	lsls	r2, r2, #23
    2354:	0dd2      	lsrs	r2, r2, #23
    2356:	4922      	ldr	r1, [pc, #136]	; (23e0 <trx_reg_write+0xf8>)
    2358:	800a      	strh	r2, [r1, #0]
    235a:	e003      	b.n	2364 <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    235c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    235e:	b2d2      	uxtb	r2, r2
    2360:	491f      	ldr	r1, [pc, #124]	; (23e0 <trx_reg_write+0xf8>)
    2362:	800a      	strh	r2, [r1, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2364:	2101      	movs	r1, #1
    2366:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    2368:	420a      	tst	r2, r1
    236a:	d0fc      	beq.n	2366 <trx_reg_write+0x7e>
    236c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    236e:	07d2      	lsls	r2, r2, #31
    2370:	d500      	bpl.n	2374 <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2372:	629c      	str	r4, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2374:	2102      	movs	r1, #2
    2376:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    2378:	420a      	tst	r2, r1
    237a:	d0fc      	beq.n	2376 <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    237c:	2104      	movs	r1, #4
    237e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2380:	420a      	tst	r2, r1
    2382:	d0fc      	beq.n	237e <trx_reg_write+0x96>
    2384:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2386:	0752      	lsls	r2, r2, #29
    2388:	d514      	bpl.n	23b4 <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    238a:	8b5a      	ldrh	r2, [r3, #26]
    238c:	0752      	lsls	r2, r2, #29
    238e:	d503      	bpl.n	2398 <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2390:	8b59      	ldrh	r1, [r3, #26]
    2392:	2204      	movs	r2, #4
    2394:	430a      	orrs	r2, r1
    2396:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2398:	4a0e      	ldr	r2, [pc, #56]	; (23d4 <trx_reg_write+0xec>)
    239a:	7992      	ldrb	r2, [r2, #6]
    239c:	2a01      	cmp	r2, #1
    239e:	d105      	bne.n	23ac <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    23a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23a2:	05db      	lsls	r3, r3, #23
    23a4:	0ddb      	lsrs	r3, r3, #23
    23a6:	4a0e      	ldr	r2, [pc, #56]	; (23e0 <trx_reg_write+0xf8>)
    23a8:	8013      	strh	r3, [r2, #0]
    23aa:	e003      	b.n	23b4 <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    23ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23ae:	b2db      	uxtb	r3, r3
    23b0:	4a0b      	ldr	r2, [pc, #44]	; (23e0 <trx_reg_write+0xf8>)
    23b2:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    23b4:	4807      	ldr	r0, [pc, #28]	; (23d4 <trx_reg_write+0xec>)
    23b6:	4908      	ldr	r1, [pc, #32]	; (23d8 <trx_reg_write+0xf0>)
    23b8:	2200      	movs	r2, #0
    23ba:	4b08      	ldr	r3, [pc, #32]	; (23dc <trx_reg_write+0xf4>)
    23bc:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    23be:	2d00      	cmp	r5, #0
    23c0:	d005      	beq.n	23ce <trx_reg_write+0xe6>
		cpu_irq_enable();
    23c2:	2201      	movs	r2, #1
    23c4:	4b02      	ldr	r3, [pc, #8]	; (23d0 <trx_reg_write+0xe8>)
    23c6:	701a      	strb	r2, [r3, #0]
    23c8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    23cc:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    23ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23d0:	20000008 	.word	0x20000008
    23d4:	20000d20 	.word	0x20000d20
    23d8:	20000ce4 	.word	0x20000ce4
    23dc:	00000339 	.word	0x00000339
    23e0:	20000cdc 	.word	0x20000cdc

000023e4 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    23e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23e6:	465f      	mov	r7, fp
    23e8:	4656      	mov	r6, sl
    23ea:	464d      	mov	r5, r9
    23ec:	4644      	mov	r4, r8
    23ee:	b4f0      	push	{r4, r5, r6, r7}
    23f0:	1c05      	adds	r5, r0, #0
    23f2:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    23f4:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    23f8:	427a      	negs	r2, r7
    23fa:	417a      	adcs	r2, r7
    23fc:	4690      	mov	r8, r2
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    23fe:	b672      	cpsid	i
    2400:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2404:	2200      	movs	r2, #0
    2406:	4b41      	ldr	r3, [pc, #260]	; (250c <trx_frame_read+0x128>)
    2408:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMC21 || SAMR21 || SAML21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    240a:	4e41      	ldr	r6, [pc, #260]	; (2510 <trx_frame_read+0x12c>)
    240c:	1c30      	adds	r0, r6, #0
    240e:	4941      	ldr	r1, [pc, #260]	; (2514 <trx_frame_read+0x130>)
    2410:	3201      	adds	r2, #1
    2412:	4b41      	ldr	r3, [pc, #260]	; (2518 <trx_frame_read+0x134>)
    2414:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2416:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2418:	2101      	movs	r1, #1
    241a:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    241c:	420a      	tst	r2, r1
    241e:	d0fc      	beq.n	241a <trx_frame_read+0x36>
    2420:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2422:	07d2      	lsls	r2, r2, #31
    2424:	d501      	bpl.n	242a <trx_frame_read+0x46>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2426:	2220      	movs	r2, #32
    2428:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    242a:	2102      	movs	r1, #2
    242c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    242e:	420a      	tst	r2, r1
    2430:	d0fc      	beq.n	242c <trx_frame_read+0x48>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2432:	2104      	movs	r1, #4
    2434:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2436:	420a      	tst	r2, r1
    2438:	d0fc      	beq.n	2434 <trx_frame_read+0x50>
    243a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    243c:	0752      	lsls	r2, r2, #29
    243e:	d50f      	bpl.n	2460 <trx_frame_read+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2440:	8b5a      	ldrh	r2, [r3, #26]
    2442:	0752      	lsls	r2, r2, #29
    2444:	d503      	bpl.n	244e <trx_frame_read+0x6a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2446:	8b59      	ldrh	r1, [r3, #26]
    2448:	2204      	movs	r2, #4
    244a:	430a      	orrs	r2, r1
    244c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    244e:	4a30      	ldr	r2, [pc, #192]	; (2510 <trx_frame_read+0x12c>)
    2450:	7992      	ldrb	r2, [r2, #6]
    2452:	2a01      	cmp	r2, #1
    2454:	d109      	bne.n	246a <trx_frame_read+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2458:	05db      	lsls	r3, r3, #23
    245a:	0ddb      	lsrs	r3, r3, #23
    245c:	4a2f      	ldr	r2, [pc, #188]	; (251c <trx_frame_read+0x138>)
    245e:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    2460:	1e63      	subs	r3, r4, #1
    2462:	b2db      	uxtb	r3, r3
    2464:	2c00      	cmp	r4, #0
    2466:	d105      	bne.n	2474 <trx_frame_read+0x90>
    2468:	e03c      	b.n	24e4 <trx_frame_read+0x100>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    246c:	b2db      	uxtb	r3, r3
    246e:	4a2b      	ldr	r2, [pc, #172]	; (251c <trx_frame_read+0x138>)
    2470:	8013      	strh	r3, [r2, #0]
    2472:	e7f5      	b.n	2460 <trx_frame_read+0x7c>
    2474:	3301      	adds	r3, #1
    2476:	469c      	mov	ip, r3
    2478:	44ac      	add	ip, r5
    247a:	2620      	movs	r6, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    247c:	4b24      	ldr	r3, [pc, #144]	; (2510 <trx_frame_read+0x12c>)
    247e:	4699      	mov	r9, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2480:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2482:	2300      	movs	r3, #0
    2484:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2486:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2488:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    248a:	464f      	mov	r7, r9

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    248c:	2304      	movs	r3, #4
    248e:	469b      	mov	fp, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2490:	464b      	mov	r3, r9
    2492:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2494:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    2496:	4202      	tst	r2, r0
    2498:	d0fc      	beq.n	2494 <trx_frame_read+0xb0>
    249a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    249c:	4202      	tst	r2, r0
    249e:	d001      	beq.n	24a4 <trx_frame_read+0xc0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    24a0:	4652      	mov	r2, sl
    24a2:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    24a4:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    24a6:	4222      	tst	r2, r4
    24a8:	d0fc      	beq.n	24a4 <trx_frame_read+0xc0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    24aa:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    24ac:	420a      	tst	r2, r1
    24ae:	d0fc      	beq.n	24aa <trx_frame_read+0xc6>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    24b0:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    24b2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    24b4:	420a      	tst	r2, r1
    24b6:	d011      	beq.n	24dc <trx_frame_read+0xf8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    24b8:	8b5a      	ldrh	r2, [r3, #26]
    24ba:	420a      	tst	r2, r1
    24bc:	d004      	beq.n	24c8 <trx_frame_read+0xe4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    24be:	8b5a      	ldrh	r2, [r3, #26]
    24c0:	465e      	mov	r6, fp
    24c2:	4332      	orrs	r2, r6
    24c4:	b292      	uxth	r2, r2
    24c6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    24c8:	4a11      	ldr	r2, [pc, #68]	; (2510 <trx_frame_read+0x12c>)
    24ca:	7992      	ldrb	r2, [r2, #6]
    24cc:	2a01      	cmp	r2, #1
    24ce:	d103      	bne.n	24d8 <trx_frame_read+0xf4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    24d0:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    24d2:	05f6      	lsls	r6, r6, #23
    24d4:	0df6      	lsrs	r6, r6, #23
    24d6:	e001      	b.n	24dc <trx_frame_read+0xf8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    24d8:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    24da:	b2f6      	uxtb	r6, r6
		}
		spi_read(&master, &temp);
		*data = temp;
    24dc:	702e      	strb	r6, [r5, #0]
		data++;
    24de:	3501      	adds	r5, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    24e0:	4565      	cmp	r5, ip
    24e2:	d1d5      	bne.n	2490 <trx_frame_read+0xac>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    24e4:	480a      	ldr	r0, [pc, #40]	; (2510 <trx_frame_read+0x12c>)
    24e6:	490b      	ldr	r1, [pc, #44]	; (2514 <trx_frame_read+0x130>)
    24e8:	2200      	movs	r2, #0
    24ea:	4b0b      	ldr	r3, [pc, #44]	; (2518 <trx_frame_read+0x134>)
    24ec:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    24ee:	4643      	mov	r3, r8
    24f0:	2b00      	cmp	r3, #0
    24f2:	d005      	beq.n	2500 <trx_frame_read+0x11c>
		cpu_irq_enable();
    24f4:	2201      	movs	r2, #1
    24f6:	4b05      	ldr	r3, [pc, #20]	; (250c <trx_frame_read+0x128>)
    24f8:	701a      	strb	r2, [r3, #0]
    24fa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    24fe:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    2500:	bc3c      	pop	{r2, r3, r4, r5}
    2502:	4690      	mov	r8, r2
    2504:	4699      	mov	r9, r3
    2506:	46a2      	mov	sl, r4
    2508:	46ab      	mov	fp, r5
    250a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    250c:	20000008 	.word	0x20000008
    2510:	20000d20 	.word	0x20000d20
    2514:	20000ce4 	.word	0x20000ce4
    2518:	00000339 	.word	0x00000339
    251c:	20000cdc 	.word	0x20000cdc

00002520 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    2520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2522:	464f      	mov	r7, r9
    2524:	4646      	mov	r6, r8
    2526:	b4c0      	push	{r6, r7}
    2528:	1c04      	adds	r4, r0, #0
    252a:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    252c:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    2530:	4272      	negs	r2, r6
    2532:	4172      	adcs	r2, r6
    2534:	4691      	mov	r9, r2
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2536:	b672      	cpsid	i
    2538:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    253c:	2200      	movs	r2, #0
    253e:	4b3c      	ldr	r3, [pc, #240]	; (2630 <trx_frame_write+0x110>)
    2540:	701a      	strb	r2, [r3, #0]
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMC21 || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2542:	4f3c      	ldr	r7, [pc, #240]	; (2634 <trx_frame_write+0x114>)
    2544:	1c38      	adds	r0, r7, #0
    2546:	493c      	ldr	r1, [pc, #240]	; (2638 <trx_frame_write+0x118>)
    2548:	3201      	adds	r2, #1
    254a:	4b3c      	ldr	r3, [pc, #240]	; (263c <trx_frame_write+0x11c>)
    254c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    254e:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2550:	2101      	movs	r1, #1
    2552:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    2554:	420a      	tst	r2, r1
    2556:	d0fc      	beq.n	2552 <trx_frame_write+0x32>
    2558:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    255a:	07d2      	lsls	r2, r2, #31
    255c:	d501      	bpl.n	2562 <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    255e:	2260      	movs	r2, #96	; 0x60
    2560:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2562:	2102      	movs	r1, #2
    2564:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    2566:	420a      	tst	r2, r1
    2568:	d0fc      	beq.n	2564 <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    256a:	2104      	movs	r1, #4
    256c:	7e1a      	ldrb	r2, [r3, #24]
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    256e:	420a      	tst	r2, r1
    2570:	d0fc      	beq.n	256c <trx_frame_write+0x4c>
    2572:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2574:	0752      	lsls	r2, r2, #29
    2576:	d50f      	bpl.n	2598 <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2578:	8b5a      	ldrh	r2, [r3, #26]
    257a:	0752      	lsls	r2, r2, #29
    257c:	d503      	bpl.n	2586 <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    257e:	8b59      	ldrh	r1, [r3, #26]
    2580:	2204      	movs	r2, #4
    2582:	430a      	orrs	r2, r1
    2584:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2586:	4a2b      	ldr	r2, [pc, #172]	; (2634 <trx_frame_write+0x114>)
    2588:	7992      	ldrb	r2, [r2, #6]
    258a:	2a01      	cmp	r2, #1
    258c:	d10e      	bne.n	25ac <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    258e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2590:	05d2      	lsls	r2, r2, #23
    2592:	0dd2      	lsrs	r2, r2, #23
    2594:	492a      	ldr	r1, [pc, #168]	; (2640 <trx_frame_write+0x120>)
    2596:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2598:	4a26      	ldr	r2, [pc, #152]	; (2634 <trx_frame_write+0x114>)
    259a:	7992      	ldrb	r2, [r2, #6]
    259c:	4690      	mov	r8, r2
    259e:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    25a0:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    25a2:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    25a4:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    25a6:	2204      	movs	r2, #4
    25a8:	4694      	mov	ip, r2
    25aa:	e02b      	b.n	2604 <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    25ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25ae:	b2d2      	uxtb	r2, r2
    25b0:	4923      	ldr	r1, [pc, #140]	; (2640 <trx_frame_write+0x120>)
    25b2:	800a      	strh	r2, [r1, #0]
    25b4:	e7f0      	b.n	2598 <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    25b6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    25b8:	423a      	tst	r2, r7
    25ba:	d0fc      	beq.n	25b6 <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    25bc:	7832      	ldrb	r2, [r6, #0]
    25be:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    25c0:	4239      	tst	r1, r7
    25c2:	d000      	beq.n	25c6 <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    25c4:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    25c6:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    25c8:	4202      	tst	r2, r0
    25ca:	d0fc      	beq.n	25c6 <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    25cc:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    25ce:	4222      	tst	r2, r4
    25d0:	d0fc      	beq.n	25cc <trx_frame_write+0xac>
    25d2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    25d4:	4222      	tst	r2, r4
    25d6:	d014      	beq.n	2602 <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    25d8:	8b5a      	ldrh	r2, [r3, #26]
    25da:	4222      	tst	r2, r4
    25dc:	d004      	beq.n	25e8 <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    25de:	8b5a      	ldrh	r2, [r3, #26]
    25e0:	4661      	mov	r1, ip
    25e2:	430a      	orrs	r2, r1
    25e4:	b292      	uxth	r2, r2
    25e6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    25e8:	4642      	mov	r2, r8
    25ea:	2a01      	cmp	r2, #1
    25ec:	d105      	bne.n	25fa <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    25ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25f0:	05d2      	lsls	r2, r2, #23
    25f2:	0dd2      	lsrs	r2, r2, #23
    25f4:	4912      	ldr	r1, [pc, #72]	; (2640 <trx_frame_write+0x120>)
    25f6:	800a      	strh	r2, [r1, #0]
    25f8:	e003      	b.n	2602 <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    25fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25fc:	b2d2      	uxtb	r2, r2
    25fe:	4910      	ldr	r1, [pc, #64]	; (2640 <trx_frame_write+0x120>)
    2600:	800a      	strh	r2, [r1, #0]
    2602:	3601      	adds	r6, #1
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    2604:	3d01      	subs	r5, #1
    2606:	b2ed      	uxtb	r5, r5
    2608:	2dff      	cmp	r5, #255	; 0xff
    260a:	d1d4      	bne.n	25b6 <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    260c:	4809      	ldr	r0, [pc, #36]	; (2634 <trx_frame_write+0x114>)
    260e:	490a      	ldr	r1, [pc, #40]	; (2638 <trx_frame_write+0x118>)
    2610:	2200      	movs	r2, #0
    2612:	4b0a      	ldr	r3, [pc, #40]	; (263c <trx_frame_write+0x11c>)
    2614:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2616:	464b      	mov	r3, r9
    2618:	2b00      	cmp	r3, #0
    261a:	d005      	beq.n	2628 <trx_frame_write+0x108>
		cpu_irq_enable();
    261c:	2201      	movs	r2, #1
    261e:	4b04      	ldr	r3, [pc, #16]	; (2630 <trx_frame_write+0x110>)
    2620:	701a      	strb	r2, [r3, #0]
    2622:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2626:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    2628:	bc0c      	pop	{r2, r3}
    262a:	4690      	mov	r8, r2
    262c:	4699      	mov	r9, r3
    262e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2630:	20000008 	.word	0x20000008
    2634:	20000d20 	.word	0x20000d20
    2638:	20000ce4 	.word	0x20000ce4
    263c:	00000339 	.word	0x00000339
    2640:	20000cdc 	.word	0x20000cdc

00002644 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    2644:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    2646:	2000      	movs	r0, #0
    2648:	4b08      	ldr	r3, [pc, #32]	; (266c <delay_init+0x28>)
    264a:	4798      	blx	r3
	cycles_per_ms /= 1000;
    264c:	4c08      	ldr	r4, [pc, #32]	; (2670 <delay_init+0x2c>)
    264e:	21fa      	movs	r1, #250	; 0xfa
    2650:	0089      	lsls	r1, r1, #2
    2652:	47a0      	blx	r4
    2654:	4b07      	ldr	r3, [pc, #28]	; (2674 <delay_init+0x30>)
    2656:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    2658:	21fa      	movs	r1, #250	; 0xfa
    265a:	0089      	lsls	r1, r1, #2
    265c:	47a0      	blx	r4
    265e:	4b06      	ldr	r3, [pc, #24]	; (2678 <delay_init+0x34>)
    2660:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2662:	2205      	movs	r2, #5
    2664:	4b05      	ldr	r3, [pc, #20]	; (267c <delay_init+0x38>)
    2666:	601a      	str	r2, [r3, #0]
}
    2668:	bd10      	pop	{r4, pc}
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	000040d5 	.word	0x000040d5
    2670:	00004ac1 	.word	0x00004ac1
    2674:	20000004 	.word	0x20000004
    2678:	20000000 	.word	0x20000000
    267c:	e000e010 	.word	0xe000e010

00002680 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    2680:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    2682:	4b08      	ldr	r3, [pc, #32]	; (26a4 <delay_cycles_us+0x24>)
    2684:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    2686:	4a08      	ldr	r2, [pc, #32]	; (26a8 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    2688:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    268a:	2180      	movs	r1, #128	; 0x80
    268c:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
    268e:	e006      	b.n	269e <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    2690:	2c00      	cmp	r4, #0
    2692:	d004      	beq.n	269e <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
    2694:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    2696:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2698:	6813      	ldr	r3, [r2, #0]
    269a:	420b      	tst	r3, r1
    269c:	d0fc      	beq.n	2698 <delay_cycles_us+0x18>
    269e:	3801      	subs	r0, #1
    26a0:	d2f6      	bcs.n	2690 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
    26a2:	bd30      	pop	{r4, r5, pc}
    26a4:	20000000 	.word	0x20000000
    26a8:	e000e010 	.word	0xe000e010

000026ac <_adc_get_inst_index>:
 *
 * \return Index of the given ADC module instance.
 */
uint8_t _adc_get_inst_index(
		Adc *const hw)
{
    26ac:	b510      	push	{r4, lr}
    26ae:	b082      	sub	sp, #8
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;
    26b0:	466a      	mov	r2, sp
    26b2:	4b08      	ldr	r3, [pc, #32]	; (26d4 <_adc_get_inst_index+0x28>)
    26b4:	cb12      	ldmia	r3!, {r1, r4}
    26b6:	c212      	stmia	r2!, {r1, r4}

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
		if (hw == adc_modules[i]) {
    26b8:	9b00      	ldr	r3, [sp, #0]
    26ba:	4283      	cmp	r3, r0
    26bc:	d005      	beq.n	26ca <_adc_get_inst_index+0x1e>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    26be:	2300      	movs	r3, #0
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
		if (hw == adc_modules[i]) {
    26c0:	9a01      	ldr	r2, [sp, #4]
    26c2:	4282      	cmp	r2, r0
    26c4:	d103      	bne.n	26ce <_adc_get_inst_index+0x22>
    26c6:	3301      	adds	r3, #1
    26c8:	e000      	b.n	26cc <_adc_get_inst_index+0x20>
{
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
    26ca:	2300      	movs	r3, #0
		if (hw == adc_modules[i]) {
			return i;
    26cc:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    26ce:	1c18      	adds	r0, r3, #0
    26d0:	b002      	add	sp, #8
    26d2:	bd10      	pop	{r4, pc}
    26d4:	00005e84 	.word	0x00005e84

000026d8 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    26d8:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    26da:	2300      	movs	r3, #0
    26dc:	2200      	movs	r2, #0
    26de:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
    26e0:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
    26e2:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    26e4:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    26e6:	2100      	movs	r1, #0
    26e8:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    26ea:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
    26ec:	61c3      	str	r3, [r0, #28]
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
    26ee:	2401      	movs	r4, #1
    26f0:	7104      	strb	r4, [r0, #4]
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
    26f2:	24c0      	movs	r4, #192	; 0xc0
    26f4:	0164      	lsls	r4, r4, #5
    26f6:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    26f8:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    26fa:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
    26fc:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
    26fe:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
    2700:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    2702:	242a      	movs	r4, #42	; 0x2a
    2704:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
    2706:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
    2708:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
    270a:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
    270c:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
    270e:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
    2710:	3c06      	subs	r4, #6
    2712:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2714:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    2716:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    2718:	7541      	strb	r1, [r0, #21]
}
    271a:	bd10      	pop	{r4, pc}

0000271c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    271c:	b5f0      	push	{r4, r5, r6, r7, lr}
    271e:	465f      	mov	r7, fp
    2720:	4656      	mov	r6, sl
    2722:	464d      	mov	r5, r9
    2724:	4644      	mov	r4, r8
    2726:	b4f0      	push	{r4, r5, r6, r7}
    2728:	b09d      	sub	sp, #116	; 0x74
    272a:	1c05      	adds	r5, r0, #0
    272c:	1c0e      	adds	r6, r1, #0
    272e:	1c17      	adds	r7, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
    2730:	1c08      	adds	r0, r1, #0
    2732:	4bcc      	ldr	r3, [pc, #816]	; (2a64 <adc_init+0x348>)
    2734:	4798      	blx	r3
    2736:	1c04      	adds	r4, r0, #0
    2738:	9000      	str	r0, [sp, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    273a:	602e      	str	r6, [r5, #0]
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    273c:	4aca      	ldr	r2, [pc, #808]	; (2a68 <adc_init+0x34c>)
    273e:	69d1      	ldr	r1, [r2, #28]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
    2740:	0080      	lsls	r0, r0, #2
    2742:	4bca      	ldr	r3, [pc, #808]	; (2a6c <adc_init+0x350>)
    2744:	58c3      	ldr	r3, [r0, r3]
    2746:	430b      	orrs	r3, r1
    2748:	61d3      	str	r3, [r2, #28]
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    274a:	7833      	ldrb	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    274c:	2005      	movs	r0, #5
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    274e:	07db      	lsls	r3, r3, #31
    2750:	d500      	bpl.n	2754 <adc_init+0x38>
    2752:	e258      	b.n	2c06 <adc_init+0x4ea>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2754:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2756:	8c13      	ldrh	r3, [r2, #32]
    2758:	b29b      	uxth	r3, r3
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	while (adc_is_syncing(module_inst)) {
    275a:	2b00      	cmp	r3, #0
    275c:	d1fb      	bne.n	2756 <adc_init+0x3a>
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    275e:	7833      	ldrb	r3, [r6, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    2760:	201c      	movs	r0, #28

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2762:	079b      	lsls	r3, r3, #30
    2764:	d500      	bpl.n	2768 <adc_init+0x4c>
    2766:	e24e      	b.n	2c06 <adc_init+0x4ea>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    2768:	787b      	ldrb	r3, [r7, #1]
    276a:	712b      	strb	r3, [r5, #4]

	/* Make sure the voltage reference is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
    276c:	2b00      	cmp	r3, #0
    276e:	d000      	beq.n	2772 <adc_init+0x56>
    2770:	e22f      	b.n	2bd2 <adc_init+0x4b6>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
    2772:	4abf      	ldr	r2, [pc, #764]	; (2a70 <adc_init+0x354>)
    2774:	69d1      	ldr	r1, [r2, #28]
    2776:	3304      	adds	r3, #4
    2778:	430b      	orrs	r3, r1
    277a:	61d3      	str	r3, [r2, #28]
    277c:	e229      	b.n	2bd2 <adc_init+0x4b6>
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[instance] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    277e:	7b3b      	ldrb	r3, [r7, #12]
    2780:	2b00      	cmp	r3, #0
    2782:	d102      	bne.n	278a <adc_init+0x6e>
			!config->freerunning) {
		module_inst->software_trigger = true;
    2784:	3301      	adds	r3, #1
    2786:	776b      	strb	r3, [r5, #29]
    2788:	e001      	b.n	278e <adc_init+0x72>
	} else {
		module_inst->software_trigger = false;
    278a:	2300      	movs	r3, #0
    278c:	776b      	strb	r3, [r5, #29]
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    278e:	682b      	ldr	r3, [r5, #0]
    2790:	469a      	mov	sl, r3

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    2792:	783b      	ldrb	r3, [r7, #0]
    2794:	aa02      	add	r2, sp, #8
    2796:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
    2798:	4bb6      	ldr	r3, [pc, #728]	; (2a74 <adc_init+0x358>)
    279a:	5d1e      	ldrb	r6, [r3, r4]
    279c:	1c30      	adds	r0, r6, #0
    279e:	1c11      	adds	r1, r2, #0
    27a0:	4bb5      	ldr	r3, [pc, #724]	; (2a78 <adc_init+0x35c>)
    27a2:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
    27a4:	1c30      	adds	r0, r6, #0
    27a6:	4bb5      	ldr	r3, [pc, #724]	; (2a7c <adc_init+0x360>)
    27a8:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
    27aa:	793b      	ldrb	r3, [r7, #4]
    27ac:	4698      	mov	r8, r3
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
	const uint32_t pinmapping0[] = {
    27ae:	ae04      	add	r6, sp, #16
    27b0:	4bb3      	ldr	r3, [pc, #716]	; (2a80 <adc_init+0x364>)
    27b2:	469c      	mov	ip, r3
    27b4:	1c1a      	adds	r2, r3, #0
    27b6:	3208      	adds	r2, #8
    27b8:	1c31      	adds	r1, r6, #0
    27ba:	ca49      	ldmia	r2!, {r0, r3, r6}
    27bc:	c149      	stmia	r1!, {r0, r3, r6}
    27be:	ca49      	ldmia	r2!, {r0, r3, r6}
    27c0:	c149      	stmia	r1!, {r0, r3, r6}
    27c2:	ca49      	ldmia	r2!, {r0, r3, r6}
    27c4:	c149      	stmia	r1!, {r0, r3, r6}
    27c6:	ca49      	ldmia	r2!, {r0, r3, r6}
    27c8:	c149      	stmia	r1!, {r0, r3, r6}
			PIN_PA10B_ADC0_AIN10, PIN_PA11B_ADC0_AIN11,
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
		};
	const uint32_t pinmapping1[] = {
    27ca:	a910      	add	r1, sp, #64	; 0x40
    27cc:	4663      	mov	r3, ip
    27ce:	3338      	adds	r3, #56	; 0x38
    27d0:	1c0a      	adds	r2, r1, #0
    27d2:	cb43      	ldmia	r3!, {r0, r1, r6}
    27d4:	c243      	stmia	r2!, {r0, r1, r6}
    27d6:	cb43      	ldmia	r3!, {r0, r1, r6}
    27d8:	c243      	stmia	r2!, {r0, r1, r6}
    27da:	cb43      	ldmia	r3!, {r0, r1, r6}
    27dc:	c243      	stmia	r2!, {r0, r1, r6}
    27de:	cb43      	ldmia	r3!, {r0, r1, r6}
    27e0:	c243      	stmia	r2!, {r0, r1, r6}
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};

	switch(index) {
    27e2:	9b00      	ldr	r3, [sp, #0]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d006      	beq.n	27f6 <adc_init+0xda>
	case 0:
		pinmapping = pinmapping0;
		break;
	case 1:
		pinmapping = pinmapping1;
    27e8:	aa10      	add	r2, sp, #64	; 0x40
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
    27ea:	3b01      	subs	r3, #1
    27ec:	4258      	negs	r0, r3
    27ee:	4158      	adcs	r0, r3
    27f0:	4243      	negs	r3, r0
    27f2:	401a      	ands	r2, r3
    27f4:	e000      	b.n	27f8 <adc_init+0xdc>
#   endif
	};

	switch(index) {
	case 0:
		pinmapping = pinmapping0;
    27f6:	aa04      	add	r2, sp, #16
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
    27f8:	00a3      	lsls	r3, r4, #2
    27fa:	49a2      	ldr	r1, [pc, #648]	; (2a84 <adc_init+0x368>)
    27fc:	585b      	ldr	r3, [r3, r1]
    27fe:	4699      	mov	r9, r3
    2800:	4598      	cmp	r8, r3
    2802:	d80c      	bhi.n	281e <adc_init+0x102>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2804:	4643      	mov	r3, r8
    2806:	0098      	lsls	r0, r3, #2
    2808:	5880      	ldr	r0, [r0, r2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    280a:	a903      	add	r1, sp, #12
    280c:	2300      	movs	r3, #0
    280e:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2810:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2812:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2814:	3301      	adds	r3, #1
    2816:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    2818:	b2c0      	uxtb	r0, r0
    281a:	4b9b      	ldr	r3, [pc, #620]	; (2a88 <adc_init+0x36c>)
    281c:	4798      	blx	r3
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
	system_gclk_chan_enable(_adc_gclk_ids[index]);

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);
    281e:	88fb      	ldrh	r3, [r7, #6]
    2820:	4698      	mov	r8, r3
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
	const uint32_t pinmapping0[] = {
    2822:	ae04      	add	r6, sp, #16
    2824:	4b96      	ldr	r3, [pc, #600]	; (2a80 <adc_init+0x364>)
    2826:	469c      	mov	ip, r3
    2828:	1c1a      	adds	r2, r3, #0
    282a:	3208      	adds	r2, #8
    282c:	1c31      	adds	r1, r6, #0
    282e:	ca49      	ldmia	r2!, {r0, r3, r6}
    2830:	c149      	stmia	r1!, {r0, r3, r6}
    2832:	ca49      	ldmia	r2!, {r0, r3, r6}
    2834:	c149      	stmia	r1!, {r0, r3, r6}
    2836:	ca49      	ldmia	r2!, {r0, r3, r6}
    2838:	c149      	stmia	r1!, {r0, r3, r6}
    283a:	ca49      	ldmia	r2!, {r0, r3, r6}
    283c:	c149      	stmia	r1!, {r0, r3, r6}
			PIN_PA10B_ADC0_AIN10, PIN_PA11B_ADC0_AIN11,
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
		};
	const uint32_t pinmapping1[] = {
    283e:	a910      	add	r1, sp, #64	; 0x40
    2840:	4663      	mov	r3, ip
    2842:	3338      	adds	r3, #56	; 0x38
    2844:	1c0a      	adds	r2, r1, #0
    2846:	cb43      	ldmia	r3!, {r0, r1, r6}
    2848:	c243      	stmia	r2!, {r0, r1, r6}
    284a:	cb43      	ldmia	r3!, {r0, r1, r6}
    284c:	c243      	stmia	r2!, {r0, r1, r6}
    284e:	cb43      	ldmia	r3!, {r0, r1, r6}
    2850:	c243      	stmia	r2!, {r0, r1, r6}
    2852:	cb43      	ldmia	r3!, {r0, r1, r6}
    2854:	c243      	stmia	r2!, {r0, r1, r6}
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};

	switch(index) {
    2856:	9b00      	ldr	r3, [sp, #0]
    2858:	2b00      	cmp	r3, #0
    285a:	d006      	beq.n	286a <adc_init+0x14e>
	case 0:
		pinmapping = pinmapping0;
		break;
	case 1:
		pinmapping = pinmapping1;
    285c:	aa10      	add	r2, sp, #64	; 0x40
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
    285e:	3b01      	subs	r3, #1
    2860:	4258      	negs	r0, r3
    2862:	4158      	adcs	r0, r3
    2864:	4243      	negs	r3, r0
    2866:	401a      	ands	r2, r3
    2868:	e000      	b.n	286c <adc_init+0x150>
#   endif
	};

	switch(index) {
	case 0:
		pinmapping = pinmapping0;
    286a:	aa04      	add	r2, sp, #16
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
    286c:	45c8      	cmp	r8, r9
    286e:	d900      	bls.n	2872 <adc_init+0x156>
    2870:	e1c0      	b.n	2bf4 <adc_init+0x4d8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2872:	4643      	mov	r3, r8
    2874:	0098      	lsls	r0, r3, #2
    2876:	5880      	ldr	r0, [r0, r2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2878:	a903      	add	r1, sp, #12
    287a:	2300      	movs	r3, #0
    287c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    287e:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2880:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2882:	3301      	adds	r3, #1
    2884:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    2886:	b2c0      	uxtb	r0, r0
    2888:	4b7f      	ldr	r3, [pc, #508]	; (2a88 <adc_init+0x36c>)
    288a:	4798      	blx	r3
    288c:	e1b2      	b.n	2bf4 <adc_init+0x4d8>
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
		if(config->positive_input_sequence_mask_enable & (1 << i)){
    288e:	2301      	movs	r3, #1
    2890:	4642      	mov	r2, r8
    2892:	4093      	lsls	r3, r2
    2894:	693a      	ldr	r2, [r7, #16]
    2896:	421a      	tst	r2, r3
    2898:	d030      	beq.n	28fc <adc_init+0x1e0>
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
	const uint32_t pinmapping0[] = {
    289a:	a804      	add	r0, sp, #16
    289c:	1c03      	adds	r3, r0, #0
    289e:	465a      	mov	r2, fp
    28a0:	ca43      	ldmia	r2!, {r0, r1, r6}
    28a2:	c343      	stmia	r3!, {r0, r1, r6}
    28a4:	ca43      	ldmia	r2!, {r0, r1, r6}
    28a6:	c343      	stmia	r3!, {r0, r1, r6}
    28a8:	ca43      	ldmia	r2!, {r0, r1, r6}
    28aa:	c343      	stmia	r3!, {r0, r1, r6}
    28ac:	ca43      	ldmia	r2!, {r0, r1, r6}
    28ae:	c343      	stmia	r3!, {r0, r1, r6}
			PIN_PA10B_ADC0_AIN10, PIN_PA11B_ADC0_AIN11,
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
		};
	const uint32_t pinmapping1[] = {
    28b0:	a810      	add	r0, sp, #64	; 0x40
    28b2:	4b73      	ldr	r3, [pc, #460]	; (2a80 <adc_init+0x364>)
    28b4:	3338      	adds	r3, #56	; 0x38
    28b6:	1c02      	adds	r2, r0, #0
    28b8:	cb43      	ldmia	r3!, {r0, r1, r6}
    28ba:	c243      	stmia	r2!, {r0, r1, r6}
    28bc:	cb43      	ldmia	r3!, {r0, r1, r6}
    28be:	c243      	stmia	r2!, {r0, r1, r6}
    28c0:	cb43      	ldmia	r3!, {r0, r1, r6}
    28c2:	c243      	stmia	r2!, {r0, r1, r6}
    28c4:	cb43      	ldmia	r3!, {r0, r1, r6}
    28c6:	c243      	stmia	r2!, {r0, r1, r6}
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};

	switch(index) {
    28c8:	9b00      	ldr	r3, [sp, #0]
    28ca:	2b00      	cmp	r3, #0
    28cc:	d006      	beq.n	28dc <adc_init+0x1c0>
	case 0:
		pinmapping = pinmapping0;
		break;
	case 1:
		pinmapping = pinmapping1;
    28ce:	aa10      	add	r2, sp, #64	; 0x40
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
    28d0:	3b01      	subs	r3, #1
    28d2:	4259      	negs	r1, r3
    28d4:	4159      	adcs	r1, r3
    28d6:	424b      	negs	r3, r1
    28d8:	401a      	ands	r2, r3
    28da:	e000      	b.n	28de <adc_init+0x1c2>
#   endif
	};

	switch(index) {
	case 0:
		pinmapping = pinmapping0;
    28dc:	aa04      	add	r2, sp, #16
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
    28de:	9b01      	ldr	r3, [sp, #4]
    28e0:	4599      	cmp	r9, r3
    28e2:	d30b      	bcc.n	28fc <adc_init+0x1e0>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    28e4:	0099      	lsls	r1, r3, #2
    28e6:	5888      	ldr	r0, [r1, r2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    28e8:	a903      	add	r1, sp, #12
    28ea:	2300      	movs	r3, #0
    28ec:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    28ee:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    28f0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    28f2:	3301      	adds	r3, #1
    28f4:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    28f6:	b2c0      	uxtb	r0, r0
    28f8:	4b63      	ldr	r3, [pc, #396]	; (2a88 <adc_init+0x36c>)
    28fa:	4798      	blx	r3
	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
    28fc:	4646      	mov	r6, r8
    28fe:	3601      	adds	r6, #1
    2900:	b2f3      	uxtb	r3, r6
    2902:	4698      	mov	r8, r3
    2904:	9301      	str	r3, [sp, #4]
    2906:	454b      	cmp	r3, r9
    2908:	d9c1      	bls.n	288e <adc_init+0x172>
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
    290a:	7bbb      	ldrb	r3, [r7, #14]
    290c:	01da      	lsls	r2, r3, #7
			_adc_configure_ain_pin(index, i);
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
    290e:	7b7b      	ldrb	r3, [r7, #13]
    2910:	019b      	lsls	r3, r3, #6
    2912:	4313      	orrs	r3, r2
    2914:	b2db      	uxtb	r3, r3
    2916:	4652      	mov	r2, sl
    2918:	7013      	strb	r3, [r2, #0]
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
    291a:	7d3b      	ldrb	r3, [r7, #20]
    291c:	01db      	lsls	r3, r3, #7
	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;

	/* Configure reference */
	adc_module->REFCTRL.reg =
    291e:	787a      	ldrb	r2, [r7, #1]
    2920:	4313      	orrs	r3, r2
    2922:	b2db      	uxtb	r3, r3
    2924:	4652      	mov	r2, sl
    2926:	7093      	strb	r3, [r2, #2]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
			| (config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    2928:	78fb      	ldrb	r3, [r7, #3]
    292a:	2b34      	cmp	r3, #52	; 0x34
    292c:	d900      	bls.n	2930 <adc_init+0x214>
    292e:	e14e      	b.n	2bce <adc_init+0x4b2>
    2930:	009b      	lsls	r3, r3, #2
    2932:	4a56      	ldr	r2, [pc, #344]	; (2a8c <adc_init+0x370>)
    2934:	58d3      	ldr	r3, [r2, r3]
    2936:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2938:	2004      	movs	r0, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    293a:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    293c:	2202      	movs	r2, #2
    293e:	e01a      	b.n	2976 <adc_init+0x25a>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    2940:	7a7a      	ldrb	r2, [r7, #9]
		accumulate = config->accumulate_samples;
    2942:	7a38      	ldrb	r0, [r7, #8]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2944:	2110      	movs	r1, #16
    2946:	e016      	b.n	2976 <adc_init+0x25a>
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    2948:	2006      	movs	r0, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    294a:	2110      	movs	r1, #16
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    294c:	2201      	movs	r2, #1
    294e:	e012      	b.n	2976 <adc_init+0x25a>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    2950:	2008      	movs	r0, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2952:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    2954:	2200      	movs	r2, #0
    2956:	e00e      	b.n	2976 <adc_init+0x25a>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2958:	2000      	movs	r0, #0
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    295a:	2130      	movs	r1, #48	; 0x30
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    295c:	2200      	movs	r2, #0
    295e:	e00a      	b.n	2976 <adc_init+0x25a>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2960:	2000      	movs	r0, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    2962:	2120      	movs	r1, #32
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    2964:	2200      	movs	r2, #0
    2966:	e006      	b.n	2976 <adc_init+0x25a>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2968:	2000      	movs	r0, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    296a:	2100      	movs	r1, #0
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    296c:	2200      	movs	r2, #0
    296e:	e002      	b.n	2976 <adc_init+0x25a>
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    2970:	2002      	movs	r0, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2972:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2974:	2201      	movs	r2, #1
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    2976:	0112      	lsls	r2, r2, #4
    2978:	2370      	movs	r3, #112	; 0x70
    297a:	4013      	ands	r3, r2
    297c:	4303      	orrs	r3, r0
    297e:	4652      	mov	r2, sl
    2980:	7313      	strb	r3, [r2, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2982:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2984:	8c13      	ldrh	r3, [r2, #32]
    2986:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2988:	2b00      	cmp	r3, #0
    298a:	d1fb      	bne.n	2984 <adc_init+0x268>
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    298c:	7d7b      	ldrb	r3, [r7, #21]
		return STATUS_ERR_INVALID_ARG;
    298e:	2017      	movs	r0, #23
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    2990:	2b3f      	cmp	r3, #63	; 0x3f
    2992:	d900      	bls.n	2996 <adc_init+0x27a>
    2994:	e137      	b.n	2c06 <adc_init+0x4ea>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
    2996:	7bfa      	ldrb	r2, [r7, #15]
    2998:	01d2      	lsls	r2, r2, #7
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    299a:	4313      	orrs	r3, r2
    299c:	b2db      	uxtb	r3, r3
    299e:	4652      	mov	r2, sl
    29a0:	7353      	strb	r3, [r2, #13]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    29a2:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    29a4:	8c13      	ldrh	r3, [r2, #32]
    29a6:	b29b      	uxth	r3, r3
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    29a8:	2b00      	cmp	r3, #0
    29aa:	d1fb      	bne.n	29a4 <adc_init+0x288>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
    29ac:	78bb      	ldrb	r3, [r7, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    29ae:	4652      	mov	r2, sl
    29b0:	7053      	strb	r3, [r2, #1]
			config->clock_prescaler;
	adc_module->CTRLC.reg =
			resolution |
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
    29b2:	2324      	movs	r3, #36	; 0x24
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
	adc_module->CTRLC.reg =
    29b4:	5cfa      	ldrb	r2, [r7, r3]
    29b6:	00d2      	lsls	r2, r2, #3
    29b8:	7b3b      	ldrb	r3, [r7, #12]
    29ba:	009b      	lsls	r3, r3, #2
    29bc:	4313      	orrs	r3, r2
    29be:	7afa      	ldrb	r2, [r7, #11]
    29c0:	431a      	orrs	r2, r3
    29c2:	7abb      	ldrb	r3, [r7, #10]
    29c4:	005b      	lsls	r3, r3, #1
    29c6:	4313      	orrs	r3, r2
    29c8:	430b      	orrs	r3, r1
    29ca:	4652      	mov	r2, sl
    29cc:	8153      	strh	r3, [r2, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    29ce:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    29d0:	8c13      	ldrh	r3, [r2, #32]
    29d2:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);

	while (adc_is_syncing(module_inst)) {
    29d4:	2b00      	cmp	r3, #0
    29d6:	d1fb      	bne.n	29d0 <adc_init+0x2b4>
		/* Wait for synchronization */
	}

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    29d8:	8b3b      	ldrh	r3, [r7, #24]
    29da:	2b00      	cmp	r3, #0
    29dc:	d100      	bne.n	29e0 <adc_init+0x2c4>
    29de:	e094      	b.n	2b0a <adc_init+0x3ee>
		switch (resolution) {
    29e0:	2910      	cmp	r1, #16
    29e2:	d075      	beq.n	2ad0 <adc_init+0x3b4>
    29e4:	d802      	bhi.n	29ec <adc_init+0x2d0>
    29e6:	2900      	cmp	r1, #0
    29e8:	d054      	beq.n	2a94 <adc_init+0x378>
    29ea:	e08e      	b.n	2b0a <adc_init+0x3ee>
    29ec:	2920      	cmp	r1, #32
    29ee:	d01a      	beq.n	2a26 <adc_init+0x30a>
    29f0:	2930      	cmp	r1, #48	; 0x30
    29f2:	d000      	beq.n	29f6 <adc_init+0x2da>
    29f4:	e089      	b.n	2b0a <adc_init+0x3ee>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    29f6:	7afa      	ldrb	r2, [r7, #11]
    29f8:	2a00      	cmp	r2, #0
    29fa:	d00a      	beq.n	2a12 <adc_init+0x2f6>
					(config->window.window_lower_value > 127 ||
    29fc:	69fa      	ldr	r2, [r7, #28]
    29fe:	3280      	adds	r2, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2a00:	2017      	movs	r0, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    2a02:	2aff      	cmp	r2, #255	; 0xff
    2a04:	d900      	bls.n	2a08 <adc_init+0x2ec>
    2a06:	e0fe      	b.n	2c06 <adc_init+0x4ea>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    2a08:	6a3a      	ldr	r2, [r7, #32]
    2a0a:	3280      	adds	r2, #128	; 0x80
    2a0c:	2aff      	cmp	r2, #255	; 0xff
    2a0e:	d900      	bls.n	2a12 <adc_init+0x2f6>
    2a10:	e0f9      	b.n	2c06 <adc_init+0x4ea>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2a12:	2017      	movs	r0, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    2a14:	69fa      	ldr	r2, [r7, #28]
    2a16:	2aff      	cmp	r2, #255	; 0xff
    2a18:	dd00      	ble.n	2a1c <adc_init+0x300>
    2a1a:	e0f4      	b.n	2c06 <adc_init+0x4ea>
    2a1c:	6a3a      	ldr	r2, [r7, #32]
    2a1e:	2aff      	cmp	r2, #255	; 0xff
    2a20:	dd00      	ble.n	2a24 <adc_init+0x308>
    2a22:	e0f0      	b.n	2c06 <adc_init+0x4ea>
    2a24:	e071      	b.n	2b0a <adc_init+0x3ee>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    2a26:	7afa      	ldrb	r2, [r7, #11]
    2a28:	2a00      	cmp	r2, #0
    2a2a:	d00f      	beq.n	2a4c <adc_init+0x330>
					(config->window.window_lower_value > 511 ||
    2a2c:	69fa      	ldr	r2, [r7, #28]
    2a2e:	2180      	movs	r1, #128	; 0x80
    2a30:	0089      	lsls	r1, r1, #2
    2a32:	468c      	mov	ip, r1
    2a34:	4462      	add	r2, ip
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2a36:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    2a38:	4915      	ldr	r1, [pc, #84]	; (2a90 <adc_init+0x374>)
    2a3a:	428a      	cmp	r2, r1
    2a3c:	d900      	bls.n	2a40 <adc_init+0x324>
    2a3e:	e0e2      	b.n	2c06 <adc_init+0x4ea>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    2a40:	6a3a      	ldr	r2, [r7, #32]
    2a42:	4462      	add	r2, ip
    2a44:	4912      	ldr	r1, [pc, #72]	; (2a90 <adc_init+0x374>)
    2a46:	428a      	cmp	r2, r1
    2a48:	d900      	bls.n	2a4c <adc_init+0x330>
    2a4a:	e0dc      	b.n	2c06 <adc_init+0x4ea>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2a4c:	2017      	movs	r0, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    2a4e:	4a10      	ldr	r2, [pc, #64]	; (2a90 <adc_init+0x374>)
    2a50:	69f9      	ldr	r1, [r7, #28]
    2a52:	4291      	cmp	r1, r2
    2a54:	dd00      	ble.n	2a58 <adc_init+0x33c>
    2a56:	e0d6      	b.n	2c06 <adc_init+0x4ea>
    2a58:	6a39      	ldr	r1, [r7, #32]
    2a5a:	4291      	cmp	r1, r2
    2a5c:	dd00      	ble.n	2a60 <adc_init+0x344>
    2a5e:	e0d2      	b.n	2c06 <adc_init+0x4ea>
    2a60:	e053      	b.n	2b0a <adc_init+0x3ee>
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	000026ad 	.word	0x000026ad
    2a68:	40000800 	.word	0x40000800
    2a6c:	00005ef0 	.word	0x00005ef0
    2a70:	40001800 	.word	0x40001800
    2a74:	00005e80 	.word	0x00005e80
    2a78:	000041a9 	.word	0x000041a9
    2a7c:	00004141 	.word	0x00004141
    2a80:	00005e84 	.word	0x00005e84
    2a84:	00005efc 	.word	0x00005efc
    2a88:	000042a5 	.word	0x000042a5
    2a8c:	00005dac 	.word	0x00005dac
    2a90:	000003ff 	.word	0x000003ff
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    2a94:	7afa      	ldrb	r2, [r7, #11]
    2a96:	2a00      	cmp	r2, #0
    2a98:	d00f      	beq.n	2aba <adc_init+0x39e>
					(config->window.window_lower_value > 2047 ||
    2a9a:	69fa      	ldr	r2, [r7, #28]
    2a9c:	2180      	movs	r1, #128	; 0x80
    2a9e:	0109      	lsls	r1, r1, #4
    2aa0:	468c      	mov	ip, r1
    2aa2:	4462      	add	r2, ip
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2aa4:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    2aa6:	495b      	ldr	r1, [pc, #364]	; (2c14 <adc_init+0x4f8>)
    2aa8:	428a      	cmp	r2, r1
    2aaa:	d900      	bls.n	2aae <adc_init+0x392>
    2aac:	e0ab      	b.n	2c06 <adc_init+0x4ea>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    2aae:	6a3a      	ldr	r2, [r7, #32]
    2ab0:	4462      	add	r2, ip
    2ab2:	4958      	ldr	r1, [pc, #352]	; (2c14 <adc_init+0x4f8>)
    2ab4:	428a      	cmp	r2, r1
    2ab6:	d900      	bls.n	2aba <adc_init+0x39e>
    2ab8:	e0a5      	b.n	2c06 <adc_init+0x4ea>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2aba:	2017      	movs	r0, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    2abc:	4a55      	ldr	r2, [pc, #340]	; (2c14 <adc_init+0x4f8>)
    2abe:	69f9      	ldr	r1, [r7, #28]
    2ac0:	4291      	cmp	r1, r2
    2ac2:	dd00      	ble.n	2ac6 <adc_init+0x3aa>
    2ac4:	e09f      	b.n	2c06 <adc_init+0x4ea>
    2ac6:	6a39      	ldr	r1, [r7, #32]
    2ac8:	4291      	cmp	r1, r2
    2aca:	dd00      	ble.n	2ace <adc_init+0x3b2>
    2acc:	e09b      	b.n	2c06 <adc_init+0x4ea>
    2ace:	e01c      	b.n	2b0a <adc_init+0x3ee>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    2ad0:	7afa      	ldrb	r2, [r7, #11]
    2ad2:	2a00      	cmp	r2, #0
    2ad4:	d00f      	beq.n	2af6 <adc_init+0x3da>
					(config->window.window_lower_value > 32767 ||
    2ad6:	69fa      	ldr	r2, [r7, #28]
    2ad8:	2180      	movs	r1, #128	; 0x80
    2ada:	0209      	lsls	r1, r1, #8
    2adc:	468c      	mov	ip, r1
    2ade:	4462      	add	r2, ip
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2ae0:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    2ae2:	494d      	ldr	r1, [pc, #308]	; (2c18 <adc_init+0x4fc>)
    2ae4:	428a      	cmp	r2, r1
    2ae6:	d900      	bls.n	2aea <adc_init+0x3ce>
    2ae8:	e08d      	b.n	2c06 <adc_init+0x4ea>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    2aea:	6a3a      	ldr	r2, [r7, #32]
    2aec:	4462      	add	r2, ip
    2aee:	494a      	ldr	r1, [pc, #296]	; (2c18 <adc_init+0x4fc>)
    2af0:	428a      	cmp	r2, r1
    2af2:	d900      	bls.n	2af6 <adc_init+0x3da>
    2af4:	e087      	b.n	2c06 <adc_init+0x4ea>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2af6:	2017      	movs	r0, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    2af8:	4a47      	ldr	r2, [pc, #284]	; (2c18 <adc_init+0x4fc>)
    2afa:	69f9      	ldr	r1, [r7, #28]
    2afc:	4291      	cmp	r1, r2
    2afe:	dd00      	ble.n	2b02 <adc_init+0x3e6>
    2b00:	e081      	b.n	2c06 <adc_init+0x4ea>
    2b02:	6a39      	ldr	r1, [r7, #32]
    2b04:	4291      	cmp	r1, r2
    2b06:	dd00      	ble.n	2b0a <adc_init+0x3ee>
    2b08:	e07d      	b.n	2c06 <adc_init+0x4ea>
			break;
		}
	}

	/* Configure window mode */
	adc_module->CTRLC.reg |= config->window.window_mode;
    2b0a:	4652      	mov	r2, sl
    2b0c:	8952      	ldrh	r2, [r2, #10]
    2b0e:	4313      	orrs	r3, r2
    2b10:	4652      	mov	r2, sl
    2b12:	8153      	strh	r3, [r2, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2b14:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2b16:	8c13      	ldrh	r3, [r2, #32]
    2b18:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	d1fb      	bne.n	2b16 <adc_init+0x3fa>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    2b1e:	8bbb      	ldrh	r3, [r7, #28]
    2b20:	4652      	mov	r2, sl
    2b22:	81d3      	strh	r3, [r2, #14]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2b24:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2b26:	8c13      	ldrh	r3, [r2, #32]
    2b28:	b29b      	uxth	r3, r3
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d1fb      	bne.n	2b26 <adc_init+0x40a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    2b2e:	8c3b      	ldrh	r3, [r7, #32]
    2b30:	4652      	mov	r2, sl
    2b32:	8213      	strh	r3, [r2, #16]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2b34:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2b36:	8c13      	ldrh	r3, [r2, #32]
    2b38:	b29b      	uxth	r3, r3
			ADC_WINUT_WINUT_Pos;

	while (adc_is_syncing(module_inst)) {
    2b3a:	2b00      	cmp	r3, #0
    2b3c:	d1fb      	bne.n	2b36 <adc_init+0x41a>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    2b3e:	793a      	ldrb	r2, [r7, #4]
    2b40:	88fb      	ldrh	r3, [r7, #6]
    2b42:	4313      	orrs	r3, r2
    2b44:	4652      	mov	r2, sl
    2b46:	8113      	strh	r3, [r2, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2b48:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2b4a:	8c13      	ldrh	r3, [r2, #32]
    2b4c:	b29b      	uxth	r3, r3
			config->negative_input |
			config->positive_input;

	while (adc_is_syncing(module_inst)) {
    2b4e:	2b00      	cmp	r3, #0
    2b50:	d1fb      	bne.n	2b4a <adc_init+0x42e>
		/* Wait for synchronization */
	}

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    2b52:	332a      	adds	r3, #42	; 0x2a
    2b54:	5cfb      	ldrb	r3, [r7, r3]
    2b56:	4652      	mov	r2, sl
    2b58:	70d3      	strb	r3, [r2, #3]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    2b5a:	2307      	movs	r3, #7
    2b5c:	7113      	strb	r3, [r2, #4]
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    2b5e:	331d      	adds	r3, #29
    2b60:	5cfb      	ldrb	r3, [r7, r3]
    2b62:	2b00      	cmp	r3, #0
    2b64:	d01b      	beq.n	2b9e <adc_init+0x482>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2b66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
    2b68:	2017      	movs	r0, #23
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2b6a:	4a2a      	ldr	r2, [pc, #168]	; (2c14 <adc_init+0x4f8>)
    2b6c:	4293      	cmp	r3, r2
    2b6e:	d84a      	bhi.n	2c06 <adc_init+0x4ea>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    2b70:	4652      	mov	r2, sl
    2b72:	8253      	strh	r3, [r2, #18]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2b74:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2b76:	8c13      	ldrh	r3, [r2, #32]
    2b78:	b29b      	uxth	r3, r3
					ADC_GAINCORR_GAINCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
    2b7a:	2b00      	cmp	r3, #0
    2b7c:	d1fb      	bne.n	2b76 <adc_init+0x45a>
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    2b7e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    2b80:	2380      	movs	r3, #128	; 0x80
    2b82:	011b      	lsls	r3, r3, #4
    2b84:	18d3      	adds	r3, r2, r3
    2b86:	b29b      	uxth	r3, r3
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    2b88:	2017      	movs	r0, #23
		while (adc_is_syncing(module_inst)) {
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    2b8a:	4922      	ldr	r1, [pc, #136]	; (2c14 <adc_init+0x4f8>)
    2b8c:	428b      	cmp	r3, r1
    2b8e:	d83a      	bhi.n	2c06 <adc_init+0x4ea>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2b90:	4653      	mov	r3, sl
    2b92:	829a      	strh	r2, [r3, #20]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2b94:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2b96:	8c13      	ldrh	r3, [r2, #32]
    2b98:	b29b      	uxth	r3, r3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	d1fb      	bne.n	2b96 <adc_init+0x47a>
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIASREFBUF(
    2b9e:	00a2      	lsls	r2, r4, #2
    2ba0:	4b1e      	ldr	r3, [pc, #120]	; (2c1c <adc_init+0x500>)
    2ba2:	58d3      	ldr	r3, [r2, r3]
    2ba4:	491e      	ldr	r1, [pc, #120]	; (2c20 <adc_init+0x504>)
    2ba6:	5d09      	ldrb	r1, [r1, r4]
    2ba8:	681b      	ldr	r3, [r3, #0]
    2baa:	40cb      	lsrs	r3, r1
			/* Wait for synchronization */
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    2bac:	021b      	lsls	r3, r3, #8
    2bae:	21e0      	movs	r1, #224	; 0xe0
    2bb0:	00c9      	lsls	r1, r1, #3
    2bb2:	4019      	ands	r1, r3
			ADC_CALIB_BIASREFBUF(
				(*(uint32_t *)_adc_biasrefbuf_addr[index] >> _adc_biasrefbuf_pos[index])
			) |
			ADC_CALIB_BIASCOMP(
    2bb4:	4b1b      	ldr	r3, [pc, #108]	; (2c24 <adc_init+0x508>)
    2bb6:	58d3      	ldr	r3, [r2, r3]
    2bb8:	4a1b      	ldr	r2, [pc, #108]	; (2c28 <adc_init+0x50c>)
    2bba:	5d12      	ldrb	r2, [r2, r4]
    2bbc:	681b      	ldr	r3, [r3, #0]
    2bbe:	40d3      	lsrs	r3, r2
			/* Wait for synchronization */
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    2bc0:	2207      	movs	r2, #7
    2bc2:	4013      	ands	r3, r2
    2bc4:	430b      	orrs	r3, r1
    2bc6:	4652      	mov	r2, sl
    2bc8:	8593      	strh	r3, [r2, #44]	; 0x2c
			) |
			ADC_CALIB_BIASCOMP(
				(*(uint32_t *)_adc_biascomp_addr[index] >> _adc_biascomp_pos[index])
			);

	return STATUS_OK;
    2bca:	2000      	movs	r0, #0
    2bcc:	e01b      	b.n	2c06 <adc_init+0x4ea>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    2bce:	2017      	movs	r0, #23
    2bd0:	e019      	b.n	2c06 <adc_init+0x4ea>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
    2bd2:	2300      	movs	r3, #0
    2bd4:	60ab      	str	r3, [r5, #8]
    2bd6:	60eb      	str	r3, [r5, #12]
    2bd8:	612b      	str	r3, [r5, #16]
	};

	module_inst->registered_callback_mask = 0;
    2bda:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
    2bdc:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
    2bde:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
    2be0:	772b      	strb	r3, [r5, #28]

	_adc_instances[instance] = module_inst;
    2be2:	00a3      	lsls	r3, r4, #2
    2be4:	4a11      	ldr	r2, [pc, #68]	; (2c2c <adc_init+0x510>)
    2be6:	509d      	str	r5, [r3, r2]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    2be8:	232a      	movs	r3, #42	; 0x2a
    2bea:	5cfb      	ldrb	r3, [r7, r3]
    2bec:	2b00      	cmp	r3, #0
    2bee:	d100      	bne.n	2bf2 <adc_init+0x4d6>
    2bf0:	e5c5      	b.n	277e <adc_init+0x62>
    2bf2:	e5ca      	b.n	278a <adc_init+0x6e>
    2bf4:	2300      	movs	r3, #0
    2bf6:	9301      	str	r3, [sp, #4]
    2bf8:	4698      	mov	r8, r3
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
	const uint32_t pinmapping0[] = {
    2bfa:	4b0d      	ldr	r3, [pc, #52]	; (2c30 <adc_init+0x514>)
    2bfc:	2208      	movs	r2, #8
    2bfe:	4694      	mov	ip, r2
    2c00:	4463      	add	r3, ip
    2c02:	469b      	mov	fp, r3
    2c04:	e643      	b.n	288e <adc_init+0x172>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
    2c06:	b01d      	add	sp, #116	; 0x74
    2c08:	bc3c      	pop	{r2, r3, r4, r5}
    2c0a:	4690      	mov	r8, r2
    2c0c:	4699      	mov	r9, r3
    2c0e:	46a2      	mov	sl, r4
    2c10:	46ab      	mov	fp, r5
    2c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c14:	00000fff 	.word	0x00000fff
    2c18:	0000ffff 	.word	0x0000ffff
    2c1c:	00005f0c 	.word	0x00005f0c
    2c20:	00005eec 	.word	0x00005eec
    2c24:	00005f04 	.word	0x00005f04
    2c28:	00005ef8 	.word	0x00005ef8
    2c2c:	20000d5c 	.word	0x20000d5c
    2c30:	00005e84 	.word	0x00005e84

00002c34 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    2c34:	b538      	push	{r3, r4, r5, lr}
	struct adc_module *module = _adc_instances[instance];
    2c36:	0080      	lsls	r0, r0, #2
    2c38:	4b2c      	ldr	r3, [pc, #176]	; (2cec <_adc_interrupt_handler+0xb8>)
    2c3a:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    2c3c:	6823      	ldr	r3, [r4, #0]
    2c3e:	799d      	ldrb	r5, [r3, #6]
    2c40:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
    2c42:	07ea      	lsls	r2, r5, #31
    2c44:	d535      	bpl.n	2cb2 <_adc_interrupt_handler+0x7e>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    2c46:	7ee2      	ldrb	r2, [r4, #27]
    2c48:	07d2      	lsls	r2, r2, #31
    2c4a:	d532      	bpl.n	2cb2 <_adc_interrupt_handler+0x7e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    2c4c:	7ea2      	ldrb	r2, [r4, #26]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    2c4e:	07d2      	lsls	r2, r2, #31
    2c50:	d52f      	bpl.n	2cb2 <_adc_interrupt_handler+0x7e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    2c52:	2201      	movs	r2, #1
    2c54:	719a      	strb	r2, [r3, #6]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    2c56:	6962      	ldr	r2, [r4, #20]
    2c58:	1c93      	adds	r3, r2, #2
    2c5a:	6163      	str	r3, [r4, #20]
    2c5c:	6823      	ldr	r3, [r4, #0]
    2c5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2c60:	b29b      	uxth	r3, r3
    2c62:	8013      	strh	r3, [r2, #0]

			if (--module->remaining_conversions > 0) {
    2c64:	8b23      	ldrh	r3, [r4, #24]
    2c66:	3b01      	subs	r3, #1
    2c68:	b29b      	uxth	r3, r3
    2c6a:	8323      	strh	r3, [r4, #24]
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	d015      	beq.n	2c9c <_adc_interrupt_handler+0x68>
				if (module->software_trigger == true
    2c70:	7f63      	ldrb	r3, [r4, #29]
    2c72:	2b00      	cmp	r3, #0
    2c74:	d01d      	beq.n	2cb2 <_adc_interrupt_handler+0x7e>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    2c76:	6822      	ldr	r2, [r4, #0]
    2c78:	79d3      	ldrb	r3, [r2, #7]
    2c7a:	b25b      	sxtb	r3, r3
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	db18      	blt.n	2cb2 <_adc_interrupt_handler+0x7e>
    2c80:	8c13      	ldrh	r3, [r2, #32]
    2c82:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    2c84:	2b00      	cmp	r3, #0
    2c86:	d1fb      	bne.n	2c80 <_adc_interrupt_handler+0x4c>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2c88:	7e11      	ldrb	r1, [r2, #24]
    2c8a:	3302      	adds	r3, #2
    2c8c:	430b      	orrs	r3, r1
    2c8e:	7613      	strb	r3, [r2, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2c90:	6822      	ldr	r2, [r4, #0]

	if (adc_module->SYNCBUSY.reg) {
    2c92:	8c13      	ldrh	r3, [r2, #32]
    2c94:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2c96:	2b00      	cmp	r3, #0
    2c98:	d1fb      	bne.n	2c92 <_adc_interrupt_handler+0x5e>
    2c9a:	e00a      	b.n	2cb2 <_adc_interrupt_handler+0x7e>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    2c9c:	7f23      	ldrb	r3, [r4, #28]
    2c9e:	2b05      	cmp	r3, #5
    2ca0:	d107      	bne.n	2cb2 <_adc_interrupt_handler+0x7e>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    2ca2:	2300      	movs	r3, #0
    2ca4:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    2ca6:	3301      	adds	r3, #1
    2ca8:	6822      	ldr	r2, [r4, #0]
    2caa:	7113      	strb	r3, [r2, #4]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    2cac:	1c20      	adds	r0, r4, #0
    2cae:	68a3      	ldr	r3, [r4, #8]
    2cb0:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    2cb2:	076b      	lsls	r3, r5, #29
    2cb4:	d50b      	bpl.n	2cce <_adc_interrupt_handler+0x9a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2cb6:	2304      	movs	r3, #4
    2cb8:	6822      	ldr	r2, [r4, #0]
    2cba:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    2cbc:	7ee3      	ldrb	r3, [r4, #27]
    2cbe:	079b      	lsls	r3, r3, #30
    2cc0:	d505      	bpl.n	2cce <_adc_interrupt_handler+0x9a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    2cc2:	7ea3      	ldrb	r3, [r4, #26]
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    2cc4:	079b      	lsls	r3, r3, #30
    2cc6:	d502      	bpl.n	2cce <_adc_interrupt_handler+0x9a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    2cc8:	1c20      	adds	r0, r4, #0
    2cca:	68e3      	ldr	r3, [r4, #12]
    2ccc:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    2cce:	07ab      	lsls	r3, r5, #30
    2cd0:	d50b      	bpl.n	2cea <_adc_interrupt_handler+0xb6>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2cd2:	2302      	movs	r3, #2
    2cd4:	6822      	ldr	r2, [r4, #0]
    2cd6:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    2cd8:	7ee3      	ldrb	r3, [r4, #27]
    2cda:	075b      	lsls	r3, r3, #29
    2cdc:	d505      	bpl.n	2cea <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    2cde:	7ea3      	ldrb	r3, [r4, #26]

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    2ce0:	075b      	lsls	r3, r3, #29
    2ce2:	d502      	bpl.n	2cea <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    2ce4:	6923      	ldr	r3, [r4, #16]
    2ce6:	1c20      	adds	r0, r4, #0
    2ce8:	4798      	blx	r3
		}
	}
}
    2cea:	bd38      	pop	{r3, r4, r5, pc}
    2cec:	20000d5c 	.word	0x20000d5c

00002cf0 <ADC0_Handler>:
		void ADC##n##_Handler(void) \
		{ \
			_adc_interrupt_handler(n); \
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
    2cf0:	b508      	push	{r3, lr}
    2cf2:	2000      	movs	r0, #0
    2cf4:	4b01      	ldr	r3, [pc, #4]	; (2cfc <ADC0_Handler+0xc>)
    2cf6:	4798      	blx	r3
    2cf8:	bd08      	pop	{r3, pc}
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	00002c35 	.word	0x00002c35

00002d00 <ADC1_Handler>:
    2d00:	b508      	push	{r3, lr}
    2d02:	2001      	movs	r0, #1
    2d04:	4b01      	ldr	r3, [pc, #4]	; (2d0c <ADC1_Handler+0xc>)
    2d06:	4798      	blx	r3
    2d08:	bd08      	pop	{r3, pc}
    2d0a:	46c0      	nop			; (mov r8, r8)
    2d0c:	00002c35 	.word	0x00002c35

00002d10 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2d10:	b570      	push	{r4, r5, r6, lr}
    2d12:	b082      	sub	sp, #8
    2d14:	1c05      	adds	r5, r0, #0
    2d16:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    2d18:	2200      	movs	r2, #0
    2d1a:	466b      	mov	r3, sp
    2d1c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2d1e:	4c06      	ldr	r4, [pc, #24]	; (2d38 <usart_serial_getchar+0x28>)
    2d20:	1c28      	adds	r0, r5, #0
    2d22:	466b      	mov	r3, sp
    2d24:	1d99      	adds	r1, r3, #6
    2d26:	47a0      	blx	r4
    2d28:	2800      	cmp	r0, #0
    2d2a:	d1f9      	bne.n	2d20 <usart_serial_getchar+0x10>

	*c = temp;
    2d2c:	466b      	mov	r3, sp
    2d2e:	3306      	adds	r3, #6
    2d30:	881b      	ldrh	r3, [r3, #0]
    2d32:	7033      	strb	r3, [r6, #0]
}
    2d34:	b002      	add	sp, #8
    2d36:	bd70      	pop	{r4, r5, r6, pc}
    2d38:	00003cbd 	.word	0x00003cbd

00002d3c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    2d3c:	b570      	push	{r4, r5, r6, lr}
    2d3e:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    2d40:	b28c      	uxth	r4, r1
    2d42:	4e03      	ldr	r6, [pc, #12]	; (2d50 <usart_serial_putchar+0x14>)
    2d44:	1c28      	adds	r0, r5, #0
    2d46:	1c21      	adds	r1, r4, #0
    2d48:	47b0      	blx	r6
    2d4a:	2800      	cmp	r0, #0
    2d4c:	d1fa      	bne.n	2d44 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    2d4e:	bd70      	pop	{r4, r5, r6, pc}
    2d50:	00003c91 	.word	0x00003c91

00002d54 <configure_console>:
#include <asf.h>

static struct usart_module cdc_uart_module;

void configure_console(void)
{
    2d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d56:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2d58:	2380      	movs	r3, #128	; 0x80
    2d5a:	05db      	lsls	r3, r3, #23
    2d5c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2d5e:	2300      	movs	r3, #0
    2d60:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2d62:	22ff      	movs	r2, #255	; 0xff
    2d64:	4669      	mov	r1, sp
    2d66:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2d68:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2d6a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2d6c:	2401      	movs	r4, #1
    2d6e:	222c      	movs	r2, #44	; 0x2c
    2d70:	548c      	strb	r4, [r1, r2]
	config->transmitter_enable = true;
    2d72:	3201      	adds	r2, #1
    2d74:	548c      	strb	r4, [r1, r2]
	config->clock_polarity_inverted = false;
    2d76:	3201      	adds	r2, #1
    2d78:	548b      	strb	r3, [r1, r2]
	config->use_external_clock = false;
    2d7a:	3201      	adds	r2, #1
    2d7c:	548b      	strb	r3, [r1, r2]
	config->ext_clock_freq   = 0;
    2d7e:	930c      	str	r3, [sp, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2d80:	3205      	adds	r2, #5
    2d82:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
    2d84:	3201      	adds	r2, #1
    2d86:	548b      	strb	r3, [r1, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2d88:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2d8a:	2200      	movs	r2, #0
    2d8c:	820b      	strh	r3, [r1, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2d8e:	76ca      	strb	r2, [r1, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    2d90:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    2d92:	840b      	strh	r3, [r1, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    2d94:	844b      	strh	r3, [r1, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2d96:	760a      	strb	r2, [r1, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2d98:	2324      	movs	r3, #36	; 0x24
    2d9a:	54ca      	strb	r2, [r1, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2d9c:	764a      	strb	r2, [r1, #25]
	config->receive_pulse_length                    = 19;
    2d9e:	2313      	movs	r3, #19
    2da0:	768b      	strb	r3, [r1, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2da2:	3313      	adds	r3, #19
    2da4:	54ca      	strb	r2, [r1, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    2da6:	3b01      	subs	r3, #1
    2da8:	54ca      	strb	r2, [r1, r3]
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2daa:	23c4      	movs	r3, #196	; 0xc4
    2dac:	039b      	lsls	r3, r3, #14
    2dae:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2db0:	2301      	movs	r3, #1
    2db2:	425b      	negs	r3, r3
    2db4:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2db6:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2db8:	4b18      	ldr	r3, [pc, #96]	; (2e1c <configure_console+0xc8>)
    2dba:	9310      	str	r3, [sp, #64]	; 0x40
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2dbc:	4b18      	ldr	r3, [pc, #96]	; (2e20 <configure_console+0xcc>)
    2dbe:	9311      	str	r3, [sp, #68]	; 0x44
	usart_conf.baudrate    = EDBG_CDC_SERCOM_BAUDRATE;
    2dc0:	2396      	movs	r3, #150	; 0x96
    2dc2:	021b      	lsls	r3, r3, #8
    2dc4:	930a      	str	r3, [sp, #40]	; 0x28
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2dc6:	4d17      	ldr	r5, [pc, #92]	; (2e24 <configure_console+0xd0>)
    2dc8:	4b17      	ldr	r3, [pc, #92]	; (2e28 <configure_console+0xd4>)
    2dca:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2dcc:	4a17      	ldr	r2, [pc, #92]	; (2e2c <configure_console+0xd8>)
    2dce:	4b18      	ldr	r3, [pc, #96]	; (2e30 <configure_console+0xdc>)
    2dd0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2dd2:	4a18      	ldr	r2, [pc, #96]	; (2e34 <configure_console+0xe0>)
    2dd4:	4b18      	ldr	r3, [pc, #96]	; (2e38 <configure_console+0xe4>)
    2dd6:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    2dd8:	1c28      	adds	r0, r5, #0
    2dda:	4918      	ldr	r1, [pc, #96]	; (2e3c <configure_console+0xe8>)
    2ddc:	466a      	mov	r2, sp
    2dde:	4b18      	ldr	r3, [pc, #96]	; (2e40 <configure_console+0xec>)
    2de0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2de2:	4f18      	ldr	r7, [pc, #96]	; (2e44 <configure_console+0xf0>)
    2de4:	683b      	ldr	r3, [r7, #0]
    2de6:	6898      	ldr	r0, [r3, #8]
    2de8:	2100      	movs	r1, #0
    2dea:	4e17      	ldr	r6, [pc, #92]	; (2e48 <configure_console+0xf4>)
    2dec:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2dee:	683b      	ldr	r3, [r7, #0]
    2df0:	6858      	ldr	r0, [r3, #4]
    2df2:	2100      	movs	r1, #0
    2df4:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2df6:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2df8:	1c30      	adds	r0, r6, #0
    2dfa:	4b14      	ldr	r3, [pc, #80]	; (2e4c <configure_console+0xf8>)
    2dfc:	4798      	blx	r3
    2dfe:	231f      	movs	r3, #31
    2e00:	4018      	ands	r0, r3
    2e02:	4084      	lsls	r4, r0
    2e04:	4b12      	ldr	r3, [pc, #72]	; (2e50 <configure_console+0xfc>)
    2e06:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2e08:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2e0a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2e0c:	2b00      	cmp	r3, #0
    2e0e:	d1fc      	bne.n	2e0a <configure_console+0xb6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2e10:	6832      	ldr	r2, [r6, #0]
    2e12:	3302      	adds	r3, #2
    2e14:	4313      	orrs	r3, r2
    2e16:	6033      	str	r3, [r6, #0]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
	usart_enable(&cdc_uart_module);
}
    2e18:	b013      	add	sp, #76	; 0x4c
    2e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e1c:	002a0003 	.word	0x002a0003
    2e20:	002b0003 	.word	0x002b0003
    2e24:	20000b98 	.word	0x20000b98
    2e28:	20000e18 	.word	0x20000e18
    2e2c:	00002d3d 	.word	0x00002d3d
    2e30:	20000e14 	.word	0x20000e14
    2e34:	00002d11 	.word	0x00002d11
    2e38:	20000e10 	.word	0x20000e10
    2e3c:	42001400 	.word	0x42001400
    2e40:	00003901 	.word	0x00003901
    2e44:	2000006c 	.word	0x2000006c
    2e48:	00004e2d 	.word	0x00004e2d
    2e4c:	00003875 	.word	0x00003875
    2e50:	e000e100 	.word	0xe000e100

00002e54 <createJoystick>:
   static struct Joystick JoystickPool[MAX_JOYSTICKS];
   static uint8_t numberOfJoysticks = 0;
  
  JoystickPtr createJoystick(enum adc_positive_input channel){
	  JoystickPtr joystick = NULL;
	  if(numberOfJoysticks < MAX_JOYSTICKS){
    2e54:	4b0a      	ldr	r3, [pc, #40]	; (2e80 <createJoystick+0x2c>)
    2e56:	781b      	ldrb	r3, [r3, #0]
    2e58:	2b03      	cmp	r3, #3
    2e5a:	d80d      	bhi.n	2e78 <createJoystick+0x24>
		  joystick = &JoystickPool[numberOfJoysticks++];
    2e5c:	1c59      	adds	r1, r3, #1
    2e5e:	4a08      	ldr	r2, [pc, #32]	; (2e80 <createJoystick+0x2c>)
    2e60:	7011      	strb	r1, [r2, #0]
    2e62:	4908      	ldr	r1, [pc, #32]	; (2e84 <createJoystick+0x30>)
    2e64:	009b      	lsls	r3, r3, #2
    2e66:	18ca      	adds	r2, r1, r3
		  //initialize the object
		  joystick->channel = channel;
    2e68:	5458      	strb	r0, [r3, r1]
		  joystick->direction = FORWARD;
    2e6a:	2301      	movs	r3, #1
    2e6c:	70d3      	strb	r3, [r2, #3]
		  joystick->filtered = 0;
    2e6e:	2300      	movs	r3, #0
    2e70:	7093      	strb	r3, [r2, #2]
		  joystick->raw = CENTER_VAL;
    2e72:	3380      	adds	r3, #128	; 0x80
    2e74:	7053      	strb	r3, [r2, #1]
    2e76:	e000      	b.n	2e7a <createJoystick+0x26>
   #define MAX_JOYSTICKS 4 //arbitrary limit -- I have seen game controllers with 4 joysticks
   static struct Joystick JoystickPool[MAX_JOYSTICKS];
   static uint8_t numberOfJoysticks = 0;
  
  JoystickPtr createJoystick(enum adc_positive_input channel){
	  JoystickPtr joystick = NULL;
    2e78:	2200      	movs	r2, #0
		  joystick->filtered = 0;
		  joystick->raw = CENTER_VAL;
	  }
	  
	  return joystick;
  }
    2e7a:	1c10      	adds	r0, r2, #0
    2e7c:	4770      	bx	lr
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	20000bcc 	.word	0x20000bcc
    2e84:	20000bd0 	.word	0x20000bd0

00002e88 <getJoystickFilteredVal>:
  void deleteJoystick(JoystickPtr j){
	  //to do -- shouldn't really ever need to delete a joystick...
  }
  
   uint8_t getJoystickFilteredVal( JoystickPtr j){
	   return j->filtered;
    2e88:	7880      	ldrb	r0, [r0, #2]
   }
    2e8a:	4770      	bx	lr

00002e8c <getJoystickDirection>:
   
   bool getJoystickDirection(JoystickPtr j){
	   return j->direction;
    2e8c:	78c0      	ldrb	r0, [r0, #3]
   }
    2e8e:	4770      	bx	lr

00002e90 <initAdc>:
   
   void initAdc(void)
    {
    2e90:	b530      	push	{r4, r5, lr}
    2e92:	b08d      	sub	sp, #52	; 0x34
	    struct adc_config config_adc;
	    adc_get_config_defaults(&config_adc);
    2e94:	ac01      	add	r4, sp, #4
    2e96:	1c20      	adds	r0, r4, #0
    2e98:	4b15      	ldr	r3, [pc, #84]	; (2ef0 <initAdc+0x60>)
    2e9a:	4798      	blx	r3
	    
	    config_adc.reference = ADC_REFERENCE_INTVCC2; //ref = VDDANA
    2e9c:	2305      	movs	r3, #5
    2e9e:	7063      	strb	r3, [r4, #1]
	    config_adc.resolution = ADC_RESOLUTION_8BIT;
    2ea0:	332b      	adds	r3, #43	; 0x2b
    2ea2:	70e3      	strb	r3, [r4, #3]
	    config_adc.positive_input = ADC_POSITIVE_INPUT_PIN10;
    2ea4:	3b26      	subs	r3, #38	; 0x26
    2ea6:	7123      	strb	r3, [r4, #4]

	    adc_init(&adc_instance, ADC0, &config_adc);
    2ea8:	4d12      	ldr	r5, [pc, #72]	; (2ef4 <initAdc+0x64>)
    2eaa:	1c28      	adds	r0, r5, #0
    2eac:	4912      	ldr	r1, [pc, #72]	; (2ef8 <initAdc+0x68>)
    2eae:	1c22      	adds	r2, r4, #0
    2eb0:	4b12      	ldr	r3, [pc, #72]	; (2efc <initAdc+0x6c>)
    2eb2:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2eb4:	682c      	ldr	r4, [r5, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
    2eb6:	8c23      	ldrh	r3, [r4, #32]
    2eb8:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d1fb      	bne.n	2eb6 <initAdc+0x26>
	}

#if ADC_CALLBACK_MODE == true
#   if (ADC_INST_NUM > 1)
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
    2ebe:	1c20      	adds	r0, r4, #0
    2ec0:	4b0f      	ldr	r3, [pc, #60]	; (2f00 <initAdc+0x70>)
    2ec2:	4798      	blx	r3
{
	static uint8_t adc_interrupt_vectors[ADC_INST_NUM] = {
		MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)adc_interrupt_vectors[inst_num];
    2ec4:	4b0f      	ldr	r3, [pc, #60]	; (2f04 <initAdc+0x74>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2ec6:	5c1b      	ldrb	r3, [r3, r0]
    2ec8:	221f      	movs	r2, #31
    2eca:	4013      	ands	r3, r2
    2ecc:	3a1e      	subs	r2, #30
    2ece:	409a      	lsls	r2, r3
    2ed0:	1c13      	adds	r3, r2, #0
    2ed2:	4a0d      	ldr	r2, [pc, #52]	; (2f08 <initAdc+0x78>)
    2ed4:	6013      	str	r3, [r2, #0]
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2ed6:	7822      	ldrb	r2, [r4, #0]
    2ed8:	2302      	movs	r3, #2
    2eda:	4313      	orrs	r3, r2
    2edc:	7023      	strb	r3, [r4, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2ede:	4b05      	ldr	r3, [pc, #20]	; (2ef4 <initAdc+0x64>)
    2ee0:	681a      	ldr	r2, [r3, #0]

	if (adc_module->SYNCBUSY.reg) {
    2ee2:	8c13      	ldrh	r3, [r2, #32]
    2ee4:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d1fb      	bne.n	2ee2 <initAdc+0x52>
	    adc_enable(&adc_instance);
    }
    2eea:	b00d      	add	sp, #52	; 0x34
    2eec:	bd30      	pop	{r4, r5, pc}
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	000026d9 	.word	0x000026d9
    2ef4:	20000d64 	.word	0x20000d64
    2ef8:	42004400 	.word	0x42004400
    2efc:	0000271d 	.word	0x0000271d
    2f00:	000026ad 	.word	0x000026ad
    2f04:	00005f14 	.word	0x00005f14
    2f08:	e000e100 	.word	0xe000e100

00002f0c <joystick_filter>:
/************************************************************************/
/*			Private Functions                                           */
/************************************************************************/

  void joystick_filter(JoystickPtr j){
	  if (j->raw > FORWARD_VAL){
    2f0c:	7843      	ldrb	r3, [r0, #1]
    2f0e:	2b8a      	cmp	r3, #138	; 0x8a
    2f10:	d904      	bls.n	2f1c <joystick_filter+0x10>
		  j->filtered = j->raw - FORWARD_VAL;
    2f12:	3b76      	subs	r3, #118	; 0x76
    2f14:	7083      	strb	r3, [r0, #2]
		  j->direction = FORWARD;
    2f16:	2301      	movs	r3, #1
    2f18:	70c3      	strb	r3, [r0, #3]
    2f1a:	e00b      	b.n	2f34 <joystick_filter+0x28>
	  }
	  else if (j->raw < BACKWARD_VAL){
    2f1c:	2b75      	cmp	r3, #117	; 0x75
    2f1e:	d805      	bhi.n	2f2c <joystick_filter+0x20>
		  j->filtered = BACKWARD_VAL - j->raw;
    2f20:	2276      	movs	r2, #118	; 0x76
    2f22:	1ad3      	subs	r3, r2, r3
    2f24:	7083      	strb	r3, [r0, #2]
		  j->direction = BACKWARD;
    2f26:	2300      	movs	r3, #0
    2f28:	70c3      	strb	r3, [r0, #3]
    2f2a:	e003      	b.n	2f34 <joystick_filter+0x28>
	  }
	  else{
		  j->filtered = 0;
    2f2c:	2300      	movs	r3, #0
    2f2e:	7083      	strb	r3, [r0, #2]
		  j->direction = FORWARD;
    2f30:	3301      	adds	r3, #1
    2f32:	70c3      	strb	r3, [r0, #3]
	  }
  }
    2f34:	4770      	bx	lr
    2f36:	46c0      	nop			; (mov r8, r8)

00002f38 <joystick_read>:

	    adc_init(&adc_instance, ADC0, &config_adc);
	    adc_enable(&adc_instance);
    }
	
	 void joystick_read(JoystickPtr j){
    2f38:	b570      	push	{r4, r5, r6, lr}
		 uint16_t result;
		 adc_set_positive_input(&adc_instance, j->channel);
    2f3a:	7802      	ldrb	r2, [r0, #0]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2f3c:	4b20      	ldr	r3, [pc, #128]	; (2fc0 <joystick_read+0x88>)
    2f3e:	6819      	ldr	r1, [r3, #0]
    2f40:	8c0b      	ldrh	r3, [r1, #32]
    2f42:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2f44:	2b00      	cmp	r3, #0
    2f46:	d1fb      	bne.n	2f40 <joystick_read+0x8>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2f48:	890b      	ldrh	r3, [r1, #8]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    2f4a:	241f      	movs	r4, #31
    2f4c:	43a3      	bics	r3, r4
    2f4e:	4313      	orrs	r3, r2
    2f50:	810b      	strh	r3, [r1, #8]
    2f52:	8c0b      	ldrh	r3, [r1, #32]
    2f54:	b29b      	uxth	r3, r3
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    2f56:	2b00      	cmp	r3, #0
    2f58:	d1fb      	bne.n	2f52 <joystick_read+0x1a>
    2f5a:	8c0b      	ldrh	r3, [r1, #32]
    2f5c:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    2f5e:	2b00      	cmp	r3, #0
    2f60:	d1fb      	bne.n	2f5a <joystick_read+0x22>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2f62:	7e0a      	ldrb	r2, [r1, #24]
    2f64:	3302      	adds	r3, #2
    2f66:	4313      	orrs	r3, r2
    2f68:	760b      	strb	r3, [r1, #24]
    2f6a:	8c0b      	ldrh	r3, [r1, #32]
    2f6c:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2f6e:	2b00      	cmp	r3, #0
    2f70:	d1fb      	bne.n	2f6a <joystick_read+0x32>
	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2f72:	2401      	movs	r4, #1
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    2f74:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    2f76:	2502      	movs	r5, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    2f78:	798b      	ldrb	r3, [r1, #6]
    2f7a:	b2db      	uxtb	r3, r3

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2f7c:	1c22      	adds	r2, r4, #0
    2f7e:	401a      	ands	r2, r3
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    2f80:	421e      	tst	r6, r3
    2f82:	d000      	beq.n	2f86 <joystick_read+0x4e>
		status_flags |= ADC_STATUS_WINDOW;
    2f84:	432a      	orrs	r2, r5
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2f86:	421d      	tst	r5, r3
    2f88:	d000      	beq.n	2f8c <joystick_read+0x54>
		status_flags |= ADC_STATUS_OVERRUN;
    2f8a:	4332      	orrs	r2, r6
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2f8c:	4214      	tst	r4, r2
    2f8e:	d0f3      	beq.n	2f78 <joystick_read+0x40>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    2f90:	8c8c      	ldrh	r4, [r1, #36]	; 0x24
    2f92:	b2a4      	uxth	r4, r4
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    2f94:	2301      	movs	r3, #1
    2f96:	718b      	strb	r3, [r1, #6]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    2f98:	798a      	ldrb	r2, [r1, #6]
    2f9a:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2f9c:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    2f9e:	0755      	lsls	r5, r2, #29
    2fa0:	d501      	bpl.n	2fa6 <joystick_read+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    2fa2:	2502      	movs	r5, #2
    2fa4:	432b      	orrs	r3, r5
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2fa6:	0792      	lsls	r2, r2, #30
    2fa8:	d501      	bpl.n	2fae <joystick_read+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    2faa:	2204      	movs	r2, #4
    2fac:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2fae:	075b      	lsls	r3, r3, #29
    2fb0:	d501      	bpl.n	2fb6 <joystick_read+0x7e>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    2fb2:	2302      	movs	r3, #2
    2fb4:	718b      	strb	r3, [r1, #6]
		 adc_start_conversion(&adc_instance);
		 do {
			 /* Wait for conversion to be done and read out result */
		 } while (adc_read(&adc_instance, &result) == STATUS_BUSY);
		 j->raw = (uint8_t) result;
    2fb6:	7044      	strb	r4, [r0, #1]
		 
		 joystick_filter(j);
    2fb8:	4b02      	ldr	r3, [pc, #8]	; (2fc4 <joystick_read+0x8c>)
    2fba:	4798      	blx	r3
		 
	 }
    2fbc:	bd70      	pop	{r4, r5, r6, pc}
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	20000d64 	.word	0x20000d64
    2fc4:	00002f0d 	.word	0x00002f0d

00002fc8 <remoteControl_init>:
 */ 
 #include "remoteControl.h"
 
 extern bool timer_flag;  //placeholder -- this should be set in the timer callback

 void remoteControl_init(void){
    2fc8:	b508      	push	{r3, lr}
	delay_init();           //phy.c requires this...
    2fca:	4b09      	ldr	r3, [pc, #36]	; (2ff0 <remoteControl_init+0x28>)
    2fcc:	4798      	blx	r3
	SYS_Init(); //LWMesh network stack initialization
    2fce:	4b09      	ldr	r3, [pc, #36]	; (2ff4 <remoteControl_init+0x2c>)
    2fd0:	4798      	blx	r3
	initAdc();
    2fd2:	4b09      	ldr	r3, [pc, #36]	; (2ff8 <remoteControl_init+0x30>)
    2fd4:	4798      	blx	r3
	radioInit();  //radio initialization
    2fd6:	4b09      	ldr	r3, [pc, #36]	; (2ffc <remoteControl_init+0x34>)
    2fd8:	4798      	blx	r3
	configure_tc();
    2fda:	4b09      	ldr	r3, [pc, #36]	; (3000 <remoteControl_init+0x38>)
    2fdc:	4798      	blx	r3
	configure_tc_callbacks();
    2fde:	4b09      	ldr	r3, [pc, #36]	; (3004 <remoteControl_init+0x3c>)
    2fe0:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    2fe2:	2201      	movs	r2, #1
    2fe4:	4b08      	ldr	r3, [pc, #32]	; (3008 <remoteControl_init+0x40>)
    2fe6:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2fe8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2fec:	b662      	cpsie	i

	system_interrupt_enable_global();

 }
    2fee:	bd08      	pop	{r3, pc}
    2ff0:	00002645 	.word	0x00002645
    2ff4:	00001d39 	.word	0x00001d39
    2ff8:	00002e91 	.word	0x00002e91
    2ffc:	00000655 	.word	0x00000655
    3000:	00003019 	.word	0x00003019
    3004:	0000308d 	.word	0x0000308d
    3008:	20000008 	.word	0x20000008

0000300c <tc_callback_overflow>:
struct tc_module tc_instance;
bool timer_flag = false;

static void tc_callback_overflow(struct tc_module *const module_inst)
{
	timer_flag = true;
    300c:	2201      	movs	r2, #1
    300e:	4b01      	ldr	r3, [pc, #4]	; (3014 <tc_callback_overflow+0x8>)
    3010:	701a      	strb	r2, [r3, #0]
	//port_pin_toggle_output_level(LED_0_PIN);
}
    3012:	4770      	bx	lr
    3014:	20000be0 	.word	0x20000be0

00003018 <configure_tc>:

void configure_tc(void)
{
    3018:	b510      	push	{r4, lr}
    301a:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    301c:	2300      	movs	r3, #0
    301e:	466a      	mov	r2, sp
    3020:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3022:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    3024:	7053      	strb	r3, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
    3026:	7093      	strb	r3, [r2, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3028:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    302a:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    302c:	7293      	strb	r3, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    302e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3030:	7313      	strb	r3, [r2, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3032:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    3034:	7353      	strb	r3, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3036:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3038:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    303a:	9306      	str	r3, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    303c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    303e:	9308      	str	r3, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3040:	9309      	str	r3, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    3042:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    3044:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    3046:	8593      	strh	r3, [r2, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    3048:	3334      	adds	r3, #52	; 0x34
    304a:	2200      	movs	r2, #0
    304c:	4669      	mov	r1, sp
    304e:	54ca      	strb	r2, [r1, r3]
	struct tc_config config_tc;
	
	tc_get_config_defaults(&config_tc);
	config_tc.clock_source    = GCLK_GENERATOR_3;
    3050:	3b31      	subs	r3, #49	; 0x31
    3052:	466a      	mov	r2, sp
    3054:	700b      	strb	r3, [r1, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
    3056:	23e0      	movs	r3, #224	; 0xe0
    3058:	00db      	lsls	r3, r3, #3
    305a:	808b      	strh	r3, [r1, #4]
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
    305c:	2304      	movs	r3, #4
    305e:	70cb      	strb	r3, [r1, #3]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_FREQ;
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;
	
	tc_init(&tc_instance, TC4, &config_tc);
    3060:	4c07      	ldr	r4, [pc, #28]	; (3080 <configure_tc+0x68>)
    3062:	1c20      	adds	r0, r4, #0
    3064:	4907      	ldr	r1, [pc, #28]	; (3084 <configure_tc+0x6c>)
    3066:	4b08      	ldr	r3, [pc, #32]	; (3088 <configure_tc+0x70>)
    3068:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    306a:	6822      	ldr	r2, [r4, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    306c:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    306e:	2b00      	cmp	r3, #0
    3070:	d1fc      	bne.n	306c <configure_tc+0x54>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3072:	6811      	ldr	r1, [r2, #0]
    3074:	3302      	adds	r3, #2
    3076:	430b      	orrs	r3, r1
    3078:	6013      	str	r3, [r2, #0]
	tc_enable(&tc_instance);

}
    307a:	b00e      	add	sp, #56	; 0x38
    307c:	bd10      	pop	{r4, pc}
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	20000d84 	.word	0x20000d84
    3084:	42004000 	.word	0x42004000
    3088:	0000441d 	.word	0x0000441d

0000308c <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
    308c:	b510      	push	{r4, lr}

	tc_register_callback(&tc_instance, tc_callback_overflow, TC_CALLBACK_OVERFLOW);
    308e:	4c0d      	ldr	r4, [pc, #52]	; (30c4 <configure_tc_callbacks+0x38>)
    3090:	1c20      	adds	r0, r4, #0
    3092:	490d      	ldr	r1, [pc, #52]	; (30c8 <configure_tc_callbacks+0x3c>)
    3094:	2200      	movs	r2, #0
    3096:	4b0d      	ldr	r3, [pc, #52]	; (30cc <configure_tc_callbacks+0x40>)
    3098:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    309a:	6820      	ldr	r0, [r4, #0]
    309c:	4b0c      	ldr	r3, [pc, #48]	; (30d0 <configure_tc_callbacks+0x44>)
    309e:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    30a0:	4b0c      	ldr	r3, [pc, #48]	; (30d4 <configure_tc_callbacks+0x48>)
    30a2:	5c1b      	ldrb	r3, [r3, r0]
    30a4:	221f      	movs	r2, #31
    30a6:	4013      	ands	r3, r2
    30a8:	3a1e      	subs	r2, #30
    30aa:	1c11      	adds	r1, r2, #0
    30ac:	4099      	lsls	r1, r3
    30ae:	1c0b      	adds	r3, r1, #0
    30b0:	4909      	ldr	r1, [pc, #36]	; (30d8 <configure_tc_callbacks+0x4c>)
    30b2:	600b      	str	r3, [r1, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    30b4:	7e61      	ldrb	r1, [r4, #25]
    30b6:	2301      	movs	r3, #1
    30b8:	430b      	orrs	r3, r1
    30ba:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    30bc:	6823      	ldr	r3, [r4, #0]
    30be:	725a      	strb	r2, [r3, #9]

	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);

}
    30c0:	bd10      	pop	{r4, pc}
    30c2:	46c0      	nop			; (mov r8, r8)
    30c4:	20000d84 	.word	0x20000d84
    30c8:	0000300d 	.word	0x0000300d
    30cc:	00004301 	.word	0x00004301
    30d0:	000043e1 	.word	0x000043e1
    30d4:	00005f18 	.word	0x00005f18
    30d8:	e000e100 	.word	0xe000e100

000030dc <configure_pins>:
#include "UserIO.h"

/*Configures PORT for LED0*/
struct port_config pin;

void configure_pins(void){
    30dc:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    30de:	4c0a      	ldr	r4, [pc, #40]	; (3108 <configure_pins+0x2c>)
    30e0:	2301      	movs	r3, #1
    30e2:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    30e4:	2600      	movs	r6, #0
    30e6:	70a6      	strb	r6, [r4, #2]
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
    30e8:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin);
    30ea:	200f      	movs	r0, #15
    30ec:	1c21      	adds	r1, r4, #0
    30ee:	4d07      	ldr	r5, [pc, #28]	; (310c <configure_pins+0x30>)
    30f0:	47a8      	blx	r5
	
	pin.direction = PORT_PIN_DIR_INPUT;
    30f2:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(BUTTON_0_PIN, &pin);
    30f4:	201c      	movs	r0, #28
    30f6:	1c21      	adds	r1, r4, #0
    30f8:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    30fa:	2280      	movs	r2, #128	; 0x80
    30fc:	0212      	lsls	r2, r2, #8
    30fe:	2382      	movs	r3, #130	; 0x82
    3100:	05db      	lsls	r3, r3, #23
    3102:	619a      	str	r2, [r3, #24]

	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
}
    3104:	bd70      	pop	{r4, r5, r6, pc}
    3106:	46c0      	nop			; (mov r8, r8)
    3108:	20000da0 	.word	0x20000da0
    310c:	0000340d 	.word	0x0000340d

00003110 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3110:	b5f0      	push	{r4, r5, r6, r7, lr}
    3112:	464f      	mov	r7, r9
    3114:	4646      	mov	r6, r8
    3116:	b4c0      	push	{r6, r7}
    3118:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    311a:	ac01      	add	r4, sp, #4
    311c:	2701      	movs	r7, #1
    311e:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    3120:	2300      	movs	r3, #0
    3122:	4698      	mov	r8, r3
    3124:	70a3      	strb	r3, [r4, #2]
	 */
		struct port_config pin_conf;
		port_get_config_defaults(&pin_conf);

		/* Configure LEDs as outputs, turn them off */
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3126:	7027      	strb	r7, [r4, #0]
		port_pin_set_config(LED_0_PIN, &pin_conf);
    3128:	200f      	movs	r0, #15
    312a:	1c21      	adds	r1, r4, #0
    312c:	4d1c      	ldr	r5, [pc, #112]	; (31a0 <system_board_init+0x90>)
    312e:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3130:	2682      	movs	r6, #130	; 0x82
    3132:	05f6      	lsls	r6, r6, #23
    3134:	2380      	movs	r3, #128	; 0x80
    3136:	021b      	lsls	r3, r3, #8
    3138:	4699      	mov	r9, r3
    313a:	61b3      	str	r3, [r6, #24]
		port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

		/* Set buttons as inputs */
		pin_conf.direction  = PORT_PIN_DIR_INPUT;
    313c:	4643      	mov	r3, r8
    313e:	7023      	strb	r3, [r4, #0]
		pin_conf.input_pull = PORT_PIN_PULL_UP;
    3140:	7067      	strb	r7, [r4, #1]
		port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3142:	201c      	movs	r0, #28
    3144:	1c21      	adds	r1, r4, #0
    3146:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3148:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    314a:	4643      	mov	r3, r8
    314c:	70a3      	strb	r3, [r4, #2]
		
		#ifdef CONF_BOARD_AT86RFX
		port_get_config_defaults(&pin_conf);
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    314e:	7027      	strb	r7, [r4, #0]
		port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    3150:	2013      	movs	r0, #19
    3152:	1c21      	adds	r1, r4, #0
    3154:	47a8      	blx	r5
		port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    3156:	2012      	movs	r0, #18
    3158:	1c21      	adds	r1, r4, #0
    315a:	47a8      	blx	r5
		port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    315c:	2011      	movs	r0, #17
    315e:	1c21      	adds	r1, r4, #0
    3160:	47a8      	blx	r5
		port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    3162:	202c      	movs	r0, #44	; 0x2c
    3164:	1c21      	adds	r1, r4, #0
    3166:	47a8      	blx	r5
		port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    3168:	202f      	movs	r0, #47	; 0x2f
    316a:	1c21      	adds	r1, r4, #0
    316c:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    316e:	2380      	movs	r3, #128	; 0x80
    3170:	031b      	lsls	r3, r3, #12
    3172:	61b3      	str	r3, [r6, #24]
    3174:	2380      	movs	r3, #128	; 0x80
    3176:	02db      	lsls	r3, r3, #11
    3178:	61b3      	str	r3, [r6, #24]
    317a:	2380      	movs	r3, #128	; 0x80
    317c:	029b      	lsls	r3, r3, #10
    317e:	61b3      	str	r3, [r6, #24]
    3180:	3680      	adds	r6, #128	; 0x80
    3182:	2380      	movs	r3, #128	; 0x80
    3184:	015b      	lsls	r3, r3, #5
    3186:	61b3      	str	r3, [r6, #24]
    3188:	464b      	mov	r3, r9
    318a:	61b3      	str	r3, [r6, #24]
		port_pin_set_output_level(AT86RFX_SPI_SCK, true);
		port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
		port_pin_set_output_level(AT86RFX_SPI_CS, true);
		port_pin_set_output_level(AT86RFX_RST_PIN, true);
		port_pin_set_output_level(AT86RFX_SLP_PIN, true);
		pin_conf.direction  = PORT_PIN_DIR_INPUT;
    318c:	4643      	mov	r3, r8
    318e:	7023      	strb	r3, [r4, #0]
		port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    3190:	2010      	movs	r0, #16
    3192:	1c21      	adds	r1, r4, #0
    3194:	47a8      	blx	r5
		#endif
    3196:	b003      	add	sp, #12
    3198:	bc0c      	pop	{r2, r3}
    319a:	4690      	mov	r8, r2
    319c:	4699      	mov	r9, r3
    319e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31a0:	0000340d 	.word	0x0000340d

000031a4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    31a4:	4b0c      	ldr	r3, [pc, #48]	; (31d8 <cpu_irq_enter_critical+0x34>)
    31a6:	681b      	ldr	r3, [r3, #0]
    31a8:	2b00      	cmp	r3, #0
    31aa:	d110      	bne.n	31ce <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    31ac:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    31b0:	2b00      	cmp	r3, #0
    31b2:	d109      	bne.n	31c8 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    31b4:	b672      	cpsid	i
    31b6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    31ba:	2200      	movs	r2, #0
    31bc:	4b07      	ldr	r3, [pc, #28]	; (31dc <cpu_irq_enter_critical+0x38>)
    31be:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    31c0:	3201      	adds	r2, #1
    31c2:	4b07      	ldr	r3, [pc, #28]	; (31e0 <cpu_irq_enter_critical+0x3c>)
    31c4:	701a      	strb	r2, [r3, #0]
    31c6:	e002      	b.n	31ce <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    31c8:	2200      	movs	r2, #0
    31ca:	4b05      	ldr	r3, [pc, #20]	; (31e0 <cpu_irq_enter_critical+0x3c>)
    31cc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    31ce:	4a02      	ldr	r2, [pc, #8]	; (31d8 <cpu_irq_enter_critical+0x34>)
    31d0:	6813      	ldr	r3, [r2, #0]
    31d2:	3301      	adds	r3, #1
    31d4:	6013      	str	r3, [r2, #0]
}
    31d6:	4770      	bx	lr
    31d8:	20000be4 	.word	0x20000be4
    31dc:	20000008 	.word	0x20000008
    31e0:	20000be8 	.word	0x20000be8

000031e4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    31e4:	4b08      	ldr	r3, [pc, #32]	; (3208 <cpu_irq_leave_critical+0x24>)
    31e6:	681a      	ldr	r2, [r3, #0]
    31e8:	3a01      	subs	r2, #1
    31ea:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    31ec:	681b      	ldr	r3, [r3, #0]
    31ee:	2b00      	cmp	r3, #0
    31f0:	d109      	bne.n	3206 <cpu_irq_leave_critical+0x22>
    31f2:	4b06      	ldr	r3, [pc, #24]	; (320c <cpu_irq_leave_critical+0x28>)
    31f4:	781b      	ldrb	r3, [r3, #0]
    31f6:	2b00      	cmp	r3, #0
    31f8:	d005      	beq.n	3206 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    31fa:	2201      	movs	r2, #1
    31fc:	4b04      	ldr	r3, [pc, #16]	; (3210 <cpu_irq_leave_critical+0x2c>)
    31fe:	701a      	strb	r2, [r3, #0]
    3200:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3204:	b662      	cpsie	i
	}
}
    3206:	4770      	bx	lr
    3208:	20000be4 	.word	0x20000be4
    320c:	20000be8 	.word	0x20000be8
    3210:	20000008 	.word	0x20000008

00003214 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3214:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    3216:	2a00      	cmp	r2, #0
    3218:	d10d      	bne.n	3236 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    321a:	008b      	lsls	r3, r1, #2
    321c:	4a07      	ldr	r2, [pc, #28]	; (323c <extint_register_callback+0x28>)
    321e:	589b      	ldr	r3, [r3, r2]
    3220:	2b00      	cmp	r3, #0
    3222:	d103      	bne.n	322c <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    3224:	0089      	lsls	r1, r1, #2
    3226:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    3228:	2300      	movs	r3, #0
    322a:	e004      	b.n	3236 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    322c:	4283      	cmp	r3, r0
    322e:	d001      	beq.n	3234 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    3230:	231d      	movs	r3, #29
    3232:	e000      	b.n	3236 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    3234:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    3236:	1c18      	adds	r0, r3, #0
    3238:	4770      	bx	lr
    323a:	46c0      	nop			; (mov r8, r8)
    323c:	20000da4 	.word	0x20000da4

00003240 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3240:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3242:	2200      	movs	r2, #0
    3244:	4b15      	ldr	r3, [pc, #84]	; (329c <EIC_Handler+0x5c>)
    3246:	701a      	strb	r2, [r3, #0]
    3248:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    324a:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    324c:	4e14      	ldr	r6, [pc, #80]	; (32a0 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    324e:	4c13      	ldr	r4, [pc, #76]	; (329c <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    3250:	2b1f      	cmp	r3, #31
    3252:	d919      	bls.n	3288 <EIC_Handler+0x48>
    3254:	e00f      	b.n	3276 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    3256:	2100      	movs	r1, #0
    3258:	e000      	b.n	325c <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    325a:	4912      	ldr	r1, [pc, #72]	; (32a4 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    325c:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    325e:	009b      	lsls	r3, r3, #2
    3260:	599b      	ldr	r3, [r3, r6]
    3262:	2b00      	cmp	r3, #0
    3264:	d000      	beq.n	3268 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3266:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3268:	7823      	ldrb	r3, [r4, #0]
    326a:	3301      	adds	r3, #1
    326c:	b2db      	uxtb	r3, r3
    326e:	7023      	strb	r3, [r4, #0]
    3270:	2b0f      	cmp	r3, #15
    3272:	d9ed      	bls.n	3250 <EIC_Handler+0x10>
    3274:	e011      	b.n	329a <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3276:	1c29      	adds	r1, r5, #0
    3278:	4019      	ands	r1, r3
    327a:	2201      	movs	r2, #1
    327c:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    327e:	2100      	movs	r1, #0
    3280:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    3282:	4211      	tst	r1, r2
    3284:	d1e7      	bne.n	3256 <EIC_Handler+0x16>
    3286:	e7ef      	b.n	3268 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3288:	1c29      	adds	r1, r5, #0
    328a:	4019      	ands	r1, r3
    328c:	2201      	movs	r2, #1
    328e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    3290:	4904      	ldr	r1, [pc, #16]	; (32a4 <EIC_Handler+0x64>)
    3292:	6949      	ldr	r1, [r1, #20]
    3294:	4211      	tst	r1, r2
    3296:	d1e0      	bne.n	325a <EIC_Handler+0x1a>
    3298:	e7e6      	b.n	3268 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    329a:	bd70      	pop	{r4, r5, r6, pc}
    329c:	20000da3 	.word	0x20000da3
    32a0:	20000da4 	.word	0x20000da4
    32a4:	40002800 	.word	0x40002800

000032a8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    32a8:	4a06      	ldr	r2, [pc, #24]	; (32c4 <_extint_enable+0x1c>)
    32aa:	7811      	ldrb	r1, [r2, #0]
    32ac:	2302      	movs	r3, #2
    32ae:	430b      	orrs	r3, r1
    32b0:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    32b2:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    32b4:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    32b6:	6853      	ldr	r3, [r2, #4]
    32b8:	4219      	tst	r1, r3
    32ba:	d1fc      	bne.n	32b6 <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    32bc:	6853      	ldr	r3, [r2, #4]
    32be:	4218      	tst	r0, r3
    32c0:	d1f9      	bne.n	32b6 <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    32c2:	4770      	bx	lr
    32c4:	40002800 	.word	0x40002800

000032c8 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    32c8:	4a06      	ldr	r2, [pc, #24]	; (32e4 <_extint_disable+0x1c>)
    32ca:	7813      	ldrb	r3, [r2, #0]
    32cc:	2102      	movs	r1, #2
    32ce:	438b      	bics	r3, r1
    32d0:	7013      	strb	r3, [r2, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    32d2:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    32d4:	6853      	ldr	r3, [r2, #4]
    32d6:	4219      	tst	r1, r3
    32d8:	d1fc      	bne.n	32d4 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    32da:	6853      	ldr	r3, [r2, #4]
    32dc:	4218      	tst	r0, r3
    32de:	d1f9      	bne.n	32d4 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    32e0:	4770      	bx	lr
    32e2:	46c0      	nop			; (mov r8, r8)
    32e4:	40002800 	.word	0x40002800

000032e8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    32e8:	b500      	push	{lr}
    32ea:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    32ec:	4a18      	ldr	r2, [pc, #96]	; (3350 <_system_extint_init+0x68>)
    32ee:	6953      	ldr	r3, [r2, #20]
    32f0:	2180      	movs	r1, #128	; 0x80
    32f2:	00c9      	lsls	r1, r1, #3
    32f4:	430b      	orrs	r3, r1
    32f6:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    32f8:	a901      	add	r1, sp, #4
    32fa:	2300      	movs	r3, #0
    32fc:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    32fe:	2002      	movs	r0, #2
    3300:	4b14      	ldr	r3, [pc, #80]	; (3354 <_system_extint_init+0x6c>)
    3302:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    3304:	2002      	movs	r0, #2
    3306:	4b14      	ldr	r3, [pc, #80]	; (3358 <_system_extint_init+0x70>)
    3308:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    330a:	4a14      	ldr	r2, [pc, #80]	; (335c <_system_extint_init+0x74>)
    330c:	7811      	ldrb	r1, [r2, #0]
    330e:	2301      	movs	r3, #1
    3310:	430b      	orrs	r3, r1
    3312:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    3314:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    3316:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    3318:	6853      	ldr	r3, [r2, #4]
    331a:	4219      	tst	r1, r3
    331c:	d1fc      	bne.n	3318 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    331e:	6853      	ldr	r3, [r2, #4]
    3320:	4218      	tst	r0, r3
    3322:	d009      	beq.n	3338 <_system_extint_init+0x50>
    3324:	e7f8      	b.n	3318 <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    3326:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3328:	428b      	cmp	r3, r1
    332a:	d1fc      	bne.n	3326 <_system_extint_init+0x3e>
    332c:	2208      	movs	r2, #8
    332e:	4b0c      	ldr	r3, [pc, #48]	; (3360 <_system_extint_init+0x78>)
    3330:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    3332:	4b0c      	ldr	r3, [pc, #48]	; (3364 <_system_extint_init+0x7c>)
    3334:	4798      	blx	r3
    3336:	e009      	b.n	334c <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
    3338:	4a08      	ldr	r2, [pc, #32]	; (335c <_system_extint_init+0x74>)
    333a:	7813      	ldrb	r3, [r2, #0]
    333c:	2110      	movs	r1, #16
    333e:	438b      	bics	r3, r1
    3340:	7013      	strb	r3, [r2, #0]
    3342:	4b09      	ldr	r3, [pc, #36]	; (3368 <_system_extint_init+0x80>)
    3344:	1c19      	adds	r1, r3, #0
    3346:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    3348:	2200      	movs	r2, #0
    334a:	e7ec      	b.n	3326 <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
    334c:	b003      	add	sp, #12
    334e:	bd00      	pop	{pc}
    3350:	40000800 	.word	0x40000800
    3354:	000041a9 	.word	0x000041a9
    3358:	00004141 	.word	0x00004141
    335c:	40002800 	.word	0x40002800
    3360:	e000e100 	.word	0xe000e100
    3364:	000032a9 	.word	0x000032a9
    3368:	20000da4 	.word	0x20000da4

0000336c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    336c:	2300      	movs	r3, #0
    336e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    3370:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    3372:	2201      	movs	r2, #1
    3374:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    3376:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    3378:	3201      	adds	r2, #1
    337a:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    337c:	7243      	strb	r3, [r0, #9]
}
    337e:	4770      	bx	lr

00003380 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    3380:	b5f0      	push	{r4, r5, r6, r7, lr}
    3382:	b083      	sub	sp, #12
    3384:	1c05      	adds	r5, r0, #0
    3386:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    3388:	4b1c      	ldr	r3, [pc, #112]	; (33fc <extint_chan_set_config+0x7c>)
    338a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    338c:	a901      	add	r1, sp, #4
    338e:	2300      	movs	r3, #0
    3390:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    3392:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    3394:	7923      	ldrb	r3, [r4, #4]
    3396:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    3398:	7a23      	ldrb	r3, [r4, #8]
    339a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    339c:	7820      	ldrb	r0, [r4, #0]
    339e:	4b18      	ldr	r3, [pc, #96]	; (3400 <extint_chan_set_config+0x80>)
    33a0:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    33a2:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    33a4:	2d1f      	cmp	r5, #31
    33a6:	d800      	bhi.n	33aa <extint_chan_set_config+0x2a>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    33a8:	4e16      	ldr	r6, [pc, #88]	; (3404 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    33aa:	2207      	movs	r2, #7
    33ac:	402a      	ands	r2, r5
    33ae:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    33b0:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    33b2:	7aa3      	ldrb	r3, [r4, #10]
    33b4:	2b00      	cmp	r3, #0
    33b6:	d001      	beq.n	33bc <extint_chan_set_config+0x3c>
		new_config |= EIC_CONFIG_FILTEN0;
    33b8:	2308      	movs	r3, #8
    33ba:	4318      	orrs	r0, r3
    33bc:	08eb      	lsrs	r3, r5, #3
    33be:	009b      	lsls	r3, r3, #2
    33c0:	18f3      	adds	r3, r6, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    33c2:	69d9      	ldr	r1, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    33c4:	4090      	lsls	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    33c6:	270f      	movs	r7, #15
    33c8:	4097      	lsls	r7, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    33ca:	43b9      	bics	r1, r7
    33cc:	1c0a      	adds	r2, r1, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    33ce:	4302      	orrs	r2, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    33d0:	61da      	str	r2, [r3, #28]
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
#if (SAMC21)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    33d2:	7a63      	ldrb	r3, [r4, #9]
    33d4:	2b00      	cmp	r3, #0
    33d6:	d006      	beq.n	33e6 <extint_chan_set_config+0x66>
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
    33d8:	69b3      	ldr	r3, [r6, #24]
    33da:	2201      	movs	r2, #1
    33dc:	40aa      	lsls	r2, r5
    33de:	1c15      	adds	r5, r2, #0
    33e0:	431d      	orrs	r5, r3
    33e2:	61b5      	str	r5, [r6, #24]
    33e4:	e006      	b.n	33f4 <extint_chan_set_config+0x74>
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
    33e6:	69b3      	ldr	r3, [r6, #24]
    33e8:	041b      	lsls	r3, r3, #16
    33ea:	0c1b      	lsrs	r3, r3, #16
    33ec:	2201      	movs	r2, #1
    33ee:	40aa      	lsls	r2, r5
    33f0:	4393      	bics	r3, r2
    33f2:	61b3      	str	r3, [r6, #24]
	}
#endif
	_extint_enable();
    33f4:	4b04      	ldr	r3, [pc, #16]	; (3408 <extint_chan_set_config+0x88>)
    33f6:	4798      	blx	r3
}
    33f8:	b003      	add	sp, #12
    33fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33fc:	000032c9 	.word	0x000032c9
    3400:	000042a5 	.word	0x000042a5
    3404:	40002800 	.word	0x40002800
    3408:	000032a9 	.word	0x000032a9

0000340c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    340c:	b500      	push	{lr}
    340e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3410:	ab01      	add	r3, sp, #4
    3412:	2280      	movs	r2, #128	; 0x80
    3414:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3416:	780a      	ldrb	r2, [r1, #0]
    3418:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    341a:	784a      	ldrb	r2, [r1, #1]
    341c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    341e:	788a      	ldrb	r2, [r1, #2]
    3420:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3422:	1c19      	adds	r1, r3, #0
    3424:	4b01      	ldr	r3, [pc, #4]	; (342c <port_pin_set_config+0x20>)
    3426:	4798      	blx	r3
}
    3428:	b003      	add	sp, #12
    342a:	bd00      	pop	{pc}
    342c:	000042a5 	.word	0x000042a5

00003430 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3430:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3432:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3434:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3436:	4281      	cmp	r1, r0
    3438:	d30c      	bcc.n	3454 <_sercom_get_sync_baud_val+0x24>
    343a:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    343c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    343e:	3301      	adds	r3, #1
    3440:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    3442:	4288      	cmp	r0, r1
    3444:	d9fa      	bls.n	343c <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    3446:	3b01      	subs	r3, #1
    3448:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    344a:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    344c:	2bff      	cmp	r3, #255	; 0xff
    344e:	d801      	bhi.n	3454 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    3450:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    3452:	2400      	movs	r4, #0
	}
}
    3454:	1c20      	adds	r0, r4, #0
    3456:	bd10      	pop	{r4, pc}

00003458 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3458:	b5f0      	push	{r4, r5, r6, r7, lr}
    345a:	465f      	mov	r7, fp
    345c:	4656      	mov	r6, sl
    345e:	464d      	mov	r5, r9
    3460:	4644      	mov	r4, r8
    3462:	b4f0      	push	{r4, r5, r6, r7}
    3464:	b089      	sub	sp, #36	; 0x24
    3466:	1c1c      	adds	r4, r3, #0
    3468:	ab12      	add	r3, sp, #72	; 0x48
    346a:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    346c:	1c06      	adds	r6, r0, #0
    346e:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3470:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3472:	428e      	cmp	r6, r1
    3474:	d900      	bls.n	3478 <_sercom_get_async_baud_val+0x20>
    3476:	e0c7      	b.n	3608 <_sercom_get_async_baud_val+0x1b0>
    3478:	1c25      	adds	r5, r4, #0
    347a:	9207      	str	r2, [sp, #28]
    347c:	1c0c      	adds	r4, r1, #0
    347e:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3480:	2d00      	cmp	r5, #0
    3482:	d151      	bne.n	3528 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3484:	1c18      	adds	r0, r3, #0
    3486:	2100      	movs	r1, #0
    3488:	2300      	movs	r3, #0
    348a:	4d63      	ldr	r5, [pc, #396]	; (3618 <_sercom_get_async_baud_val+0x1c0>)
    348c:	47a8      	blx	r5
    348e:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    3490:	1c26      	adds	r6, r4, #0
    3492:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3494:	2300      	movs	r3, #0
    3496:	2400      	movs	r4, #0
    3498:	9302      	str	r3, [sp, #8]
    349a:	9403      	str	r4, [sp, #12]
    349c:	2200      	movs	r2, #0
    349e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    34a0:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    34a2:	2120      	movs	r1, #32
    34a4:	468c      	mov	ip, r1
    34a6:	391f      	subs	r1, #31
    34a8:	9600      	str	r6, [sp, #0]
    34aa:	9701      	str	r7, [sp, #4]
    34ac:	2420      	movs	r4, #32
    34ae:	4264      	negs	r4, r4
    34b0:	1904      	adds	r4, r0, r4
    34b2:	d403      	bmi.n	34bc <_sercom_get_async_baud_val+0x64>
    34b4:	1c0d      	adds	r5, r1, #0
    34b6:	40a5      	lsls	r5, r4
    34b8:	46a8      	mov	r8, r5
    34ba:	e004      	b.n	34c6 <_sercom_get_async_baud_val+0x6e>
    34bc:	4664      	mov	r4, ip
    34be:	1a24      	subs	r4, r4, r0
    34c0:	1c0d      	adds	r5, r1, #0
    34c2:	40e5      	lsrs	r5, r4
    34c4:	46a8      	mov	r8, r5
    34c6:	1c0c      	adds	r4, r1, #0
    34c8:	4084      	lsls	r4, r0
    34ca:	46a1      	mov	r9, r4

		r = r << 1;
    34cc:	1c14      	adds	r4, r2, #0
    34ce:	1c1d      	adds	r5, r3, #0
    34d0:	18a4      	adds	r4, r4, r2
    34d2:	415d      	adcs	r5, r3
    34d4:	1c22      	adds	r2, r4, #0
    34d6:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
    34d8:	465e      	mov	r6, fp
    34da:	4647      	mov	r7, r8
    34dc:	423e      	tst	r6, r7
    34de:	d003      	beq.n	34e8 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
    34e0:	1c0e      	adds	r6, r1, #0
    34e2:	4326      	orrs	r6, r4
    34e4:	1c32      	adds	r2, r6, #0
    34e6:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
    34e8:	9c01      	ldr	r4, [sp, #4]
    34ea:	429c      	cmp	r4, r3
    34ec:	d810      	bhi.n	3510 <_sercom_get_async_baud_val+0xb8>
    34ee:	d102      	bne.n	34f6 <_sercom_get_async_baud_val+0x9e>
    34f0:	9c00      	ldr	r4, [sp, #0]
    34f2:	4294      	cmp	r4, r2
    34f4:	d80c      	bhi.n	3510 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
    34f6:	9c00      	ldr	r4, [sp, #0]
    34f8:	9d01      	ldr	r5, [sp, #4]
    34fa:	1b12      	subs	r2, r2, r4
    34fc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    34fe:	464d      	mov	r5, r9
    3500:	9e02      	ldr	r6, [sp, #8]
    3502:	9f03      	ldr	r7, [sp, #12]
    3504:	4335      	orrs	r5, r6
    3506:	1c3c      	adds	r4, r7, #0
    3508:	4646      	mov	r6, r8
    350a:	4334      	orrs	r4, r6
    350c:	9502      	str	r5, [sp, #8]
    350e:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    3510:	3801      	subs	r0, #1
    3512:	d2cb      	bcs.n	34ac <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3514:	2200      	movs	r2, #0
    3516:	2301      	movs	r3, #1
    3518:	9802      	ldr	r0, [sp, #8]
    351a:	9903      	ldr	r1, [sp, #12]
    351c:	1a12      	subs	r2, r2, r0
    351e:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    3520:	0c11      	lsrs	r1, r2, #16
    3522:	041b      	lsls	r3, r3, #16
    3524:	4319      	orrs	r1, r3
    3526:	e06c      	b.n	3602 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    3528:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    352a:	2d01      	cmp	r5, #1
    352c:	d169      	bne.n	3602 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    352e:	0f61      	lsrs	r1, r4, #29
    3530:	1c0f      	adds	r7, r1, #0
    3532:	00e1      	lsls	r1, r4, #3
    3534:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
    3536:	1c18      	adds	r0, r3, #0
    3538:	2100      	movs	r1, #0
    353a:	2300      	movs	r3, #0
    353c:	4c36      	ldr	r4, [pc, #216]	; (3618 <_sercom_get_async_baud_val+0x1c0>)
    353e:	47a0      	blx	r4
    3540:	1c04      	adds	r4, r0, #0
    3542:	1c0d      	adds	r5, r1, #0
    3544:	2300      	movs	r3, #0
    3546:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    3548:	3320      	adds	r3, #32
    354a:	469b      	mov	fp, r3
    354c:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    354e:	4663      	mov	r3, ip
    3550:	9305      	str	r3, [sp, #20]
    3552:	46b9      	mov	r9, r7
    3554:	466b      	mov	r3, sp
    3556:	7d1b      	ldrb	r3, [r3, #20]
    3558:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    355a:	2300      	movs	r3, #0
    355c:	469c      	mov	ip, r3
    355e:	2000      	movs	r0, #0
    3560:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
    3562:	223f      	movs	r2, #63	; 0x3f
    3564:	9400      	str	r4, [sp, #0]
    3566:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
    3568:	2320      	movs	r3, #32
    356a:	425b      	negs	r3, r3
    356c:	18d3      	adds	r3, r2, r3
    356e:	d403      	bmi.n	3578 <_sercom_get_async_baud_val+0x120>
    3570:	1c34      	adds	r4, r6, #0
    3572:	409c      	lsls	r4, r3
    3574:	1c23      	adds	r3, r4, #0
    3576:	e004      	b.n	3582 <_sercom_get_async_baud_val+0x12a>
    3578:	465b      	mov	r3, fp
    357a:	1a9b      	subs	r3, r3, r2
    357c:	1c34      	adds	r4, r6, #0
    357e:	40dc      	lsrs	r4, r3
    3580:	1c23      	adds	r3, r4, #0
    3582:	1c37      	adds	r7, r6, #0
    3584:	4097      	lsls	r7, r2

		r = r << 1;
    3586:	1c04      	adds	r4, r0, #0
    3588:	1c0d      	adds	r5, r1, #0
    358a:	1824      	adds	r4, r4, r0
    358c:	414d      	adcs	r5, r1
    358e:	1c20      	adds	r0, r4, #0
    3590:	1c29      	adds	r1, r5, #0
    3592:	9002      	str	r0, [sp, #8]
    3594:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
    3596:	4644      	mov	r4, r8
    3598:	403c      	ands	r4, r7
    359a:	46a2      	mov	sl, r4
    359c:	464c      	mov	r4, r9
    359e:	4023      	ands	r3, r4
    35a0:	4654      	mov	r4, sl
    35a2:	4323      	orrs	r3, r4
    35a4:	d005      	beq.n	35b2 <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
    35a6:	9b02      	ldr	r3, [sp, #8]
    35a8:	9c03      	ldr	r4, [sp, #12]
    35aa:	1c1d      	adds	r5, r3, #0
    35ac:	4335      	orrs	r5, r6
    35ae:	1c28      	adds	r0, r5, #0
    35b0:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
    35b2:	9b01      	ldr	r3, [sp, #4]
    35b4:	428b      	cmp	r3, r1
    35b6:	d80a      	bhi.n	35ce <_sercom_get_async_baud_val+0x176>
    35b8:	d102      	bne.n	35c0 <_sercom_get_async_baud_val+0x168>
    35ba:	9b00      	ldr	r3, [sp, #0]
    35bc:	4283      	cmp	r3, r0
    35be:	d806      	bhi.n	35ce <_sercom_get_async_baud_val+0x176>
			r = r - d;
    35c0:	9b00      	ldr	r3, [sp, #0]
    35c2:	9c01      	ldr	r4, [sp, #4]
    35c4:	1ac0      	subs	r0, r0, r3
    35c6:	41a1      	sbcs	r1, r4
			q |= bit_shift;
    35c8:	4663      	mov	r3, ip
    35ca:	433b      	orrs	r3, r7
    35cc:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    35ce:	3a01      	subs	r2, #1
    35d0:	d2ca      	bcs.n	3568 <_sercom_get_async_baud_val+0x110>
    35d2:	9c00      	ldr	r4, [sp, #0]
    35d4:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    35d6:	4662      	mov	r2, ip
    35d8:	9905      	ldr	r1, [sp, #20]
    35da:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
    35dc:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    35de:	4a0f      	ldr	r2, [pc, #60]	; (361c <_sercom_get_async_baud_val+0x1c4>)
    35e0:	4293      	cmp	r3, r2
    35e2:	d908      	bls.n	35f6 <_sercom_get_async_baud_val+0x19e>
    35e4:	9a06      	ldr	r2, [sp, #24]
    35e6:	3201      	adds	r2, #1
    35e8:	b2d2      	uxtb	r2, r2
    35ea:	9206      	str	r2, [sp, #24]
    35ec:	1c0a      	adds	r2, r1, #0
    35ee:	3201      	adds	r2, #1
    35f0:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    35f2:	2a08      	cmp	r2, #8
    35f4:	d1ae      	bne.n	3554 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    35f6:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    35f8:	9a06      	ldr	r2, [sp, #24]
    35fa:	2a08      	cmp	r2, #8
    35fc:	d004      	beq.n	3608 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    35fe:	0351      	lsls	r1, r2, #13
    3600:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
    3602:	9b07      	ldr	r3, [sp, #28]
    3604:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
    3606:	2500      	movs	r5, #0
}
    3608:	1c28      	adds	r0, r5, #0
    360a:	b009      	add	sp, #36	; 0x24
    360c:	bc3c      	pop	{r2, r3, r4, r5}
    360e:	4690      	mov	r8, r2
    3610:	4699      	mov	r9, r3
    3612:	46a2      	mov	sl, r4
    3614:	46ab      	mov	fp, r5
    3616:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3618:	00004be5 	.word	0x00004be5
    361c:	00001fff 	.word	0x00001fff

00003620 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3620:	b510      	push	{r4, lr}
    3622:	b082      	sub	sp, #8
    3624:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3626:	4b0e      	ldr	r3, [pc, #56]	; (3660 <sercom_set_gclk_generator+0x40>)
    3628:	781b      	ldrb	r3, [r3, #0]
    362a:	2b00      	cmp	r3, #0
    362c:	d001      	beq.n	3632 <sercom_set_gclk_generator+0x12>
    362e:	2900      	cmp	r1, #0
    3630:	d00d      	beq.n	364e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    3632:	a901      	add	r1, sp, #4
    3634:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3636:	2012      	movs	r0, #18
    3638:	4b0a      	ldr	r3, [pc, #40]	; (3664 <sercom_set_gclk_generator+0x44>)
    363a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    363c:	2012      	movs	r0, #18
    363e:	4b0a      	ldr	r3, [pc, #40]	; (3668 <sercom_set_gclk_generator+0x48>)
    3640:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3642:	4b07      	ldr	r3, [pc, #28]	; (3660 <sercom_set_gclk_generator+0x40>)
    3644:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    3646:	2201      	movs	r2, #1
    3648:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    364a:	2000      	movs	r0, #0
    364c:	e006      	b.n	365c <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    364e:	4b04      	ldr	r3, [pc, #16]	; (3660 <sercom_set_gclk_generator+0x40>)
    3650:	785b      	ldrb	r3, [r3, #1]
    3652:	4283      	cmp	r3, r0
    3654:	d001      	beq.n	365a <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3656:	201d      	movs	r0, #29
    3658:	e000      	b.n	365c <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    365a:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    365c:	b002      	add	sp, #8
    365e:	bd10      	pop	{r4, pc}
    3660:	20000bec 	.word	0x20000bec
    3664:	000041a9 	.word	0x000041a9
    3668:	00004141 	.word	0x00004141

0000366c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    366c:	4b44      	ldr	r3, [pc, #272]	; (3780 <_sercom_get_default_pad+0x114>)
    366e:	4298      	cmp	r0, r3
    3670:	d033      	beq.n	36da <_sercom_get_default_pad+0x6e>
    3672:	d806      	bhi.n	3682 <_sercom_get_default_pad+0x16>
    3674:	4b43      	ldr	r3, [pc, #268]	; (3784 <_sercom_get_default_pad+0x118>)
    3676:	4298      	cmp	r0, r3
    3678:	d00d      	beq.n	3696 <_sercom_get_default_pad+0x2a>
    367a:	4b43      	ldr	r3, [pc, #268]	; (3788 <_sercom_get_default_pad+0x11c>)
    367c:	4298      	cmp	r0, r3
    367e:	d01b      	beq.n	36b8 <_sercom_get_default_pad+0x4c>
    3680:	e06f      	b.n	3762 <_sercom_get_default_pad+0xf6>
    3682:	4b42      	ldr	r3, [pc, #264]	; (378c <_sercom_get_default_pad+0x120>)
    3684:	4298      	cmp	r0, r3
    3686:	d04a      	beq.n	371e <_sercom_get_default_pad+0xb2>
    3688:	4b41      	ldr	r3, [pc, #260]	; (3790 <_sercom_get_default_pad+0x124>)
    368a:	4298      	cmp	r0, r3
    368c:	d058      	beq.n	3740 <_sercom_get_default_pad+0xd4>
    368e:	4b41      	ldr	r3, [pc, #260]	; (3794 <_sercom_get_default_pad+0x128>)
    3690:	4298      	cmp	r0, r3
    3692:	d166      	bne.n	3762 <_sercom_get_default_pad+0xf6>
    3694:	e032      	b.n	36fc <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3696:	2901      	cmp	r1, #1
    3698:	d006      	beq.n	36a8 <_sercom_get_default_pad+0x3c>
    369a:	2900      	cmp	r1, #0
    369c:	d063      	beq.n	3766 <_sercom_get_default_pad+0xfa>
    369e:	2902      	cmp	r1, #2
    36a0:	d006      	beq.n	36b0 <_sercom_get_default_pad+0x44>
    36a2:	2903      	cmp	r1, #3
    36a4:	d006      	beq.n	36b4 <_sercom_get_default_pad+0x48>
    36a6:	e001      	b.n	36ac <_sercom_get_default_pad+0x40>
    36a8:	483b      	ldr	r0, [pc, #236]	; (3798 <_sercom_get_default_pad+0x12c>)
    36aa:	e067      	b.n	377c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    36ac:	2000      	movs	r0, #0
    36ae:	e065      	b.n	377c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    36b0:	483a      	ldr	r0, [pc, #232]	; (379c <_sercom_get_default_pad+0x130>)
    36b2:	e063      	b.n	377c <_sercom_get_default_pad+0x110>
    36b4:	483a      	ldr	r0, [pc, #232]	; (37a0 <_sercom_get_default_pad+0x134>)
    36b6:	e061      	b.n	377c <_sercom_get_default_pad+0x110>
    36b8:	2901      	cmp	r1, #1
    36ba:	d006      	beq.n	36ca <_sercom_get_default_pad+0x5e>
    36bc:	2900      	cmp	r1, #0
    36be:	d054      	beq.n	376a <_sercom_get_default_pad+0xfe>
    36c0:	2902      	cmp	r1, #2
    36c2:	d006      	beq.n	36d2 <_sercom_get_default_pad+0x66>
    36c4:	2903      	cmp	r1, #3
    36c6:	d006      	beq.n	36d6 <_sercom_get_default_pad+0x6a>
    36c8:	e001      	b.n	36ce <_sercom_get_default_pad+0x62>
    36ca:	4836      	ldr	r0, [pc, #216]	; (37a4 <_sercom_get_default_pad+0x138>)
    36cc:	e056      	b.n	377c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    36ce:	2000      	movs	r0, #0
    36d0:	e054      	b.n	377c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    36d2:	4835      	ldr	r0, [pc, #212]	; (37a8 <_sercom_get_default_pad+0x13c>)
    36d4:	e052      	b.n	377c <_sercom_get_default_pad+0x110>
    36d6:	4835      	ldr	r0, [pc, #212]	; (37ac <_sercom_get_default_pad+0x140>)
    36d8:	e050      	b.n	377c <_sercom_get_default_pad+0x110>
    36da:	2901      	cmp	r1, #1
    36dc:	d006      	beq.n	36ec <_sercom_get_default_pad+0x80>
    36de:	2900      	cmp	r1, #0
    36e0:	d045      	beq.n	376e <_sercom_get_default_pad+0x102>
    36e2:	2902      	cmp	r1, #2
    36e4:	d006      	beq.n	36f4 <_sercom_get_default_pad+0x88>
    36e6:	2903      	cmp	r1, #3
    36e8:	d006      	beq.n	36f8 <_sercom_get_default_pad+0x8c>
    36ea:	e001      	b.n	36f0 <_sercom_get_default_pad+0x84>
    36ec:	4830      	ldr	r0, [pc, #192]	; (37b0 <_sercom_get_default_pad+0x144>)
    36ee:	e045      	b.n	377c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    36f0:	2000      	movs	r0, #0
    36f2:	e043      	b.n	377c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    36f4:	482f      	ldr	r0, [pc, #188]	; (37b4 <_sercom_get_default_pad+0x148>)
    36f6:	e041      	b.n	377c <_sercom_get_default_pad+0x110>
    36f8:	482f      	ldr	r0, [pc, #188]	; (37b8 <_sercom_get_default_pad+0x14c>)
    36fa:	e03f      	b.n	377c <_sercom_get_default_pad+0x110>
    36fc:	2901      	cmp	r1, #1
    36fe:	d006      	beq.n	370e <_sercom_get_default_pad+0xa2>
    3700:	2900      	cmp	r1, #0
    3702:	d036      	beq.n	3772 <_sercom_get_default_pad+0x106>
    3704:	2902      	cmp	r1, #2
    3706:	d006      	beq.n	3716 <_sercom_get_default_pad+0xaa>
    3708:	2903      	cmp	r1, #3
    370a:	d006      	beq.n	371a <_sercom_get_default_pad+0xae>
    370c:	e001      	b.n	3712 <_sercom_get_default_pad+0xa6>
    370e:	482b      	ldr	r0, [pc, #172]	; (37bc <_sercom_get_default_pad+0x150>)
    3710:	e034      	b.n	377c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3712:	2000      	movs	r0, #0
    3714:	e032      	b.n	377c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3716:	482a      	ldr	r0, [pc, #168]	; (37c0 <_sercom_get_default_pad+0x154>)
    3718:	e030      	b.n	377c <_sercom_get_default_pad+0x110>
    371a:	482a      	ldr	r0, [pc, #168]	; (37c4 <_sercom_get_default_pad+0x158>)
    371c:	e02e      	b.n	377c <_sercom_get_default_pad+0x110>
    371e:	2901      	cmp	r1, #1
    3720:	d006      	beq.n	3730 <_sercom_get_default_pad+0xc4>
    3722:	2900      	cmp	r1, #0
    3724:	d027      	beq.n	3776 <_sercom_get_default_pad+0x10a>
    3726:	2902      	cmp	r1, #2
    3728:	d006      	beq.n	3738 <_sercom_get_default_pad+0xcc>
    372a:	2903      	cmp	r1, #3
    372c:	d006      	beq.n	373c <_sercom_get_default_pad+0xd0>
    372e:	e001      	b.n	3734 <_sercom_get_default_pad+0xc8>
    3730:	4825      	ldr	r0, [pc, #148]	; (37c8 <_sercom_get_default_pad+0x15c>)
    3732:	e023      	b.n	377c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3734:	2000      	movs	r0, #0
    3736:	e021      	b.n	377c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3738:	4824      	ldr	r0, [pc, #144]	; (37cc <_sercom_get_default_pad+0x160>)
    373a:	e01f      	b.n	377c <_sercom_get_default_pad+0x110>
    373c:	4824      	ldr	r0, [pc, #144]	; (37d0 <_sercom_get_default_pad+0x164>)
    373e:	e01d      	b.n	377c <_sercom_get_default_pad+0x110>
    3740:	2901      	cmp	r1, #1
    3742:	d006      	beq.n	3752 <_sercom_get_default_pad+0xe6>
    3744:	2900      	cmp	r1, #0
    3746:	d018      	beq.n	377a <_sercom_get_default_pad+0x10e>
    3748:	2902      	cmp	r1, #2
    374a:	d006      	beq.n	375a <_sercom_get_default_pad+0xee>
    374c:	2903      	cmp	r1, #3
    374e:	d006      	beq.n	375e <_sercom_get_default_pad+0xf2>
    3750:	e001      	b.n	3756 <_sercom_get_default_pad+0xea>
    3752:	4820      	ldr	r0, [pc, #128]	; (37d4 <_sercom_get_default_pad+0x168>)
    3754:	e012      	b.n	377c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3756:	2000      	movs	r0, #0
    3758:	e010      	b.n	377c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    375a:	481f      	ldr	r0, [pc, #124]	; (37d8 <_sercom_get_default_pad+0x16c>)
    375c:	e00e      	b.n	377c <_sercom_get_default_pad+0x110>
    375e:	481f      	ldr	r0, [pc, #124]	; (37dc <_sercom_get_default_pad+0x170>)
    3760:	e00c      	b.n	377c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3762:	2000      	movs	r0, #0
    3764:	e00a      	b.n	377c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3766:	481e      	ldr	r0, [pc, #120]	; (37e0 <_sercom_get_default_pad+0x174>)
    3768:	e008      	b.n	377c <_sercom_get_default_pad+0x110>
    376a:	481e      	ldr	r0, [pc, #120]	; (37e4 <_sercom_get_default_pad+0x178>)
    376c:	e006      	b.n	377c <_sercom_get_default_pad+0x110>
    376e:	481e      	ldr	r0, [pc, #120]	; (37e8 <_sercom_get_default_pad+0x17c>)
    3770:	e004      	b.n	377c <_sercom_get_default_pad+0x110>
    3772:	481e      	ldr	r0, [pc, #120]	; (37ec <_sercom_get_default_pad+0x180>)
    3774:	e002      	b.n	377c <_sercom_get_default_pad+0x110>
    3776:	481e      	ldr	r0, [pc, #120]	; (37f0 <_sercom_get_default_pad+0x184>)
    3778:	e000      	b.n	377c <_sercom_get_default_pad+0x110>
    377a:	481e      	ldr	r0, [pc, #120]	; (37f4 <_sercom_get_default_pad+0x188>)
	}

	Assert(false);
	return 0;
}
    377c:	4770      	bx	lr
    377e:	46c0      	nop			; (mov r8, r8)
    3780:	42000c00 	.word	0x42000c00
    3784:	42000400 	.word	0x42000400
    3788:	42000800 	.word	0x42000800
    378c:	42001400 	.word	0x42001400
    3790:	42001800 	.word	0x42001800
    3794:	42001000 	.word	0x42001000
    3798:	00050003 	.word	0x00050003
    379c:	00060003 	.word	0x00060003
    37a0:	00070003 	.word	0x00070003
    37a4:	00110002 	.word	0x00110002
    37a8:	00120002 	.word	0x00120002
    37ac:	00130002 	.word	0x00130002
    37b0:	000d0002 	.word	0x000d0002
    37b4:	000e0002 	.word	0x000e0002
    37b8:	000f0002 	.word	0x000f0002
    37bc:	00170002 	.word	0x00170002
    37c0:	00180002 	.word	0x00180002
    37c4:	00190002 	.word	0x00190002
    37c8:	00290003 	.word	0x00290003
    37cc:	002a0003 	.word	0x002a0003
    37d0:	002b0003 	.word	0x002b0003
    37d4:	00230003 	.word	0x00230003
    37d8:	00200003 	.word	0x00200003
    37dc:	00210003 	.word	0x00210003
    37e0:	00040003 	.word	0x00040003
    37e4:	00100002 	.word	0x00100002
    37e8:	000c0002 	.word	0x000c0002
    37ec:	00160002 	.word	0x00160002
    37f0:	00280003 	.word	0x00280003
    37f4:	00220003 	.word	0x00220003

000037f8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    37f8:	b530      	push	{r4, r5, lr}
    37fa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    37fc:	4b0c      	ldr	r3, [pc, #48]	; (3830 <_sercom_get_sercom_inst_index+0x38>)
    37fe:	466a      	mov	r2, sp
    3800:	cb32      	ldmia	r3!, {r1, r4, r5}
    3802:	c232      	stmia	r2!, {r1, r4, r5}
    3804:	cb32      	ldmia	r3!, {r1, r4, r5}
    3806:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3808:	9b00      	ldr	r3, [sp, #0]
    380a:	4283      	cmp	r3, r0
    380c:	d006      	beq.n	381c <_sercom_get_sercom_inst_index+0x24>
    380e:	2301      	movs	r3, #1
    3810:	009a      	lsls	r2, r3, #2
    3812:	4669      	mov	r1, sp
    3814:	5852      	ldr	r2, [r2, r1]
    3816:	4282      	cmp	r2, r0
    3818:	d103      	bne.n	3822 <_sercom_get_sercom_inst_index+0x2a>
    381a:	e000      	b.n	381e <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    381c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    381e:	b2d8      	uxtb	r0, r3
    3820:	e003      	b.n	382a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3822:	3301      	adds	r3, #1
    3824:	2b06      	cmp	r3, #6
    3826:	d1f3      	bne.n	3810 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3828:	2000      	movs	r0, #0
}
    382a:	b007      	add	sp, #28
    382c:	bd30      	pop	{r4, r5, pc}
    382e:	46c0      	nop			; (mov r8, r8)
    3830:	00005f20 	.word	0x00005f20

00003834 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    3834:	4770      	bx	lr
    3836:	46c0      	nop			; (mov r8, r8)

00003838 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3838:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    383a:	4b0a      	ldr	r3, [pc, #40]	; (3864 <_sercom_set_handler+0x2c>)
    383c:	781b      	ldrb	r3, [r3, #0]
    383e:	2b00      	cmp	r3, #0
    3840:	d10c      	bne.n	385c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3842:	4f09      	ldr	r7, [pc, #36]	; (3868 <_sercom_set_handler+0x30>)
    3844:	4e09      	ldr	r6, [pc, #36]	; (386c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    3846:	4d0a      	ldr	r5, [pc, #40]	; (3870 <_sercom_set_handler+0x38>)
    3848:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    384a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    384c:	195a      	adds	r2, r3, r5
    384e:	6014      	str	r4, [r2, #0]
    3850:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3852:	2b18      	cmp	r3, #24
    3854:	d1f9      	bne.n	384a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    3856:	2201      	movs	r2, #1
    3858:	4b02      	ldr	r3, [pc, #8]	; (3864 <_sercom_set_handler+0x2c>)
    385a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    385c:	0080      	lsls	r0, r0, #2
    385e:	4b02      	ldr	r3, [pc, #8]	; (3868 <_sercom_set_handler+0x30>)
    3860:	50c1      	str	r1, [r0, r3]
}
    3862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3864:	20000bee 	.word	0x20000bee
    3868:	20000bf0 	.word	0x20000bf0
    386c:	00003835 	.word	0x00003835
    3870:	20000de4 	.word	0x20000de4

00003874 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3874:	b510      	push	{r4, lr}
    3876:	b082      	sub	sp, #8
    3878:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    387a:	4668      	mov	r0, sp
    387c:	4905      	ldr	r1, [pc, #20]	; (3894 <_sercom_get_interrupt_vector+0x20>)
    387e:	2206      	movs	r2, #6
    3880:	4b05      	ldr	r3, [pc, #20]	; (3898 <_sercom_get_interrupt_vector+0x24>)
    3882:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3884:	1c20      	adds	r0, r4, #0
    3886:	4b05      	ldr	r3, [pc, #20]	; (389c <_sercom_get_interrupt_vector+0x28>)
    3888:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    388a:	466b      	mov	r3, sp
    388c:	5618      	ldrsb	r0, [r3, r0]
}
    388e:	b002      	add	sp, #8
    3890:	bd10      	pop	{r4, pc}
    3892:	46c0      	nop			; (mov r8, r8)
    3894:	00005f38 	.word	0x00005f38
    3898:	00004c85 	.word	0x00004c85
    389c:	000037f9 	.word	0x000037f9

000038a0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    38a0:	b508      	push	{r3, lr}
    38a2:	4b02      	ldr	r3, [pc, #8]	; (38ac <SERCOM0_Handler+0xc>)
    38a4:	681b      	ldr	r3, [r3, #0]
    38a6:	2000      	movs	r0, #0
    38a8:	4798      	blx	r3
    38aa:	bd08      	pop	{r3, pc}
    38ac:	20000bf0 	.word	0x20000bf0

000038b0 <SERCOM1_Handler>:
    38b0:	b508      	push	{r3, lr}
    38b2:	4b02      	ldr	r3, [pc, #8]	; (38bc <SERCOM1_Handler+0xc>)
    38b4:	685b      	ldr	r3, [r3, #4]
    38b6:	2001      	movs	r0, #1
    38b8:	4798      	blx	r3
    38ba:	bd08      	pop	{r3, pc}
    38bc:	20000bf0 	.word	0x20000bf0

000038c0 <SERCOM2_Handler>:
    38c0:	b508      	push	{r3, lr}
    38c2:	4b02      	ldr	r3, [pc, #8]	; (38cc <SERCOM2_Handler+0xc>)
    38c4:	689b      	ldr	r3, [r3, #8]
    38c6:	2002      	movs	r0, #2
    38c8:	4798      	blx	r3
    38ca:	bd08      	pop	{r3, pc}
    38cc:	20000bf0 	.word	0x20000bf0

000038d0 <SERCOM3_Handler>:
    38d0:	b508      	push	{r3, lr}
    38d2:	4b02      	ldr	r3, [pc, #8]	; (38dc <SERCOM3_Handler+0xc>)
    38d4:	68db      	ldr	r3, [r3, #12]
    38d6:	2003      	movs	r0, #3
    38d8:	4798      	blx	r3
    38da:	bd08      	pop	{r3, pc}
    38dc:	20000bf0 	.word	0x20000bf0

000038e0 <SERCOM4_Handler>:
    38e0:	b508      	push	{r3, lr}
    38e2:	4b02      	ldr	r3, [pc, #8]	; (38ec <SERCOM4_Handler+0xc>)
    38e4:	691b      	ldr	r3, [r3, #16]
    38e6:	2004      	movs	r0, #4
    38e8:	4798      	blx	r3
    38ea:	bd08      	pop	{r3, pc}
    38ec:	20000bf0 	.word	0x20000bf0

000038f0 <SERCOM5_Handler>:
    38f0:	b508      	push	{r3, lr}
    38f2:	4b02      	ldr	r3, [pc, #8]	; (38fc <SERCOM5_Handler+0xc>)
    38f4:	695b      	ldr	r3, [r3, #20]
    38f6:	2005      	movs	r0, #5
    38f8:	4798      	blx	r3
    38fa:	bd08      	pop	{r3, pc}
    38fc:	20000bf0 	.word	0x20000bf0

00003900 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3900:	b5f0      	push	{r4, r5, r6, r7, lr}
    3902:	465f      	mov	r7, fp
    3904:	4656      	mov	r6, sl
    3906:	464d      	mov	r5, r9
    3908:	4644      	mov	r4, r8
    390a:	b4f0      	push	{r4, r5, r6, r7}
    390c:	b091      	sub	sp, #68	; 0x44
    390e:	1c05      	adds	r5, r0, #0
    3910:	1c0c      	adds	r4, r1, #0
    3912:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3914:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3916:	1c08      	adds	r0, r1, #0
    3918:	4bce      	ldr	r3, [pc, #824]	; (3c54 <usart_init+0x354>)
    391a:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    391c:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    391e:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3920:	07d2      	lsls	r2, r2, #31
    3922:	d500      	bpl.n	3926 <usart_init+0x26>
    3924:	e18e      	b.n	3c44 <usart_init+0x344>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3926:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    3928:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    392a:	0792      	lsls	r2, r2, #30
    392c:	d500      	bpl.n	3930 <usart_init+0x30>
    392e:	e189      	b.n	3c44 <usart_init+0x344>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    3930:	49c9      	ldr	r1, [pc, #804]	; (3c58 <usart_init+0x358>)
    3932:	69ca      	ldr	r2, [r1, #28]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    3934:	1c47      	adds	r7, r0, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3936:	3b1b      	subs	r3, #27
    3938:	40bb      	lsls	r3, r7
    393a:	4313      	orrs	r3, r2
    393c:	61cb      	str	r3, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    393e:	a90f      	add	r1, sp, #60	; 0x3c
    3940:	2735      	movs	r7, #53	; 0x35
    3942:	5df3      	ldrb	r3, [r6, r7]
    3944:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3946:	3013      	adds	r0, #19

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3948:	b2c3      	uxtb	r3, r0
    394a:	9302      	str	r3, [sp, #8]
    394c:	1c18      	adds	r0, r3, #0
    394e:	4bc3      	ldr	r3, [pc, #780]	; (3c5c <usart_init+0x35c>)
    3950:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3952:	9802      	ldr	r0, [sp, #8]
    3954:	4bc2      	ldr	r3, [pc, #776]	; (3c60 <usart_init+0x360>)
    3956:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3958:	5df0      	ldrb	r0, [r6, r7]
    395a:	2100      	movs	r1, #0
    395c:	4bc1      	ldr	r3, [pc, #772]	; (3c64 <usart_init+0x364>)
    395e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    3960:	7af3      	ldrb	r3, [r6, #11]
    3962:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    3964:	232c      	movs	r3, #44	; 0x2c
    3966:	5cf3      	ldrb	r3, [r6, r3]
    3968:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    396a:	232d      	movs	r3, #45	; 0x2d
    396c:	5cf3      	ldrb	r3, [r6, r3]
    396e:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    3970:	7ef3      	ldrb	r3, [r6, #27]
    3972:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3974:	2324      	movs	r3, #36	; 0x24
    3976:	5cf3      	ldrb	r3, [r6, r3]
    3978:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    397a:	682b      	ldr	r3, [r5, #0]
    397c:	4698      	mov	r8, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    397e:	1c18      	adds	r0, r3, #0
    3980:	4bb4      	ldr	r3, [pc, #720]	; (3c54 <usart_init+0x354>)
    3982:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3984:	3013      	adds	r0, #19
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    3986:	2200      	movs	r2, #0
    3988:	230e      	movs	r3, #14
    398a:	a906      	add	r1, sp, #24
    398c:	468c      	mov	ip, r1
    398e:	4463      	add	r3, ip
    3990:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    3992:	8a33      	ldrh	r3, [r6, #16]
    3994:	469a      	mov	sl, r3
    3996:	2380      	movs	r3, #128	; 0x80
    3998:	01db      	lsls	r3, r3, #7
    399a:	459a      	cmp	sl, r3
    399c:	d019      	beq.n	39d2 <usart_init+0xd2>
    399e:	d804      	bhi.n	39aa <usart_init+0xaa>
    39a0:	2380      	movs	r3, #128	; 0x80
    39a2:	019b      	lsls	r3, r3, #6
    39a4:	459a      	cmp	sl, r3
    39a6:	d00a      	beq.n	39be <usart_init+0xbe>
    39a8:	e12d      	b.n	3c06 <usart_init+0x306>
    39aa:	23c0      	movs	r3, #192	; 0xc0
    39ac:	01db      	lsls	r3, r3, #7
    39ae:	459a      	cmp	sl, r3
    39b0:	d00a      	beq.n	39c8 <usart_init+0xc8>
    39b2:	2380      	movs	r3, #128	; 0x80
    39b4:	021b      	lsls	r3, r3, #8
    39b6:	459a      	cmp	sl, r3
    39b8:	d100      	bne.n	39bc <usart_init+0xbc>
    39ba:	e129      	b.n	3c10 <usart_init+0x310>
    39bc:	e123      	b.n	3c06 <usart_init+0x306>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    39be:	2310      	movs	r3, #16
    39c0:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    39c2:	3b0f      	subs	r3, #15
    39c4:	9307      	str	r3, [sp, #28]
    39c6:	e127      	b.n	3c18 <usart_init+0x318>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    39c8:	2308      	movs	r3, #8
    39ca:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    39cc:	3b07      	subs	r3, #7
    39ce:	9307      	str	r3, [sp, #28]
    39d0:	e122      	b.n	3c18 <usart_init+0x318>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    39d2:	6833      	ldr	r3, [r6, #0]
    39d4:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    39d6:	68f3      	ldr	r3, [r6, #12]
    39d8:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    39da:	6973      	ldr	r3, [r6, #20]
    39dc:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    39de:	7e33      	ldrb	r3, [r6, #24]
    39e0:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    39e2:	232e      	movs	r3, #46	; 0x2e
    39e4:	5cf3      	ldrb	r3, [r6, r3]
    39e6:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    39e8:	6872      	ldr	r2, [r6, #4]
    39ea:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    39ec:	2a00      	cmp	r2, #0
    39ee:	d015      	beq.n	3a1c <usart_init+0x11c>
    39f0:	2380      	movs	r3, #128	; 0x80
    39f2:	055b      	lsls	r3, r3, #21
    39f4:	429a      	cmp	r2, r3
    39f6:	d136      	bne.n	3a66 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    39f8:	232f      	movs	r3, #47	; 0x2f
    39fa:	5cf3      	ldrb	r3, [r6, r3]
    39fc:	2b00      	cmp	r3, #0
    39fe:	d136      	bne.n	3a6e <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3a00:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3a02:	4699      	mov	r9, r3
    3a04:	b2c0      	uxtb	r0, r0
    3a06:	4b98      	ldr	r3, [pc, #608]	; (3c68 <usart_init+0x368>)
    3a08:	4798      	blx	r3
    3a0a:	1c01      	adds	r1, r0, #0
    3a0c:	4648      	mov	r0, r9
    3a0e:	220e      	movs	r2, #14
    3a10:	ab06      	add	r3, sp, #24
    3a12:	469c      	mov	ip, r3
    3a14:	4462      	add	r2, ip
    3a16:	4b95      	ldr	r3, [pc, #596]	; (3c6c <usart_init+0x36c>)
    3a18:	4798      	blx	r3
    3a1a:	e025      	b.n	3a68 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3a1c:	2308      	movs	r3, #8
    3a1e:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3a20:	2300      	movs	r3, #0
    3a22:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    3a24:	232f      	movs	r3, #47	; 0x2f
    3a26:	5cf3      	ldrb	r3, [r6, r3]
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d00b      	beq.n	3a44 <usart_init+0x144>
				status_code =
    3a2c:	464b      	mov	r3, r9
    3a2e:	9300      	str	r3, [sp, #0]
    3a30:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    3a32:	6b31      	ldr	r1, [r6, #48]	; 0x30
    3a34:	220e      	movs	r2, #14
    3a36:	ab06      	add	r3, sp, #24
    3a38:	469c      	mov	ip, r3
    3a3a:	4462      	add	r2, ip
    3a3c:	9b07      	ldr	r3, [sp, #28]
    3a3e:	4f8c      	ldr	r7, [pc, #560]	; (3c70 <usart_init+0x370>)
    3a40:	47b8      	blx	r7
    3a42:	e011      	b.n	3a68 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    3a44:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3a46:	1c1f      	adds	r7, r3, #0
    3a48:	b2c0      	uxtb	r0, r0
    3a4a:	4b87      	ldr	r3, [pc, #540]	; (3c68 <usart_init+0x368>)
    3a4c:	4798      	blx	r3
    3a4e:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    3a50:	464b      	mov	r3, r9
    3a52:	9300      	str	r3, [sp, #0]
    3a54:	1c38      	adds	r0, r7, #0
    3a56:	220e      	movs	r2, #14
    3a58:	ab06      	add	r3, sp, #24
    3a5a:	469c      	mov	ip, r3
    3a5c:	4462      	add	r2, ip
    3a5e:	9b07      	ldr	r3, [sp, #28]
    3a60:	4f83      	ldr	r7, [pc, #524]	; (3c70 <usart_init+0x370>)
    3a62:	47b8      	blx	r7
    3a64:	e000      	b.n	3a68 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    3a66:	2000      	movs	r0, #0
    3a68:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    3a6a:	d000      	beq.n	3a6e <usart_init+0x16e>
    3a6c:	e0ea      	b.n	3c44 <usart_init+0x344>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    3a6e:	7e73      	ldrb	r3, [r6, #25]
    3a70:	2b00      	cmp	r3, #0
    3a72:	d002      	beq.n	3a7a <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3a74:	7eb3      	ldrb	r3, [r6, #26]
    3a76:	4642      	mov	r2, r8
    3a78:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3a7a:	682a      	ldr	r2, [r5, #0]
    3a7c:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3a7e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3a80:	2b00      	cmp	r3, #0
    3a82:	d1fc      	bne.n	3a7e <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    3a84:	330e      	adds	r3, #14
    3a86:	aa06      	add	r2, sp, #24
    3a88:	4694      	mov	ip, r2
    3a8a:	4463      	add	r3, ip
    3a8c:	881b      	ldrh	r3, [r3, #0]
    3a8e:	4642      	mov	r2, r8
    3a90:	8193      	strh	r3, [r2, #12]
    3a92:	9b02      	ldr	r3, [sp, #8]
    3a94:	465a      	mov	r2, fp
    3a96:	4313      	orrs	r3, r2
    3a98:	9a03      	ldr	r2, [sp, #12]
    3a9a:	4313      	orrs	r3, r2
    3a9c:	433b      	orrs	r3, r7
    3a9e:	4652      	mov	r2, sl
    3aa0:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3aa2:	9a04      	ldr	r2, [sp, #16]
    3aa4:	0212      	lsls	r2, r2, #8
    3aa6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3aa8:	9a05      	ldr	r2, [sp, #20]
    3aaa:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    3aac:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    3aae:	232f      	movs	r3, #47	; 0x2f
    3ab0:	5cf3      	ldrb	r3, [r6, r3]
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	d101      	bne.n	3aba <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3ab6:	3304      	adds	r3, #4
    3ab8:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3aba:	2324      	movs	r3, #36	; 0x24
    3abc:	5cf3      	ldrb	r3, [r6, r3]
    3abe:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3ac0:	7e72      	ldrb	r2, [r6, #25]
    3ac2:	0293      	lsls	r3, r2, #10
    3ac4:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3ac6:	2226      	movs	r2, #38	; 0x26
    3ac8:	5cb2      	ldrb	r2, [r6, r2]
    3aca:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3acc:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3ace:	222c      	movs	r2, #44	; 0x2c
    3ad0:	5cb2      	ldrb	r2, [r6, r2]
    3ad2:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3ad4:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3ad6:	222d      	movs	r2, #45	; 0x2d
    3ad8:	5cb2      	ldrb	r2, [r6, r2]
    3ada:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3adc:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    3ade:	7af1      	ldrb	r1, [r6, #11]
    3ae0:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    3ae2:	8933      	ldrh	r3, [r6, #8]
    3ae4:	2bff      	cmp	r3, #255	; 0xff
    3ae6:	d004      	beq.n	3af2 <usart_init+0x1f2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    3ae8:	2280      	movs	r2, #128	; 0x80
    3aea:	0452      	lsls	r2, r2, #17
    3aec:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    3aee:	4319      	orrs	r1, r3
    3af0:	e005      	b.n	3afe <usart_init+0x1fe>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    3af2:	7ef3      	ldrb	r3, [r6, #27]
    3af4:	2b00      	cmp	r3, #0
    3af6:	d002      	beq.n	3afe <usart_init+0x1fe>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    3af8:	2380      	movs	r3, #128	; 0x80
    3afa:	04db      	lsls	r3, r3, #19
    3afc:	431f      	orrs	r7, r3
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    3afe:	4643      	mov	r3, r8
    3b00:	689a      	ldr	r2, [r3, #8]
						| config->lin_header_delay
    3b02:	8c30      	ldrh	r0, [r6, #32]
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    3b04:	2307      	movs	r3, #7
    3b06:	4013      	ands	r3, r2
						| config->lin_header_delay
    3b08:	4303      	orrs	r3, r0
						| config->lin_break_length;
    3b0a:	8c72      	ldrh	r2, [r6, #34]	; 0x22
    3b0c:	4313      	orrs	r3, r2
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    3b0e:	4642      	mov	r2, r8
    3b10:	6093      	str	r3, [r2, #8]
						| config->lin_header_delay
						| config->lin_break_length;

	if (config->lin_node != LIN_INVALID_MODE) {
    3b12:	69f3      	ldr	r3, [r6, #28]
    3b14:	2b00      	cmp	r3, #0
    3b16:	d002      	beq.n	3b1e <usart_init+0x21e>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    3b18:	4a56      	ldr	r2, [pc, #344]	; (3c74 <usart_init+0x374>)
    3b1a:	4017      	ands	r7, r2
		ctrla |= config->lin_node;
    3b1c:	431f      	orrs	r7, r3
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3b1e:	2334      	movs	r3, #52	; 0x34
    3b20:	5cf3      	ldrb	r3, [r6, r3]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d103      	bne.n	3b2e <usart_init+0x22e>
    3b26:	4b54      	ldr	r3, [pc, #336]	; (3c78 <usart_init+0x378>)
    3b28:	789b      	ldrb	r3, [r3, #2]
    3b2a:	079b      	lsls	r3, r3, #30
    3b2c:	d501      	bpl.n	3b32 <usart_init+0x232>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    3b2e:	2380      	movs	r3, #128	; 0x80
    3b30:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3b32:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3b34:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3b36:	2b00      	cmp	r3, #0
    3b38:	d1fc      	bne.n	3b34 <usart_init+0x234>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    3b3a:	4643      	mov	r3, r8
    3b3c:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3b3e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3b40:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3b42:	2b00      	cmp	r3, #0
    3b44:	d1fc      	bne.n	3b40 <usart_init+0x240>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    3b46:	4643      	mov	r3, r8
    3b48:	601f      	str	r7, [r3, #0]

#ifdef FEATURE_USART_RS485
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    3b4a:	681a      	ldr	r2, [r3, #0]
    3b4c:	23f0      	movs	r3, #240	; 0xf0
    3b4e:	051b      	lsls	r3, r3, #20
    3b50:	4013      	ands	r3, r2
    3b52:	22e0      	movs	r2, #224	; 0xe0
    3b54:	04d2      	lsls	r2, r2, #19
    3b56:	4293      	cmp	r3, r2
    3b58:	d042      	beq.n	3be0 <usart_init+0x2e0>
		SERCOM_USART_CTRLA_FORM(0x07)) {
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    3b5a:	4643      	mov	r3, r8
    3b5c:	689b      	ldr	r3, [r3, #8]
    3b5e:	2207      	movs	r2, #7
    3b60:	4393      	bics	r3, r2
    3b62:	4642      	mov	r2, r8
    3b64:	6093      	str	r3, [r2, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    3b66:	6892      	ldr	r2, [r2, #8]
    3b68:	2325      	movs	r3, #37	; 0x25
    3b6a:	5cf3      	ldrb	r3, [r6, r3]
    3b6c:	2107      	movs	r1, #7
    3b6e:	400b      	ands	r3, r1
    3b70:	4313      	orrs	r3, r2
    3b72:	4642      	mov	r2, r8
    3b74:	6093      	str	r3, [r2, #8]
    3b76:	e033      	b.n	3be0 <usart_init+0x2e0>
    3b78:	b2f9      	uxtb	r1, r7
    3b7a:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3b7c:	aa0a      	add	r2, sp, #40	; 0x28
    3b7e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    3b80:	2800      	cmp	r0, #0
    3b82:	d102      	bne.n	3b8a <usart_init+0x28a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3b84:	1c20      	adds	r0, r4, #0
    3b86:	4b3d      	ldr	r3, [pc, #244]	; (3c7c <usart_init+0x37c>)
    3b88:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3b8a:	1c43      	adds	r3, r0, #1
    3b8c:	d005      	beq.n	3b9a <usart_init+0x29a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3b8e:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3b90:	0c00      	lsrs	r0, r0, #16
    3b92:	b2c0      	uxtb	r0, r0
    3b94:	1c31      	adds	r1, r6, #0
    3b96:	4b3a      	ldr	r3, [pc, #232]	; (3c80 <usart_init+0x380>)
    3b98:	4798      	blx	r3
    3b9a:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3b9c:	2f04      	cmp	r7, #4
    3b9e:	d1eb      	bne.n	3b78 <usart_init+0x278>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    3ba0:	2300      	movs	r3, #0
    3ba2:	60eb      	str	r3, [r5, #12]
    3ba4:	612b      	str	r3, [r5, #16]
    3ba6:	616b      	str	r3, [r5, #20]
    3ba8:	61ab      	str	r3, [r5, #24]
    3baa:	61eb      	str	r3, [r5, #28]
    3bac:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    3bae:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    3bb0:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    3bb2:	2200      	movs	r2, #0
    3bb4:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    3bb6:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    3bb8:	3330      	adds	r3, #48	; 0x30
    3bba:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    3bbc:	3301      	adds	r3, #1
    3bbe:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    3bc0:	3301      	adds	r3, #1
    3bc2:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    3bc4:	3301      	adds	r3, #1
    3bc6:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3bc8:	6828      	ldr	r0, [r5, #0]
    3bca:	4b22      	ldr	r3, [pc, #136]	; (3c54 <usart_init+0x354>)
    3bcc:	4798      	blx	r3
    3bce:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    3bd0:	492c      	ldr	r1, [pc, #176]	; (3c84 <usart_init+0x384>)
    3bd2:	4b2d      	ldr	r3, [pc, #180]	; (3c88 <usart_init+0x388>)
    3bd4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3bd6:	00a4      	lsls	r4, r4, #2
    3bd8:	4b2c      	ldr	r3, [pc, #176]	; (3c8c <usart_init+0x38c>)
    3bda:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    3bdc:	2300      	movs	r3, #0
    3bde:	e031      	b.n	3c44 <usart_init+0x344>
    3be0:	ab0e      	add	r3, sp, #56	; 0x38
    3be2:	2280      	movs	r2, #128	; 0x80
    3be4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3be6:	2200      	movs	r2, #0
    3be8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    3bea:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3bec:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    3bee:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    3bf0:	930a      	str	r3, [sp, #40]	; 0x28
    3bf2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    3bf4:	930b      	str	r3, [sp, #44]	; 0x2c
    3bf6:	6c33      	ldr	r3, [r6, #64]	; 0x40
    3bf8:	930c      	str	r3, [sp, #48]	; 0x30
    3bfa:	6c73      	ldr	r3, [r6, #68]	; 0x44
    3bfc:	9302      	str	r3, [sp, #8]
    3bfe:	930d      	str	r3, [sp, #52]	; 0x34
    3c00:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3c02:	ae0e      	add	r6, sp, #56	; 0x38
    3c04:	e7b8      	b.n	3b78 <usart_init+0x278>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3c06:	2310      	movs	r3, #16
    3c08:	4699      	mov	r9, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3c0a:	2300      	movs	r3, #0
    3c0c:	9307      	str	r3, [sp, #28]
    3c0e:	e003      	b.n	3c18 <usart_init+0x318>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3c10:	2303      	movs	r3, #3
    3c12:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3c14:	2300      	movs	r3, #0
    3c16:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3c18:	6833      	ldr	r3, [r6, #0]
    3c1a:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    3c1c:	68f3      	ldr	r3, [r6, #12]
    3c1e:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3c20:	6973      	ldr	r3, [r6, #20]
    3c22:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3c24:	7e33      	ldrb	r3, [r6, #24]
    3c26:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3c28:	232e      	movs	r3, #46	; 0x2e
    3c2a:	5cf3      	ldrb	r3, [r6, r3]
    3c2c:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    3c2e:	6872      	ldr	r2, [r6, #4]
    3c30:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    3c32:	2a00      	cmp	r2, #0
    3c34:	d100      	bne.n	3c38 <usart_init+0x338>
    3c36:	e6f5      	b.n	3a24 <usart_init+0x124>
    3c38:	2380      	movs	r3, #128	; 0x80
    3c3a:	055b      	lsls	r3, r3, #21
    3c3c:	429a      	cmp	r2, r3
    3c3e:	d100      	bne.n	3c42 <usart_init+0x342>
    3c40:	e6da      	b.n	39f8 <usart_init+0xf8>
    3c42:	e714      	b.n	3a6e <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3c44:	1c18      	adds	r0, r3, #0
    3c46:	b011      	add	sp, #68	; 0x44
    3c48:	bc3c      	pop	{r2, r3, r4, r5}
    3c4a:	4690      	mov	r8, r2
    3c4c:	4699      	mov	r9, r3
    3c4e:	46a2      	mov	sl, r4
    3c50:	46ab      	mov	fp, r5
    3c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c54:	000037f9 	.word	0x000037f9
    3c58:	40000800 	.word	0x40000800
    3c5c:	000041a9 	.word	0x000041a9
    3c60:	00004141 	.word	0x00004141
    3c64:	00003621 	.word	0x00003621
    3c68:	000041cd 	.word	0x000041cd
    3c6c:	00003431 	.word	0x00003431
    3c70:	00003459 	.word	0x00003459
    3c74:	f0ffffff 	.word	0xf0ffffff
    3c78:	41002000 	.word	0x41002000
    3c7c:	0000366d 	.word	0x0000366d
    3c80:	000042a5 	.word	0x000042a5
    3c84:	00003d35 	.word	0x00003d35
    3c88:	00003839 	.word	0x00003839
    3c8c:	20000de4 	.word	0x20000de4

00003c90 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    3c90:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3c92:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3c94:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    3c96:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3c98:	2c00      	cmp	r4, #0
    3c9a:	d00d      	beq.n	3cb8 <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    3c9c:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
    3c9e:	b280      	uxth	r0, r0
		return STATUS_BUSY;
    3ca0:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    3ca2:	2800      	cmp	r0, #0
    3ca4:	d108      	bne.n	3cb8 <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3ca6:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3ca8:	2a00      	cmp	r2, #0
    3caa:	d1fc      	bne.n	3ca6 <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    3cac:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    3cae:	2102      	movs	r1, #2
    3cb0:	7e1a      	ldrb	r2, [r3, #24]
    3cb2:	420a      	tst	r2, r1
    3cb4:	d0fc      	beq.n	3cb0 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    3cb6:	2200      	movs	r2, #0
}
    3cb8:	1c10      	adds	r0, r2, #0
    3cba:	bd10      	pop	{r4, pc}

00003cbc <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    3cbc:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3cbe:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    3cc0:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    3cc2:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    3cc4:	2a00      	cmp	r2, #0
    3cc6:	d033      	beq.n	3d30 <usart_read_wait+0x74>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    3cc8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    3cca:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    3ccc:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    3cce:	2a00      	cmp	r2, #0
    3cd0:	d12e      	bne.n	3d30 <usart_read_wait+0x74>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    3cd2:	7e22      	ldrb	r2, [r4, #24]
    3cd4:	0752      	lsls	r2, r2, #29
    3cd6:	d52b      	bpl.n	3d30 <usart_read_wait+0x74>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3cd8:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3cda:	2b00      	cmp	r3, #0
    3cdc:	d1fc      	bne.n	3cd8 <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3cde:	8b63      	ldrh	r3, [r4, #26]
    3ce0:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    3ce2:	065a      	lsls	r2, r3, #25
    3ce4:	d021      	beq.n	3d2a <usart_read_wait+0x6e>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    3ce6:	079a      	lsls	r2, r3, #30
    3ce8:	d503      	bpl.n	3cf2 <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    3cea:	2302      	movs	r3, #2
    3cec:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    3cee:	3318      	adds	r3, #24
    3cf0:	e01e      	b.n	3d30 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3cf2:	075a      	lsls	r2, r3, #29
    3cf4:	d503      	bpl.n	3cfe <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3cf6:	2304      	movs	r3, #4
    3cf8:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    3cfa:	331a      	adds	r3, #26
    3cfc:	e018      	b.n	3d30 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3cfe:	07da      	lsls	r2, r3, #31
    3d00:	d503      	bpl.n	3d0a <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    3d02:	2301      	movs	r3, #1
    3d04:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    3d06:	3312      	adds	r3, #18
    3d08:	e012      	b.n	3d30 <usart_read_wait+0x74>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    3d0a:	06da      	lsls	r2, r3, #27
    3d0c:	d505      	bpl.n	3d1a <usart_read_wait+0x5e>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    3d0e:	8b62      	ldrh	r2, [r4, #26]
    3d10:	2310      	movs	r3, #16
    3d12:	4313      	orrs	r3, r2
    3d14:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    3d16:	2342      	movs	r3, #66	; 0x42
    3d18:	e00a      	b.n	3d30 <usart_read_wait+0x74>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    3d1a:	069b      	lsls	r3, r3, #26
    3d1c:	d505      	bpl.n	3d2a <usart_read_wait+0x6e>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    3d1e:	8b62      	ldrh	r2, [r4, #26]
    3d20:	2320      	movs	r3, #32
    3d22:	4313      	orrs	r3, r2
    3d24:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    3d26:	2341      	movs	r3, #65	; 0x41
    3d28:	e002      	b.n	3d30 <usart_read_wait+0x74>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    3d2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3d2c:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    3d2e:	2300      	movs	r3, #0
}
    3d30:	1c18      	adds	r0, r3, #0
    3d32:	bd10      	pop	{r4, pc}

00003d34 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    3d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    3d36:	0080      	lsls	r0, r0, #2
    3d38:	4b66      	ldr	r3, [pc, #408]	; (3ed4 <_usart_interrupt_handler+0x1a0>)
    3d3a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    3d3c:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3d3e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3d40:	2b00      	cmp	r3, #0
    3d42:	d1fc      	bne.n	3d3e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    3d44:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    3d46:	7da6      	ldrb	r6, [r4, #22]
    3d48:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    3d4a:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    3d4c:	5ceb      	ldrb	r3, [r5, r3]
    3d4e:	2230      	movs	r2, #48	; 0x30
    3d50:	5caf      	ldrb	r7, [r5, r2]
    3d52:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    3d54:	07f3      	lsls	r3, r6, #31
    3d56:	d522      	bpl.n	3d9e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    3d58:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3d5a:	b29b      	uxth	r3, r3
    3d5c:	2b00      	cmp	r3, #0
    3d5e:	d01c      	beq.n	3d9a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3d60:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3d62:	7813      	ldrb	r3, [r2, #0]
    3d64:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    3d66:	1c51      	adds	r1, r2, #1
    3d68:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3d6a:	7969      	ldrb	r1, [r5, #5]
    3d6c:	2901      	cmp	r1, #1
    3d6e:	d001      	beq.n	3d74 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3d70:	b29b      	uxth	r3, r3
    3d72:	e004      	b.n	3d7e <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    3d74:	7851      	ldrb	r1, [r2, #1]
    3d76:	0209      	lsls	r1, r1, #8
    3d78:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    3d7a:	3202      	adds	r2, #2
    3d7c:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    3d7e:	05db      	lsls	r3, r3, #23
    3d80:	0ddb      	lsrs	r3, r3, #23
    3d82:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    3d84:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3d86:	3b01      	subs	r3, #1
    3d88:	b29b      	uxth	r3, r3
    3d8a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d106      	bne.n	3d9e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3d90:	3301      	adds	r3, #1
    3d92:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    3d94:	3301      	adds	r3, #1
    3d96:	75a3      	strb	r3, [r4, #22]
    3d98:	e001      	b.n	3d9e <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3d9a:	2301      	movs	r3, #1
    3d9c:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    3d9e:	07b3      	lsls	r3, r6, #30
    3da0:	d509      	bpl.n	3db6 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    3da2:	2302      	movs	r3, #2
    3da4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    3da6:	2200      	movs	r2, #0
    3da8:	3331      	adds	r3, #49	; 0x31
    3daa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    3dac:	07fb      	lsls	r3, r7, #31
    3dae:	d502      	bpl.n	3db6 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    3db0:	1c28      	adds	r0, r5, #0
    3db2:	68eb      	ldr	r3, [r5, #12]
    3db4:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3db6:	0773      	lsls	r3, r6, #29
    3db8:	d56d      	bpl.n	3e96 <_usart_interrupt_handler+0x162>

		if (module->remaining_rx_buffer_length) {
    3dba:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3dbc:	b29b      	uxth	r3, r3
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d067      	beq.n	3e92 <_usart_interrupt_handler+0x15e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3dc2:	8b63      	ldrh	r3, [r4, #26]
    3dc4:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    3dc6:	071a      	lsls	r2, r3, #28
    3dc8:	d402      	bmi.n	3dd0 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3dca:	227f      	movs	r2, #127	; 0x7f
    3dcc:	4013      	ands	r3, r2
    3dce:	e001      	b.n	3dd4 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    3dd0:	2277      	movs	r2, #119	; 0x77
    3dd2:	4013      	ands	r3, r2
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    3dd4:	065a      	lsls	r2, r3, #25
    3dd6:	d501      	bpl.n	3ddc <_usart_interrupt_handler+0xa8>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    3dd8:	2240      	movs	r2, #64	; 0x40
    3dda:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    3ddc:	2b00      	cmp	r3, #0
    3dde:	d036      	beq.n	3e4e <_usart_interrupt_handler+0x11a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    3de0:	079a      	lsls	r2, r3, #30
    3de2:	d507      	bpl.n	3df4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    3de4:	221a      	movs	r2, #26
    3de6:	2332      	movs	r3, #50	; 0x32
    3de8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    3dea:	8b62      	ldrh	r2, [r4, #26]
    3dec:	3b30      	subs	r3, #48	; 0x30
    3dee:	4313      	orrs	r3, r2
    3df0:	8363      	strh	r3, [r4, #26]
    3df2:	e026      	b.n	3e42 <_usart_interrupt_handler+0x10e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3df4:	075a      	lsls	r2, r3, #29
    3df6:	d507      	bpl.n	3e08 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    3df8:	221e      	movs	r2, #30
    3dfa:	2332      	movs	r3, #50	; 0x32
    3dfc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    3dfe:	8b62      	ldrh	r2, [r4, #26]
    3e00:	3b2e      	subs	r3, #46	; 0x2e
    3e02:	4313      	orrs	r3, r2
    3e04:	8363      	strh	r3, [r4, #26]
    3e06:	e01c      	b.n	3e42 <_usart_interrupt_handler+0x10e>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3e08:	07da      	lsls	r2, r3, #31
    3e0a:	d507      	bpl.n	3e1c <_usart_interrupt_handler+0xe8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    3e0c:	2213      	movs	r2, #19
    3e0e:	2332      	movs	r3, #50	; 0x32
    3e10:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    3e12:	8b62      	ldrh	r2, [r4, #26]
    3e14:	3b31      	subs	r3, #49	; 0x31
    3e16:	4313      	orrs	r3, r2
    3e18:	8363      	strh	r3, [r4, #26]
    3e1a:	e012      	b.n	3e42 <_usart_interrupt_handler+0x10e>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    3e1c:	06da      	lsls	r2, r3, #27
    3e1e:	d507      	bpl.n	3e30 <_usart_interrupt_handler+0xfc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    3e20:	2242      	movs	r2, #66	; 0x42
    3e22:	2332      	movs	r3, #50	; 0x32
    3e24:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    3e26:	8b62      	ldrh	r2, [r4, #26]
    3e28:	3b22      	subs	r3, #34	; 0x22
    3e2a:	4313      	orrs	r3, r2
    3e2c:	8363      	strh	r3, [r4, #26]
    3e2e:	e008      	b.n	3e42 <_usart_interrupt_handler+0x10e>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    3e30:	069b      	lsls	r3, r3, #26
    3e32:	d506      	bpl.n	3e42 <_usart_interrupt_handler+0x10e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    3e34:	2241      	movs	r2, #65	; 0x41
    3e36:	2332      	movs	r3, #50	; 0x32
    3e38:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    3e3a:	8b62      	ldrh	r2, [r4, #26]
    3e3c:	3b12      	subs	r3, #18
    3e3e:	4313      	orrs	r3, r2
    3e40:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    3e42:	077b      	lsls	r3, r7, #29
    3e44:	d527      	bpl.n	3e96 <_usart_interrupt_handler+0x162>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3e46:	1c28      	adds	r0, r5, #0
    3e48:	696b      	ldr	r3, [r5, #20]
    3e4a:	4798      	blx	r3
    3e4c:	e023      	b.n	3e96 <_usart_interrupt_handler+0x162>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3e4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3e50:	05db      	lsls	r3, r3, #23
    3e52:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    3e54:	b2da      	uxtb	r2, r3
    3e56:	6a69      	ldr	r1, [r5, #36]	; 0x24
    3e58:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    3e5a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3e5c:	1c51      	adds	r1, r2, #1
    3e5e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3e60:	7969      	ldrb	r1, [r5, #5]
    3e62:	2901      	cmp	r1, #1
    3e64:	d104      	bne.n	3e70 <_usart_interrupt_handler+0x13c>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    3e66:	0a1b      	lsrs	r3, r3, #8
    3e68:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    3e6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3e6c:	3301      	adds	r3, #1
    3e6e:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    3e70:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3e72:	3b01      	subs	r3, #1
    3e74:	b29b      	uxth	r3, r3
    3e76:	85ab      	strh	r3, [r5, #44]	; 0x2c
    3e78:	2b00      	cmp	r3, #0
    3e7a:	d10c      	bne.n	3e96 <_usart_interrupt_handler+0x162>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3e7c:	3304      	adds	r3, #4
    3e7e:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    3e80:	2200      	movs	r2, #0
    3e82:	332e      	adds	r3, #46	; 0x2e
    3e84:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    3e86:	07bb      	lsls	r3, r7, #30
    3e88:	d505      	bpl.n	3e96 <_usart_interrupt_handler+0x162>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    3e8a:	1c28      	adds	r0, r5, #0
    3e8c:	692b      	ldr	r3, [r5, #16]
    3e8e:	4798      	blx	r3
    3e90:	e001      	b.n	3e96 <_usart_interrupt_handler+0x162>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3e92:	2304      	movs	r3, #4
    3e94:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    3e96:	06f3      	lsls	r3, r6, #27
    3e98:	d507      	bpl.n	3eaa <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    3e9a:	2310      	movs	r3, #16
    3e9c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    3e9e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    3ea0:	06fb      	lsls	r3, r7, #27
    3ea2:	d502      	bpl.n	3eaa <_usart_interrupt_handler+0x176>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    3ea4:	1c28      	adds	r0, r5, #0
    3ea6:	69eb      	ldr	r3, [r5, #28]
    3ea8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    3eaa:	06b3      	lsls	r3, r6, #26
    3eac:	d507      	bpl.n	3ebe <_usart_interrupt_handler+0x18a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    3eae:	2320      	movs	r3, #32
    3eb0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    3eb2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    3eb4:	073b      	lsls	r3, r7, #28
    3eb6:	d502      	bpl.n	3ebe <_usart_interrupt_handler+0x18a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    3eb8:	1c28      	adds	r0, r5, #0
    3eba:	69ab      	ldr	r3, [r5, #24]
    3ebc:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    3ebe:	0733      	lsls	r3, r6, #28
    3ec0:	d507      	bpl.n	3ed2 <_usart_interrupt_handler+0x19e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    3ec2:	2308      	movs	r3, #8
    3ec4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    3ec6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    3ec8:	06bb      	lsls	r3, r7, #26
    3eca:	d502      	bpl.n	3ed2 <_usart_interrupt_handler+0x19e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    3ecc:	6a2b      	ldr	r3, [r5, #32]
    3ece:	1c28      	adds	r0, r5, #0
    3ed0:	4798      	blx	r3
		}
	}
#endif
}
    3ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ed4:	20000de4 	.word	0x20000de4

00003ed8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3ed8:	b508      	push	{r3, lr}
	switch (clock_source) {
    3eda:	2807      	cmp	r0, #7
    3edc:	d803      	bhi.n	3ee6 <system_clock_source_get_hz+0xe>
    3ede:	0080      	lsls	r0, r0, #2
    3ee0:	4b0f      	ldr	r3, [pc, #60]	; (3f20 <system_clock_source_get_hz+0x48>)
    3ee2:	581b      	ldr	r3, [r3, r0]
    3ee4:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    3ee6:	2000      	movs	r0, #0
    3ee8:	e018      	b.n	3f1c <system_clock_source_get_hz+0x44>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3eea:	4b0e      	ldr	r3, [pc, #56]	; (3f24 <system_clock_source_get_hz+0x4c>)
    3eec:	6858      	ldr	r0, [r3, #4]
    3eee:	e015      	b.n	3f1c <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    3ef0:	4b0d      	ldr	r3, [pc, #52]	; (3f28 <system_clock_source_get_hz+0x50>)
    3ef2:	7d5b      	ldrb	r3, [r3, #21]
    3ef4:	210f      	movs	r1, #15
    3ef6:	4019      	ands	r1, r3
    3ef8:	3101      	adds	r1, #1
    3efa:	480c      	ldr	r0, [pc, #48]	; (3f2c <system_clock_source_get_hz+0x54>)
    3efc:	4b0c      	ldr	r3, [pc, #48]	; (3f30 <system_clock_source_get_hz+0x58>)
    3efe:	4798      	blx	r3
    3f00:	e00c      	b.n	3f1c <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3f02:	4b08      	ldr	r3, [pc, #32]	; (3f24 <system_clock_source_get_hz+0x4c>)
    3f04:	6898      	ldr	r0, [r3, #8]
    3f06:	e009      	b.n	3f1c <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    3f08:	4b07      	ldr	r3, [pc, #28]	; (3f28 <system_clock_source_get_hz+0x50>)
    3f0a:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    3f0c:	2000      	movs	r0, #0

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    3f0e:	079b      	lsls	r3, r3, #30
    3f10:	d504      	bpl.n	3f1c <system_clock_source_get_hz+0x44>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    3f12:	4b04      	ldr	r3, [pc, #16]	; (3f24 <system_clock_source_get_hz+0x4c>)
    3f14:	6818      	ldr	r0, [r3, #0]
    3f16:	e001      	b.n	3f1c <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3f18:	2080      	movs	r0, #128	; 0x80
    3f1a:	0200      	lsls	r0, r0, #8
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    3f1c:	bd08      	pop	{r3, pc}
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	00005f40 	.word	0x00005f40
    3f24:	20000c08 	.word	0x20000c08
    3f28:	40001000 	.word	0x40001000
    3f2c:	02dc6c00 	.word	0x02dc6c00
    3f30:	00004ac1 	.word	0x00004ac1

00003f34 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    3f34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f36:	4647      	mov	r7, r8
    3f38:	b480      	push	{r7}
    3f3a:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    3f3c:	2203      	movs	r2, #3
    3f3e:	4b1a      	ldr	r3, [pc, #104]	; (3fa8 <system_clock_init+0x74>)
    3f40:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3f42:	4a1a      	ldr	r2, [pc, #104]	; (3fac <system_clock_init+0x78>)
    3f44:	6853      	ldr	r3, [r2, #4]
    3f46:	211e      	movs	r1, #30
    3f48:	438b      	bics	r3, r1
    3f4a:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    3f4c:	4b18      	ldr	r3, [pc, #96]	; (3fb0 <system_clock_init+0x7c>)
    3f4e:	7d19      	ldrb	r1, [r3, #20]
    3f50:	2280      	movs	r2, #128	; 0x80
    3f52:	430a      	orrs	r2, r1
    3f54:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    3f56:	2205      	movs	r2, #5
    3f58:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    3f5a:	1c1a      	adds	r2, r3, #0
    3f5c:	6993      	ldr	r3, [r2, #24]
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d1fc      	bne.n	3f5c <system_clock_init+0x28>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3f62:	4b14      	ldr	r3, [pc, #80]	; (3fb4 <system_clock_init+0x80>)
    3f64:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    3f66:	ac01      	add	r4, sp, #4
    3f68:	2500      	movs	r5, #0
    3f6a:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
    3f6c:	2606      	movs	r6, #6
    3f6e:	7026      	strb	r6, [r4, #0]
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3f70:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3f72:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3f74:	9602      	str	r6, [sp, #8]
    3f76:	2003      	movs	r0, #3
    3f78:	1c21      	adds	r1, r4, #0
    3f7a:	4b0f      	ldr	r3, [pc, #60]	; (3fb8 <system_clock_init+0x84>)
    3f7c:	4698      	mov	r8, r3
    3f7e:	4798      	blx	r3
    3f80:	2003      	movs	r0, #3
    3f82:	4f0e      	ldr	r7, [pc, #56]	; (3fbc <system_clock_init+0x88>)
    3f84:	47b8      	blx	r7
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    3f86:	2301      	movs	r3, #1
    3f88:	4a0d      	ldr	r2, [pc, #52]	; (3fc0 <system_clock_init+0x8c>)
    3f8a:	7113      	strb	r3, [r2, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3f8c:	6063      	str	r3, [r4, #4]
	config->high_when_disabled = false;
    3f8e:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
    3f90:	7026      	strb	r6, [r4, #0]
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3f92:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3f94:	7265      	strb	r5, [r4, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3f96:	2000      	movs	r0, #0
    3f98:	1c21      	adds	r1, r4, #0
    3f9a:	47c0      	blx	r8
    3f9c:	2000      	movs	r0, #0
    3f9e:	47b8      	blx	r7
#endif

}
    3fa0:	b004      	add	sp, #16
    3fa2:	bc04      	pop	{r2}
    3fa4:	4690      	mov	r8, r2
    3fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fa8:	40001800 	.word	0x40001800
    3fac:	41004000 	.word	0x41004000
    3fb0:	40001000 	.word	0x40001000
    3fb4:	00003fc5 	.word	0x00003fc5
    3fb8:	00003fe9 	.word	0x00003fe9
    3fbc:	00004095 	.word	0x00004095
    3fc0:	40000800 	.word	0x40000800

00003fc4 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    3fc4:	4a06      	ldr	r2, [pc, #24]	; (3fe0 <system_gclk_init+0x1c>)
    3fc6:	6951      	ldr	r1, [r2, #20]
    3fc8:	2380      	movs	r3, #128	; 0x80
    3fca:	430b      	orrs	r3, r1
    3fcc:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    3fce:	2201      	movs	r2, #1
    3fd0:	4b04      	ldr	r3, [pc, #16]	; (3fe4 <system_gclk_init+0x20>)
    3fd2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    3fd4:	1c19      	adds	r1, r3, #0
    3fd6:	780b      	ldrb	r3, [r1, #0]
    3fd8:	4213      	tst	r3, r2
    3fda:	d1fc      	bne.n	3fd6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3fdc:	4770      	bx	lr
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	40000800 	.word	0x40000800
    3fe4:	40001c00 	.word	0x40001c00

00003fe8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3fe8:	b570      	push	{r4, r5, r6, lr}
    3fea:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3fec:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3fee:	784b      	ldrb	r3, [r1, #1]
    3ff0:	2b00      	cmp	r3, #0
    3ff2:	d002      	beq.n	3ffa <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3ff4:	2380      	movs	r3, #128	; 0x80
    3ff6:	00db      	lsls	r3, r3, #3
    3ff8:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3ffa:	7a4b      	ldrb	r3, [r1, #9]
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d002      	beq.n	4006 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4000:	2380      	movs	r3, #128	; 0x80
    4002:	011b      	lsls	r3, r3, #4
    4004:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4006:	684a      	ldr	r2, [r1, #4]
    4008:	2a01      	cmp	r2, #1
    400a:	d917      	bls.n	403c <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    400c:	1e53      	subs	r3, r2, #1
    400e:	421a      	tst	r2, r3
    4010:	d10f      	bne.n	4032 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4012:	2a02      	cmp	r2, #2
    4014:	d906      	bls.n	4024 <system_gclk_gen_set_config+0x3c>
    4016:	2302      	movs	r3, #2
    4018:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    401a:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    401c:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    401e:	429a      	cmp	r2, r3
    4020:	d8fb      	bhi.n	401a <system_gclk_gen_set_config+0x32>
    4022:	e000      	b.n	4026 <system_gclk_gen_set_config+0x3e>
    4024:	2000      	movs	r0, #0
    4026:	2380      	movs	r3, #128	; 0x80
    4028:	015b      	lsls	r3, r3, #5
    402a:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    402c:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    402e:	4305      	orrs	r5, r0
    4030:	e004      	b.n	403c <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    4032:	0412      	lsls	r2, r2, #16
    4034:	2380      	movs	r3, #128	; 0x80
    4036:	009b      	lsls	r3, r3, #2
    4038:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    403a:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    403c:	7a0b      	ldrb	r3, [r1, #8]
    403e:	2b00      	cmp	r3, #0
    4040:	d002      	beq.n	4048 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4042:	2380      	movs	r3, #128	; 0x80
    4044:	019b      	lsls	r3, r3, #6
    4046:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4048:	2604      	movs	r6, #4
    404a:	40a6      	lsls	r6, r4
    404c:	490d      	ldr	r1, [pc, #52]	; (4084 <system_gclk_gen_set_config+0x9c>)
    404e:	4a0e      	ldr	r2, [pc, #56]	; (4088 <system_gclk_gen_set_config+0xa0>)
    4050:	684b      	ldr	r3, [r1, #4]
    4052:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    4054:	421e      	tst	r6, r3
    4056:	d1fb      	bne.n	4050 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4058:	4b0c      	ldr	r3, [pc, #48]	; (408c <system_gclk_gen_set_config+0xa4>)
    405a:	4798      	blx	r3
    405c:	00a4      	lsls	r4, r4, #2
    405e:	4b09      	ldr	r3, [pc, #36]	; (4084 <system_gclk_gen_set_config+0x9c>)
    4060:	469c      	mov	ip, r3
    4062:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    4064:	6a20      	ldr	r0, [r4, #32]
    4066:	2380      	movs	r3, #128	; 0x80
    4068:	005b      	lsls	r3, r3, #1
    406a:	4018      	ands	r0, r3
    406c:	4328      	orrs	r0, r5
    406e:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4070:	4661      	mov	r1, ip
    4072:	4a05      	ldr	r2, [pc, #20]	; (4088 <system_gclk_gen_set_config+0xa0>)
    4074:	684b      	ldr	r3, [r1, #4]
    4076:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    4078:	421e      	tst	r6, r3
    407a:	d1fb      	bne.n	4074 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    407c:	4b04      	ldr	r3, [pc, #16]	; (4090 <system_gclk_gen_set_config+0xa8>)
    407e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    4080:	bd70      	pop	{r4, r5, r6, pc}
    4082:	46c0      	nop			; (mov r8, r8)
    4084:	40001c00 	.word	0x40001c00
    4088:	000007fc 	.word	0x000007fc
    408c:	000031a5 	.word	0x000031a5
    4090:	000031e5 	.word	0x000031e5

00004094 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4094:	b510      	push	{r4, lr}
    4096:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4098:	2204      	movs	r2, #4
    409a:	4082      	lsls	r2, r0
    409c:	4809      	ldr	r0, [pc, #36]	; (40c4 <system_gclk_gen_enable+0x30>)
    409e:	490a      	ldr	r1, [pc, #40]	; (40c8 <system_gclk_gen_enable+0x34>)
    40a0:	6843      	ldr	r3, [r0, #4]
    40a2:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    40a4:	421a      	tst	r2, r3
    40a6:	d1fb      	bne.n	40a0 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    40a8:	4b08      	ldr	r3, [pc, #32]	; (40cc <system_gclk_gen_enable+0x38>)
    40aa:	4798      	blx	r3
    40ac:	00a4      	lsls	r4, r4, #2
    40ae:	4b05      	ldr	r3, [pc, #20]	; (40c4 <system_gclk_gen_enable+0x30>)
    40b0:	469c      	mov	ip, r3
    40b2:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    40b4:	6a23      	ldr	r3, [r4, #32]
    40b6:	2280      	movs	r2, #128	; 0x80
    40b8:	0052      	lsls	r2, r2, #1
    40ba:	4313      	orrs	r3, r2
    40bc:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    40be:	4b04      	ldr	r3, [pc, #16]	; (40d0 <system_gclk_gen_enable+0x3c>)
    40c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    40c2:	bd10      	pop	{r4, pc}
    40c4:	40001c00 	.word	0x40001c00
    40c8:	000007fc 	.word	0x000007fc
    40cc:	000031a5 	.word	0x000031a5
    40d0:	000031e5 	.word	0x000031e5

000040d4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    40d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40d6:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    40d8:	2204      	movs	r2, #4
    40da:	4082      	lsls	r2, r0
    40dc:	4812      	ldr	r0, [pc, #72]	; (4128 <system_gclk_gen_get_hz+0x54>)
    40de:	4913      	ldr	r1, [pc, #76]	; (412c <system_gclk_gen_get_hz+0x58>)
    40e0:	6843      	ldr	r3, [r0, #4]
    40e2:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    40e4:	421a      	tst	r2, r3
    40e6:	d1fb      	bne.n	40e0 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    40e8:	4b11      	ldr	r3, [pc, #68]	; (4130 <system_gclk_gen_get_hz+0x5c>)
    40ea:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    40ec:	4f0e      	ldr	r7, [pc, #56]	; (4128 <system_gclk_gen_get_hz+0x54>)
    40ee:	3408      	adds	r4, #8
    40f0:	00a4      	lsls	r4, r4, #2
    40f2:	59e3      	ldr	r3, [r4, r7]
    40f4:	2007      	movs	r0, #7
    40f6:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    40f8:	4b0e      	ldr	r3, [pc, #56]	; (4134 <system_gclk_gen_get_hz+0x60>)
    40fa:	4798      	blx	r3
    40fc:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    40fe:	59e5      	ldr	r5, [r4, r7]
    4100:	04ed      	lsls	r5, r5, #19
    4102:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    4104:	59e4      	ldr	r4, [r4, r7]
    4106:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4108:	4b0b      	ldr	r3, [pc, #44]	; (4138 <system_gclk_gen_get_hz+0x64>)
    410a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    410c:	2d00      	cmp	r5, #0
    410e:	d107      	bne.n	4120 <system_gclk_gen_get_hz+0x4c>
    4110:	2c01      	cmp	r4, #1
    4112:	d907      	bls.n	4124 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    4114:	1c30      	adds	r0, r6, #0
    4116:	1c21      	adds	r1, r4, #0
    4118:	4b08      	ldr	r3, [pc, #32]	; (413c <system_gclk_gen_get_hz+0x68>)
    411a:	4798      	blx	r3
    411c:	1c06      	adds	r6, r0, #0
    411e:	e001      	b.n	4124 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4120:	3401      	adds	r4, #1
    4122:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    4124:	1c30      	adds	r0, r6, #0
    4126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4128:	40001c00 	.word	0x40001c00
    412c:	000007fc 	.word	0x000007fc
    4130:	000031a5 	.word	0x000031a5
    4134:	00003ed9 	.word	0x00003ed9
    4138:	000031e5 	.word	0x000031e5
    413c:	00004ac1 	.word	0x00004ac1

00004140 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4140:	b510      	push	{r4, lr}
    4142:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4144:	4b08      	ldr	r3, [pc, #32]	; (4168 <system_gclk_chan_enable+0x28>)
    4146:	4798      	blx	r3
    4148:	00a4      	lsls	r4, r4, #2
    414a:	4b08      	ldr	r3, [pc, #32]	; (416c <system_gclk_chan_enable+0x2c>)
    414c:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    414e:	2280      	movs	r2, #128	; 0x80
    4150:	5881      	ldr	r1, [r0, r2]
    4152:	2340      	movs	r3, #64	; 0x40
    4154:	430b      	orrs	r3, r1
    4156:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    4158:	2180      	movs	r1, #128	; 0x80
    415a:	3a40      	subs	r2, #64	; 0x40
    415c:	5843      	ldr	r3, [r0, r1]
    415e:	421a      	tst	r2, r3
    4160:	d0fc      	beq.n	415c <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4162:	4b03      	ldr	r3, [pc, #12]	; (4170 <system_gclk_chan_enable+0x30>)
    4164:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    4166:	bd10      	pop	{r4, pc}
    4168:	000031a5 	.word	0x000031a5
    416c:	40001c00 	.word	0x40001c00
    4170:	000031e5 	.word	0x000031e5

00004174 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4174:	b510      	push	{r4, lr}
    4176:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4178:	4b08      	ldr	r3, [pc, #32]	; (419c <system_gclk_chan_disable+0x28>)
    417a:	4798      	blx	r3
    417c:	00a4      	lsls	r4, r4, #2
    417e:	4b08      	ldr	r3, [pc, #32]	; (41a0 <system_gclk_chan_disable+0x2c>)
    4180:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    4182:	2280      	movs	r2, #128	; 0x80
    4184:	5883      	ldr	r3, [r0, r2]
    4186:	2140      	movs	r1, #64	; 0x40
    4188:	438b      	bics	r3, r1
    418a:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    418c:	3140      	adds	r1, #64	; 0x40
    418e:	3a40      	subs	r2, #64	; 0x40
    4190:	5843      	ldr	r3, [r0, r1]
    4192:	421a      	tst	r2, r3
    4194:	d1fc      	bne.n	4190 <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4196:	4b03      	ldr	r3, [pc, #12]	; (41a4 <system_gclk_chan_disable+0x30>)
    4198:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    419a:	bd10      	pop	{r4, pc}
    419c:	000031a5 	.word	0x000031a5
    41a0:	40001c00 	.word	0x40001c00
    41a4:	000031e5 	.word	0x000031e5

000041a8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    41a8:	b538      	push	{r3, r4, r5, lr}
    41aa:	1c04      	adds	r4, r0, #0
    41ac:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    41ae:	4b05      	ldr	r3, [pc, #20]	; (41c4 <system_gclk_chan_set_config+0x1c>)
    41b0:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    41b2:	782b      	ldrb	r3, [r5, #0]
    41b4:	220f      	movs	r2, #15
    41b6:	4013      	ands	r3, r2
    41b8:	3420      	adds	r4, #32
    41ba:	00a4      	lsls	r4, r4, #2
    41bc:	4a02      	ldr	r2, [pc, #8]	; (41c8 <system_gclk_chan_set_config+0x20>)
    41be:	50a3      	str	r3, [r4, r2]


}
    41c0:	bd38      	pop	{r3, r4, r5, pc}
    41c2:	46c0      	nop			; (mov r8, r8)
    41c4:	00004175 	.word	0x00004175
    41c8:	40001c00 	.word	0x40001c00

000041cc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    41cc:	b510      	push	{r4, lr}
    41ce:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    41d0:	4b06      	ldr	r3, [pc, #24]	; (41ec <system_gclk_chan_get_hz+0x20>)
    41d2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    41d4:	3420      	adds	r4, #32
    41d6:	00a4      	lsls	r4, r4, #2
    41d8:	4b05      	ldr	r3, [pc, #20]	; (41f0 <system_gclk_chan_get_hz+0x24>)
    41da:	58e3      	ldr	r3, [r4, r3]
    41dc:	240f      	movs	r4, #15
    41de:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    41e0:	4b04      	ldr	r3, [pc, #16]	; (41f4 <system_gclk_chan_get_hz+0x28>)
    41e2:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    41e4:	1c20      	adds	r0, r4, #0
    41e6:	4b04      	ldr	r3, [pc, #16]	; (41f8 <system_gclk_chan_get_hz+0x2c>)
    41e8:	4798      	blx	r3
}
    41ea:	bd10      	pop	{r4, pc}
    41ec:	000031a5 	.word	0x000031a5
    41f0:	40001c00 	.word	0x40001c00
    41f4:	000031e5 	.word	0x000031e5
    41f8:	000040d5 	.word	0x000040d5

000041fc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    41fc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    41fe:	78d3      	ldrb	r3, [r2, #3]
    4200:	2b00      	cmp	r3, #0
    4202:	d11e      	bne.n	4242 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4204:	7814      	ldrb	r4, [r2, #0]
    4206:	2c80      	cmp	r4, #128	; 0x80
    4208:	d004      	beq.n	4214 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    420a:	0624      	lsls	r4, r4, #24
    420c:	2380      	movs	r3, #128	; 0x80
    420e:	025b      	lsls	r3, r3, #9
    4210:	431c      	orrs	r4, r3
    4212:	e000      	b.n	4216 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4214:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4216:	7853      	ldrb	r3, [r2, #1]
    4218:	2502      	movs	r5, #2
    421a:	43ab      	bics	r3, r5
    421c:	d10a      	bne.n	4234 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    421e:	7893      	ldrb	r3, [r2, #2]
    4220:	2b00      	cmp	r3, #0
    4222:	d103      	bne.n	422c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4224:	2380      	movs	r3, #128	; 0x80
    4226:	029b      	lsls	r3, r3, #10
    4228:	431c      	orrs	r4, r3
    422a:	e002      	b.n	4232 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    422c:	23c0      	movs	r3, #192	; 0xc0
    422e:	02db      	lsls	r3, r3, #11
    4230:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4232:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4234:	7853      	ldrb	r3, [r2, #1]
    4236:	3b01      	subs	r3, #1
    4238:	2b01      	cmp	r3, #1
    423a:	d812      	bhi.n	4262 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    423c:	4b18      	ldr	r3, [pc, #96]	; (42a0 <_system_pinmux_config+0xa4>)
    423e:	401c      	ands	r4, r3
    4240:	e00f      	b.n	4262 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4242:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4244:	040b      	lsls	r3, r1, #16
    4246:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4248:	24a0      	movs	r4, #160	; 0xa0
    424a:	05e4      	lsls	r4, r4, #23
    424c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    424e:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4250:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4252:	24d0      	movs	r4, #208	; 0xd0
    4254:	0624      	lsls	r4, r4, #24
    4256:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4258:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    425a:	78d3      	ldrb	r3, [r2, #3]
    425c:	2b00      	cmp	r3, #0
    425e:	d018      	beq.n	4292 <_system_pinmux_config+0x96>
    4260:	e01c      	b.n	429c <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4262:	040b      	lsls	r3, r1, #16
    4264:	0c1b      	lsrs	r3, r3, #16
    4266:	25a0      	movs	r5, #160	; 0xa0
    4268:	05ed      	lsls	r5, r5, #23
    426a:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    426c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    426e:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4270:	0c0b      	lsrs	r3, r1, #16
    4272:	25d0      	movs	r5, #208	; 0xd0
    4274:	062d      	lsls	r5, r5, #24
    4276:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4278:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    427a:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    427c:	78d3      	ldrb	r3, [r2, #3]
    427e:	2b00      	cmp	r3, #0
    4280:	d10c      	bne.n	429c <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4282:	0363      	lsls	r3, r4, #13
    4284:	d505      	bpl.n	4292 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4286:	7893      	ldrb	r3, [r2, #2]
    4288:	2b01      	cmp	r3, #1
    428a:	d101      	bne.n	4290 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    428c:	6181      	str	r1, [r0, #24]
    428e:	e000      	b.n	4292 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    4290:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4292:	7853      	ldrb	r3, [r2, #1]
    4294:	3b01      	subs	r3, #1
    4296:	2b01      	cmp	r3, #1
    4298:	d800      	bhi.n	429c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    429a:	6081      	str	r1, [r0, #8]
		}
	}
}
    429c:	bd30      	pop	{r4, r5, pc}
    429e:	46c0      	nop			; (mov r8, r8)
    42a0:	fffbffff 	.word	0xfffbffff

000042a4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    42a4:	b508      	push	{r3, lr}
    42a6:	1c03      	adds	r3, r0, #0
    42a8:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    42aa:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    42ac:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    42ae:	2900      	cmp	r1, #0
    42b0:	d105      	bne.n	42be <system_pinmux_pin_set_config+0x1a>
		return &(ports[port_index]->Group[group_index]);
    42b2:	0958      	lsrs	r0, r3, #5
    42b4:	01c0      	lsls	r0, r0, #7
    42b6:	2182      	movs	r1, #130	; 0x82
    42b8:	05c9      	lsls	r1, r1, #23
    42ba:	468c      	mov	ip, r1
    42bc:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    42be:	211f      	movs	r1, #31
    42c0:	400b      	ands	r3, r1
    42c2:	391e      	subs	r1, #30
    42c4:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    42c6:	4b01      	ldr	r3, [pc, #4]	; (42cc <system_pinmux_pin_set_config+0x28>)
    42c8:	4798      	blx	r3
}
    42ca:	bd08      	pop	{r3, pc}
    42cc:	000041fd 	.word	0x000041fd

000042d0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    42d0:	4770      	bx	lr
    42d2:	46c0      	nop			; (mov r8, r8)

000042d4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    42d4:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    42d6:	4b05      	ldr	r3, [pc, #20]	; (42ec <system_init+0x18>)
    42d8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    42da:	4b05      	ldr	r3, [pc, #20]	; (42f0 <system_init+0x1c>)
    42dc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    42de:	4b05      	ldr	r3, [pc, #20]	; (42f4 <system_init+0x20>)
    42e0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    42e2:	4b05      	ldr	r3, [pc, #20]	; (42f8 <system_init+0x24>)
    42e4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    42e6:	4b05      	ldr	r3, [pc, #20]	; (42fc <system_init+0x28>)
    42e8:	4798      	blx	r3
}
    42ea:	bd08      	pop	{r3, pc}
    42ec:	00003f35 	.word	0x00003f35
    42f0:	00003111 	.word	0x00003111
    42f4:	000042d1 	.word	0x000042d1
    42f8:	000032e9 	.word	0x000032e9
    42fc:	000042d1 	.word	0x000042d1

00004300 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4300:	1c93      	adds	r3, r2, #2
    4302:	009b      	lsls	r3, r3, #2
    4304:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    4306:	2a02      	cmp	r2, #2
    4308:	d104      	bne.n	4314 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    430a:	7e02      	ldrb	r2, [r0, #24]
    430c:	2310      	movs	r3, #16
    430e:	4313      	orrs	r3, r2
    4310:	7603      	strb	r3, [r0, #24]
    4312:	e00c      	b.n	432e <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    4314:	2a03      	cmp	r2, #3
    4316:	d104      	bne.n	4322 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    4318:	7e02      	ldrb	r2, [r0, #24]
    431a:	2320      	movs	r3, #32
    431c:	4313      	orrs	r3, r2
    431e:	7603      	strb	r3, [r0, #24]
    4320:	e005      	b.n	432e <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    4322:	2301      	movs	r3, #1
    4324:	4093      	lsls	r3, r2
    4326:	1c1a      	adds	r2, r3, #0
    4328:	7e03      	ldrb	r3, [r0, #24]
    432a:	431a      	orrs	r2, r3
    432c:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    432e:	2000      	movs	r0, #0
    4330:	4770      	bx	lr
    4332:	46c0      	nop			; (mov r8, r8)

00004334 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    4334:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    4336:	0080      	lsls	r0, r0, #2
    4338:	4b14      	ldr	r3, [pc, #80]	; (438c <_tc_interrupt_handler+0x58>)
    433a:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    433c:	682b      	ldr	r3, [r5, #0]
    433e:	7a9c      	ldrb	r4, [r3, #10]
    4340:	7e2b      	ldrb	r3, [r5, #24]
    4342:	401c      	ands	r4, r3
    4344:	7e6b      	ldrb	r3, [r5, #25]
    4346:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    4348:	07e3      	lsls	r3, r4, #31
    434a:	d505      	bpl.n	4358 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    434c:	1c28      	adds	r0, r5, #0
    434e:	68ab      	ldr	r3, [r5, #8]
    4350:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    4352:	2301      	movs	r3, #1
    4354:	682a      	ldr	r2, [r5, #0]
    4356:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    4358:	07a3      	lsls	r3, r4, #30
    435a:	d505      	bpl.n	4368 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    435c:	1c28      	adds	r0, r5, #0
    435e:	68eb      	ldr	r3, [r5, #12]
    4360:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    4362:	2302      	movs	r3, #2
    4364:	682a      	ldr	r2, [r5, #0]
    4366:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    4368:	06e3      	lsls	r3, r4, #27
    436a:	d505      	bpl.n	4378 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    436c:	1c28      	adds	r0, r5, #0
    436e:	692b      	ldr	r3, [r5, #16]
    4370:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    4372:	2310      	movs	r3, #16
    4374:	682a      	ldr	r2, [r5, #0]
    4376:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    4378:	06a3      	lsls	r3, r4, #26
    437a:	d505      	bpl.n	4388 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    437c:	1c28      	adds	r0, r5, #0
    437e:	696b      	ldr	r3, [r5, #20]
    4380:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    4382:	682b      	ldr	r3, [r5, #0]
    4384:	2220      	movs	r2, #32
    4386:	729a      	strb	r2, [r3, #10]
	}
}
    4388:	bd38      	pop	{r3, r4, r5, pc}
    438a:	46c0      	nop			; (mov r8, r8)
    438c:	20000dfc 	.word	0x20000dfc

00004390 <TC0_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    4390:	b508      	push	{r3, lr}
    4392:	2000      	movs	r0, #0
    4394:	4b01      	ldr	r3, [pc, #4]	; (439c <TC0_Handler+0xc>)
    4396:	4798      	blx	r3
    4398:	bd08      	pop	{r3, pc}
    439a:	46c0      	nop			; (mov r8, r8)
    439c:	00004335 	.word	0x00004335

000043a0 <TC1_Handler>:
    43a0:	b508      	push	{r3, lr}
    43a2:	2001      	movs	r0, #1
    43a4:	4b01      	ldr	r3, [pc, #4]	; (43ac <TC1_Handler+0xc>)
    43a6:	4798      	blx	r3
    43a8:	bd08      	pop	{r3, pc}
    43aa:	46c0      	nop			; (mov r8, r8)
    43ac:	00004335 	.word	0x00004335

000043b0 <TC2_Handler>:
    43b0:	b508      	push	{r3, lr}
    43b2:	2002      	movs	r0, #2
    43b4:	4b01      	ldr	r3, [pc, #4]	; (43bc <TC2_Handler+0xc>)
    43b6:	4798      	blx	r3
    43b8:	bd08      	pop	{r3, pc}
    43ba:	46c0      	nop			; (mov r8, r8)
    43bc:	00004335 	.word	0x00004335

000043c0 <TC3_Handler>:
    43c0:	b508      	push	{r3, lr}
    43c2:	2003      	movs	r0, #3
    43c4:	4b01      	ldr	r3, [pc, #4]	; (43cc <TC3_Handler+0xc>)
    43c6:	4798      	blx	r3
    43c8:	bd08      	pop	{r3, pc}
    43ca:	46c0      	nop			; (mov r8, r8)
    43cc:	00004335 	.word	0x00004335

000043d0 <TC4_Handler>:
    43d0:	b508      	push	{r3, lr}
    43d2:	2004      	movs	r0, #4
    43d4:	4b01      	ldr	r3, [pc, #4]	; (43dc <TC4_Handler+0xc>)
    43d6:	4798      	blx	r3
    43d8:	bd08      	pop	{r3, pc}
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	00004335 	.word	0x00004335

000043e0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    43e0:	b530      	push	{r4, r5, lr}
    43e2:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    43e4:	a901      	add	r1, sp, #4
    43e6:	4b0c      	ldr	r3, [pc, #48]	; (4418 <_tc_get_inst_index+0x38>)
    43e8:	1c0a      	adds	r2, r1, #0
    43ea:	cb32      	ldmia	r3!, {r1, r4, r5}
    43ec:	c232      	stmia	r2!, {r1, r4, r5}
    43ee:	cb12      	ldmia	r3!, {r1, r4}
    43f0:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    43f2:	9b01      	ldr	r3, [sp, #4]
    43f4:	4283      	cmp	r3, r0
    43f6:	d006      	beq.n	4406 <_tc_get_inst_index+0x26>
    43f8:	2301      	movs	r3, #1
    43fa:	009a      	lsls	r2, r3, #2
    43fc:	a901      	add	r1, sp, #4
    43fe:	5852      	ldr	r2, [r2, r1]
    4400:	4282      	cmp	r2, r0
    4402:	d103      	bne.n	440c <_tc_get_inst_index+0x2c>
    4404:	e000      	b.n	4408 <_tc_get_inst_index+0x28>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4406:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    4408:	b2d8      	uxtb	r0, r3
    440a:	e003      	b.n	4414 <_tc_get_inst_index+0x34>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    440c:	3301      	adds	r3, #1
    440e:	2b05      	cmp	r3, #5
    4410:	d1f3      	bne.n	43fa <_tc_get_inst_index+0x1a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4412:	2000      	movs	r0, #0
}
    4414:	b007      	add	sp, #28
    4416:	bd30      	pop	{r4, r5, pc}
    4418:	00005f60 	.word	0x00005f60

0000441c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    441c:	b5f0      	push	{r4, r5, r6, r7, lr}
    441e:	4647      	mov	r7, r8
    4420:	b480      	push	{r7}
    4422:	b08e      	sub	sp, #56	; 0x38
    4424:	1c05      	adds	r5, r0, #0
    4426:	1c0e      	adds	r6, r1, #0
    4428:	1c17      	adds	r7, r2, #0
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    442a:	1c08      	adds	r0, r1, #0
    442c:	4ba1      	ldr	r3, [pc, #644]	; (46b4 <tc_init+0x298>)
    442e:	4798      	blx	r3
    4430:	4680      	mov	r8, r0

#if (SAMC20) || (SAMC21)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    4432:	4ca1      	ldr	r4, [pc, #644]	; (46b8 <tc_init+0x29c>)
    4434:	1c21      	adds	r1, r4, #0
    4436:	3114      	adds	r1, #20
    4438:	a80c      	add	r0, sp, #48	; 0x30
    443a:	2205      	movs	r2, #5
    443c:	4b9f      	ldr	r3, [pc, #636]	; (46bc <tc_init+0x2a0>)
    443e:	4798      	blx	r3
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    4440:	a902      	add	r1, sp, #8
    4442:	1c23      	adds	r3, r4, #0
    4444:	331c      	adds	r3, #28
    4446:	1c0a      	adds	r2, r1, #0
    4448:	cb13      	ldmia	r3!, {r0, r1, r4}
    444a:	c213      	stmia	r2!, {r0, r1, r4}
    444c:	cb13      	ldmia	r3!, {r0, r1, r4}
    444e:	c213      	stmia	r2!, {r0, r1, r4}
    4450:	cb13      	ldmia	r3!, {r0, r1, r4}
    4452:	c213      	stmia	r2!, {r0, r1, r4}
    4454:	681b      	ldr	r3, [r3, #0]
    4456:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    4458:	2300      	movs	r3, #0
    445a:	60ab      	str	r3, [r5, #8]
    445c:	60eb      	str	r3, [r5, #12]
    445e:	612b      	str	r3, [r5, #16]
    4460:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    4462:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    4464:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    4466:	4643      	mov	r3, r8
    4468:	009a      	lsls	r2, r3, #2
    446a:	4b95      	ldr	r3, [pc, #596]	; (46c0 <tc_init+0x2a4>)
    446c:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    446e:	602e      	str	r6, [r5, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    4470:	2334      	movs	r3, #52	; 0x34
    4472:	5cfb      	ldrb	r3, [r7, r3]
    4474:	76ab      	strb	r3, [r5, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    4476:	78fb      	ldrb	r3, [r7, #3]
    4478:	2b08      	cmp	r3, #8
    447a:	d104      	bne.n	4486 <tc_init+0x6a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    447c:	2017      	movs	r0, #23

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    447e:	4642      	mov	r2, r8
    4480:	07d2      	lsls	r2, r2, #31
    4482:	d500      	bpl.n	4486 <tc_init+0x6a>
    4484:	e111      	b.n	46aa <tc_init+0x28e>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    4486:	712b      	strb	r3, [r5, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    4488:	6833      	ldr	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    448a:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    448c:	07db      	lsls	r3, r3, #31
    448e:	d500      	bpl.n	4492 <tc_init+0x76>
    4490:	e10b      	b.n	46aa <tc_init+0x28e>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    4492:	7af3      	ldrb	r3, [r6, #11]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    4494:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    4496:	079b      	lsls	r3, r3, #30
    4498:	d500      	bpl.n	449c <tc_init+0x80>
    449a:	e106      	b.n	46aa <tc_init+0x28e>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    449c:	6833      	ldr	r3, [r6, #0]
    449e:	079b      	lsls	r3, r3, #30
    44a0:	d500      	bpl.n	44a4 <tc_init+0x88>
    44a2:	e102      	b.n	46aa <tc_init+0x28e>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    44a4:	7c3b      	ldrb	r3, [r7, #16]
    44a6:	2b00      	cmp	r3, #0
    44a8:	d00a      	beq.n	44c0 <tc_init+0xa4>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    44aa:	a901      	add	r1, sp, #4
    44ac:	2301      	movs	r3, #1
    44ae:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    44b0:	2200      	movs	r2, #0
    44b2:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    44b4:	7e3a      	ldrb	r2, [r7, #24]
    44b6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    44b8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    44ba:	7d38      	ldrb	r0, [r7, #20]
    44bc:	4b81      	ldr	r3, [pc, #516]	; (46c4 <tc_init+0x2a8>)
    44be:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    44c0:	7f3b      	ldrb	r3, [r7, #28]
    44c2:	2b00      	cmp	r3, #0
    44c4:	d00b      	beq.n	44de <tc_init+0xc2>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    44c6:	a901      	add	r1, sp, #4
    44c8:	2301      	movs	r3, #1
    44ca:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    44cc:	2200      	movs	r2, #0
    44ce:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    44d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    44d2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    44d4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    44d6:	6a3b      	ldr	r3, [r7, #32]
    44d8:	b2d8      	uxtb	r0, r3
    44da:	4b7a      	ldr	r3, [pc, #488]	; (46c4 <tc_init+0x2a8>)
    44dc:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    44de:	4643      	mov	r3, r8
    44e0:	0059      	lsls	r1, r3, #1
    44e2:	aa02      	add	r2, sp, #8
    44e4:	1c4b      	adds	r3, r1, #1
    44e6:	009b      	lsls	r3, r3, #2
    44e8:	5898      	ldr	r0, [r3, r2]
    44ea:	4643      	mov	r3, r8
    44ec:	00db      	lsls	r3, r3, #3
    44ee:	589a      	ldr	r2, [r3, r2]
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    44f0:	b2d3      	uxtb	r3, r2
    44f2:	2b01      	cmp	r3, #1
    44f4:	d009      	beq.n	450a <tc_init+0xee>
    44f6:	2b00      	cmp	r3, #0
    44f8:	d002      	beq.n	4500 <tc_init+0xe4>
    44fa:	2b02      	cmp	r3, #2
    44fc:	d00a      	beq.n	4514 <tc_init+0xf8>
    44fe:	e00d      	b.n	451c <tc_init+0x100>
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    4500:	4a71      	ldr	r2, [pc, #452]	; (46c8 <tc_init+0x2ac>)
    4502:	6953      	ldr	r3, [r2, #20]
    4504:	4318      	orrs	r0, r3
    4506:	6150      	str	r0, [r2, #20]
    4508:	e008      	b.n	451c <tc_init+0x100>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    450a:	4a6f      	ldr	r2, [pc, #444]	; (46c8 <tc_init+0x2ac>)
    450c:	6993      	ldr	r3, [r2, #24]
    450e:	4318      	orrs	r0, r3
    4510:	6190      	str	r0, [r2, #24]
    4512:	e003      	b.n	451c <tc_init+0x100>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4514:	4a6c      	ldr	r2, [pc, #432]	; (46c8 <tc_init+0x2ac>)
    4516:	69d3      	ldr	r3, [r2, #28]
    4518:	4318      	orrs	r0, r3
    451a:	61d0      	str	r0, [r2, #28]
			inst_mclk_apbmask[2*instance+1]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    451c:	78fb      	ldrb	r3, [r7, #3]
    451e:	2b08      	cmp	r3, #8
    4520:	d120      	bne.n	4564 <tc_init+0x148>
    4522:	4643      	mov	r3, r8
    4524:	3301      	adds	r3, #1
    4526:	2b04      	cmp	r3, #4
    4528:	dc1c      	bgt.n	4564 <tc_init+0x148>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    452a:	aa02      	add	r2, sp, #8
    452c:	1ccb      	adds	r3, r1, #3
    452e:	009b      	lsls	r3, r3, #2
    4530:	5898      	ldr	r0, [r3, r2]
    4532:	1c8b      	adds	r3, r1, #2
    4534:	009b      	lsls	r3, r3, #2
    4536:	589b      	ldr	r3, [r3, r2]
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    4538:	b2da      	uxtb	r2, r3
    453a:	2a01      	cmp	r2, #1
    453c:	d009      	beq.n	4552 <tc_init+0x136>
    453e:	2a00      	cmp	r2, #0
    4540:	d002      	beq.n	4548 <tc_init+0x12c>
    4542:	2a02      	cmp	r2, #2
    4544:	d00a      	beq.n	455c <tc_init+0x140>
    4546:	e00d      	b.n	4564 <tc_init+0x148>
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    4548:	4a5f      	ldr	r2, [pc, #380]	; (46c8 <tc_init+0x2ac>)
    454a:	6953      	ldr	r3, [r2, #20]
    454c:	4303      	orrs	r3, r0
    454e:	6153      	str	r3, [r2, #20]
    4550:	e008      	b.n	4564 <tc_init+0x148>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    4552:	4a5d      	ldr	r2, [pc, #372]	; (46c8 <tc_init+0x2ac>)
    4554:	6993      	ldr	r3, [r2, #24]
    4556:	4303      	orrs	r3, r0
    4558:	6193      	str	r3, [r2, #24]
    455a:	e003      	b.n	4564 <tc_init+0x148>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    455c:	4a5a      	ldr	r2, [pc, #360]	; (46c8 <tc_init+0x2ac>)
    455e:	69d3      	ldr	r3, [r2, #28]
    4560:	4303      	orrs	r3, r0
    4562:	61d3      	str	r3, [r2, #28]
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    4564:	783b      	ldrb	r3, [r7, #0]
    4566:	466a      	mov	r2, sp
    4568:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    456a:	ab0c      	add	r3, sp, #48	; 0x30
    456c:	4642      	mov	r2, r8
    456e:	5c9c      	ldrb	r4, [r3, r2]
    4570:	1c20      	adds	r0, r4, #0
    4572:	4669      	mov	r1, sp
    4574:	4b55      	ldr	r3, [pc, #340]	; (46cc <tc_init+0x2b0>)
    4576:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    4578:	1c20      	adds	r0, r4, #0
    457a:	4b55      	ldr	r3, [pc, #340]	; (46d0 <tc_init+0x2b4>)
    457c:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    457e:	79fa      	ldrb	r2, [r7, #7]
    4580:	78fb      	ldrb	r3, [r7, #3]
    4582:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    4584:	88ba      	ldrh	r2, [r7, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    4586:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    4588:	7a7a      	ldrb	r2, [r7, #9]
    458a:	2a00      	cmp	r2, #0
    458c:	d002      	beq.n	4594 <tc_init+0x178>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    458e:	2280      	movs	r2, #128	; 0x80
    4590:	0252      	lsls	r2, r2, #9
    4592:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    4594:	7aba      	ldrb	r2, [r7, #10]
    4596:	2a00      	cmp	r2, #0
    4598:	d002      	beq.n	45a0 <tc_init+0x184>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    459a:	2280      	movs	r2, #128	; 0x80
    459c:	0292      	lsls	r2, r2, #10
    459e:	4313      	orrs	r3, r2
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    45a0:	7afa      	ldrb	r2, [r7, #11]
    45a2:	2a00      	cmp	r2, #0
    45a4:	d002      	beq.n	45ac <tc_init+0x190>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    45a6:	2280      	movs	r2, #128	; 0x80
    45a8:	0352      	lsls	r2, r2, #13
    45aa:	4313      	orrs	r3, r2
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    45ac:	7b3a      	ldrb	r2, [r7, #12]
    45ae:	2a00      	cmp	r2, #0
    45b0:	d002      	beq.n	45b8 <tc_init+0x19c>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    45b2:	2280      	movs	r2, #128	; 0x80
    45b4:	0392      	lsls	r2, r2, #14
    45b6:	4313      	orrs	r3, r2
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    45b8:	78b9      	ldrb	r1, [r7, #2]
    45ba:	01c9      	lsls	r1, r1, #7
		if (config->enable_capture_on_IO[i] == true) {
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    45bc:	787a      	ldrb	r2, [r7, #1]
    45be:	0192      	lsls	r2, r2, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    45c0:	4311      	orrs	r1, r2
		if (config->enable_capture_on_IO[i] == true) {
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    45c2:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    45c4:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    45c6:	6913      	ldr	r3, [r2, #16]
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    45c8:	2b00      	cmp	r3, #0
    45ca:	d1fc      	bne.n	45c6 <tc_init+0x1aa>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    45cc:	6031      	str	r1, [r6, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    45ce:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    45d0:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    45d2:	2b00      	cmp	r3, #0
    45d4:	d1fc      	bne.n	45d0 <tc_init+0x1b4>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
    45d6:	79bb      	ldrb	r3, [r7, #6]
    45d8:	7333      	strb	r3, [r6, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
    45da:	7b79      	ldrb	r1, [r7, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    45dc:	1e4b      	subs	r3, r1, #1
    45de:	4199      	sbcs	r1, r3
    45e0:	0089      	lsls	r1, r1, #2
	}

	if (config->count_direction) {
    45e2:	7bbb      	ldrb	r3, [r7, #14]
    45e4:	2b00      	cmp	r3, #0
    45e6:	d001      	beq.n	45ec <tc_init+0x1d0>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    45e8:	2301      	movs	r3, #1
    45ea:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    45ec:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    45ee:	6913      	ldr	r3, [r2, #16]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    45f0:	2b00      	cmp	r3, #0
    45f2:	d1fc      	bne.n	45ee <tc_init+0x1d2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    45f4:	33ff      	adds	r3, #255	; 0xff
    45f6:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    45f8:	2900      	cmp	r1, #0
    45fa:	d004      	beq.n	4606 <tc_init+0x1ea>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    45fc:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    45fe:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    4600:	2b00      	cmp	r3, #0
    4602:	d1fc      	bne.n	45fe <tc_init+0x1e2>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    4604:	7171      	strb	r1, [r6, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    4606:	7a3b      	ldrb	r3, [r7, #8]
    4608:	7373      	strb	r3, [r6, #13]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    460a:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    460c:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    460e:	2b00      	cmp	r3, #0
    4610:	d1fc      	bne.n	460c <tc_init+0x1f0>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    4612:	792b      	ldrb	r3, [r5, #4]
    4614:	2b04      	cmp	r3, #4
    4616:	d005      	beq.n	4624 <tc_init+0x208>
    4618:	2b08      	cmp	r3, #8
    461a:	d033      	beq.n	4684 <tc_init+0x268>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    461c:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    461e:	2b00      	cmp	r3, #0
    4620:	d143      	bne.n	46aa <tc_init+0x28e>
    4622:	e01c      	b.n	465e <tc_init+0x242>
    4624:	6913      	ldr	r3, [r2, #16]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    4626:	2b00      	cmp	r3, #0
    4628:	d1fc      	bne.n	4624 <tc_init+0x208>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    462a:	3328      	adds	r3, #40	; 0x28
    462c:	5cfb      	ldrb	r3, [r7, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    462e:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4630:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    4632:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    4634:	2b00      	cmp	r3, #0
    4636:	d1fc      	bne.n	4632 <tc_init+0x216>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    4638:	3329      	adds	r3, #41	; 0x29
    463a:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    463c:	76f3      	strb	r3, [r6, #27]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    463e:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    4640:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    4642:	2b00      	cmp	r3, #0
    4644:	d1fc      	bne.n	4640 <tc_init+0x224>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    4646:	332a      	adds	r3, #42	; 0x2a
    4648:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    464a:	7733      	strb	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    464c:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    464e:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    4650:	2b00      	cmp	r3, #0
    4652:	d1fc      	bne.n	464e <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    4654:	332b      	adds	r3, #43	; 0x2b
    4656:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    4658:	7773      	strb	r3, [r6, #29]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    465a:	2000      	movs	r0, #0
    465c:	e025      	b.n	46aa <tc_init+0x28e>
    465e:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    4660:	2b00      	cmp	r3, #0
    4662:	d1fc      	bne.n	465e <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    4664:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    4666:	82b3      	strh	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4668:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    466a:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    466c:	2b00      	cmp	r3, #0
    466e:	d1fc      	bne.n	466a <tc_init+0x24e>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    4670:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    4672:	83b3      	strh	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4674:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    4676:	6913      	ldr	r3, [r2, #16]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    4678:	2b00      	cmp	r3, #0
    467a:	d1fc      	bne.n	4676 <tc_init+0x25a>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    467c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    467e:	83f3      	strh	r3, [r6, #30]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    4680:	2000      	movs	r0, #0
    4682:	e012      	b.n	46aa <tc_init+0x28e>
    4684:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    4686:	2b00      	cmp	r3, #0
    4688:	d1fc      	bne.n	4684 <tc_init+0x268>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    468c:	6173      	str	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    468e:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    4690:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    4692:	2b00      	cmp	r3, #0
    4694:	d1fc      	bne.n	4690 <tc_init+0x274>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    4696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4698:	61f3      	str	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    469a:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    469c:	6913      	ldr	r3, [r2, #16]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    469e:	2b00      	cmp	r3, #0
    46a0:	d1fc      	bne.n	469c <tc_init+0x280>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    46a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    46a4:	6233      	str	r3, [r6, #32]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    46a6:	2000      	movs	r0, #0
    46a8:	e7ff      	b.n	46aa <tc_init+0x28e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    46aa:	b00e      	add	sp, #56	; 0x38
    46ac:	bc04      	pop	{r2}
    46ae:	4690      	mov	r8, r2
    46b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46b2:	46c0      	nop			; (mov r8, r8)
    46b4:	000043e1 	.word	0x000043e1
    46b8:	00005f60 	.word	0x00005f60
    46bc:	00004c85 	.word	0x00004c85
    46c0:	20000dfc 	.word	0x20000dfc
    46c4:	000042a5 	.word	0x000042a5
    46c8:	40000800 	.word	0x40000800
    46cc:	000041a9 	.word	0x000041a9
    46d0:	00004141 	.word	0x00004141

000046d4 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    46d4:	6802      	ldr	r2, [r0, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    46d6:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    46d8:	2b00      	cmp	r3, #0
    46da:	d1fc      	bne.n	46d6 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    46dc:	7113      	strb	r3, [r2, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    46de:	6801      	ldr	r1, [r0, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    46e0:	690b      	ldr	r3, [r1, #16]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
    46e2:	2b00      	cmp	r3, #0
    46e4:	d1fc      	bne.n	46e0 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    46e6:	3380      	adds	r3, #128	; 0x80
    46e8:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    46ea:	6802      	ldr	r2, [r0, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    46ec:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    46ee:	2b00      	cmp	r3, #0
    46f0:	d1fc      	bne.n	46ec <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    46f2:	7901      	ldrb	r1, [r0, #4]
    46f4:	2904      	cmp	r1, #4
    46f6:	d004      	beq.n	4702 <tc_get_count_value+0x2e>
    46f8:	2908      	cmp	r1, #8
    46fa:	d008      	beq.n	470e <tc_get_count_value+0x3a>
    46fc:	2900      	cmp	r1, #0
    46fe:	d107      	bne.n	4710 <tc_get_count_value+0x3c>
    4700:	e002      	b.n	4708 <tc_get_count_value+0x34>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    4702:	7d13      	ldrb	r3, [r2, #20]
    4704:	b2db      	uxtb	r3, r3
    4706:	e003      	b.n	4710 <tc_get_count_value+0x3c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    4708:	8a93      	ldrh	r3, [r2, #20]
    470a:	b29b      	uxth	r3, r3
    470c:	e000      	b.n	4710 <tc_get_count_value+0x3c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    470e:	6953      	ldr	r3, [r2, #20]
	}

	Assert(false);
	return 0;
}
    4710:	1c18      	adds	r0, r3, #0
    4712:	4770      	bx	lr

00004714 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    4714:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    4716:	6804      	ldr	r4, [r0, #0]
    4718:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    471a:	2b00      	cmp	r3, #0
    471c:	d1fc      	bne.n	4718 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    471e:	7903      	ldrb	r3, [r0, #4]
    4720:	2b04      	cmp	r3, #4
    4722:	d004      	beq.n	472e <tc_set_compare_value+0x1a>
    4724:	2b08      	cmp	r3, #8
    4726:	d026      	beq.n	4776 <tc_set_compare_value+0x62>
    4728:	2b00      	cmp	r3, #0
    472a:	d135      	bne.n	4798 <tc_set_compare_value+0x84>
    472c:	e010      	b.n	4750 <tc_set_compare_value+0x3c>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    472e:	2317      	movs	r3, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    4730:	2901      	cmp	r1, #1
    4732:	d832      	bhi.n	479a <tc_set_compare_value+0x86>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    4734:	7e83      	ldrb	r3, [r0, #26]
    4736:	2b00      	cmp	r3, #0
    4738:	d005      	beq.n	4746 <tc_set_compare_value+0x32>
					tc_module->COUNT8.CCBUF[channel_index].reg =
							(uint8_t)compare;
    473a:	b2d2      	uxtb	r2, r2
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT8.CCBUF[channel_index].reg =
    473c:	1861      	adds	r1, r4, r1
    473e:	3130      	adds	r1, #48	; 0x30
    4740:	700a      	strb	r2, [r1, #0]
							(uint8_t)compare;
				} else {
					tc_module->COUNT8.CC[channel_index].reg  =
							(uint8_t)compare;
				}
				return STATUS_OK;
    4742:	2300      	movs	r3, #0
    4744:	e029      	b.n	479a <tc_set_compare_value+0x86>
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT8.CCBUF[channel_index].reg =
							(uint8_t)compare;
				} else {
					tc_module->COUNT8.CC[channel_index].reg  =
							(uint8_t)compare;
    4746:	b2d2      	uxtb	r2, r2
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT8.CCBUF[channel_index].reg =
							(uint8_t)compare;
				} else {
					tc_module->COUNT8.CC[channel_index].reg  =
    4748:	1864      	adds	r4, r4, r1
    474a:	7722      	strb	r2, [r4, #28]
							(uint8_t)compare;
				}
				return STATUS_OK;
    474c:	2300      	movs	r3, #0
    474e:	e024      	b.n	479a <tc_set_compare_value+0x86>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    4750:	2317      	movs	r3, #23
							(uint8_t)compare;
				}
				return STATUS_OK;
			}
		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    4752:	2901      	cmp	r1, #1
    4754:	d821      	bhi.n	479a <tc_set_compare_value+0x86>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    4756:	7e83      	ldrb	r3, [r0, #26]
    4758:	2b00      	cmp	r3, #0
    475a:	d005      	beq.n	4768 <tc_set_compare_value+0x54>
					tc_module->COUNT16.CCBUF[channel_index].reg =
							(uint16_t)compare;
    475c:	b292      	uxth	r2, r2
			}
		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT16.CCBUF[channel_index].reg =
    475e:	3118      	adds	r1, #24
    4760:	0049      	lsls	r1, r1, #1
    4762:	530a      	strh	r2, [r1, r4]
							(uint16_t)compare;
				} else {
					tc_module->COUNT16.CC[channel_index].reg =
							(uint16_t)compare;
				}
				return STATUS_OK;
    4764:	2300      	movs	r3, #0
    4766:	e018      	b.n	479a <tc_set_compare_value+0x86>
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT16.CCBUF[channel_index].reg =
							(uint16_t)compare;
				} else {
					tc_module->COUNT16.CC[channel_index].reg =
							(uint16_t)compare;
    4768:	b292      	uxth	r2, r2
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT16.CCBUF[channel_index].reg =
							(uint16_t)compare;
				} else {
					tc_module->COUNT16.CC[channel_index].reg =
    476a:	310c      	adds	r1, #12
    476c:	0049      	lsls	r1, r1, #1
    476e:	1864      	adds	r4, r4, r1
    4770:	80a2      	strh	r2, [r4, #4]
							(uint16_t)compare;
				}
				return STATUS_OK;
    4772:	2300      	movs	r3, #0
    4774:	e011      	b.n	479a <tc_set_compare_value+0x86>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    4776:	2317      	movs	r3, #23
				}
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    4778:	2901      	cmp	r1, #1
    477a:	d80e      	bhi.n	479a <tc_set_compare_value+0x86>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    477c:	7e83      	ldrb	r3, [r0, #26]
    477e:	2b00      	cmp	r3, #0
    4780:	d004      	beq.n	478c <tc_set_compare_value+0x78>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    4782:	310c      	adds	r1, #12
    4784:	0089      	lsls	r1, r1, #2
    4786:	510a      	str	r2, [r1, r4]
							(uint32_t)compare;
				} else {
					tc_module->COUNT32.CC[channel_index].reg =
						(uint32_t)compare;
				}
				return STATUS_OK;
    4788:	2300      	movs	r3, #0
    478a:	e006      	b.n	479a <tc_set_compare_value+0x86>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT32.CCBUF[channel_index].reg =
							(uint32_t)compare;
				} else {
					tc_module->COUNT32.CC[channel_index].reg =
    478c:	3106      	adds	r1, #6
    478e:	0089      	lsls	r1, r1, #2
    4790:	1864      	adds	r4, r4, r1
    4792:	6062      	str	r2, [r4, #4]
						(uint32_t)compare;
				}
				return STATUS_OK;
    4794:	2300      	movs	r3, #0
    4796:	e000      	b.n	479a <tc_set_compare_value+0x86>
			}
	}

	return STATUS_ERR_INVALID_ARG;
    4798:	2317      	movs	r3, #23
}
    479a:	1c18      	adds	r0, r3, #0
    479c:	bd10      	pop	{r4, pc}
    479e:	46c0      	nop			; (mov r8, r8)

000047a0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    47a0:	e7fe      	b.n	47a0 <Dummy_Handler>
    47a2:	46c0      	nop			; (mov r8, r8)

000047a4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    47a4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    47a6:	4b1b      	ldr	r3, [pc, #108]	; (4814 <Reset_Handler+0x70>)
    47a8:	4a1b      	ldr	r2, [pc, #108]	; (4818 <Reset_Handler+0x74>)
    47aa:	429a      	cmp	r2, r3
    47ac:	d003      	beq.n	47b6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    47ae:	4b1b      	ldr	r3, [pc, #108]	; (481c <Reset_Handler+0x78>)
    47b0:	4a18      	ldr	r2, [pc, #96]	; (4814 <Reset_Handler+0x70>)
    47b2:	429a      	cmp	r2, r3
    47b4:	d304      	bcc.n	47c0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    47b6:	4b1a      	ldr	r3, [pc, #104]	; (4820 <Reset_Handler+0x7c>)
    47b8:	4a1a      	ldr	r2, [pc, #104]	; (4824 <Reset_Handler+0x80>)
    47ba:	429a      	cmp	r2, r3
    47bc:	d310      	bcc.n	47e0 <Reset_Handler+0x3c>
    47be:	e01e      	b.n	47fe <Reset_Handler+0x5a>
    47c0:	4a19      	ldr	r2, [pc, #100]	; (4828 <Reset_Handler+0x84>)
    47c2:	4b16      	ldr	r3, [pc, #88]	; (481c <Reset_Handler+0x78>)
    47c4:	3303      	adds	r3, #3
    47c6:	1a9b      	subs	r3, r3, r2
    47c8:	089b      	lsrs	r3, r3, #2
    47ca:	3301      	adds	r3, #1
    47cc:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    47ce:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    47d0:	4810      	ldr	r0, [pc, #64]	; (4814 <Reset_Handler+0x70>)
    47d2:	4911      	ldr	r1, [pc, #68]	; (4818 <Reset_Handler+0x74>)
    47d4:	588c      	ldr	r4, [r1, r2]
    47d6:	5084      	str	r4, [r0, r2]
    47d8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    47da:	429a      	cmp	r2, r3
    47dc:	d1fa      	bne.n	47d4 <Reset_Handler+0x30>
    47de:	e7ea      	b.n	47b6 <Reset_Handler+0x12>
    47e0:	4a12      	ldr	r2, [pc, #72]	; (482c <Reset_Handler+0x88>)
    47e2:	4b0f      	ldr	r3, [pc, #60]	; (4820 <Reset_Handler+0x7c>)
    47e4:	3303      	adds	r3, #3
    47e6:	1a9b      	subs	r3, r3, r2
    47e8:	089b      	lsrs	r3, r3, #2
    47ea:	3301      	adds	r3, #1
    47ec:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    47ee:	2200      	movs	r2, #0
                *pDest++ = 0;
    47f0:	480c      	ldr	r0, [pc, #48]	; (4824 <Reset_Handler+0x80>)
    47f2:	2100      	movs	r1, #0
    47f4:	1814      	adds	r4, r2, r0
    47f6:	6021      	str	r1, [r4, #0]
    47f8:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    47fa:	429a      	cmp	r2, r3
    47fc:	d1fa      	bne.n	47f4 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    47fe:	4a0c      	ldr	r2, [pc, #48]	; (4830 <Reset_Handler+0x8c>)
    4800:	21ff      	movs	r1, #255	; 0xff
    4802:	4b0c      	ldr	r3, [pc, #48]	; (4834 <Reset_Handler+0x90>)
    4804:	438b      	bics	r3, r1
    4806:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    4808:	4b0b      	ldr	r3, [pc, #44]	; (4838 <Reset_Handler+0x94>)
    480a:	4798      	blx	r3

        /* Branch to main function */
        main();
    480c:	4b0b      	ldr	r3, [pc, #44]	; (483c <Reset_Handler+0x98>)
    480e:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    4810:	e7fe      	b.n	4810 <Reset_Handler+0x6c>
    4812:	46c0      	nop			; (mov r8, r8)
    4814:	20000000 	.word	0x20000000
    4818:	0000609c 	.word	0x0000609c
    481c:	20000070 	.word	0x20000070
    4820:	20000e24 	.word	0x20000e24
    4824:	20000070 	.word	0x20000070
    4828:	20000004 	.word	0x20000004
    482c:	20000074 	.word	0x20000074
    4830:	e000ed00 	.word	0xe000ed00
    4834:	00000000 	.word	0x00000000
    4838:	00004c39 	.word	0x00004c39
    483c:	00004915 	.word	0x00004915

00004840 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    4840:	b5f0      	push	{r4, r5, r6, r7, lr}
    4842:	4647      	mov	r7, r8
    4844:	b480      	push	{r7}
    4846:	1c0c      	adds	r4, r1, #0
    4848:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    484a:	2800      	cmp	r0, #0
    484c:	d110      	bne.n	4870 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
    484e:	2a00      	cmp	r2, #0
    4850:	dd0a      	ble.n	4868 <_read+0x28>
    4852:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    4854:	4e09      	ldr	r6, [pc, #36]	; (487c <_read+0x3c>)
    4856:	4d0a      	ldr	r5, [pc, #40]	; (4880 <_read+0x40>)
    4858:	6830      	ldr	r0, [r6, #0]
    485a:	1c21      	adds	r1, r4, #0
    485c:	682b      	ldr	r3, [r5, #0]
    485e:	4798      	blx	r3
		ptr++;
    4860:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    4862:	42bc      	cmp	r4, r7
    4864:	d1f8      	bne.n	4858 <_read+0x18>
    4866:	e001      	b.n	486c <_read+0x2c>
    4868:	2300      	movs	r3, #0
    486a:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    486c:	4640      	mov	r0, r8
    486e:	e001      	b.n	4874 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    4870:	2001      	movs	r0, #1
    4872:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    4874:	bc04      	pop	{r2}
    4876:	4690      	mov	r8, r2
    4878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    487a:	46c0      	nop			; (mov r8, r8)
    487c:	20000e18 	.word	0x20000e18
    4880:	20000e10 	.word	0x20000e10

00004884 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    4884:	b5f0      	push	{r4, r5, r6, r7, lr}
    4886:	4647      	mov	r7, r8
    4888:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    488a:	3801      	subs	r0, #1
    488c:	2802      	cmp	r0, #2
    488e:	d815      	bhi.n	48bc <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
    4890:	2a00      	cmp	r2, #0
    4892:	d010      	beq.n	48b6 <_write+0x32>
    4894:	1c15      	adds	r5, r2, #0
    4896:	1c0e      	adds	r6, r1, #0
    4898:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    489a:	4b0c      	ldr	r3, [pc, #48]	; (48cc <_write+0x48>)
    489c:	4698      	mov	r8, r3
    489e:	4f0c      	ldr	r7, [pc, #48]	; (48d0 <_write+0x4c>)
    48a0:	4643      	mov	r3, r8
    48a2:	6818      	ldr	r0, [r3, #0]
    48a4:	5d31      	ldrb	r1, [r6, r4]
    48a6:	683b      	ldr	r3, [r7, #0]
    48a8:	4798      	blx	r3
    48aa:	2800      	cmp	r0, #0
    48ac:	db09      	blt.n	48c2 <_write+0x3e>
			return -1;
		}
		++nChars;
    48ae:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    48b0:	42a5      	cmp	r5, r4
    48b2:	d1f5      	bne.n	48a0 <_write+0x1c>
    48b4:	e000      	b.n	48b8 <_write+0x34>
    48b6:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    48b8:	1c20      	adds	r0, r4, #0
    48ba:	e004      	b.n	48c6 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    48bc:	2001      	movs	r0, #1
    48be:	4240      	negs	r0, r0
    48c0:	e001      	b.n	48c6 <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    48c2:	2001      	movs	r0, #1
    48c4:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    48c6:	bc04      	pop	{r2}
    48c8:	4690      	mov	r8, r2
    48ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48cc:	20000e18 	.word	0x20000e18
    48d0:	20000e14 	.word	0x20000e14

000048d4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    48d4:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    48d6:	4a06      	ldr	r2, [pc, #24]	; (48f0 <_sbrk+0x1c>)
    48d8:	6812      	ldr	r2, [r2, #0]
    48da:	2a00      	cmp	r2, #0
    48dc:	d102      	bne.n	48e4 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    48de:	4905      	ldr	r1, [pc, #20]	; (48f4 <_sbrk+0x20>)
    48e0:	4a03      	ldr	r2, [pc, #12]	; (48f0 <_sbrk+0x1c>)
    48e2:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    48e4:	4a02      	ldr	r2, [pc, #8]	; (48f0 <_sbrk+0x1c>)
    48e6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    48e8:	18c3      	adds	r3, r0, r3
    48ea:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    48ec:	4770      	bx	lr
    48ee:	46c0      	nop			; (mov r8, r8)
    48f0:	20000c14 	.word	0x20000c14
    48f4:	20002e28 	.word	0x20002e28

000048f8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    48f8:	2001      	movs	r0, #1
    48fa:	4240      	negs	r0, r0
    48fc:	4770      	bx	lr
    48fe:	46c0      	nop			; (mov r8, r8)

00004900 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4900:	2380      	movs	r3, #128	; 0x80
    4902:	019b      	lsls	r3, r3, #6
    4904:	604b      	str	r3, [r1, #4]

	return 0;
}
    4906:	2000      	movs	r0, #0
    4908:	4770      	bx	lr
    490a:	46c0      	nop			; (mov r8, r8)

0000490c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    490c:	2001      	movs	r0, #1
    490e:	4770      	bx	lr

00004910 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    4910:	2000      	movs	r0, #0
    4912:	4770      	bx	lr

00004914 <main>:
#include "remoteControl.h"

#define STRING_HEADER "C21 212B RC Car\r\n"

int main (void)
{
    4914:	b5f0      	push	{r4, r5, r6, r7, lr}
    4916:	b083      	sub	sp, #12
	system_init();
    4918:	4b1b      	ldr	r3, [pc, #108]	; (4988 <main+0x74>)
    491a:	4798      	blx	r3
	configure_pins();
    491c:	4b1b      	ldr	r3, [pc, #108]	; (498c <main+0x78>)
    491e:	4798      	blx	r3
	
	configure_console();
    4920:	4b1b      	ldr	r3, [pc, #108]	; (4990 <main+0x7c>)
    4922:	4798      	blx	r3
	puts(STRING_HEADER);
    4924:	481b      	ldr	r0, [pc, #108]	; (4994 <main+0x80>)
    4926:	4b1c      	ldr	r3, [pc, #112]	; (4998 <main+0x84>)
    4928:	4798      	blx	r3
	printf("Address = %u\n\n\r", APP_ADDR);
    492a:	481c      	ldr	r0, [pc, #112]	; (499c <main+0x88>)
    492c:	2101      	movs	r1, #1
    492e:	4b1c      	ldr	r3, [pc, #112]	; (49a0 <main+0x8c>)
    4930:	4798      	blx	r3
	
	remoteControl_init();
    4932:	4b1c      	ldr	r3, [pc, #112]	; (49a4 <main+0x90>)
    4934:	4798      	blx	r3
	JoystickPtr LeftJoystick = createJoystick(ADC_POSITIVE_INPUT_PIN10);
    4936:	200a      	movs	r0, #10
    4938:	4b1b      	ldr	r3, [pc, #108]	; (49a8 <main+0x94>)
    493a:	4798      	blx	r3
    493c:	9001      	str	r0, [sp, #4]
	uint8_t val = 0;
	bool dir = 0;
	
	while(1)
	{
		SYS_TaskHandler();
    493e:	4d1b      	ldr	r5, [pc, #108]	; (49ac <main+0x98>)
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
			/* Yes, so turn LED on. */
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);

			//read joystick
			joystick_read(LeftJoystick);
    4940:	4f1b      	ldr	r7, [pc, #108]	; (49b0 <main+0x9c>)
			val = getJoystickFilteredVal(LeftJoystick);
    4942:	4e1c      	ldr	r6, [pc, #112]	; (49b4 <main+0xa0>)
	uint8_t val = 0;
	bool dir = 0;
	
	while(1)
	{
		SYS_TaskHandler();
    4944:	47a8      	blx	r5
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    4946:	2382      	movs	r3, #130	; 0x82
    4948:	05db      	lsls	r3, r3, #23
    494a:	6a1b      	ldr	r3, [r3, #32]
		//remoteControl_TaskHandler();
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    494c:	00db      	lsls	r3, r3, #3
    494e:	d415      	bmi.n	497c <main+0x68>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4950:	2280      	movs	r2, #128	; 0x80
    4952:	0212      	lsls	r2, r2, #8
    4954:	2382      	movs	r3, #130	; 0x82
    4956:	05db      	lsls	r3, r3, #23
    4958:	615a      	str	r2, [r3, #20]
			/* Yes, so turn LED on. */
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);

			//read joystick
			joystick_read(LeftJoystick);
    495a:	9c01      	ldr	r4, [sp, #4]
    495c:	1c20      	adds	r0, r4, #0
    495e:	47b8      	blx	r7
			val = getJoystickFilteredVal(LeftJoystick);
    4960:	9401      	str	r4, [sp, #4]
    4962:	1c20      	adds	r0, r4, #0
    4964:	47b0      	blx	r6
    4966:	1c01      	adds	r1, r0, #0
			printf("val = %u\n\r", val);
    4968:	4813      	ldr	r0, [pc, #76]	; (49b8 <main+0xa4>)
    496a:	4c0d      	ldr	r4, [pc, #52]	; (49a0 <main+0x8c>)
    496c:	47a0      	blx	r4
			dir = getJoystickDirection(LeftJoystick);
    496e:	9801      	ldr	r0, [sp, #4]
    4970:	4b12      	ldr	r3, [pc, #72]	; (49bc <main+0xa8>)
    4972:	4798      	blx	r3
    4974:	1c01      	adds	r1, r0, #0
			printf("dir = %d\n\r", dir);
    4976:	4812      	ldr	r0, [pc, #72]	; (49c0 <main+0xac>)
    4978:	47a0      	blx	r4
    497a:	e7e3      	b.n	4944 <main+0x30>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    497c:	2280      	movs	r2, #128	; 0x80
    497e:	0212      	lsls	r2, r2, #8
    4980:	2382      	movs	r3, #130	; 0x82
    4982:	05db      	lsls	r3, r3, #23
    4984:	619a      	str	r2, [r3, #24]
    4986:	e7dd      	b.n	4944 <main+0x30>
    4988:	000042d5 	.word	0x000042d5
    498c:	000030dd 	.word	0x000030dd
    4990:	00002d55 	.word	0x00002d55
    4994:	00005fa4 	.word	0x00005fa4
    4998:	00004da1 	.word	0x00004da1
    499c:	00005fb8 	.word	0x00005fb8
    49a0:	00004ca9 	.word	0x00004ca9
    49a4:	00002fc9 	.word	0x00002fc9
    49a8:	00002e55 	.word	0x00002e55
    49ac:	00001d55 	.word	0x00001d55
    49b0:	00002f39 	.word	0x00002f39
    49b4:	00002e89 	.word	0x00002e89
    49b8:	00005fc8 	.word	0x00005fc8
    49bc:	00002e8d 	.word	0x00002e8d
    49c0:	00005fd4 	.word	0x00005fd4

000049c4 <common_tc_delay>:
    49c4:	b510      	push	{r4, lr}
    49c6:	1c04      	adds	r4, r0, #0
    49c8:	4b13      	ldr	r3, [pc, #76]	; (4a18 <common_tc_delay+0x54>)
    49ca:	4798      	blx	r3
    49cc:	4b13      	ldr	r3, [pc, #76]	; (4a1c <common_tc_delay+0x58>)
    49ce:	781a      	ldrb	r2, [r3, #0]
    49d0:	4362      	muls	r2, r4
    49d2:	1881      	adds	r1, r0, r2
    49d4:	4b12      	ldr	r3, [pc, #72]	; (4a20 <common_tc_delay+0x5c>)
    49d6:	6059      	str	r1, [r3, #4]
    49d8:	6859      	ldr	r1, [r3, #4]
    49da:	0c09      	lsrs	r1, r1, #16
    49dc:	6059      	str	r1, [r3, #4]
    49de:	685b      	ldr	r3, [r3, #4]
    49e0:	2b00      	cmp	r3, #0
    49e2:	d007      	beq.n	49f4 <common_tc_delay+0x30>
    49e4:	4b0e      	ldr	r3, [pc, #56]	; (4a20 <common_tc_delay+0x5c>)
    49e6:	6859      	ldr	r1, [r3, #4]
    49e8:	3201      	adds	r2, #1
    49ea:	1880      	adds	r0, r0, r2
    49ec:	8118      	strh	r0, [r3, #8]
    49ee:	4b0d      	ldr	r3, [pc, #52]	; (4a24 <common_tc_delay+0x60>)
    49f0:	4798      	blx	r3
    49f2:	e004      	b.n	49fe <common_tc_delay+0x3a>
    49f4:	1882      	adds	r2, r0, r2
    49f6:	4b0a      	ldr	r3, [pc, #40]	; (4a20 <common_tc_delay+0x5c>)
    49f8:	811a      	strh	r2, [r3, #8]
    49fa:	4b0b      	ldr	r3, [pc, #44]	; (4a28 <common_tc_delay+0x64>)
    49fc:	4798      	blx	r3
    49fe:	4b08      	ldr	r3, [pc, #32]	; (4a20 <common_tc_delay+0x5c>)
    4a00:	891b      	ldrh	r3, [r3, #8]
    4a02:	2b63      	cmp	r3, #99	; 0x63
    4a04:	d802      	bhi.n	4a0c <common_tc_delay+0x48>
    4a06:	3364      	adds	r3, #100	; 0x64
    4a08:	4a05      	ldr	r2, [pc, #20]	; (4a20 <common_tc_delay+0x5c>)
    4a0a:	8113      	strh	r3, [r2, #8]
    4a0c:	4b04      	ldr	r3, [pc, #16]	; (4a20 <common_tc_delay+0x5c>)
    4a0e:	8918      	ldrh	r0, [r3, #8]
    4a10:	4b06      	ldr	r3, [pc, #24]	; (4a2c <common_tc_delay+0x68>)
    4a12:	4798      	blx	r3
    4a14:	bd10      	pop	{r4, pc}
    4a16:	46c0      	nop			; (mov r8, r8)
    4a18:	00001f05 	.word	0x00001f05
    4a1c:	20000e1c 	.word	0x20000e1c
    4a20:	20000c18 	.word	0x20000c18
    4a24:	00001f19 	.word	0x00001f19
    4a28:	00001f2d 	.word	0x00001f2d
    4a2c:	00001f69 	.word	0x00001f69

00004a30 <common_tc_init>:
    4a30:	b508      	push	{r3, lr}
    4a32:	2200      	movs	r2, #0
    4a34:	4b03      	ldr	r3, [pc, #12]	; (4a44 <common_tc_init+0x14>)
    4a36:	701a      	strb	r2, [r3, #0]
    4a38:	4b03      	ldr	r3, [pc, #12]	; (4a48 <common_tc_init+0x18>)
    4a3a:	4798      	blx	r3
    4a3c:	4b03      	ldr	r3, [pc, #12]	; (4a4c <common_tc_init+0x1c>)
    4a3e:	7018      	strb	r0, [r3, #0]
    4a40:	bd08      	pop	{r3, pc}
    4a42:	46c0      	nop			; (mov r8, r8)
    4a44:	20000c18 	.word	0x20000c18
    4a48:	00001f81 	.word	0x00001f81
    4a4c:	20000e1c 	.word	0x20000e1c

00004a50 <tmr_ovf_callback>:
    4a50:	b508      	push	{r3, lr}
    4a52:	4b0e      	ldr	r3, [pc, #56]	; (4a8c <tmr_ovf_callback+0x3c>)
    4a54:	685b      	ldr	r3, [r3, #4]
    4a56:	2b00      	cmp	r3, #0
    4a58:	d007      	beq.n	4a6a <tmr_ovf_callback+0x1a>
    4a5a:	4a0c      	ldr	r2, [pc, #48]	; (4a8c <tmr_ovf_callback+0x3c>)
    4a5c:	6853      	ldr	r3, [r2, #4]
    4a5e:	3b01      	subs	r3, #1
    4a60:	6053      	str	r3, [r2, #4]
    4a62:	2b00      	cmp	r3, #0
    4a64:	d101      	bne.n	4a6a <tmr_ovf_callback+0x1a>
    4a66:	4b0a      	ldr	r3, [pc, #40]	; (4a90 <tmr_ovf_callback+0x40>)
    4a68:	4798      	blx	r3
    4a6a:	4a08      	ldr	r2, [pc, #32]	; (4a8c <tmr_ovf_callback+0x3c>)
    4a6c:	7813      	ldrb	r3, [r2, #0]
    4a6e:	3301      	adds	r3, #1
    4a70:	b2db      	uxtb	r3, r3
    4a72:	7013      	strb	r3, [r2, #0]
    4a74:	4a07      	ldr	r2, [pc, #28]	; (4a94 <tmr_ovf_callback+0x44>)
    4a76:	7812      	ldrb	r2, [r2, #0]
    4a78:	429a      	cmp	r2, r3
    4a7a:	d806      	bhi.n	4a8a <tmr_ovf_callback+0x3a>
    4a7c:	4b03      	ldr	r3, [pc, #12]	; (4a8c <tmr_ovf_callback+0x3c>)
    4a7e:	2200      	movs	r2, #0
    4a80:	701a      	strb	r2, [r3, #0]
    4a82:	68db      	ldr	r3, [r3, #12]
    4a84:	2b00      	cmp	r3, #0
    4a86:	d000      	beq.n	4a8a <tmr_ovf_callback+0x3a>
    4a88:	4798      	blx	r3
    4a8a:	bd08      	pop	{r3, pc}
    4a8c:	20000c18 	.word	0x20000c18
    4a90:	00001f2d 	.word	0x00001f2d
    4a94:	20000e1c 	.word	0x20000e1c

00004a98 <tmr_cca_callback>:
    4a98:	b508      	push	{r3, lr}
    4a9a:	4b04      	ldr	r3, [pc, #16]	; (4aac <tmr_cca_callback+0x14>)
    4a9c:	4798      	blx	r3
    4a9e:	4b04      	ldr	r3, [pc, #16]	; (4ab0 <tmr_cca_callback+0x18>)
    4aa0:	691b      	ldr	r3, [r3, #16]
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d000      	beq.n	4aa8 <tmr_cca_callback+0x10>
    4aa6:	4798      	blx	r3
    4aa8:	bd08      	pop	{r3, pc}
    4aaa:	46c0      	nop			; (mov r8, r8)
    4aac:	00001f19 	.word	0x00001f19
    4ab0:	20000c18 	.word	0x20000c18

00004ab4 <set_common_tc_expiry_callback>:
    4ab4:	4b01      	ldr	r3, [pc, #4]	; (4abc <set_common_tc_expiry_callback+0x8>)
    4ab6:	6118      	str	r0, [r3, #16]
    4ab8:	4770      	bx	lr
    4aba:	46c0      	nop			; (mov r8, r8)
    4abc:	20000c18 	.word	0x20000c18

00004ac0 <__aeabi_uidiv>:
    4ac0:	2200      	movs	r2, #0
    4ac2:	0843      	lsrs	r3, r0, #1
    4ac4:	428b      	cmp	r3, r1
    4ac6:	d374      	bcc.n	4bb2 <__aeabi_uidiv+0xf2>
    4ac8:	0903      	lsrs	r3, r0, #4
    4aca:	428b      	cmp	r3, r1
    4acc:	d35f      	bcc.n	4b8e <__aeabi_uidiv+0xce>
    4ace:	0a03      	lsrs	r3, r0, #8
    4ad0:	428b      	cmp	r3, r1
    4ad2:	d344      	bcc.n	4b5e <__aeabi_uidiv+0x9e>
    4ad4:	0b03      	lsrs	r3, r0, #12
    4ad6:	428b      	cmp	r3, r1
    4ad8:	d328      	bcc.n	4b2c <__aeabi_uidiv+0x6c>
    4ada:	0c03      	lsrs	r3, r0, #16
    4adc:	428b      	cmp	r3, r1
    4ade:	d30d      	bcc.n	4afc <__aeabi_uidiv+0x3c>
    4ae0:	22ff      	movs	r2, #255	; 0xff
    4ae2:	0209      	lsls	r1, r1, #8
    4ae4:	ba12      	rev	r2, r2
    4ae6:	0c03      	lsrs	r3, r0, #16
    4ae8:	428b      	cmp	r3, r1
    4aea:	d302      	bcc.n	4af2 <__aeabi_uidiv+0x32>
    4aec:	1212      	asrs	r2, r2, #8
    4aee:	0209      	lsls	r1, r1, #8
    4af0:	d065      	beq.n	4bbe <__aeabi_uidiv+0xfe>
    4af2:	0b03      	lsrs	r3, r0, #12
    4af4:	428b      	cmp	r3, r1
    4af6:	d319      	bcc.n	4b2c <__aeabi_uidiv+0x6c>
    4af8:	e000      	b.n	4afc <__aeabi_uidiv+0x3c>
    4afa:	0a09      	lsrs	r1, r1, #8
    4afc:	0bc3      	lsrs	r3, r0, #15
    4afe:	428b      	cmp	r3, r1
    4b00:	d301      	bcc.n	4b06 <__aeabi_uidiv+0x46>
    4b02:	03cb      	lsls	r3, r1, #15
    4b04:	1ac0      	subs	r0, r0, r3
    4b06:	4152      	adcs	r2, r2
    4b08:	0b83      	lsrs	r3, r0, #14
    4b0a:	428b      	cmp	r3, r1
    4b0c:	d301      	bcc.n	4b12 <__aeabi_uidiv+0x52>
    4b0e:	038b      	lsls	r3, r1, #14
    4b10:	1ac0      	subs	r0, r0, r3
    4b12:	4152      	adcs	r2, r2
    4b14:	0b43      	lsrs	r3, r0, #13
    4b16:	428b      	cmp	r3, r1
    4b18:	d301      	bcc.n	4b1e <__aeabi_uidiv+0x5e>
    4b1a:	034b      	lsls	r3, r1, #13
    4b1c:	1ac0      	subs	r0, r0, r3
    4b1e:	4152      	adcs	r2, r2
    4b20:	0b03      	lsrs	r3, r0, #12
    4b22:	428b      	cmp	r3, r1
    4b24:	d301      	bcc.n	4b2a <__aeabi_uidiv+0x6a>
    4b26:	030b      	lsls	r3, r1, #12
    4b28:	1ac0      	subs	r0, r0, r3
    4b2a:	4152      	adcs	r2, r2
    4b2c:	0ac3      	lsrs	r3, r0, #11
    4b2e:	428b      	cmp	r3, r1
    4b30:	d301      	bcc.n	4b36 <__aeabi_uidiv+0x76>
    4b32:	02cb      	lsls	r3, r1, #11
    4b34:	1ac0      	subs	r0, r0, r3
    4b36:	4152      	adcs	r2, r2
    4b38:	0a83      	lsrs	r3, r0, #10
    4b3a:	428b      	cmp	r3, r1
    4b3c:	d301      	bcc.n	4b42 <__aeabi_uidiv+0x82>
    4b3e:	028b      	lsls	r3, r1, #10
    4b40:	1ac0      	subs	r0, r0, r3
    4b42:	4152      	adcs	r2, r2
    4b44:	0a43      	lsrs	r3, r0, #9
    4b46:	428b      	cmp	r3, r1
    4b48:	d301      	bcc.n	4b4e <__aeabi_uidiv+0x8e>
    4b4a:	024b      	lsls	r3, r1, #9
    4b4c:	1ac0      	subs	r0, r0, r3
    4b4e:	4152      	adcs	r2, r2
    4b50:	0a03      	lsrs	r3, r0, #8
    4b52:	428b      	cmp	r3, r1
    4b54:	d301      	bcc.n	4b5a <__aeabi_uidiv+0x9a>
    4b56:	020b      	lsls	r3, r1, #8
    4b58:	1ac0      	subs	r0, r0, r3
    4b5a:	4152      	adcs	r2, r2
    4b5c:	d2cd      	bcs.n	4afa <__aeabi_uidiv+0x3a>
    4b5e:	09c3      	lsrs	r3, r0, #7
    4b60:	428b      	cmp	r3, r1
    4b62:	d301      	bcc.n	4b68 <__aeabi_uidiv+0xa8>
    4b64:	01cb      	lsls	r3, r1, #7
    4b66:	1ac0      	subs	r0, r0, r3
    4b68:	4152      	adcs	r2, r2
    4b6a:	0983      	lsrs	r3, r0, #6
    4b6c:	428b      	cmp	r3, r1
    4b6e:	d301      	bcc.n	4b74 <__aeabi_uidiv+0xb4>
    4b70:	018b      	lsls	r3, r1, #6
    4b72:	1ac0      	subs	r0, r0, r3
    4b74:	4152      	adcs	r2, r2
    4b76:	0943      	lsrs	r3, r0, #5
    4b78:	428b      	cmp	r3, r1
    4b7a:	d301      	bcc.n	4b80 <__aeabi_uidiv+0xc0>
    4b7c:	014b      	lsls	r3, r1, #5
    4b7e:	1ac0      	subs	r0, r0, r3
    4b80:	4152      	adcs	r2, r2
    4b82:	0903      	lsrs	r3, r0, #4
    4b84:	428b      	cmp	r3, r1
    4b86:	d301      	bcc.n	4b8c <__aeabi_uidiv+0xcc>
    4b88:	010b      	lsls	r3, r1, #4
    4b8a:	1ac0      	subs	r0, r0, r3
    4b8c:	4152      	adcs	r2, r2
    4b8e:	08c3      	lsrs	r3, r0, #3
    4b90:	428b      	cmp	r3, r1
    4b92:	d301      	bcc.n	4b98 <__aeabi_uidiv+0xd8>
    4b94:	00cb      	lsls	r3, r1, #3
    4b96:	1ac0      	subs	r0, r0, r3
    4b98:	4152      	adcs	r2, r2
    4b9a:	0883      	lsrs	r3, r0, #2
    4b9c:	428b      	cmp	r3, r1
    4b9e:	d301      	bcc.n	4ba4 <__aeabi_uidiv+0xe4>
    4ba0:	008b      	lsls	r3, r1, #2
    4ba2:	1ac0      	subs	r0, r0, r3
    4ba4:	4152      	adcs	r2, r2
    4ba6:	0843      	lsrs	r3, r0, #1
    4ba8:	428b      	cmp	r3, r1
    4baa:	d301      	bcc.n	4bb0 <__aeabi_uidiv+0xf0>
    4bac:	004b      	lsls	r3, r1, #1
    4bae:	1ac0      	subs	r0, r0, r3
    4bb0:	4152      	adcs	r2, r2
    4bb2:	1a41      	subs	r1, r0, r1
    4bb4:	d200      	bcs.n	4bb8 <__aeabi_uidiv+0xf8>
    4bb6:	4601      	mov	r1, r0
    4bb8:	4152      	adcs	r2, r2
    4bba:	4610      	mov	r0, r2
    4bbc:	4770      	bx	lr
    4bbe:	e7ff      	b.n	4bc0 <__aeabi_uidiv+0x100>
    4bc0:	b501      	push	{r0, lr}
    4bc2:	2000      	movs	r0, #0
    4bc4:	f000 f80c 	bl	4be0 <__aeabi_idiv0>
    4bc8:	bd02      	pop	{r1, pc}
    4bca:	46c0      	nop			; (mov r8, r8)

00004bcc <__aeabi_uidivmod>:
    4bcc:	2900      	cmp	r1, #0
    4bce:	d0f7      	beq.n	4bc0 <__aeabi_uidiv+0x100>
    4bd0:	b503      	push	{r0, r1, lr}
    4bd2:	f7ff ff75 	bl	4ac0 <__aeabi_uidiv>
    4bd6:	bc0e      	pop	{r1, r2, r3}
    4bd8:	4342      	muls	r2, r0
    4bda:	1a89      	subs	r1, r1, r2
    4bdc:	4718      	bx	r3
    4bde:	46c0      	nop			; (mov r8, r8)

00004be0 <__aeabi_idiv0>:
    4be0:	4770      	bx	lr
    4be2:	46c0      	nop			; (mov r8, r8)

00004be4 <__aeabi_lmul>:
    4be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4be6:	464f      	mov	r7, r9
    4be8:	4646      	mov	r6, r8
    4bea:	0405      	lsls	r5, r0, #16
    4bec:	0c2d      	lsrs	r5, r5, #16
    4bee:	1c2c      	adds	r4, r5, #0
    4bf0:	b4c0      	push	{r6, r7}
    4bf2:	0417      	lsls	r7, r2, #16
    4bf4:	0c16      	lsrs	r6, r2, #16
    4bf6:	0c3f      	lsrs	r7, r7, #16
    4bf8:	4699      	mov	r9, r3
    4bfa:	0c03      	lsrs	r3, r0, #16
    4bfc:	437c      	muls	r4, r7
    4bfe:	4375      	muls	r5, r6
    4c00:	435f      	muls	r7, r3
    4c02:	4373      	muls	r3, r6
    4c04:	197d      	adds	r5, r7, r5
    4c06:	0c26      	lsrs	r6, r4, #16
    4c08:	19ad      	adds	r5, r5, r6
    4c0a:	469c      	mov	ip, r3
    4c0c:	42af      	cmp	r7, r5
    4c0e:	d903      	bls.n	4c18 <__aeabi_lmul+0x34>
    4c10:	2380      	movs	r3, #128	; 0x80
    4c12:	025b      	lsls	r3, r3, #9
    4c14:	4698      	mov	r8, r3
    4c16:	44c4      	add	ip, r8
    4c18:	464b      	mov	r3, r9
    4c1a:	4351      	muls	r1, r2
    4c1c:	4343      	muls	r3, r0
    4c1e:	0424      	lsls	r4, r4, #16
    4c20:	0c2e      	lsrs	r6, r5, #16
    4c22:	0c24      	lsrs	r4, r4, #16
    4c24:	042d      	lsls	r5, r5, #16
    4c26:	4466      	add	r6, ip
    4c28:	192c      	adds	r4, r5, r4
    4c2a:	1859      	adds	r1, r3, r1
    4c2c:	1989      	adds	r1, r1, r6
    4c2e:	1c20      	adds	r0, r4, #0
    4c30:	bc0c      	pop	{r2, r3}
    4c32:	4690      	mov	r8, r2
    4c34:	4699      	mov	r9, r3
    4c36:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004c38 <__libc_init_array>:
    4c38:	4b0e      	ldr	r3, [pc, #56]	; (4c74 <__libc_init_array+0x3c>)
    4c3a:	b570      	push	{r4, r5, r6, lr}
    4c3c:	2500      	movs	r5, #0
    4c3e:	1c1e      	adds	r6, r3, #0
    4c40:	4c0d      	ldr	r4, [pc, #52]	; (4c78 <__libc_init_array+0x40>)
    4c42:	1ae4      	subs	r4, r4, r3
    4c44:	10a4      	asrs	r4, r4, #2
    4c46:	42a5      	cmp	r5, r4
    4c48:	d004      	beq.n	4c54 <__libc_init_array+0x1c>
    4c4a:	00ab      	lsls	r3, r5, #2
    4c4c:	58f3      	ldr	r3, [r6, r3]
    4c4e:	4798      	blx	r3
    4c50:	3501      	adds	r5, #1
    4c52:	e7f8      	b.n	4c46 <__libc_init_array+0xe>
    4c54:	f001 fa12 	bl	607c <_init>
    4c58:	4b08      	ldr	r3, [pc, #32]	; (4c7c <__libc_init_array+0x44>)
    4c5a:	2500      	movs	r5, #0
    4c5c:	1c1e      	adds	r6, r3, #0
    4c5e:	4c08      	ldr	r4, [pc, #32]	; (4c80 <__libc_init_array+0x48>)
    4c60:	1ae4      	subs	r4, r4, r3
    4c62:	10a4      	asrs	r4, r4, #2
    4c64:	42a5      	cmp	r5, r4
    4c66:	d004      	beq.n	4c72 <__libc_init_array+0x3a>
    4c68:	00ab      	lsls	r3, r5, #2
    4c6a:	58f3      	ldr	r3, [r6, r3]
    4c6c:	4798      	blx	r3
    4c6e:	3501      	adds	r5, #1
    4c70:	e7f8      	b.n	4c64 <__libc_init_array+0x2c>
    4c72:	bd70      	pop	{r4, r5, r6, pc}
    4c74:	00006088 	.word	0x00006088
    4c78:	00006088 	.word	0x00006088
    4c7c:	00006088 	.word	0x00006088
    4c80:	0000608c 	.word	0x0000608c

00004c84 <memcpy>:
    4c84:	2300      	movs	r3, #0
    4c86:	b510      	push	{r4, lr}
    4c88:	4293      	cmp	r3, r2
    4c8a:	d003      	beq.n	4c94 <memcpy+0x10>
    4c8c:	5ccc      	ldrb	r4, [r1, r3]
    4c8e:	54c4      	strb	r4, [r0, r3]
    4c90:	3301      	adds	r3, #1
    4c92:	e7f9      	b.n	4c88 <memcpy+0x4>
    4c94:	bd10      	pop	{r4, pc}

00004c96 <memset>:
    4c96:	1c03      	adds	r3, r0, #0
    4c98:	1882      	adds	r2, r0, r2
    4c9a:	4293      	cmp	r3, r2
    4c9c:	d002      	beq.n	4ca4 <memset+0xe>
    4c9e:	7019      	strb	r1, [r3, #0]
    4ca0:	3301      	adds	r3, #1
    4ca2:	e7fa      	b.n	4c9a <memset+0x4>
    4ca4:	4770      	bx	lr
	...

00004ca8 <iprintf>:
    4ca8:	b40f      	push	{r0, r1, r2, r3}
    4caa:	4b0b      	ldr	r3, [pc, #44]	; (4cd8 <iprintf+0x30>)
    4cac:	b513      	push	{r0, r1, r4, lr}
    4cae:	681c      	ldr	r4, [r3, #0]
    4cb0:	2c00      	cmp	r4, #0
    4cb2:	d005      	beq.n	4cc0 <iprintf+0x18>
    4cb4:	69a3      	ldr	r3, [r4, #24]
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d102      	bne.n	4cc0 <iprintf+0x18>
    4cba:	1c20      	adds	r0, r4, #0
    4cbc:	f000 fb0a 	bl	52d4 <__sinit>
    4cc0:	ab05      	add	r3, sp, #20
    4cc2:	1c20      	adds	r0, r4, #0
    4cc4:	68a1      	ldr	r1, [r4, #8]
    4cc6:	9a04      	ldr	r2, [sp, #16]
    4cc8:	9301      	str	r3, [sp, #4]
    4cca:	f000 fcbd 	bl	5648 <_vfiprintf_r>
    4cce:	bc16      	pop	{r1, r2, r4}
    4cd0:	bc08      	pop	{r3}
    4cd2:	b004      	add	sp, #16
    4cd4:	4718      	bx	r3
    4cd6:	46c0      	nop			; (mov r8, r8)
    4cd8:	2000006c 	.word	0x2000006c

00004cdc <_puts_r>:
    4cdc:	b570      	push	{r4, r5, r6, lr}
    4cde:	1c05      	adds	r5, r0, #0
    4ce0:	1c0e      	adds	r6, r1, #0
    4ce2:	2800      	cmp	r0, #0
    4ce4:	d004      	beq.n	4cf0 <_puts_r+0x14>
    4ce6:	6983      	ldr	r3, [r0, #24]
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d101      	bne.n	4cf0 <_puts_r+0x14>
    4cec:	f000 faf2 	bl	52d4 <__sinit>
    4cf0:	68ac      	ldr	r4, [r5, #8]
    4cf2:	89a3      	ldrh	r3, [r4, #12]
    4cf4:	071b      	lsls	r3, r3, #28
    4cf6:	d502      	bpl.n	4cfe <_puts_r+0x22>
    4cf8:	6923      	ldr	r3, [r4, #16]
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	d119      	bne.n	4d32 <_puts_r+0x56>
    4cfe:	1c28      	adds	r0, r5, #0
    4d00:	1c21      	adds	r1, r4, #0
    4d02:	f000 f97b 	bl	4ffc <__swsetup_r>
    4d06:	2800      	cmp	r0, #0
    4d08:	d013      	beq.n	4d32 <_puts_r+0x56>
    4d0a:	2001      	movs	r0, #1
    4d0c:	4240      	negs	r0, r0
    4d0e:	e045      	b.n	4d9c <_puts_r+0xc0>
    4d10:	7831      	ldrb	r1, [r6, #0]
    4d12:	2b00      	cmp	r3, #0
    4d14:	da1b      	bge.n	4d4e <_puts_r+0x72>
    4d16:	69a2      	ldr	r2, [r4, #24]
    4d18:	4293      	cmp	r3, r2
    4d1a:	da11      	bge.n	4d40 <_puts_r+0x64>
    4d1c:	1c22      	adds	r2, r4, #0
    4d1e:	1c28      	adds	r0, r5, #0
    4d20:	f000 f914 	bl	4f4c <__swbuf_r>
    4d24:	3001      	adds	r0, #1
    4d26:	4242      	negs	r2, r0
    4d28:	4142      	adcs	r2, r0
    4d2a:	b2d0      	uxtb	r0, r2
    4d2c:	2800      	cmp	r0, #0
    4d2e:	d1ec      	bne.n	4d0a <_puts_r+0x2e>
    4d30:	3601      	adds	r6, #1
    4d32:	68a3      	ldr	r3, [r4, #8]
    4d34:	7832      	ldrb	r2, [r6, #0]
    4d36:	3b01      	subs	r3, #1
    4d38:	60a3      	str	r3, [r4, #8]
    4d3a:	2a00      	cmp	r2, #0
    4d3c:	d1e8      	bne.n	4d10 <_puts_r+0x34>
    4d3e:	e00c      	b.n	4d5a <_puts_r+0x7e>
    4d40:	6823      	ldr	r3, [r4, #0]
    4d42:	7019      	strb	r1, [r3, #0]
    4d44:	6823      	ldr	r3, [r4, #0]
    4d46:	7819      	ldrb	r1, [r3, #0]
    4d48:	290a      	cmp	r1, #10
    4d4a:	d103      	bne.n	4d54 <_puts_r+0x78>
    4d4c:	e7e6      	b.n	4d1c <_puts_r+0x40>
    4d4e:	6823      	ldr	r3, [r4, #0]
    4d50:	7019      	strb	r1, [r3, #0]
    4d52:	6823      	ldr	r3, [r4, #0]
    4d54:	3301      	adds	r3, #1
    4d56:	6023      	str	r3, [r4, #0]
    4d58:	e7ea      	b.n	4d30 <_puts_r+0x54>
    4d5a:	2b00      	cmp	r3, #0
    4d5c:	da17      	bge.n	4d8e <_puts_r+0xb2>
    4d5e:	69a2      	ldr	r2, [r4, #24]
    4d60:	4293      	cmp	r3, r2
    4d62:	db08      	blt.n	4d76 <_puts_r+0x9a>
    4d64:	230a      	movs	r3, #10
    4d66:	6822      	ldr	r2, [r4, #0]
    4d68:	7013      	strb	r3, [r2, #0]
    4d6a:	6823      	ldr	r3, [r4, #0]
    4d6c:	7819      	ldrb	r1, [r3, #0]
    4d6e:	290a      	cmp	r1, #10
    4d70:	d111      	bne.n	4d96 <_puts_r+0xba>
    4d72:	1c28      	adds	r0, r5, #0
    4d74:	e001      	b.n	4d7a <_puts_r+0x9e>
    4d76:	1c28      	adds	r0, r5, #0
    4d78:	210a      	movs	r1, #10
    4d7a:	1c22      	adds	r2, r4, #0
    4d7c:	f000 f8e6 	bl	4f4c <__swbuf_r>
    4d80:	3001      	adds	r0, #1
    4d82:	4242      	negs	r2, r0
    4d84:	4142      	adcs	r2, r0
    4d86:	b2d0      	uxtb	r0, r2
    4d88:	2800      	cmp	r0, #0
    4d8a:	d006      	beq.n	4d9a <_puts_r+0xbe>
    4d8c:	e7bd      	b.n	4d0a <_puts_r+0x2e>
    4d8e:	230a      	movs	r3, #10
    4d90:	6822      	ldr	r2, [r4, #0]
    4d92:	7013      	strb	r3, [r2, #0]
    4d94:	6823      	ldr	r3, [r4, #0]
    4d96:	3301      	adds	r3, #1
    4d98:	6023      	str	r3, [r4, #0]
    4d9a:	200a      	movs	r0, #10
    4d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

00004da0 <puts>:
    4da0:	b508      	push	{r3, lr}
    4da2:	4b03      	ldr	r3, [pc, #12]	; (4db0 <puts+0x10>)
    4da4:	1c01      	adds	r1, r0, #0
    4da6:	6818      	ldr	r0, [r3, #0]
    4da8:	f7ff ff98 	bl	4cdc <_puts_r>
    4dac:	bd08      	pop	{r3, pc}
    4dae:	46c0      	nop			; (mov r8, r8)
    4db0:	2000006c 	.word	0x2000006c

00004db4 <rand>:
    4db4:	4b15      	ldr	r3, [pc, #84]	; (4e0c <rand+0x58>)
    4db6:	b510      	push	{r4, lr}
    4db8:	681c      	ldr	r4, [r3, #0]
    4dba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4dbc:	2b00      	cmp	r3, #0
    4dbe:	d115      	bne.n	4dec <rand+0x38>
    4dc0:	2018      	movs	r0, #24
    4dc2:	f000 fb71 	bl	54a8 <malloc>
    4dc6:	4b12      	ldr	r3, [pc, #72]	; (4e10 <rand+0x5c>)
    4dc8:	63a0      	str	r0, [r4, #56]	; 0x38
    4dca:	8003      	strh	r3, [r0, #0]
    4dcc:	4b11      	ldr	r3, [pc, #68]	; (4e14 <rand+0x60>)
    4dce:	2201      	movs	r2, #1
    4dd0:	8043      	strh	r3, [r0, #2]
    4dd2:	4b11      	ldr	r3, [pc, #68]	; (4e18 <rand+0x64>)
    4dd4:	8083      	strh	r3, [r0, #4]
    4dd6:	4b11      	ldr	r3, [pc, #68]	; (4e1c <rand+0x68>)
    4dd8:	80c3      	strh	r3, [r0, #6]
    4dda:	4b11      	ldr	r3, [pc, #68]	; (4e20 <rand+0x6c>)
    4ddc:	8103      	strh	r3, [r0, #8]
    4dde:	2305      	movs	r3, #5
    4de0:	8143      	strh	r3, [r0, #10]
    4de2:	3306      	adds	r3, #6
    4de4:	8183      	strh	r3, [r0, #12]
    4de6:	2300      	movs	r3, #0
    4de8:	6102      	str	r2, [r0, #16]
    4dea:	6143      	str	r3, [r0, #20]
    4dec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    4dee:	4a0d      	ldr	r2, [pc, #52]	; (4e24 <rand+0x70>)
    4df0:	6920      	ldr	r0, [r4, #16]
    4df2:	6961      	ldr	r1, [r4, #20]
    4df4:	4b0c      	ldr	r3, [pc, #48]	; (4e28 <rand+0x74>)
    4df6:	f7ff fef5 	bl	4be4 <__aeabi_lmul>
    4dfa:	2201      	movs	r2, #1
    4dfc:	2300      	movs	r3, #0
    4dfe:	1880      	adds	r0, r0, r2
    4e00:	4159      	adcs	r1, r3
    4e02:	6120      	str	r0, [r4, #16]
    4e04:	6161      	str	r1, [r4, #20]
    4e06:	0048      	lsls	r0, r1, #1
    4e08:	0840      	lsrs	r0, r0, #1
    4e0a:	bd10      	pop	{r4, pc}
    4e0c:	2000006c 	.word	0x2000006c
    4e10:	0000330e 	.word	0x0000330e
    4e14:	ffffabcd 	.word	0xffffabcd
    4e18:	00001234 	.word	0x00001234
    4e1c:	ffffe66d 	.word	0xffffe66d
    4e20:	ffffdeec 	.word	0xffffdeec
    4e24:	4c957f2d 	.word	0x4c957f2d
    4e28:	5851f42d 	.word	0x5851f42d

00004e2c <setbuf>:
    4e2c:	b508      	push	{r3, lr}
    4e2e:	424a      	negs	r2, r1
    4e30:	414a      	adcs	r2, r1
    4e32:	2380      	movs	r3, #128	; 0x80
    4e34:	0052      	lsls	r2, r2, #1
    4e36:	00db      	lsls	r3, r3, #3
    4e38:	f000 f802 	bl	4e40 <setvbuf>
    4e3c:	bd08      	pop	{r3, pc}
	...

00004e40 <setvbuf>:
    4e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e42:	1c1e      	adds	r6, r3, #0
    4e44:	4b3c      	ldr	r3, [pc, #240]	; (4f38 <setvbuf+0xf8>)
    4e46:	1c04      	adds	r4, r0, #0
    4e48:	681d      	ldr	r5, [r3, #0]
    4e4a:	1c0f      	adds	r7, r1, #0
    4e4c:	9201      	str	r2, [sp, #4]
    4e4e:	2d00      	cmp	r5, #0
    4e50:	d005      	beq.n	4e5e <setvbuf+0x1e>
    4e52:	69ab      	ldr	r3, [r5, #24]
    4e54:	2b00      	cmp	r3, #0
    4e56:	d102      	bne.n	4e5e <setvbuf+0x1e>
    4e58:	1c28      	adds	r0, r5, #0
    4e5a:	f000 fa3b 	bl	52d4 <__sinit>
    4e5e:	4b37      	ldr	r3, [pc, #220]	; (4f3c <setvbuf+0xfc>)
    4e60:	429c      	cmp	r4, r3
    4e62:	d101      	bne.n	4e68 <setvbuf+0x28>
    4e64:	686c      	ldr	r4, [r5, #4]
    4e66:	e008      	b.n	4e7a <setvbuf+0x3a>
    4e68:	4b35      	ldr	r3, [pc, #212]	; (4f40 <setvbuf+0x100>)
    4e6a:	429c      	cmp	r4, r3
    4e6c:	d101      	bne.n	4e72 <setvbuf+0x32>
    4e6e:	68ac      	ldr	r4, [r5, #8]
    4e70:	e003      	b.n	4e7a <setvbuf+0x3a>
    4e72:	4b34      	ldr	r3, [pc, #208]	; (4f44 <setvbuf+0x104>)
    4e74:	429c      	cmp	r4, r3
    4e76:	d100      	bne.n	4e7a <setvbuf+0x3a>
    4e78:	68ec      	ldr	r4, [r5, #12]
    4e7a:	9b01      	ldr	r3, [sp, #4]
    4e7c:	2b02      	cmp	r3, #2
    4e7e:	d858      	bhi.n	4f32 <setvbuf+0xf2>
    4e80:	2e00      	cmp	r6, #0
    4e82:	db56      	blt.n	4f32 <setvbuf+0xf2>
    4e84:	1c28      	adds	r0, r5, #0
    4e86:	1c21      	adds	r1, r4, #0
    4e88:	f000 f9b6 	bl	51f8 <_fflush_r>
    4e8c:	2300      	movs	r3, #0
    4e8e:	6063      	str	r3, [r4, #4]
    4e90:	61a3      	str	r3, [r4, #24]
    4e92:	89a3      	ldrh	r3, [r4, #12]
    4e94:	061b      	lsls	r3, r3, #24
    4e96:	d503      	bpl.n	4ea0 <setvbuf+0x60>
    4e98:	1c28      	adds	r0, r5, #0
    4e9a:	6921      	ldr	r1, [r4, #16]
    4e9c:	f000 fb0e 	bl	54bc <_free_r>
    4ea0:	2283      	movs	r2, #131	; 0x83
    4ea2:	89a3      	ldrh	r3, [r4, #12]
    4ea4:	4393      	bics	r3, r2
    4ea6:	81a3      	strh	r3, [r4, #12]
    4ea8:	9b01      	ldr	r3, [sp, #4]
    4eaa:	2b02      	cmp	r3, #2
    4eac:	d013      	beq.n	4ed6 <setvbuf+0x96>
    4eae:	2f00      	cmp	r7, #0
    4eb0:	d125      	bne.n	4efe <setvbuf+0xbe>
    4eb2:	2e00      	cmp	r6, #0
    4eb4:	d101      	bne.n	4eba <setvbuf+0x7a>
    4eb6:	2680      	movs	r6, #128	; 0x80
    4eb8:	00f6      	lsls	r6, r6, #3
    4eba:	1c30      	adds	r0, r6, #0
    4ebc:	f000 faf4 	bl	54a8 <malloc>
    4ec0:	1e07      	subs	r7, r0, #0
    4ec2:	d118      	bne.n	4ef6 <setvbuf+0xb6>
    4ec4:	2080      	movs	r0, #128	; 0x80
    4ec6:	00c0      	lsls	r0, r0, #3
    4ec8:	f000 faee 	bl	54a8 <malloc>
    4ecc:	1e07      	subs	r7, r0, #0
    4ece:	d110      	bne.n	4ef2 <setvbuf+0xb2>
    4ed0:	2001      	movs	r0, #1
    4ed2:	4240      	negs	r0, r0
    4ed4:	e000      	b.n	4ed8 <setvbuf+0x98>
    4ed6:	2000      	movs	r0, #0
    4ed8:	2202      	movs	r2, #2
    4eda:	89a3      	ldrh	r3, [r4, #12]
    4edc:	4313      	orrs	r3, r2
    4ede:	81a3      	strh	r3, [r4, #12]
    4ee0:	2300      	movs	r3, #0
    4ee2:	60a3      	str	r3, [r4, #8]
    4ee4:	1c23      	adds	r3, r4, #0
    4ee6:	3347      	adds	r3, #71	; 0x47
    4ee8:	6023      	str	r3, [r4, #0]
    4eea:	6123      	str	r3, [r4, #16]
    4eec:	2301      	movs	r3, #1
    4eee:	6163      	str	r3, [r4, #20]
    4ef0:	e021      	b.n	4f36 <setvbuf+0xf6>
    4ef2:	2680      	movs	r6, #128	; 0x80
    4ef4:	00f6      	lsls	r6, r6, #3
    4ef6:	2280      	movs	r2, #128	; 0x80
    4ef8:	89a3      	ldrh	r3, [r4, #12]
    4efa:	4313      	orrs	r3, r2
    4efc:	81a3      	strh	r3, [r4, #12]
    4efe:	9b01      	ldr	r3, [sp, #4]
    4f00:	2b01      	cmp	r3, #1
    4f02:	d105      	bne.n	4f10 <setvbuf+0xd0>
    4f04:	89a3      	ldrh	r3, [r4, #12]
    4f06:	9a01      	ldr	r2, [sp, #4]
    4f08:	431a      	orrs	r2, r3
    4f0a:	4273      	negs	r3, r6
    4f0c:	81a2      	strh	r2, [r4, #12]
    4f0e:	61a3      	str	r3, [r4, #24]
    4f10:	4b0d      	ldr	r3, [pc, #52]	; (4f48 <setvbuf+0x108>)
    4f12:	2000      	movs	r0, #0
    4f14:	62ab      	str	r3, [r5, #40]	; 0x28
    4f16:	89a2      	ldrh	r2, [r4, #12]
    4f18:	6027      	str	r7, [r4, #0]
    4f1a:	6127      	str	r7, [r4, #16]
    4f1c:	6166      	str	r6, [r4, #20]
    4f1e:	0713      	lsls	r3, r2, #28
    4f20:	d509      	bpl.n	4f36 <setvbuf+0xf6>
    4f22:	2303      	movs	r3, #3
    4f24:	401a      	ands	r2, r3
    4f26:	4253      	negs	r3, r2
    4f28:	4153      	adcs	r3, r2
    4f2a:	425b      	negs	r3, r3
    4f2c:	401e      	ands	r6, r3
    4f2e:	60a6      	str	r6, [r4, #8]
    4f30:	e001      	b.n	4f36 <setvbuf+0xf6>
    4f32:	2001      	movs	r0, #1
    4f34:	4240      	negs	r0, r0
    4f36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4f38:	2000006c 	.word	0x2000006c
    4f3c:	00005fe8 	.word	0x00005fe8
    4f40:	00006008 	.word	0x00006008
    4f44:	00006028 	.word	0x00006028
    4f48:	00005251 	.word	0x00005251

00004f4c <__swbuf_r>:
    4f4c:	b570      	push	{r4, r5, r6, lr}
    4f4e:	1c05      	adds	r5, r0, #0
    4f50:	1c0e      	adds	r6, r1, #0
    4f52:	1c14      	adds	r4, r2, #0
    4f54:	2800      	cmp	r0, #0
    4f56:	d004      	beq.n	4f62 <__swbuf_r+0x16>
    4f58:	6983      	ldr	r3, [r0, #24]
    4f5a:	2b00      	cmp	r3, #0
    4f5c:	d101      	bne.n	4f62 <__swbuf_r+0x16>
    4f5e:	f000 f9b9 	bl	52d4 <__sinit>
    4f62:	4b23      	ldr	r3, [pc, #140]	; (4ff0 <__swbuf_r+0xa4>)
    4f64:	429c      	cmp	r4, r3
    4f66:	d101      	bne.n	4f6c <__swbuf_r+0x20>
    4f68:	686c      	ldr	r4, [r5, #4]
    4f6a:	e008      	b.n	4f7e <__swbuf_r+0x32>
    4f6c:	4b21      	ldr	r3, [pc, #132]	; (4ff4 <__swbuf_r+0xa8>)
    4f6e:	429c      	cmp	r4, r3
    4f70:	d101      	bne.n	4f76 <__swbuf_r+0x2a>
    4f72:	68ac      	ldr	r4, [r5, #8]
    4f74:	e003      	b.n	4f7e <__swbuf_r+0x32>
    4f76:	4b20      	ldr	r3, [pc, #128]	; (4ff8 <__swbuf_r+0xac>)
    4f78:	429c      	cmp	r4, r3
    4f7a:	d100      	bne.n	4f7e <__swbuf_r+0x32>
    4f7c:	68ec      	ldr	r4, [r5, #12]
    4f7e:	69a3      	ldr	r3, [r4, #24]
    4f80:	60a3      	str	r3, [r4, #8]
    4f82:	89a3      	ldrh	r3, [r4, #12]
    4f84:	071b      	lsls	r3, r3, #28
    4f86:	d50a      	bpl.n	4f9e <__swbuf_r+0x52>
    4f88:	6923      	ldr	r3, [r4, #16]
    4f8a:	2b00      	cmp	r3, #0
    4f8c:	d007      	beq.n	4f9e <__swbuf_r+0x52>
    4f8e:	6823      	ldr	r3, [r4, #0]
    4f90:	6922      	ldr	r2, [r4, #16]
    4f92:	b2f6      	uxtb	r6, r6
    4f94:	1a98      	subs	r0, r3, r2
    4f96:	6963      	ldr	r3, [r4, #20]
    4f98:	4298      	cmp	r0, r3
    4f9a:	db0f      	blt.n	4fbc <__swbuf_r+0x70>
    4f9c:	e008      	b.n	4fb0 <__swbuf_r+0x64>
    4f9e:	1c28      	adds	r0, r5, #0
    4fa0:	1c21      	adds	r1, r4, #0
    4fa2:	f000 f82b 	bl	4ffc <__swsetup_r>
    4fa6:	2800      	cmp	r0, #0
    4fa8:	d0f1      	beq.n	4f8e <__swbuf_r+0x42>
    4faa:	2001      	movs	r0, #1
    4fac:	4240      	negs	r0, r0
    4fae:	e01d      	b.n	4fec <__swbuf_r+0xa0>
    4fb0:	1c28      	adds	r0, r5, #0
    4fb2:	1c21      	adds	r1, r4, #0
    4fb4:	f000 f920 	bl	51f8 <_fflush_r>
    4fb8:	2800      	cmp	r0, #0
    4fba:	d1f6      	bne.n	4faa <__swbuf_r+0x5e>
    4fbc:	68a3      	ldr	r3, [r4, #8]
    4fbe:	3001      	adds	r0, #1
    4fc0:	3b01      	subs	r3, #1
    4fc2:	60a3      	str	r3, [r4, #8]
    4fc4:	6823      	ldr	r3, [r4, #0]
    4fc6:	1c5a      	adds	r2, r3, #1
    4fc8:	6022      	str	r2, [r4, #0]
    4fca:	701e      	strb	r6, [r3, #0]
    4fcc:	6963      	ldr	r3, [r4, #20]
    4fce:	4298      	cmp	r0, r3
    4fd0:	d005      	beq.n	4fde <__swbuf_r+0x92>
    4fd2:	89a3      	ldrh	r3, [r4, #12]
    4fd4:	1c30      	adds	r0, r6, #0
    4fd6:	07db      	lsls	r3, r3, #31
    4fd8:	d508      	bpl.n	4fec <__swbuf_r+0xa0>
    4fda:	2e0a      	cmp	r6, #10
    4fdc:	d106      	bne.n	4fec <__swbuf_r+0xa0>
    4fde:	1c28      	adds	r0, r5, #0
    4fe0:	1c21      	adds	r1, r4, #0
    4fe2:	f000 f909 	bl	51f8 <_fflush_r>
    4fe6:	2800      	cmp	r0, #0
    4fe8:	d1df      	bne.n	4faa <__swbuf_r+0x5e>
    4fea:	1c30      	adds	r0, r6, #0
    4fec:	bd70      	pop	{r4, r5, r6, pc}
    4fee:	46c0      	nop			; (mov r8, r8)
    4ff0:	00005fe8 	.word	0x00005fe8
    4ff4:	00006008 	.word	0x00006008
    4ff8:	00006028 	.word	0x00006028

00004ffc <__swsetup_r>:
    4ffc:	4b35      	ldr	r3, [pc, #212]	; (50d4 <__swsetup_r+0xd8>)
    4ffe:	b570      	push	{r4, r5, r6, lr}
    5000:	681d      	ldr	r5, [r3, #0]
    5002:	1c06      	adds	r6, r0, #0
    5004:	1c0c      	adds	r4, r1, #0
    5006:	2d00      	cmp	r5, #0
    5008:	d005      	beq.n	5016 <__swsetup_r+0x1a>
    500a:	69ab      	ldr	r3, [r5, #24]
    500c:	2b00      	cmp	r3, #0
    500e:	d102      	bne.n	5016 <__swsetup_r+0x1a>
    5010:	1c28      	adds	r0, r5, #0
    5012:	f000 f95f 	bl	52d4 <__sinit>
    5016:	4b30      	ldr	r3, [pc, #192]	; (50d8 <__swsetup_r+0xdc>)
    5018:	429c      	cmp	r4, r3
    501a:	d101      	bne.n	5020 <__swsetup_r+0x24>
    501c:	686c      	ldr	r4, [r5, #4]
    501e:	e008      	b.n	5032 <__swsetup_r+0x36>
    5020:	4b2e      	ldr	r3, [pc, #184]	; (50dc <__swsetup_r+0xe0>)
    5022:	429c      	cmp	r4, r3
    5024:	d101      	bne.n	502a <__swsetup_r+0x2e>
    5026:	68ac      	ldr	r4, [r5, #8]
    5028:	e003      	b.n	5032 <__swsetup_r+0x36>
    502a:	4b2d      	ldr	r3, [pc, #180]	; (50e0 <__swsetup_r+0xe4>)
    502c:	429c      	cmp	r4, r3
    502e:	d100      	bne.n	5032 <__swsetup_r+0x36>
    5030:	68ec      	ldr	r4, [r5, #12]
    5032:	89a3      	ldrh	r3, [r4, #12]
    5034:	b29a      	uxth	r2, r3
    5036:	0711      	lsls	r1, r2, #28
    5038:	d423      	bmi.n	5082 <__swsetup_r+0x86>
    503a:	06d1      	lsls	r1, r2, #27
    503c:	d407      	bmi.n	504e <__swsetup_r+0x52>
    503e:	2209      	movs	r2, #9
    5040:	2001      	movs	r0, #1
    5042:	6032      	str	r2, [r6, #0]
    5044:	3237      	adds	r2, #55	; 0x37
    5046:	4313      	orrs	r3, r2
    5048:	81a3      	strh	r3, [r4, #12]
    504a:	4240      	negs	r0, r0
    504c:	e040      	b.n	50d0 <__swsetup_r+0xd4>
    504e:	0753      	lsls	r3, r2, #29
    5050:	d513      	bpl.n	507a <__swsetup_r+0x7e>
    5052:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5054:	2900      	cmp	r1, #0
    5056:	d008      	beq.n	506a <__swsetup_r+0x6e>
    5058:	1c23      	adds	r3, r4, #0
    505a:	3344      	adds	r3, #68	; 0x44
    505c:	4299      	cmp	r1, r3
    505e:	d002      	beq.n	5066 <__swsetup_r+0x6a>
    5060:	1c30      	adds	r0, r6, #0
    5062:	f000 fa2b 	bl	54bc <_free_r>
    5066:	2300      	movs	r3, #0
    5068:	6363      	str	r3, [r4, #52]	; 0x34
    506a:	2224      	movs	r2, #36	; 0x24
    506c:	89a3      	ldrh	r3, [r4, #12]
    506e:	4393      	bics	r3, r2
    5070:	81a3      	strh	r3, [r4, #12]
    5072:	2300      	movs	r3, #0
    5074:	6063      	str	r3, [r4, #4]
    5076:	6923      	ldr	r3, [r4, #16]
    5078:	6023      	str	r3, [r4, #0]
    507a:	2208      	movs	r2, #8
    507c:	89a3      	ldrh	r3, [r4, #12]
    507e:	4313      	orrs	r3, r2
    5080:	81a3      	strh	r3, [r4, #12]
    5082:	6923      	ldr	r3, [r4, #16]
    5084:	2b00      	cmp	r3, #0
    5086:	d10b      	bne.n	50a0 <__swsetup_r+0xa4>
    5088:	23a0      	movs	r3, #160	; 0xa0
    508a:	89a2      	ldrh	r2, [r4, #12]
    508c:	009b      	lsls	r3, r3, #2
    508e:	4013      	ands	r3, r2
    5090:	2280      	movs	r2, #128	; 0x80
    5092:	0092      	lsls	r2, r2, #2
    5094:	4293      	cmp	r3, r2
    5096:	d003      	beq.n	50a0 <__swsetup_r+0xa4>
    5098:	1c30      	adds	r0, r6, #0
    509a:	1c21      	adds	r1, r4, #0
    509c:	f000 f9ac 	bl	53f8 <__smakebuf_r>
    50a0:	2301      	movs	r3, #1
    50a2:	89a2      	ldrh	r2, [r4, #12]
    50a4:	4013      	ands	r3, r2
    50a6:	d005      	beq.n	50b4 <__swsetup_r+0xb8>
    50a8:	2300      	movs	r3, #0
    50aa:	60a3      	str	r3, [r4, #8]
    50ac:	6963      	ldr	r3, [r4, #20]
    50ae:	425b      	negs	r3, r3
    50b0:	61a3      	str	r3, [r4, #24]
    50b2:	e003      	b.n	50bc <__swsetup_r+0xc0>
    50b4:	0791      	lsls	r1, r2, #30
    50b6:	d400      	bmi.n	50ba <__swsetup_r+0xbe>
    50b8:	6963      	ldr	r3, [r4, #20]
    50ba:	60a3      	str	r3, [r4, #8]
    50bc:	2000      	movs	r0, #0
    50be:	6923      	ldr	r3, [r4, #16]
    50c0:	4283      	cmp	r3, r0
    50c2:	d105      	bne.n	50d0 <__swsetup_r+0xd4>
    50c4:	0613      	lsls	r3, r2, #24
    50c6:	d503      	bpl.n	50d0 <__swsetup_r+0xd4>
    50c8:	2340      	movs	r3, #64	; 0x40
    50ca:	431a      	orrs	r2, r3
    50cc:	81a2      	strh	r2, [r4, #12]
    50ce:	3801      	subs	r0, #1
    50d0:	bd70      	pop	{r4, r5, r6, pc}
    50d2:	46c0      	nop			; (mov r8, r8)
    50d4:	2000006c 	.word	0x2000006c
    50d8:	00005fe8 	.word	0x00005fe8
    50dc:	00006008 	.word	0x00006008
    50e0:	00006028 	.word	0x00006028

000050e4 <__sflush_r>:
    50e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    50e6:	898a      	ldrh	r2, [r1, #12]
    50e8:	1c05      	adds	r5, r0, #0
    50ea:	1c0c      	adds	r4, r1, #0
    50ec:	0713      	lsls	r3, r2, #28
    50ee:	d45e      	bmi.n	51ae <__sflush_r+0xca>
    50f0:	684b      	ldr	r3, [r1, #4]
    50f2:	2b00      	cmp	r3, #0
    50f4:	dc02      	bgt.n	50fc <__sflush_r+0x18>
    50f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    50f8:	2b00      	cmp	r3, #0
    50fa:	dd1a      	ble.n	5132 <__sflush_r+0x4e>
    50fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    50fe:	2f00      	cmp	r7, #0
    5100:	d017      	beq.n	5132 <__sflush_r+0x4e>
    5102:	2300      	movs	r3, #0
    5104:	682e      	ldr	r6, [r5, #0]
    5106:	602b      	str	r3, [r5, #0]
    5108:	2380      	movs	r3, #128	; 0x80
    510a:	015b      	lsls	r3, r3, #5
    510c:	401a      	ands	r2, r3
    510e:	d001      	beq.n	5114 <__sflush_r+0x30>
    5110:	6d62      	ldr	r2, [r4, #84]	; 0x54
    5112:	e015      	b.n	5140 <__sflush_r+0x5c>
    5114:	1c28      	adds	r0, r5, #0
    5116:	6a21      	ldr	r1, [r4, #32]
    5118:	2301      	movs	r3, #1
    511a:	47b8      	blx	r7
    511c:	1c02      	adds	r2, r0, #0
    511e:	1c43      	adds	r3, r0, #1
    5120:	d10e      	bne.n	5140 <__sflush_r+0x5c>
    5122:	682b      	ldr	r3, [r5, #0]
    5124:	2b00      	cmp	r3, #0
    5126:	d00b      	beq.n	5140 <__sflush_r+0x5c>
    5128:	2b1d      	cmp	r3, #29
    512a:	d001      	beq.n	5130 <__sflush_r+0x4c>
    512c:	2b16      	cmp	r3, #22
    512e:	d102      	bne.n	5136 <__sflush_r+0x52>
    5130:	602e      	str	r6, [r5, #0]
    5132:	2000      	movs	r0, #0
    5134:	e05e      	b.n	51f4 <__sflush_r+0x110>
    5136:	2140      	movs	r1, #64	; 0x40
    5138:	89a3      	ldrh	r3, [r4, #12]
    513a:	430b      	orrs	r3, r1
    513c:	81a3      	strh	r3, [r4, #12]
    513e:	e059      	b.n	51f4 <__sflush_r+0x110>
    5140:	89a3      	ldrh	r3, [r4, #12]
    5142:	075b      	lsls	r3, r3, #29
    5144:	d506      	bpl.n	5154 <__sflush_r+0x70>
    5146:	6863      	ldr	r3, [r4, #4]
    5148:	1ad2      	subs	r2, r2, r3
    514a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    514c:	2b00      	cmp	r3, #0
    514e:	d001      	beq.n	5154 <__sflush_r+0x70>
    5150:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5152:	1ad2      	subs	r2, r2, r3
    5154:	2300      	movs	r3, #0
    5156:	1c28      	adds	r0, r5, #0
    5158:	6a21      	ldr	r1, [r4, #32]
    515a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    515c:	47b8      	blx	r7
    515e:	89a3      	ldrh	r3, [r4, #12]
    5160:	1c42      	adds	r2, r0, #1
    5162:	d106      	bne.n	5172 <__sflush_r+0x8e>
    5164:	682a      	ldr	r2, [r5, #0]
    5166:	2a00      	cmp	r2, #0
    5168:	d003      	beq.n	5172 <__sflush_r+0x8e>
    516a:	2a1d      	cmp	r2, #29
    516c:	d001      	beq.n	5172 <__sflush_r+0x8e>
    516e:	2a16      	cmp	r2, #22
    5170:	d119      	bne.n	51a6 <__sflush_r+0xc2>
    5172:	2200      	movs	r2, #0
    5174:	6062      	str	r2, [r4, #4]
    5176:	6922      	ldr	r2, [r4, #16]
    5178:	6022      	str	r2, [r4, #0]
    517a:	04db      	lsls	r3, r3, #19
    517c:	d505      	bpl.n	518a <__sflush_r+0xa6>
    517e:	1c43      	adds	r3, r0, #1
    5180:	d102      	bne.n	5188 <__sflush_r+0xa4>
    5182:	682b      	ldr	r3, [r5, #0]
    5184:	2b00      	cmp	r3, #0
    5186:	d100      	bne.n	518a <__sflush_r+0xa6>
    5188:	6560      	str	r0, [r4, #84]	; 0x54
    518a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    518c:	602e      	str	r6, [r5, #0]
    518e:	2900      	cmp	r1, #0
    5190:	d0cf      	beq.n	5132 <__sflush_r+0x4e>
    5192:	1c23      	adds	r3, r4, #0
    5194:	3344      	adds	r3, #68	; 0x44
    5196:	4299      	cmp	r1, r3
    5198:	d002      	beq.n	51a0 <__sflush_r+0xbc>
    519a:	1c28      	adds	r0, r5, #0
    519c:	f000 f98e 	bl	54bc <_free_r>
    51a0:	2000      	movs	r0, #0
    51a2:	6360      	str	r0, [r4, #52]	; 0x34
    51a4:	e026      	b.n	51f4 <__sflush_r+0x110>
    51a6:	2240      	movs	r2, #64	; 0x40
    51a8:	4313      	orrs	r3, r2
    51aa:	81a3      	strh	r3, [r4, #12]
    51ac:	e022      	b.n	51f4 <__sflush_r+0x110>
    51ae:	690f      	ldr	r7, [r1, #16]
    51b0:	2f00      	cmp	r7, #0
    51b2:	d0be      	beq.n	5132 <__sflush_r+0x4e>
    51b4:	680b      	ldr	r3, [r1, #0]
    51b6:	600f      	str	r7, [r1, #0]
    51b8:	1bdb      	subs	r3, r3, r7
    51ba:	9301      	str	r3, [sp, #4]
    51bc:	2300      	movs	r3, #0
    51be:	0792      	lsls	r2, r2, #30
    51c0:	d100      	bne.n	51c4 <__sflush_r+0xe0>
    51c2:	694b      	ldr	r3, [r1, #20]
    51c4:	60a3      	str	r3, [r4, #8]
    51c6:	9b01      	ldr	r3, [sp, #4]
    51c8:	2b00      	cmp	r3, #0
    51ca:	ddb2      	ble.n	5132 <__sflush_r+0x4e>
    51cc:	1c28      	adds	r0, r5, #0
    51ce:	6a21      	ldr	r1, [r4, #32]
    51d0:	1c3a      	adds	r2, r7, #0
    51d2:	9b01      	ldr	r3, [sp, #4]
    51d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    51d6:	47b0      	blx	r6
    51d8:	2800      	cmp	r0, #0
    51da:	dc06      	bgt.n	51ea <__sflush_r+0x106>
    51dc:	2240      	movs	r2, #64	; 0x40
    51de:	2001      	movs	r0, #1
    51e0:	89a3      	ldrh	r3, [r4, #12]
    51e2:	4240      	negs	r0, r0
    51e4:	4313      	orrs	r3, r2
    51e6:	81a3      	strh	r3, [r4, #12]
    51e8:	e004      	b.n	51f4 <__sflush_r+0x110>
    51ea:	9b01      	ldr	r3, [sp, #4]
    51ec:	183f      	adds	r7, r7, r0
    51ee:	1a1b      	subs	r3, r3, r0
    51f0:	9301      	str	r3, [sp, #4]
    51f2:	e7e8      	b.n	51c6 <__sflush_r+0xe2>
    51f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000051f8 <_fflush_r>:
    51f8:	b538      	push	{r3, r4, r5, lr}
    51fa:	690b      	ldr	r3, [r1, #16]
    51fc:	1c05      	adds	r5, r0, #0
    51fe:	1c0c      	adds	r4, r1, #0
    5200:	2b00      	cmp	r3, #0
    5202:	d101      	bne.n	5208 <_fflush_r+0x10>
    5204:	2000      	movs	r0, #0
    5206:	e01c      	b.n	5242 <_fflush_r+0x4a>
    5208:	2800      	cmp	r0, #0
    520a:	d004      	beq.n	5216 <_fflush_r+0x1e>
    520c:	6983      	ldr	r3, [r0, #24]
    520e:	2b00      	cmp	r3, #0
    5210:	d101      	bne.n	5216 <_fflush_r+0x1e>
    5212:	f000 f85f 	bl	52d4 <__sinit>
    5216:	4b0b      	ldr	r3, [pc, #44]	; (5244 <_fflush_r+0x4c>)
    5218:	429c      	cmp	r4, r3
    521a:	d101      	bne.n	5220 <_fflush_r+0x28>
    521c:	686c      	ldr	r4, [r5, #4]
    521e:	e008      	b.n	5232 <_fflush_r+0x3a>
    5220:	4b09      	ldr	r3, [pc, #36]	; (5248 <_fflush_r+0x50>)
    5222:	429c      	cmp	r4, r3
    5224:	d101      	bne.n	522a <_fflush_r+0x32>
    5226:	68ac      	ldr	r4, [r5, #8]
    5228:	e003      	b.n	5232 <_fflush_r+0x3a>
    522a:	4b08      	ldr	r3, [pc, #32]	; (524c <_fflush_r+0x54>)
    522c:	429c      	cmp	r4, r3
    522e:	d100      	bne.n	5232 <_fflush_r+0x3a>
    5230:	68ec      	ldr	r4, [r5, #12]
    5232:	220c      	movs	r2, #12
    5234:	5ea3      	ldrsh	r3, [r4, r2]
    5236:	2b00      	cmp	r3, #0
    5238:	d0e4      	beq.n	5204 <_fflush_r+0xc>
    523a:	1c28      	adds	r0, r5, #0
    523c:	1c21      	adds	r1, r4, #0
    523e:	f7ff ff51 	bl	50e4 <__sflush_r>
    5242:	bd38      	pop	{r3, r4, r5, pc}
    5244:	00005fe8 	.word	0x00005fe8
    5248:	00006008 	.word	0x00006008
    524c:	00006028 	.word	0x00006028

00005250 <_cleanup_r>:
    5250:	b508      	push	{r3, lr}
    5252:	4902      	ldr	r1, [pc, #8]	; (525c <_cleanup_r+0xc>)
    5254:	f000 f8ae 	bl	53b4 <_fwalk_reent>
    5258:	bd08      	pop	{r3, pc}
    525a:	46c0      	nop			; (mov r8, r8)
    525c:	000051f9 	.word	0x000051f9

00005260 <std.isra.0>:
    5260:	2300      	movs	r3, #0
    5262:	b510      	push	{r4, lr}
    5264:	1c04      	adds	r4, r0, #0
    5266:	6003      	str	r3, [r0, #0]
    5268:	6043      	str	r3, [r0, #4]
    526a:	6083      	str	r3, [r0, #8]
    526c:	8181      	strh	r1, [r0, #12]
    526e:	6643      	str	r3, [r0, #100]	; 0x64
    5270:	81c2      	strh	r2, [r0, #14]
    5272:	6103      	str	r3, [r0, #16]
    5274:	6143      	str	r3, [r0, #20]
    5276:	6183      	str	r3, [r0, #24]
    5278:	1c19      	adds	r1, r3, #0
    527a:	2208      	movs	r2, #8
    527c:	305c      	adds	r0, #92	; 0x5c
    527e:	f7ff fd0a 	bl	4c96 <memset>
    5282:	4b05      	ldr	r3, [pc, #20]	; (5298 <std.isra.0+0x38>)
    5284:	6224      	str	r4, [r4, #32]
    5286:	6263      	str	r3, [r4, #36]	; 0x24
    5288:	4b04      	ldr	r3, [pc, #16]	; (529c <std.isra.0+0x3c>)
    528a:	62a3      	str	r3, [r4, #40]	; 0x28
    528c:	4b04      	ldr	r3, [pc, #16]	; (52a0 <std.isra.0+0x40>)
    528e:	62e3      	str	r3, [r4, #44]	; 0x2c
    5290:	4b04      	ldr	r3, [pc, #16]	; (52a4 <std.isra.0+0x44>)
    5292:	6323      	str	r3, [r4, #48]	; 0x30
    5294:	bd10      	pop	{r4, pc}
    5296:	46c0      	nop			; (mov r8, r8)
    5298:	00005b99 	.word	0x00005b99
    529c:	00005bc1 	.word	0x00005bc1
    52a0:	00005bf9 	.word	0x00005bf9
    52a4:	00005c25 	.word	0x00005c25

000052a8 <__sfmoreglue>:
    52a8:	b570      	push	{r4, r5, r6, lr}
    52aa:	2568      	movs	r5, #104	; 0x68
    52ac:	1e4b      	subs	r3, r1, #1
    52ae:	435d      	muls	r5, r3
    52b0:	1c0e      	adds	r6, r1, #0
    52b2:	1c29      	adds	r1, r5, #0
    52b4:	3174      	adds	r1, #116	; 0x74
    52b6:	f000 f947 	bl	5548 <_malloc_r>
    52ba:	1e04      	subs	r4, r0, #0
    52bc:	d008      	beq.n	52d0 <__sfmoreglue+0x28>
    52be:	2100      	movs	r1, #0
    52c0:	1c2a      	adds	r2, r5, #0
    52c2:	6001      	str	r1, [r0, #0]
    52c4:	6046      	str	r6, [r0, #4]
    52c6:	300c      	adds	r0, #12
    52c8:	60a0      	str	r0, [r4, #8]
    52ca:	3268      	adds	r2, #104	; 0x68
    52cc:	f7ff fce3 	bl	4c96 <memset>
    52d0:	1c20      	adds	r0, r4, #0
    52d2:	bd70      	pop	{r4, r5, r6, pc}

000052d4 <__sinit>:
    52d4:	6983      	ldr	r3, [r0, #24]
    52d6:	b513      	push	{r0, r1, r4, lr}
    52d8:	2b00      	cmp	r3, #0
    52da:	d128      	bne.n	532e <__sinit+0x5a>
    52dc:	6483      	str	r3, [r0, #72]	; 0x48
    52de:	64c3      	str	r3, [r0, #76]	; 0x4c
    52e0:	6503      	str	r3, [r0, #80]	; 0x50
    52e2:	4b13      	ldr	r3, [pc, #76]	; (5330 <__sinit+0x5c>)
    52e4:	4a13      	ldr	r2, [pc, #76]	; (5334 <__sinit+0x60>)
    52e6:	681b      	ldr	r3, [r3, #0]
    52e8:	6282      	str	r2, [r0, #40]	; 0x28
    52ea:	9301      	str	r3, [sp, #4]
    52ec:	4298      	cmp	r0, r3
    52ee:	d101      	bne.n	52f4 <__sinit+0x20>
    52f0:	2301      	movs	r3, #1
    52f2:	6183      	str	r3, [r0, #24]
    52f4:	1c04      	adds	r4, r0, #0
    52f6:	f000 f81f 	bl	5338 <__sfp>
    52fa:	6060      	str	r0, [r4, #4]
    52fc:	1c20      	adds	r0, r4, #0
    52fe:	f000 f81b 	bl	5338 <__sfp>
    5302:	60a0      	str	r0, [r4, #8]
    5304:	1c20      	adds	r0, r4, #0
    5306:	f000 f817 	bl	5338 <__sfp>
    530a:	2104      	movs	r1, #4
    530c:	60e0      	str	r0, [r4, #12]
    530e:	2200      	movs	r2, #0
    5310:	6860      	ldr	r0, [r4, #4]
    5312:	f7ff ffa5 	bl	5260 <std.isra.0>
    5316:	68a0      	ldr	r0, [r4, #8]
    5318:	2109      	movs	r1, #9
    531a:	2201      	movs	r2, #1
    531c:	f7ff ffa0 	bl	5260 <std.isra.0>
    5320:	68e0      	ldr	r0, [r4, #12]
    5322:	2112      	movs	r1, #18
    5324:	2202      	movs	r2, #2
    5326:	f7ff ff9b 	bl	5260 <std.isra.0>
    532a:	2301      	movs	r3, #1
    532c:	61a3      	str	r3, [r4, #24]
    532e:	bd13      	pop	{r0, r1, r4, pc}
    5330:	00005fe4 	.word	0x00005fe4
    5334:	00005251 	.word	0x00005251

00005338 <__sfp>:
    5338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    533a:	4b1d      	ldr	r3, [pc, #116]	; (53b0 <__sfp+0x78>)
    533c:	1c06      	adds	r6, r0, #0
    533e:	681d      	ldr	r5, [r3, #0]
    5340:	69ab      	ldr	r3, [r5, #24]
    5342:	2b00      	cmp	r3, #0
    5344:	d102      	bne.n	534c <__sfp+0x14>
    5346:	1c28      	adds	r0, r5, #0
    5348:	f7ff ffc4 	bl	52d4 <__sinit>
    534c:	3548      	adds	r5, #72	; 0x48
    534e:	68ac      	ldr	r4, [r5, #8]
    5350:	686b      	ldr	r3, [r5, #4]
    5352:	3b01      	subs	r3, #1
    5354:	d405      	bmi.n	5362 <__sfp+0x2a>
    5356:	220c      	movs	r2, #12
    5358:	5ea7      	ldrsh	r7, [r4, r2]
    535a:	2f00      	cmp	r7, #0
    535c:	d010      	beq.n	5380 <__sfp+0x48>
    535e:	3468      	adds	r4, #104	; 0x68
    5360:	e7f7      	b.n	5352 <__sfp+0x1a>
    5362:	682b      	ldr	r3, [r5, #0]
    5364:	2b00      	cmp	r3, #0
    5366:	d106      	bne.n	5376 <__sfp+0x3e>
    5368:	1c30      	adds	r0, r6, #0
    536a:	2104      	movs	r1, #4
    536c:	f7ff ff9c 	bl	52a8 <__sfmoreglue>
    5370:	6028      	str	r0, [r5, #0]
    5372:	2800      	cmp	r0, #0
    5374:	d001      	beq.n	537a <__sfp+0x42>
    5376:	682d      	ldr	r5, [r5, #0]
    5378:	e7e9      	b.n	534e <__sfp+0x16>
    537a:	230c      	movs	r3, #12
    537c:	6033      	str	r3, [r6, #0]
    537e:	e016      	b.n	53ae <__sfp+0x76>
    5380:	2301      	movs	r3, #1
    5382:	1c20      	adds	r0, r4, #0
    5384:	425b      	negs	r3, r3
    5386:	81e3      	strh	r3, [r4, #14]
    5388:	3302      	adds	r3, #2
    538a:	81a3      	strh	r3, [r4, #12]
    538c:	6667      	str	r7, [r4, #100]	; 0x64
    538e:	6027      	str	r7, [r4, #0]
    5390:	60a7      	str	r7, [r4, #8]
    5392:	6067      	str	r7, [r4, #4]
    5394:	6127      	str	r7, [r4, #16]
    5396:	6167      	str	r7, [r4, #20]
    5398:	61a7      	str	r7, [r4, #24]
    539a:	305c      	adds	r0, #92	; 0x5c
    539c:	1c39      	adds	r1, r7, #0
    539e:	2208      	movs	r2, #8
    53a0:	f7ff fc79 	bl	4c96 <memset>
    53a4:	1c20      	adds	r0, r4, #0
    53a6:	6367      	str	r7, [r4, #52]	; 0x34
    53a8:	63a7      	str	r7, [r4, #56]	; 0x38
    53aa:	64a7      	str	r7, [r4, #72]	; 0x48
    53ac:	64e7      	str	r7, [r4, #76]	; 0x4c
    53ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53b0:	00005fe4 	.word	0x00005fe4

000053b4 <_fwalk_reent>:
    53b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    53b6:	1c04      	adds	r4, r0, #0
    53b8:	1c07      	adds	r7, r0, #0
    53ba:	2600      	movs	r6, #0
    53bc:	9101      	str	r1, [sp, #4]
    53be:	3448      	adds	r4, #72	; 0x48
    53c0:	2c00      	cmp	r4, #0
    53c2:	d016      	beq.n	53f2 <_fwalk_reent+0x3e>
    53c4:	6863      	ldr	r3, [r4, #4]
    53c6:	68a5      	ldr	r5, [r4, #8]
    53c8:	9300      	str	r3, [sp, #0]
    53ca:	9b00      	ldr	r3, [sp, #0]
    53cc:	3b01      	subs	r3, #1
    53ce:	9300      	str	r3, [sp, #0]
    53d0:	d40d      	bmi.n	53ee <_fwalk_reent+0x3a>
    53d2:	89ab      	ldrh	r3, [r5, #12]
    53d4:	2b01      	cmp	r3, #1
    53d6:	d908      	bls.n	53ea <_fwalk_reent+0x36>
    53d8:	220e      	movs	r2, #14
    53da:	5eab      	ldrsh	r3, [r5, r2]
    53dc:	3301      	adds	r3, #1
    53de:	d004      	beq.n	53ea <_fwalk_reent+0x36>
    53e0:	1c38      	adds	r0, r7, #0
    53e2:	1c29      	adds	r1, r5, #0
    53e4:	9b01      	ldr	r3, [sp, #4]
    53e6:	4798      	blx	r3
    53e8:	4306      	orrs	r6, r0
    53ea:	3568      	adds	r5, #104	; 0x68
    53ec:	e7ed      	b.n	53ca <_fwalk_reent+0x16>
    53ee:	6824      	ldr	r4, [r4, #0]
    53f0:	e7e6      	b.n	53c0 <_fwalk_reent+0xc>
    53f2:	1c30      	adds	r0, r6, #0
    53f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000053f8 <__smakebuf_r>:
    53f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    53fa:	898b      	ldrh	r3, [r1, #12]
    53fc:	b091      	sub	sp, #68	; 0x44
    53fe:	079b      	lsls	r3, r3, #30
    5400:	d506      	bpl.n	5410 <__smakebuf_r+0x18>
    5402:	1c0b      	adds	r3, r1, #0
    5404:	3347      	adds	r3, #71	; 0x47
    5406:	600b      	str	r3, [r1, #0]
    5408:	610b      	str	r3, [r1, #16]
    540a:	2301      	movs	r3, #1
    540c:	614b      	str	r3, [r1, #20]
    540e:	e045      	b.n	549c <__smakebuf_r+0xa4>
    5410:	1c0c      	adds	r4, r1, #0
    5412:	230e      	movs	r3, #14
    5414:	5ec9      	ldrsh	r1, [r1, r3]
    5416:	1c06      	adds	r6, r0, #0
    5418:	2900      	cmp	r1, #0
    541a:	da04      	bge.n	5426 <__smakebuf_r+0x2e>
    541c:	2380      	movs	r3, #128	; 0x80
    541e:	89a5      	ldrh	r5, [r4, #12]
    5420:	401d      	ands	r5, r3
    5422:	d110      	bne.n	5446 <__smakebuf_r+0x4e>
    5424:	e00c      	b.n	5440 <__smakebuf_r+0x48>
    5426:	aa01      	add	r2, sp, #4
    5428:	f000 fc28 	bl	5c7c <_fstat_r>
    542c:	2800      	cmp	r0, #0
    542e:	dbf5      	blt.n	541c <__smakebuf_r+0x24>
    5430:	23f0      	movs	r3, #240	; 0xf0
    5432:	9d02      	ldr	r5, [sp, #8]
    5434:	021b      	lsls	r3, r3, #8
    5436:	401d      	ands	r5, r3
    5438:	4b19      	ldr	r3, [pc, #100]	; (54a0 <__smakebuf_r+0xa8>)
    543a:	18ed      	adds	r5, r5, r3
    543c:	426b      	negs	r3, r5
    543e:	415d      	adcs	r5, r3
    5440:	2780      	movs	r7, #128	; 0x80
    5442:	00ff      	lsls	r7, r7, #3
    5444:	e001      	b.n	544a <__smakebuf_r+0x52>
    5446:	2500      	movs	r5, #0
    5448:	2740      	movs	r7, #64	; 0x40
    544a:	1c30      	adds	r0, r6, #0
    544c:	1c39      	adds	r1, r7, #0
    544e:	f000 f87b 	bl	5548 <_malloc_r>
    5452:	2800      	cmp	r0, #0
    5454:	d10c      	bne.n	5470 <__smakebuf_r+0x78>
    5456:	89a3      	ldrh	r3, [r4, #12]
    5458:	059a      	lsls	r2, r3, #22
    545a:	d41f      	bmi.n	549c <__smakebuf_r+0xa4>
    545c:	2202      	movs	r2, #2
    545e:	4313      	orrs	r3, r2
    5460:	81a3      	strh	r3, [r4, #12]
    5462:	1c23      	adds	r3, r4, #0
    5464:	3347      	adds	r3, #71	; 0x47
    5466:	6023      	str	r3, [r4, #0]
    5468:	6123      	str	r3, [r4, #16]
    546a:	2301      	movs	r3, #1
    546c:	6163      	str	r3, [r4, #20]
    546e:	e015      	b.n	549c <__smakebuf_r+0xa4>
    5470:	2280      	movs	r2, #128	; 0x80
    5472:	4b0c      	ldr	r3, [pc, #48]	; (54a4 <__smakebuf_r+0xac>)
    5474:	62b3      	str	r3, [r6, #40]	; 0x28
    5476:	89a3      	ldrh	r3, [r4, #12]
    5478:	6020      	str	r0, [r4, #0]
    547a:	4313      	orrs	r3, r2
    547c:	81a3      	strh	r3, [r4, #12]
    547e:	6120      	str	r0, [r4, #16]
    5480:	6167      	str	r7, [r4, #20]
    5482:	2d00      	cmp	r5, #0
    5484:	d00a      	beq.n	549c <__smakebuf_r+0xa4>
    5486:	230e      	movs	r3, #14
    5488:	5ee1      	ldrsh	r1, [r4, r3]
    548a:	1c30      	adds	r0, r6, #0
    548c:	f000 fc08 	bl	5ca0 <_isatty_r>
    5490:	2800      	cmp	r0, #0
    5492:	d003      	beq.n	549c <__smakebuf_r+0xa4>
    5494:	2201      	movs	r2, #1
    5496:	89a3      	ldrh	r3, [r4, #12]
    5498:	4313      	orrs	r3, r2
    549a:	81a3      	strh	r3, [r4, #12]
    549c:	b011      	add	sp, #68	; 0x44
    549e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54a0:	ffffe000 	.word	0xffffe000
    54a4:	00005251 	.word	0x00005251

000054a8 <malloc>:
    54a8:	b508      	push	{r3, lr}
    54aa:	4b03      	ldr	r3, [pc, #12]	; (54b8 <malloc+0x10>)
    54ac:	1c01      	adds	r1, r0, #0
    54ae:	6818      	ldr	r0, [r3, #0]
    54b0:	f000 f84a 	bl	5548 <_malloc_r>
    54b4:	bd08      	pop	{r3, pc}
    54b6:	46c0      	nop			; (mov r8, r8)
    54b8:	2000006c 	.word	0x2000006c

000054bc <_free_r>:
    54bc:	b530      	push	{r4, r5, lr}
    54be:	2900      	cmp	r1, #0
    54c0:	d03e      	beq.n	5540 <_free_r+0x84>
    54c2:	3904      	subs	r1, #4
    54c4:	680b      	ldr	r3, [r1, #0]
    54c6:	2b00      	cmp	r3, #0
    54c8:	da00      	bge.n	54cc <_free_r+0x10>
    54ca:	18c9      	adds	r1, r1, r3
    54cc:	4a1d      	ldr	r2, [pc, #116]	; (5544 <_free_r+0x88>)
    54ce:	6813      	ldr	r3, [r2, #0]
    54d0:	1c14      	adds	r4, r2, #0
    54d2:	2b00      	cmp	r3, #0
    54d4:	d102      	bne.n	54dc <_free_r+0x20>
    54d6:	604b      	str	r3, [r1, #4]
    54d8:	6011      	str	r1, [r2, #0]
    54da:	e031      	b.n	5540 <_free_r+0x84>
    54dc:	4299      	cmp	r1, r3
    54de:	d20d      	bcs.n	54fc <_free_r+0x40>
    54e0:	6808      	ldr	r0, [r1, #0]
    54e2:	180a      	adds	r2, r1, r0
    54e4:	429a      	cmp	r2, r3
    54e6:	d103      	bne.n	54f0 <_free_r+0x34>
    54e8:	6813      	ldr	r3, [r2, #0]
    54ea:	18c3      	adds	r3, r0, r3
    54ec:	600b      	str	r3, [r1, #0]
    54ee:	6853      	ldr	r3, [r2, #4]
    54f0:	604b      	str	r3, [r1, #4]
    54f2:	6021      	str	r1, [r4, #0]
    54f4:	e024      	b.n	5540 <_free_r+0x84>
    54f6:	428a      	cmp	r2, r1
    54f8:	d803      	bhi.n	5502 <_free_r+0x46>
    54fa:	1c13      	adds	r3, r2, #0
    54fc:	685a      	ldr	r2, [r3, #4]
    54fe:	2a00      	cmp	r2, #0
    5500:	d1f9      	bne.n	54f6 <_free_r+0x3a>
    5502:	681d      	ldr	r5, [r3, #0]
    5504:	195c      	adds	r4, r3, r5
    5506:	428c      	cmp	r4, r1
    5508:	d10b      	bne.n	5522 <_free_r+0x66>
    550a:	6809      	ldr	r1, [r1, #0]
    550c:	1869      	adds	r1, r5, r1
    550e:	1858      	adds	r0, r3, r1
    5510:	6019      	str	r1, [r3, #0]
    5512:	4290      	cmp	r0, r2
    5514:	d114      	bne.n	5540 <_free_r+0x84>
    5516:	6810      	ldr	r0, [r2, #0]
    5518:	6852      	ldr	r2, [r2, #4]
    551a:	1809      	adds	r1, r1, r0
    551c:	6019      	str	r1, [r3, #0]
    551e:	605a      	str	r2, [r3, #4]
    5520:	e00e      	b.n	5540 <_free_r+0x84>
    5522:	428c      	cmp	r4, r1
    5524:	d902      	bls.n	552c <_free_r+0x70>
    5526:	230c      	movs	r3, #12
    5528:	6003      	str	r3, [r0, #0]
    552a:	e009      	b.n	5540 <_free_r+0x84>
    552c:	6808      	ldr	r0, [r1, #0]
    552e:	180c      	adds	r4, r1, r0
    5530:	4294      	cmp	r4, r2
    5532:	d103      	bne.n	553c <_free_r+0x80>
    5534:	6814      	ldr	r4, [r2, #0]
    5536:	6852      	ldr	r2, [r2, #4]
    5538:	1900      	adds	r0, r0, r4
    553a:	6008      	str	r0, [r1, #0]
    553c:	604a      	str	r2, [r1, #4]
    553e:	6059      	str	r1, [r3, #4]
    5540:	bd30      	pop	{r4, r5, pc}
    5542:	46c0      	nop			; (mov r8, r8)
    5544:	20000c30 	.word	0x20000c30

00005548 <_malloc_r>:
    5548:	2303      	movs	r3, #3
    554a:	b570      	push	{r4, r5, r6, lr}
    554c:	1ccc      	adds	r4, r1, #3
    554e:	439c      	bics	r4, r3
    5550:	3408      	adds	r4, #8
    5552:	1c05      	adds	r5, r0, #0
    5554:	2c0c      	cmp	r4, #12
    5556:	d201      	bcs.n	555c <_malloc_r+0x14>
    5558:	240c      	movs	r4, #12
    555a:	e005      	b.n	5568 <_malloc_r+0x20>
    555c:	2c00      	cmp	r4, #0
    555e:	da03      	bge.n	5568 <_malloc_r+0x20>
    5560:	230c      	movs	r3, #12
    5562:	2000      	movs	r0, #0
    5564:	602b      	str	r3, [r5, #0]
    5566:	e042      	b.n	55ee <_malloc_r+0xa6>
    5568:	428c      	cmp	r4, r1
    556a:	d3f9      	bcc.n	5560 <_malloc_r+0x18>
    556c:	4a20      	ldr	r2, [pc, #128]	; (55f0 <_malloc_r+0xa8>)
    556e:	6813      	ldr	r3, [r2, #0]
    5570:	1c10      	adds	r0, r2, #0
    5572:	1c19      	adds	r1, r3, #0
    5574:	2900      	cmp	r1, #0
    5576:	d013      	beq.n	55a0 <_malloc_r+0x58>
    5578:	680a      	ldr	r2, [r1, #0]
    557a:	1b12      	subs	r2, r2, r4
    557c:	d40d      	bmi.n	559a <_malloc_r+0x52>
    557e:	2a0b      	cmp	r2, #11
    5580:	d902      	bls.n	5588 <_malloc_r+0x40>
    5582:	600a      	str	r2, [r1, #0]
    5584:	188b      	adds	r3, r1, r2
    5586:	e01f      	b.n	55c8 <_malloc_r+0x80>
    5588:	428b      	cmp	r3, r1
    558a:	d102      	bne.n	5592 <_malloc_r+0x4a>
    558c:	685a      	ldr	r2, [r3, #4]
    558e:	6002      	str	r2, [r0, #0]
    5590:	e01b      	b.n	55ca <_malloc_r+0x82>
    5592:	684a      	ldr	r2, [r1, #4]
    5594:	605a      	str	r2, [r3, #4]
    5596:	1c0b      	adds	r3, r1, #0
    5598:	e017      	b.n	55ca <_malloc_r+0x82>
    559a:	1c0b      	adds	r3, r1, #0
    559c:	6849      	ldr	r1, [r1, #4]
    559e:	e7e9      	b.n	5574 <_malloc_r+0x2c>
    55a0:	4e14      	ldr	r6, [pc, #80]	; (55f4 <_malloc_r+0xac>)
    55a2:	6833      	ldr	r3, [r6, #0]
    55a4:	2b00      	cmp	r3, #0
    55a6:	d103      	bne.n	55b0 <_malloc_r+0x68>
    55a8:	1c28      	adds	r0, r5, #0
    55aa:	f000 fae3 	bl	5b74 <_sbrk_r>
    55ae:	6030      	str	r0, [r6, #0]
    55b0:	1c28      	adds	r0, r5, #0
    55b2:	1c21      	adds	r1, r4, #0
    55b4:	f000 fade 	bl	5b74 <_sbrk_r>
    55b8:	1c03      	adds	r3, r0, #0
    55ba:	1c42      	adds	r2, r0, #1
    55bc:	d0d0      	beq.n	5560 <_malloc_r+0x18>
    55be:	2203      	movs	r2, #3
    55c0:	1cc6      	adds	r6, r0, #3
    55c2:	4396      	bics	r6, r2
    55c4:	4286      	cmp	r6, r0
    55c6:	d10a      	bne.n	55de <_malloc_r+0x96>
    55c8:	601c      	str	r4, [r3, #0]
    55ca:	1c18      	adds	r0, r3, #0
    55cc:	2107      	movs	r1, #7
    55ce:	300b      	adds	r0, #11
    55d0:	1d1a      	adds	r2, r3, #4
    55d2:	4388      	bics	r0, r1
    55d4:	1a82      	subs	r2, r0, r2
    55d6:	d00a      	beq.n	55ee <_malloc_r+0xa6>
    55d8:	4251      	negs	r1, r2
    55da:	5099      	str	r1, [r3, r2]
    55dc:	e007      	b.n	55ee <_malloc_r+0xa6>
    55de:	1a31      	subs	r1, r6, r0
    55e0:	1c28      	adds	r0, r5, #0
    55e2:	f000 fac7 	bl	5b74 <_sbrk_r>
    55e6:	1c43      	adds	r3, r0, #1
    55e8:	d0ba      	beq.n	5560 <_malloc_r+0x18>
    55ea:	1c33      	adds	r3, r6, #0
    55ec:	e7ec      	b.n	55c8 <_malloc_r+0x80>
    55ee:	bd70      	pop	{r4, r5, r6, pc}
    55f0:	20000c30 	.word	0x20000c30
    55f4:	20000c2c 	.word	0x20000c2c

000055f8 <__sfputc_r>:
    55f8:	6893      	ldr	r3, [r2, #8]
    55fa:	b510      	push	{r4, lr}
    55fc:	3b01      	subs	r3, #1
    55fe:	6093      	str	r3, [r2, #8]
    5600:	2b00      	cmp	r3, #0
    5602:	da05      	bge.n	5610 <__sfputc_r+0x18>
    5604:	6994      	ldr	r4, [r2, #24]
    5606:	42a3      	cmp	r3, r4
    5608:	db08      	blt.n	561c <__sfputc_r+0x24>
    560a:	b2cb      	uxtb	r3, r1
    560c:	2b0a      	cmp	r3, #10
    560e:	d005      	beq.n	561c <__sfputc_r+0x24>
    5610:	6813      	ldr	r3, [r2, #0]
    5612:	1c58      	adds	r0, r3, #1
    5614:	6010      	str	r0, [r2, #0]
    5616:	7019      	strb	r1, [r3, #0]
    5618:	b2c8      	uxtb	r0, r1
    561a:	e001      	b.n	5620 <__sfputc_r+0x28>
    561c:	f7ff fc96 	bl	4f4c <__swbuf_r>
    5620:	bd10      	pop	{r4, pc}

00005622 <__sfputs_r>:
    5622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5624:	1c06      	adds	r6, r0, #0
    5626:	1c0f      	adds	r7, r1, #0
    5628:	1c14      	adds	r4, r2, #0
    562a:	18d5      	adds	r5, r2, r3
    562c:	42ac      	cmp	r4, r5
    562e:	d008      	beq.n	5642 <__sfputs_r+0x20>
    5630:	7821      	ldrb	r1, [r4, #0]
    5632:	1c30      	adds	r0, r6, #0
    5634:	1c3a      	adds	r2, r7, #0
    5636:	f7ff ffdf 	bl	55f8 <__sfputc_r>
    563a:	3401      	adds	r4, #1
    563c:	1c43      	adds	r3, r0, #1
    563e:	d1f5      	bne.n	562c <__sfputs_r+0xa>
    5640:	e000      	b.n	5644 <__sfputs_r+0x22>
    5642:	2000      	movs	r0, #0
    5644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005648 <_vfiprintf_r>:
    5648:	b5f0      	push	{r4, r5, r6, r7, lr}
    564a:	b09f      	sub	sp, #124	; 0x7c
    564c:	1c06      	adds	r6, r0, #0
    564e:	1c0f      	adds	r7, r1, #0
    5650:	9202      	str	r2, [sp, #8]
    5652:	9305      	str	r3, [sp, #20]
    5654:	2800      	cmp	r0, #0
    5656:	d004      	beq.n	5662 <_vfiprintf_r+0x1a>
    5658:	6983      	ldr	r3, [r0, #24]
    565a:	2b00      	cmp	r3, #0
    565c:	d101      	bne.n	5662 <_vfiprintf_r+0x1a>
    565e:	f7ff fe39 	bl	52d4 <__sinit>
    5662:	4b79      	ldr	r3, [pc, #484]	; (5848 <_vfiprintf_r+0x200>)
    5664:	429f      	cmp	r7, r3
    5666:	d101      	bne.n	566c <_vfiprintf_r+0x24>
    5668:	6877      	ldr	r7, [r6, #4]
    566a:	e008      	b.n	567e <_vfiprintf_r+0x36>
    566c:	4b77      	ldr	r3, [pc, #476]	; (584c <_vfiprintf_r+0x204>)
    566e:	429f      	cmp	r7, r3
    5670:	d101      	bne.n	5676 <_vfiprintf_r+0x2e>
    5672:	68b7      	ldr	r7, [r6, #8]
    5674:	e003      	b.n	567e <_vfiprintf_r+0x36>
    5676:	4b76      	ldr	r3, [pc, #472]	; (5850 <_vfiprintf_r+0x208>)
    5678:	429f      	cmp	r7, r3
    567a:	d100      	bne.n	567e <_vfiprintf_r+0x36>
    567c:	68f7      	ldr	r7, [r6, #12]
    567e:	89bb      	ldrh	r3, [r7, #12]
    5680:	071b      	lsls	r3, r3, #28
    5682:	d50a      	bpl.n	569a <_vfiprintf_r+0x52>
    5684:	693b      	ldr	r3, [r7, #16]
    5686:	2b00      	cmp	r3, #0
    5688:	d007      	beq.n	569a <_vfiprintf_r+0x52>
    568a:	2300      	movs	r3, #0
    568c:	ad06      	add	r5, sp, #24
    568e:	616b      	str	r3, [r5, #20]
    5690:	3320      	adds	r3, #32
    5692:	766b      	strb	r3, [r5, #25]
    5694:	3310      	adds	r3, #16
    5696:	76ab      	strb	r3, [r5, #26]
    5698:	e03d      	b.n	5716 <_vfiprintf_r+0xce>
    569a:	1c30      	adds	r0, r6, #0
    569c:	1c39      	adds	r1, r7, #0
    569e:	f7ff fcad 	bl	4ffc <__swsetup_r>
    56a2:	2800      	cmp	r0, #0
    56a4:	d0f1      	beq.n	568a <_vfiprintf_r+0x42>
    56a6:	2001      	movs	r0, #1
    56a8:	4240      	negs	r0, r0
    56aa:	e0ca      	b.n	5842 <_vfiprintf_r+0x1fa>
    56ac:	9a05      	ldr	r2, [sp, #20]
    56ae:	1d11      	adds	r1, r2, #4
    56b0:	6812      	ldr	r2, [r2, #0]
    56b2:	9105      	str	r1, [sp, #20]
    56b4:	2a00      	cmp	r2, #0
    56b6:	db7e      	blt.n	57b6 <_vfiprintf_r+0x16e>
    56b8:	9209      	str	r2, [sp, #36]	; 0x24
    56ba:	3401      	adds	r4, #1
    56bc:	7823      	ldrb	r3, [r4, #0]
    56be:	2b2e      	cmp	r3, #46	; 0x2e
    56c0:	d100      	bne.n	56c4 <_vfiprintf_r+0x7c>
    56c2:	e089      	b.n	57d8 <_vfiprintf_r+0x190>
    56c4:	7821      	ldrb	r1, [r4, #0]
    56c6:	4863      	ldr	r0, [pc, #396]	; (5854 <_vfiprintf_r+0x20c>)
    56c8:	2203      	movs	r2, #3
    56ca:	f000 fb0f 	bl	5cec <memchr>
    56ce:	2800      	cmp	r0, #0
    56d0:	d008      	beq.n	56e4 <_vfiprintf_r+0x9c>
    56d2:	4b60      	ldr	r3, [pc, #384]	; (5854 <_vfiprintf_r+0x20c>)
    56d4:	3401      	adds	r4, #1
    56d6:	1ac0      	subs	r0, r0, r3
    56d8:	2340      	movs	r3, #64	; 0x40
    56da:	4083      	lsls	r3, r0
    56dc:	1c18      	adds	r0, r3, #0
    56de:	682b      	ldr	r3, [r5, #0]
    56e0:	4318      	orrs	r0, r3
    56e2:	6028      	str	r0, [r5, #0]
    56e4:	7821      	ldrb	r1, [r4, #0]
    56e6:	1c63      	adds	r3, r4, #1
    56e8:	485b      	ldr	r0, [pc, #364]	; (5858 <_vfiprintf_r+0x210>)
    56ea:	2206      	movs	r2, #6
    56ec:	9302      	str	r3, [sp, #8]
    56ee:	7629      	strb	r1, [r5, #24]
    56f0:	f000 fafc 	bl	5cec <memchr>
    56f4:	2800      	cmp	r0, #0
    56f6:	d100      	bne.n	56fa <_vfiprintf_r+0xb2>
    56f8:	e091      	b.n	581e <_vfiprintf_r+0x1d6>
    56fa:	4b58      	ldr	r3, [pc, #352]	; (585c <_vfiprintf_r+0x214>)
    56fc:	2b00      	cmp	r3, #0
    56fe:	d000      	beq.n	5702 <_vfiprintf_r+0xba>
    5700:	e084      	b.n	580c <_vfiprintf_r+0x1c4>
    5702:	2207      	movs	r2, #7
    5704:	9b05      	ldr	r3, [sp, #20]
    5706:	3307      	adds	r3, #7
    5708:	4393      	bics	r3, r2
    570a:	3308      	adds	r3, #8
    570c:	9305      	str	r3, [sp, #20]
    570e:	696b      	ldr	r3, [r5, #20]
    5710:	9a03      	ldr	r2, [sp, #12]
    5712:	189b      	adds	r3, r3, r2
    5714:	616b      	str	r3, [r5, #20]
    5716:	9c02      	ldr	r4, [sp, #8]
    5718:	7823      	ldrb	r3, [r4, #0]
    571a:	2b00      	cmp	r3, #0
    571c:	d104      	bne.n	5728 <_vfiprintf_r+0xe0>
    571e:	9b02      	ldr	r3, [sp, #8]
    5720:	1ae3      	subs	r3, r4, r3
    5722:	9304      	str	r3, [sp, #16]
    5724:	d011      	beq.n	574a <_vfiprintf_r+0x102>
    5726:	e003      	b.n	5730 <_vfiprintf_r+0xe8>
    5728:	2b25      	cmp	r3, #37	; 0x25
    572a:	d0f8      	beq.n	571e <_vfiprintf_r+0xd6>
    572c:	3401      	adds	r4, #1
    572e:	e7f3      	b.n	5718 <_vfiprintf_r+0xd0>
    5730:	9b04      	ldr	r3, [sp, #16]
    5732:	1c30      	adds	r0, r6, #0
    5734:	1c39      	adds	r1, r7, #0
    5736:	9a02      	ldr	r2, [sp, #8]
    5738:	f7ff ff73 	bl	5622 <__sfputs_r>
    573c:	1c43      	adds	r3, r0, #1
    573e:	d07b      	beq.n	5838 <_vfiprintf_r+0x1f0>
    5740:	696a      	ldr	r2, [r5, #20]
    5742:	9b04      	ldr	r3, [sp, #16]
    5744:	4694      	mov	ip, r2
    5746:	4463      	add	r3, ip
    5748:	616b      	str	r3, [r5, #20]
    574a:	7823      	ldrb	r3, [r4, #0]
    574c:	2b00      	cmp	r3, #0
    574e:	d073      	beq.n	5838 <_vfiprintf_r+0x1f0>
    5750:	2201      	movs	r2, #1
    5752:	2300      	movs	r3, #0
    5754:	4252      	negs	r2, r2
    5756:	606a      	str	r2, [r5, #4]
    5758:	a902      	add	r1, sp, #8
    575a:	3254      	adds	r2, #84	; 0x54
    575c:	1852      	adds	r2, r2, r1
    575e:	3401      	adds	r4, #1
    5760:	602b      	str	r3, [r5, #0]
    5762:	60eb      	str	r3, [r5, #12]
    5764:	60ab      	str	r3, [r5, #8]
    5766:	7013      	strb	r3, [r2, #0]
    5768:	65ab      	str	r3, [r5, #88]	; 0x58
    576a:	7821      	ldrb	r1, [r4, #0]
    576c:	483c      	ldr	r0, [pc, #240]	; (5860 <_vfiprintf_r+0x218>)
    576e:	2205      	movs	r2, #5
    5770:	f000 fabc 	bl	5cec <memchr>
    5774:	2800      	cmp	r0, #0
    5776:	d009      	beq.n	578c <_vfiprintf_r+0x144>
    5778:	4b39      	ldr	r3, [pc, #228]	; (5860 <_vfiprintf_r+0x218>)
    577a:	3401      	adds	r4, #1
    577c:	1ac0      	subs	r0, r0, r3
    577e:	2301      	movs	r3, #1
    5780:	4083      	lsls	r3, r0
    5782:	1c18      	adds	r0, r3, #0
    5784:	682b      	ldr	r3, [r5, #0]
    5786:	4318      	orrs	r0, r3
    5788:	6028      	str	r0, [r5, #0]
    578a:	e7ee      	b.n	576a <_vfiprintf_r+0x122>
    578c:	682b      	ldr	r3, [r5, #0]
    578e:	06da      	lsls	r2, r3, #27
    5790:	d504      	bpl.n	579c <_vfiprintf_r+0x154>
    5792:	2253      	movs	r2, #83	; 0x53
    5794:	2120      	movs	r1, #32
    5796:	a802      	add	r0, sp, #8
    5798:	1812      	adds	r2, r2, r0
    579a:	7011      	strb	r1, [r2, #0]
    579c:	071a      	lsls	r2, r3, #28
    579e:	d504      	bpl.n	57aa <_vfiprintf_r+0x162>
    57a0:	2253      	movs	r2, #83	; 0x53
    57a2:	212b      	movs	r1, #43	; 0x2b
    57a4:	a802      	add	r0, sp, #8
    57a6:	1812      	adds	r2, r2, r0
    57a8:	7011      	strb	r1, [r2, #0]
    57aa:	7822      	ldrb	r2, [r4, #0]
    57ac:	2a2a      	cmp	r2, #42	; 0x2a
    57ae:	d100      	bne.n	57b2 <_vfiprintf_r+0x16a>
    57b0:	e77c      	b.n	56ac <_vfiprintf_r+0x64>
    57b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    57b4:	e005      	b.n	57c2 <_vfiprintf_r+0x17a>
    57b6:	4252      	negs	r2, r2
    57b8:	60ea      	str	r2, [r5, #12]
    57ba:	2202      	movs	r2, #2
    57bc:	4313      	orrs	r3, r2
    57be:	602b      	str	r3, [r5, #0]
    57c0:	e77b      	b.n	56ba <_vfiprintf_r+0x72>
    57c2:	7822      	ldrb	r2, [r4, #0]
    57c4:	3a30      	subs	r2, #48	; 0x30
    57c6:	2a09      	cmp	r2, #9
    57c8:	d804      	bhi.n	57d4 <_vfiprintf_r+0x18c>
    57ca:	210a      	movs	r1, #10
    57cc:	434b      	muls	r3, r1
    57ce:	3401      	adds	r4, #1
    57d0:	189b      	adds	r3, r3, r2
    57d2:	e7f6      	b.n	57c2 <_vfiprintf_r+0x17a>
    57d4:	9309      	str	r3, [sp, #36]	; 0x24
    57d6:	e771      	b.n	56bc <_vfiprintf_r+0x74>
    57d8:	7863      	ldrb	r3, [r4, #1]
    57da:	2b2a      	cmp	r3, #42	; 0x2a
    57dc:	d109      	bne.n	57f2 <_vfiprintf_r+0x1aa>
    57de:	9b05      	ldr	r3, [sp, #20]
    57e0:	3402      	adds	r4, #2
    57e2:	1d1a      	adds	r2, r3, #4
    57e4:	681b      	ldr	r3, [r3, #0]
    57e6:	9205      	str	r2, [sp, #20]
    57e8:	2b00      	cmp	r3, #0
    57ea:	da0d      	bge.n	5808 <_vfiprintf_r+0x1c0>
    57ec:	2301      	movs	r3, #1
    57ee:	425b      	negs	r3, r3
    57f0:	e00a      	b.n	5808 <_vfiprintf_r+0x1c0>
    57f2:	2300      	movs	r3, #0
    57f4:	3401      	adds	r4, #1
    57f6:	7822      	ldrb	r2, [r4, #0]
    57f8:	3a30      	subs	r2, #48	; 0x30
    57fa:	2a09      	cmp	r2, #9
    57fc:	d804      	bhi.n	5808 <_vfiprintf_r+0x1c0>
    57fe:	210a      	movs	r1, #10
    5800:	434b      	muls	r3, r1
    5802:	3401      	adds	r4, #1
    5804:	189b      	adds	r3, r3, r2
    5806:	e7f6      	b.n	57f6 <_vfiprintf_r+0x1ae>
    5808:	9307      	str	r3, [sp, #28]
    580a:	e75b      	b.n	56c4 <_vfiprintf_r+0x7c>
    580c:	ab05      	add	r3, sp, #20
    580e:	9300      	str	r3, [sp, #0]
    5810:	1c30      	adds	r0, r6, #0
    5812:	1c29      	adds	r1, r5, #0
    5814:	1c3a      	adds	r2, r7, #0
    5816:	4b13      	ldr	r3, [pc, #76]	; (5864 <_vfiprintf_r+0x21c>)
    5818:	e000      	b.n	581c <_vfiprintf_r+0x1d4>
    581a:	bf00      	nop
    581c:	e007      	b.n	582e <_vfiprintf_r+0x1e6>
    581e:	ab05      	add	r3, sp, #20
    5820:	9300      	str	r3, [sp, #0]
    5822:	1c30      	adds	r0, r6, #0
    5824:	1c29      	adds	r1, r5, #0
    5826:	1c3a      	adds	r2, r7, #0
    5828:	4b0e      	ldr	r3, [pc, #56]	; (5864 <_vfiprintf_r+0x21c>)
    582a:	f000 f88b 	bl	5944 <_printf_i>
    582e:	9003      	str	r0, [sp, #12]
    5830:	9b03      	ldr	r3, [sp, #12]
    5832:	3301      	adds	r3, #1
    5834:	d000      	beq.n	5838 <_vfiprintf_r+0x1f0>
    5836:	e76a      	b.n	570e <_vfiprintf_r+0xc6>
    5838:	89bb      	ldrh	r3, [r7, #12]
    583a:	065b      	lsls	r3, r3, #25
    583c:	d500      	bpl.n	5840 <_vfiprintf_r+0x1f8>
    583e:	e732      	b.n	56a6 <_vfiprintf_r+0x5e>
    5840:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5842:	b01f      	add	sp, #124	; 0x7c
    5844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5846:	46c0      	nop			; (mov r8, r8)
    5848:	00005fe8 	.word	0x00005fe8
    584c:	00006008 	.word	0x00006008
    5850:	00006028 	.word	0x00006028
    5854:	0000604e 	.word	0x0000604e
    5858:	00006052 	.word	0x00006052
    585c:	00000000 	.word	0x00000000
    5860:	00006048 	.word	0x00006048
    5864:	00005623 	.word	0x00005623

00005868 <_printf_common>:
    5868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    586a:	1c17      	adds	r7, r2, #0
    586c:	9301      	str	r3, [sp, #4]
    586e:	690a      	ldr	r2, [r1, #16]
    5870:	688b      	ldr	r3, [r1, #8]
    5872:	9000      	str	r0, [sp, #0]
    5874:	1c0c      	adds	r4, r1, #0
    5876:	4293      	cmp	r3, r2
    5878:	da00      	bge.n	587c <_printf_common+0x14>
    587a:	1c13      	adds	r3, r2, #0
    587c:	1c22      	adds	r2, r4, #0
    587e:	603b      	str	r3, [r7, #0]
    5880:	3243      	adds	r2, #67	; 0x43
    5882:	7812      	ldrb	r2, [r2, #0]
    5884:	2a00      	cmp	r2, #0
    5886:	d001      	beq.n	588c <_printf_common+0x24>
    5888:	3301      	adds	r3, #1
    588a:	603b      	str	r3, [r7, #0]
    588c:	6823      	ldr	r3, [r4, #0]
    588e:	069b      	lsls	r3, r3, #26
    5890:	d502      	bpl.n	5898 <_printf_common+0x30>
    5892:	683b      	ldr	r3, [r7, #0]
    5894:	3302      	adds	r3, #2
    5896:	603b      	str	r3, [r7, #0]
    5898:	2506      	movs	r5, #6
    589a:	6823      	ldr	r3, [r4, #0]
    589c:	401d      	ands	r5, r3
    589e:	d01e      	beq.n	58de <_printf_common+0x76>
    58a0:	1c23      	adds	r3, r4, #0
    58a2:	3343      	adds	r3, #67	; 0x43
    58a4:	781b      	ldrb	r3, [r3, #0]
    58a6:	1e5a      	subs	r2, r3, #1
    58a8:	4193      	sbcs	r3, r2
    58aa:	6822      	ldr	r2, [r4, #0]
    58ac:	0692      	lsls	r2, r2, #26
    58ae:	d51c      	bpl.n	58ea <_printf_common+0x82>
    58b0:	2030      	movs	r0, #48	; 0x30
    58b2:	18e1      	adds	r1, r4, r3
    58b4:	3140      	adds	r1, #64	; 0x40
    58b6:	70c8      	strb	r0, [r1, #3]
    58b8:	1c21      	adds	r1, r4, #0
    58ba:	1c5a      	adds	r2, r3, #1
    58bc:	3145      	adds	r1, #69	; 0x45
    58be:	7809      	ldrb	r1, [r1, #0]
    58c0:	18a2      	adds	r2, r4, r2
    58c2:	3240      	adds	r2, #64	; 0x40
    58c4:	3302      	adds	r3, #2
    58c6:	70d1      	strb	r1, [r2, #3]
    58c8:	e00f      	b.n	58ea <_printf_common+0x82>
    58ca:	1c22      	adds	r2, r4, #0
    58cc:	2301      	movs	r3, #1
    58ce:	9800      	ldr	r0, [sp, #0]
    58d0:	9901      	ldr	r1, [sp, #4]
    58d2:	3219      	adds	r2, #25
    58d4:	9e08      	ldr	r6, [sp, #32]
    58d6:	47b0      	blx	r6
    58d8:	1c43      	adds	r3, r0, #1
    58da:	d00e      	beq.n	58fa <_printf_common+0x92>
    58dc:	3501      	adds	r5, #1
    58de:	68e3      	ldr	r3, [r4, #12]
    58e0:	683a      	ldr	r2, [r7, #0]
    58e2:	1a9b      	subs	r3, r3, r2
    58e4:	429d      	cmp	r5, r3
    58e6:	dbf0      	blt.n	58ca <_printf_common+0x62>
    58e8:	e7da      	b.n	58a0 <_printf_common+0x38>
    58ea:	1c22      	adds	r2, r4, #0
    58ec:	9800      	ldr	r0, [sp, #0]
    58ee:	9901      	ldr	r1, [sp, #4]
    58f0:	3243      	adds	r2, #67	; 0x43
    58f2:	9d08      	ldr	r5, [sp, #32]
    58f4:	47a8      	blx	r5
    58f6:	1c43      	adds	r3, r0, #1
    58f8:	d102      	bne.n	5900 <_printf_common+0x98>
    58fa:	2001      	movs	r0, #1
    58fc:	4240      	negs	r0, r0
    58fe:	e020      	b.n	5942 <_printf_common+0xda>
    5900:	2306      	movs	r3, #6
    5902:	6820      	ldr	r0, [r4, #0]
    5904:	68e1      	ldr	r1, [r4, #12]
    5906:	683a      	ldr	r2, [r7, #0]
    5908:	4003      	ands	r3, r0
    590a:	2500      	movs	r5, #0
    590c:	2b04      	cmp	r3, #4
    590e:	d103      	bne.n	5918 <_printf_common+0xb0>
    5910:	1a8d      	subs	r5, r1, r2
    5912:	43eb      	mvns	r3, r5
    5914:	17db      	asrs	r3, r3, #31
    5916:	401d      	ands	r5, r3
    5918:	68a3      	ldr	r3, [r4, #8]
    591a:	6922      	ldr	r2, [r4, #16]
    591c:	4293      	cmp	r3, r2
    591e:	dd01      	ble.n	5924 <_printf_common+0xbc>
    5920:	1a9b      	subs	r3, r3, r2
    5922:	18ed      	adds	r5, r5, r3
    5924:	2700      	movs	r7, #0
    5926:	42af      	cmp	r7, r5
    5928:	da0a      	bge.n	5940 <_printf_common+0xd8>
    592a:	1c22      	adds	r2, r4, #0
    592c:	2301      	movs	r3, #1
    592e:	9800      	ldr	r0, [sp, #0]
    5930:	9901      	ldr	r1, [sp, #4]
    5932:	321a      	adds	r2, #26
    5934:	9e08      	ldr	r6, [sp, #32]
    5936:	47b0      	blx	r6
    5938:	1c43      	adds	r3, r0, #1
    593a:	d0de      	beq.n	58fa <_printf_common+0x92>
    593c:	3701      	adds	r7, #1
    593e:	e7f2      	b.n	5926 <_printf_common+0xbe>
    5940:	2000      	movs	r0, #0
    5942:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005944 <_printf_i>:
    5944:	b5f0      	push	{r4, r5, r6, r7, lr}
    5946:	b08b      	sub	sp, #44	; 0x2c
    5948:	9206      	str	r2, [sp, #24]
    594a:	1c0a      	adds	r2, r1, #0
    594c:	3243      	adds	r2, #67	; 0x43
    594e:	9307      	str	r3, [sp, #28]
    5950:	9005      	str	r0, [sp, #20]
    5952:	9204      	str	r2, [sp, #16]
    5954:	7e0a      	ldrb	r2, [r1, #24]
    5956:	1c0c      	adds	r4, r1, #0
    5958:	9b10      	ldr	r3, [sp, #64]	; 0x40
    595a:	2a6e      	cmp	r2, #110	; 0x6e
    595c:	d100      	bne.n	5960 <_printf_i+0x1c>
    595e:	e0a8      	b.n	5ab2 <_printf_i+0x16e>
    5960:	d811      	bhi.n	5986 <_printf_i+0x42>
    5962:	2a63      	cmp	r2, #99	; 0x63
    5964:	d022      	beq.n	59ac <_printf_i+0x68>
    5966:	d809      	bhi.n	597c <_printf_i+0x38>
    5968:	2a00      	cmp	r2, #0
    596a:	d100      	bne.n	596e <_printf_i+0x2a>
    596c:	e0b2      	b.n	5ad4 <_printf_i+0x190>
    596e:	2a58      	cmp	r2, #88	; 0x58
    5970:	d000      	beq.n	5974 <_printf_i+0x30>
    5972:	e0c2      	b.n	5afa <_printf_i+0x1b6>
    5974:	3145      	adds	r1, #69	; 0x45
    5976:	700a      	strb	r2, [r1, #0]
    5978:	4a7c      	ldr	r2, [pc, #496]	; (5b6c <_printf_i+0x228>)
    597a:	e04f      	b.n	5a1c <_printf_i+0xd8>
    597c:	2a64      	cmp	r2, #100	; 0x64
    597e:	d01d      	beq.n	59bc <_printf_i+0x78>
    5980:	2a69      	cmp	r2, #105	; 0x69
    5982:	d01b      	beq.n	59bc <_printf_i+0x78>
    5984:	e0b9      	b.n	5afa <_printf_i+0x1b6>
    5986:	2a73      	cmp	r2, #115	; 0x73
    5988:	d100      	bne.n	598c <_printf_i+0x48>
    598a:	e0a7      	b.n	5adc <_printf_i+0x198>
    598c:	d809      	bhi.n	59a2 <_printf_i+0x5e>
    598e:	2a6f      	cmp	r2, #111	; 0x6f
    5990:	d029      	beq.n	59e6 <_printf_i+0xa2>
    5992:	2a70      	cmp	r2, #112	; 0x70
    5994:	d000      	beq.n	5998 <_printf_i+0x54>
    5996:	e0b0      	b.n	5afa <_printf_i+0x1b6>
    5998:	2220      	movs	r2, #32
    599a:	6809      	ldr	r1, [r1, #0]
    599c:	430a      	orrs	r2, r1
    599e:	6022      	str	r2, [r4, #0]
    59a0:	e037      	b.n	5a12 <_printf_i+0xce>
    59a2:	2a75      	cmp	r2, #117	; 0x75
    59a4:	d01f      	beq.n	59e6 <_printf_i+0xa2>
    59a6:	2a78      	cmp	r2, #120	; 0x78
    59a8:	d033      	beq.n	5a12 <_printf_i+0xce>
    59aa:	e0a6      	b.n	5afa <_printf_i+0x1b6>
    59ac:	1c0e      	adds	r6, r1, #0
    59ae:	681a      	ldr	r2, [r3, #0]
    59b0:	3642      	adds	r6, #66	; 0x42
    59b2:	1d11      	adds	r1, r2, #4
    59b4:	6019      	str	r1, [r3, #0]
    59b6:	6813      	ldr	r3, [r2, #0]
    59b8:	7033      	strb	r3, [r6, #0]
    59ba:	e0a1      	b.n	5b00 <_printf_i+0x1bc>
    59bc:	6821      	ldr	r1, [r4, #0]
    59be:	681a      	ldr	r2, [r3, #0]
    59c0:	0608      	lsls	r0, r1, #24
    59c2:	d406      	bmi.n	59d2 <_printf_i+0x8e>
    59c4:	0649      	lsls	r1, r1, #25
    59c6:	d504      	bpl.n	59d2 <_printf_i+0x8e>
    59c8:	1d11      	adds	r1, r2, #4
    59ca:	6019      	str	r1, [r3, #0]
    59cc:	2300      	movs	r3, #0
    59ce:	5ed5      	ldrsh	r5, [r2, r3]
    59d0:	e002      	b.n	59d8 <_printf_i+0x94>
    59d2:	1d11      	adds	r1, r2, #4
    59d4:	6019      	str	r1, [r3, #0]
    59d6:	6815      	ldr	r5, [r2, #0]
    59d8:	2d00      	cmp	r5, #0
    59da:	da3b      	bge.n	5a54 <_printf_i+0x110>
    59dc:	232d      	movs	r3, #45	; 0x2d
    59de:	9a04      	ldr	r2, [sp, #16]
    59e0:	426d      	negs	r5, r5
    59e2:	7013      	strb	r3, [r2, #0]
    59e4:	e036      	b.n	5a54 <_printf_i+0x110>
    59e6:	6821      	ldr	r1, [r4, #0]
    59e8:	681a      	ldr	r2, [r3, #0]
    59ea:	0608      	lsls	r0, r1, #24
    59ec:	d406      	bmi.n	59fc <_printf_i+0xb8>
    59ee:	0649      	lsls	r1, r1, #25
    59f0:	d504      	bpl.n	59fc <_printf_i+0xb8>
    59f2:	6815      	ldr	r5, [r2, #0]
    59f4:	1d11      	adds	r1, r2, #4
    59f6:	6019      	str	r1, [r3, #0]
    59f8:	b2ad      	uxth	r5, r5
    59fa:	e002      	b.n	5a02 <_printf_i+0xbe>
    59fc:	1d11      	adds	r1, r2, #4
    59fe:	6019      	str	r1, [r3, #0]
    5a00:	6815      	ldr	r5, [r2, #0]
    5a02:	4b5a      	ldr	r3, [pc, #360]	; (5b6c <_printf_i+0x228>)
    5a04:	7e22      	ldrb	r2, [r4, #24]
    5a06:	9303      	str	r3, [sp, #12]
    5a08:	270a      	movs	r7, #10
    5a0a:	2a6f      	cmp	r2, #111	; 0x6f
    5a0c:	d11d      	bne.n	5a4a <_printf_i+0x106>
    5a0e:	2708      	movs	r7, #8
    5a10:	e01b      	b.n	5a4a <_printf_i+0x106>
    5a12:	1c22      	adds	r2, r4, #0
    5a14:	2178      	movs	r1, #120	; 0x78
    5a16:	3245      	adds	r2, #69	; 0x45
    5a18:	7011      	strb	r1, [r2, #0]
    5a1a:	4a55      	ldr	r2, [pc, #340]	; (5b70 <_printf_i+0x22c>)
    5a1c:	6819      	ldr	r1, [r3, #0]
    5a1e:	9203      	str	r2, [sp, #12]
    5a20:	1d08      	adds	r0, r1, #4
    5a22:	6822      	ldr	r2, [r4, #0]
    5a24:	6018      	str	r0, [r3, #0]
    5a26:	680d      	ldr	r5, [r1, #0]
    5a28:	0610      	lsls	r0, r2, #24
    5a2a:	d402      	bmi.n	5a32 <_printf_i+0xee>
    5a2c:	0650      	lsls	r0, r2, #25
    5a2e:	d500      	bpl.n	5a32 <_printf_i+0xee>
    5a30:	b2ad      	uxth	r5, r5
    5a32:	07d3      	lsls	r3, r2, #31
    5a34:	d502      	bpl.n	5a3c <_printf_i+0xf8>
    5a36:	2320      	movs	r3, #32
    5a38:	431a      	orrs	r2, r3
    5a3a:	6022      	str	r2, [r4, #0]
    5a3c:	2710      	movs	r7, #16
    5a3e:	2d00      	cmp	r5, #0
    5a40:	d103      	bne.n	5a4a <_printf_i+0x106>
    5a42:	2320      	movs	r3, #32
    5a44:	6822      	ldr	r2, [r4, #0]
    5a46:	439a      	bics	r2, r3
    5a48:	6022      	str	r2, [r4, #0]
    5a4a:	1c23      	adds	r3, r4, #0
    5a4c:	2200      	movs	r2, #0
    5a4e:	3343      	adds	r3, #67	; 0x43
    5a50:	701a      	strb	r2, [r3, #0]
    5a52:	e002      	b.n	5a5a <_printf_i+0x116>
    5a54:	270a      	movs	r7, #10
    5a56:	4b45      	ldr	r3, [pc, #276]	; (5b6c <_printf_i+0x228>)
    5a58:	9303      	str	r3, [sp, #12]
    5a5a:	6863      	ldr	r3, [r4, #4]
    5a5c:	60a3      	str	r3, [r4, #8]
    5a5e:	2b00      	cmp	r3, #0
    5a60:	db03      	blt.n	5a6a <_printf_i+0x126>
    5a62:	2204      	movs	r2, #4
    5a64:	6821      	ldr	r1, [r4, #0]
    5a66:	4391      	bics	r1, r2
    5a68:	6021      	str	r1, [r4, #0]
    5a6a:	2d00      	cmp	r5, #0
    5a6c:	d102      	bne.n	5a74 <_printf_i+0x130>
    5a6e:	9e04      	ldr	r6, [sp, #16]
    5a70:	2b00      	cmp	r3, #0
    5a72:	d00e      	beq.n	5a92 <_printf_i+0x14e>
    5a74:	9e04      	ldr	r6, [sp, #16]
    5a76:	1c28      	adds	r0, r5, #0
    5a78:	1c39      	adds	r1, r7, #0
    5a7a:	f7ff f8a7 	bl	4bcc <__aeabi_uidivmod>
    5a7e:	9b03      	ldr	r3, [sp, #12]
    5a80:	3e01      	subs	r6, #1
    5a82:	5c5b      	ldrb	r3, [r3, r1]
    5a84:	1c28      	adds	r0, r5, #0
    5a86:	7033      	strb	r3, [r6, #0]
    5a88:	1c39      	adds	r1, r7, #0
    5a8a:	f7ff f819 	bl	4ac0 <__aeabi_uidiv>
    5a8e:	1e05      	subs	r5, r0, #0
    5a90:	d1f1      	bne.n	5a76 <_printf_i+0x132>
    5a92:	2f08      	cmp	r7, #8
    5a94:	d109      	bne.n	5aaa <_printf_i+0x166>
    5a96:	6823      	ldr	r3, [r4, #0]
    5a98:	07db      	lsls	r3, r3, #31
    5a9a:	d506      	bpl.n	5aaa <_printf_i+0x166>
    5a9c:	6863      	ldr	r3, [r4, #4]
    5a9e:	6922      	ldr	r2, [r4, #16]
    5aa0:	4293      	cmp	r3, r2
    5aa2:	dc02      	bgt.n	5aaa <_printf_i+0x166>
    5aa4:	2330      	movs	r3, #48	; 0x30
    5aa6:	3e01      	subs	r6, #1
    5aa8:	7033      	strb	r3, [r6, #0]
    5aaa:	9b04      	ldr	r3, [sp, #16]
    5aac:	1b9b      	subs	r3, r3, r6
    5aae:	6123      	str	r3, [r4, #16]
    5ab0:	e02b      	b.n	5b0a <_printf_i+0x1c6>
    5ab2:	6809      	ldr	r1, [r1, #0]
    5ab4:	681a      	ldr	r2, [r3, #0]
    5ab6:	0608      	lsls	r0, r1, #24
    5ab8:	d407      	bmi.n	5aca <_printf_i+0x186>
    5aba:	0649      	lsls	r1, r1, #25
    5abc:	d505      	bpl.n	5aca <_printf_i+0x186>
    5abe:	1d11      	adds	r1, r2, #4
    5ac0:	6019      	str	r1, [r3, #0]
    5ac2:	6813      	ldr	r3, [r2, #0]
    5ac4:	8aa2      	ldrh	r2, [r4, #20]
    5ac6:	801a      	strh	r2, [r3, #0]
    5ac8:	e004      	b.n	5ad4 <_printf_i+0x190>
    5aca:	1d11      	adds	r1, r2, #4
    5acc:	6019      	str	r1, [r3, #0]
    5ace:	6813      	ldr	r3, [r2, #0]
    5ad0:	6962      	ldr	r2, [r4, #20]
    5ad2:	601a      	str	r2, [r3, #0]
    5ad4:	2300      	movs	r3, #0
    5ad6:	9e04      	ldr	r6, [sp, #16]
    5ad8:	6123      	str	r3, [r4, #16]
    5ada:	e016      	b.n	5b0a <_printf_i+0x1c6>
    5adc:	681a      	ldr	r2, [r3, #0]
    5ade:	1d11      	adds	r1, r2, #4
    5ae0:	6019      	str	r1, [r3, #0]
    5ae2:	6816      	ldr	r6, [r2, #0]
    5ae4:	2100      	movs	r1, #0
    5ae6:	1c30      	adds	r0, r6, #0
    5ae8:	6862      	ldr	r2, [r4, #4]
    5aea:	f000 f8ff 	bl	5cec <memchr>
    5aee:	2800      	cmp	r0, #0
    5af0:	d001      	beq.n	5af6 <_printf_i+0x1b2>
    5af2:	1b80      	subs	r0, r0, r6
    5af4:	6060      	str	r0, [r4, #4]
    5af6:	6863      	ldr	r3, [r4, #4]
    5af8:	e003      	b.n	5b02 <_printf_i+0x1be>
    5afa:	1c26      	adds	r6, r4, #0
    5afc:	3642      	adds	r6, #66	; 0x42
    5afe:	7032      	strb	r2, [r6, #0]
    5b00:	2301      	movs	r3, #1
    5b02:	6123      	str	r3, [r4, #16]
    5b04:	2300      	movs	r3, #0
    5b06:	9a04      	ldr	r2, [sp, #16]
    5b08:	7013      	strb	r3, [r2, #0]
    5b0a:	9b07      	ldr	r3, [sp, #28]
    5b0c:	9805      	ldr	r0, [sp, #20]
    5b0e:	9300      	str	r3, [sp, #0]
    5b10:	1c21      	adds	r1, r4, #0
    5b12:	9b06      	ldr	r3, [sp, #24]
    5b14:	aa09      	add	r2, sp, #36	; 0x24
    5b16:	f7ff fea7 	bl	5868 <_printf_common>
    5b1a:	1c43      	adds	r3, r0, #1
    5b1c:	d102      	bne.n	5b24 <_printf_i+0x1e0>
    5b1e:	2001      	movs	r0, #1
    5b20:	4240      	negs	r0, r0
    5b22:	e021      	b.n	5b68 <_printf_i+0x224>
    5b24:	6923      	ldr	r3, [r4, #16]
    5b26:	9805      	ldr	r0, [sp, #20]
    5b28:	9906      	ldr	r1, [sp, #24]
    5b2a:	1c32      	adds	r2, r6, #0
    5b2c:	9d07      	ldr	r5, [sp, #28]
    5b2e:	47a8      	blx	r5
    5b30:	1c43      	adds	r3, r0, #1
    5b32:	d0f4      	beq.n	5b1e <_printf_i+0x1da>
    5b34:	6823      	ldr	r3, [r4, #0]
    5b36:	079b      	lsls	r3, r3, #30
    5b38:	d405      	bmi.n	5b46 <_printf_i+0x202>
    5b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b3c:	68e0      	ldr	r0, [r4, #12]
    5b3e:	4298      	cmp	r0, r3
    5b40:	da12      	bge.n	5b68 <_printf_i+0x224>
    5b42:	1c18      	adds	r0, r3, #0
    5b44:	e010      	b.n	5b68 <_printf_i+0x224>
    5b46:	2500      	movs	r5, #0
    5b48:	68e3      	ldr	r3, [r4, #12]
    5b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5b4c:	1a9b      	subs	r3, r3, r2
    5b4e:	429d      	cmp	r5, r3
    5b50:	daf3      	bge.n	5b3a <_printf_i+0x1f6>
    5b52:	1c22      	adds	r2, r4, #0
    5b54:	2301      	movs	r3, #1
    5b56:	9805      	ldr	r0, [sp, #20]
    5b58:	9906      	ldr	r1, [sp, #24]
    5b5a:	3219      	adds	r2, #25
    5b5c:	9e07      	ldr	r6, [sp, #28]
    5b5e:	47b0      	blx	r6
    5b60:	1c43      	adds	r3, r0, #1
    5b62:	d0dc      	beq.n	5b1e <_printf_i+0x1da>
    5b64:	3501      	adds	r5, #1
    5b66:	e7ef      	b.n	5b48 <_printf_i+0x204>
    5b68:	b00b      	add	sp, #44	; 0x2c
    5b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b6c:	00006059 	.word	0x00006059
    5b70:	0000606a 	.word	0x0000606a

00005b74 <_sbrk_r>:
    5b74:	b538      	push	{r3, r4, r5, lr}
    5b76:	2300      	movs	r3, #0
    5b78:	4c06      	ldr	r4, [pc, #24]	; (5b94 <_sbrk_r+0x20>)
    5b7a:	1c05      	adds	r5, r0, #0
    5b7c:	1c08      	adds	r0, r1, #0
    5b7e:	6023      	str	r3, [r4, #0]
    5b80:	f7fe fea8 	bl	48d4 <_sbrk>
    5b84:	1c43      	adds	r3, r0, #1
    5b86:	d103      	bne.n	5b90 <_sbrk_r+0x1c>
    5b88:	6823      	ldr	r3, [r4, #0]
    5b8a:	2b00      	cmp	r3, #0
    5b8c:	d000      	beq.n	5b90 <_sbrk_r+0x1c>
    5b8e:	602b      	str	r3, [r5, #0]
    5b90:	bd38      	pop	{r3, r4, r5, pc}
    5b92:	46c0      	nop			; (mov r8, r8)
    5b94:	20000e20 	.word	0x20000e20

00005b98 <__sread>:
    5b98:	b538      	push	{r3, r4, r5, lr}
    5b9a:	1c0c      	adds	r4, r1, #0
    5b9c:	250e      	movs	r5, #14
    5b9e:	5f49      	ldrsh	r1, [r1, r5]
    5ba0:	f000 f8b0 	bl	5d04 <_read_r>
    5ba4:	2800      	cmp	r0, #0
    5ba6:	db03      	blt.n	5bb0 <__sread+0x18>
    5ba8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5baa:	181b      	adds	r3, r3, r0
    5bac:	6563      	str	r3, [r4, #84]	; 0x54
    5bae:	e003      	b.n	5bb8 <__sread+0x20>
    5bb0:	89a2      	ldrh	r2, [r4, #12]
    5bb2:	4b02      	ldr	r3, [pc, #8]	; (5bbc <__sread+0x24>)
    5bb4:	4013      	ands	r3, r2
    5bb6:	81a3      	strh	r3, [r4, #12]
    5bb8:	bd38      	pop	{r3, r4, r5, pc}
    5bba:	46c0      	nop			; (mov r8, r8)
    5bbc:	ffffefff 	.word	0xffffefff

00005bc0 <__swrite>:
    5bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bc2:	1c1e      	adds	r6, r3, #0
    5bc4:	898b      	ldrh	r3, [r1, #12]
    5bc6:	1c05      	adds	r5, r0, #0
    5bc8:	1c0c      	adds	r4, r1, #0
    5bca:	1c17      	adds	r7, r2, #0
    5bcc:	05db      	lsls	r3, r3, #23
    5bce:	d505      	bpl.n	5bdc <__swrite+0x1c>
    5bd0:	230e      	movs	r3, #14
    5bd2:	5ec9      	ldrsh	r1, [r1, r3]
    5bd4:	2200      	movs	r2, #0
    5bd6:	2302      	movs	r3, #2
    5bd8:	f000 f874 	bl	5cc4 <_lseek_r>
    5bdc:	89a2      	ldrh	r2, [r4, #12]
    5bde:	4b05      	ldr	r3, [pc, #20]	; (5bf4 <__swrite+0x34>)
    5be0:	1c28      	adds	r0, r5, #0
    5be2:	4013      	ands	r3, r2
    5be4:	81a3      	strh	r3, [r4, #12]
    5be6:	1c3a      	adds	r2, r7, #0
    5be8:	230e      	movs	r3, #14
    5bea:	5ee1      	ldrsh	r1, [r4, r3]
    5bec:	1c33      	adds	r3, r6, #0
    5bee:	f000 f81f 	bl	5c30 <_write_r>
    5bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bf4:	ffffefff 	.word	0xffffefff

00005bf8 <__sseek>:
    5bf8:	b538      	push	{r3, r4, r5, lr}
    5bfa:	1c0c      	adds	r4, r1, #0
    5bfc:	250e      	movs	r5, #14
    5bfe:	5f49      	ldrsh	r1, [r1, r5]
    5c00:	f000 f860 	bl	5cc4 <_lseek_r>
    5c04:	89a3      	ldrh	r3, [r4, #12]
    5c06:	1c42      	adds	r2, r0, #1
    5c08:	d103      	bne.n	5c12 <__sseek+0x1a>
    5c0a:	4a05      	ldr	r2, [pc, #20]	; (5c20 <__sseek+0x28>)
    5c0c:	4013      	ands	r3, r2
    5c0e:	81a3      	strh	r3, [r4, #12]
    5c10:	e004      	b.n	5c1c <__sseek+0x24>
    5c12:	2280      	movs	r2, #128	; 0x80
    5c14:	0152      	lsls	r2, r2, #5
    5c16:	4313      	orrs	r3, r2
    5c18:	81a3      	strh	r3, [r4, #12]
    5c1a:	6560      	str	r0, [r4, #84]	; 0x54
    5c1c:	bd38      	pop	{r3, r4, r5, pc}
    5c1e:	46c0      	nop			; (mov r8, r8)
    5c20:	ffffefff 	.word	0xffffefff

00005c24 <__sclose>:
    5c24:	b508      	push	{r3, lr}
    5c26:	230e      	movs	r3, #14
    5c28:	5ec9      	ldrsh	r1, [r1, r3]
    5c2a:	f000 f815 	bl	5c58 <_close_r>
    5c2e:	bd08      	pop	{r3, pc}

00005c30 <_write_r>:
    5c30:	b538      	push	{r3, r4, r5, lr}
    5c32:	1c05      	adds	r5, r0, #0
    5c34:	2000      	movs	r0, #0
    5c36:	4c07      	ldr	r4, [pc, #28]	; (5c54 <_write_r+0x24>)
    5c38:	6020      	str	r0, [r4, #0]
    5c3a:	1c08      	adds	r0, r1, #0
    5c3c:	1c11      	adds	r1, r2, #0
    5c3e:	1c1a      	adds	r2, r3, #0
    5c40:	f7fe fe20 	bl	4884 <_write>
    5c44:	1c43      	adds	r3, r0, #1
    5c46:	d103      	bne.n	5c50 <_write_r+0x20>
    5c48:	6823      	ldr	r3, [r4, #0]
    5c4a:	2b00      	cmp	r3, #0
    5c4c:	d000      	beq.n	5c50 <_write_r+0x20>
    5c4e:	602b      	str	r3, [r5, #0]
    5c50:	bd38      	pop	{r3, r4, r5, pc}
    5c52:	46c0      	nop			; (mov r8, r8)
    5c54:	20000e20 	.word	0x20000e20

00005c58 <_close_r>:
    5c58:	b538      	push	{r3, r4, r5, lr}
    5c5a:	2300      	movs	r3, #0
    5c5c:	4c06      	ldr	r4, [pc, #24]	; (5c78 <_close_r+0x20>)
    5c5e:	1c05      	adds	r5, r0, #0
    5c60:	1c08      	adds	r0, r1, #0
    5c62:	6023      	str	r3, [r4, #0]
    5c64:	f7fe fe48 	bl	48f8 <_close>
    5c68:	1c43      	adds	r3, r0, #1
    5c6a:	d103      	bne.n	5c74 <_close_r+0x1c>
    5c6c:	6823      	ldr	r3, [r4, #0]
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d000      	beq.n	5c74 <_close_r+0x1c>
    5c72:	602b      	str	r3, [r5, #0]
    5c74:	bd38      	pop	{r3, r4, r5, pc}
    5c76:	46c0      	nop			; (mov r8, r8)
    5c78:	20000e20 	.word	0x20000e20

00005c7c <_fstat_r>:
    5c7c:	b538      	push	{r3, r4, r5, lr}
    5c7e:	2300      	movs	r3, #0
    5c80:	4c06      	ldr	r4, [pc, #24]	; (5c9c <_fstat_r+0x20>)
    5c82:	1c05      	adds	r5, r0, #0
    5c84:	1c08      	adds	r0, r1, #0
    5c86:	1c11      	adds	r1, r2, #0
    5c88:	6023      	str	r3, [r4, #0]
    5c8a:	f7fe fe39 	bl	4900 <_fstat>
    5c8e:	1c43      	adds	r3, r0, #1
    5c90:	d103      	bne.n	5c9a <_fstat_r+0x1e>
    5c92:	6823      	ldr	r3, [r4, #0]
    5c94:	2b00      	cmp	r3, #0
    5c96:	d000      	beq.n	5c9a <_fstat_r+0x1e>
    5c98:	602b      	str	r3, [r5, #0]
    5c9a:	bd38      	pop	{r3, r4, r5, pc}
    5c9c:	20000e20 	.word	0x20000e20

00005ca0 <_isatty_r>:
    5ca0:	b538      	push	{r3, r4, r5, lr}
    5ca2:	2300      	movs	r3, #0
    5ca4:	4c06      	ldr	r4, [pc, #24]	; (5cc0 <_isatty_r+0x20>)
    5ca6:	1c05      	adds	r5, r0, #0
    5ca8:	1c08      	adds	r0, r1, #0
    5caa:	6023      	str	r3, [r4, #0]
    5cac:	f7fe fe2e 	bl	490c <_isatty>
    5cb0:	1c43      	adds	r3, r0, #1
    5cb2:	d103      	bne.n	5cbc <_isatty_r+0x1c>
    5cb4:	6823      	ldr	r3, [r4, #0]
    5cb6:	2b00      	cmp	r3, #0
    5cb8:	d000      	beq.n	5cbc <_isatty_r+0x1c>
    5cba:	602b      	str	r3, [r5, #0]
    5cbc:	bd38      	pop	{r3, r4, r5, pc}
    5cbe:	46c0      	nop			; (mov r8, r8)
    5cc0:	20000e20 	.word	0x20000e20

00005cc4 <_lseek_r>:
    5cc4:	b538      	push	{r3, r4, r5, lr}
    5cc6:	1c05      	adds	r5, r0, #0
    5cc8:	2000      	movs	r0, #0
    5cca:	4c07      	ldr	r4, [pc, #28]	; (5ce8 <_lseek_r+0x24>)
    5ccc:	6020      	str	r0, [r4, #0]
    5cce:	1c08      	adds	r0, r1, #0
    5cd0:	1c11      	adds	r1, r2, #0
    5cd2:	1c1a      	adds	r2, r3, #0
    5cd4:	f7fe fe1c 	bl	4910 <_lseek>
    5cd8:	1c43      	adds	r3, r0, #1
    5cda:	d103      	bne.n	5ce4 <_lseek_r+0x20>
    5cdc:	6823      	ldr	r3, [r4, #0]
    5cde:	2b00      	cmp	r3, #0
    5ce0:	d000      	beq.n	5ce4 <_lseek_r+0x20>
    5ce2:	602b      	str	r3, [r5, #0]
    5ce4:	bd38      	pop	{r3, r4, r5, pc}
    5ce6:	46c0      	nop			; (mov r8, r8)
    5ce8:	20000e20 	.word	0x20000e20

00005cec <memchr>:
    5cec:	b2c9      	uxtb	r1, r1
    5cee:	1882      	adds	r2, r0, r2
    5cf0:	4290      	cmp	r0, r2
    5cf2:	d004      	beq.n	5cfe <memchr+0x12>
    5cf4:	7803      	ldrb	r3, [r0, #0]
    5cf6:	428b      	cmp	r3, r1
    5cf8:	d002      	beq.n	5d00 <memchr+0x14>
    5cfa:	3001      	adds	r0, #1
    5cfc:	e7f8      	b.n	5cf0 <memchr+0x4>
    5cfe:	2000      	movs	r0, #0
    5d00:	4770      	bx	lr
	...

00005d04 <_read_r>:
    5d04:	b538      	push	{r3, r4, r5, lr}
    5d06:	1c05      	adds	r5, r0, #0
    5d08:	2000      	movs	r0, #0
    5d0a:	4c07      	ldr	r4, [pc, #28]	; (5d28 <_read_r+0x24>)
    5d0c:	6020      	str	r0, [r4, #0]
    5d0e:	1c08      	adds	r0, r1, #0
    5d10:	1c11      	adds	r1, r2, #0
    5d12:	1c1a      	adds	r2, r3, #0
    5d14:	f7fe fd94 	bl	4840 <_read>
    5d18:	1c43      	adds	r3, r0, #1
    5d1a:	d103      	bne.n	5d24 <_read_r+0x20>
    5d1c:	6823      	ldr	r3, [r4, #0]
    5d1e:	2b00      	cmp	r3, #0
    5d20:	d000      	beq.n	5d24 <_read_r+0x20>
    5d22:	602b      	str	r3, [r5, #0]
    5d24:	bd38      	pop	{r3, r4, r5, pc}
    5d26:	46c0      	nop			; (mov r8, r8)
    5d28:	20000e20 	.word	0x20000e20
    5d2c:	65636572 	.word	0x65636572
    5d30:	64657669 	.word	0x64657669
    5d34:	200d0a20 	.word	0x200d0a20
    5d38:	6e616843 	.word	0x6e616843
    5d3c:	206c656e 	.word	0x206c656e
    5d40:	61762030 	.word	0x61762030
    5d44:	2065756c 	.word	0x2065756c
    5d48:	7525203d 	.word	0x7525203d
    5d4c:	43200d0a 	.word	0x43200d0a
    5d50:	6e6e6168 	.word	0x6e6e6168
    5d54:	31206c65 	.word	0x31206c65
    5d58:	6c617620 	.word	0x6c617620
    5d5c:	3d206575 	.word	0x3d206575
    5d60:	0a752520 	.word	0x0a752520
    5d64:	0000000d 	.word	0x0000000d
    5d68:	646e6573 	.word	0x646e6573
    5d6c:	20676e69 	.word	0x20676e69
    5d70:	63200d0a 	.word	0x63200d0a
    5d74:	6e6e6168 	.word	0x6e6e6168
    5d78:	30206c65 	.word	0x30206c65
    5d7c:	6c617620 	.word	0x6c617620
    5d80:	3d206575 	.word	0x3d206575
    5d84:	0a752520 	.word	0x0a752520
    5d88:	6863200d 	.word	0x6863200d
    5d8c:	656e6e61 	.word	0x656e6e61
    5d90:	2031206c 	.word	0x2031206c
    5d94:	756c6176 	.word	0x756c6176
    5d98:	203d2065 	.word	0x203d2065
    5d9c:	0d0a7525 	.word	0x0d0a7525
    5da0:	00000000 	.word	0x00000000

00005da4 <tc_interrupt_vectors.13689>:
    5da4:	17161514 00000018 00002968 00002bce     ........h)...+..
    5db4:	00002bce 00002bce 00002bce 00002bce     .+...+...+...+..
    5dc4:	00002bce 00002bce 00002bce 00002bce     .+...+...+...+..
    5dd4:	00002bce 00002bce 00002bce 00002bce     .+...+...+...+..
    5de4:	00002bce 00002bce 00002950 00002bce     .+...+..P)...+..
    5df4:	00002bce 00002bce 00002bce 00002bce     .+...+...+...+..
    5e04:	00002bce 00002bce 00002bce 00002bce     .+...+...+...+..
    5e14:	00002bce 00002bce 00002bce 00002bce     .+...+...+...+..
    5e24:	00002bce 00002bce 00002960 00002bce     .+...+..`)...+..
    5e34:	00002bce 00002bce 00002bce 00002bce     .+...+...+...+..
    5e44:	00002bce 00002bce 00002bce 00002bce     .+...+...+...+..
    5e54:	00002bce 00002bce 00002bce 00002bce     .+...+...+...+..
    5e64:	00002bce 00002bce 00002958 00002970     .+...+..X)..p)..
    5e74:	00002938 00002948 00002940              8)..H)..@)..

00005e80 <_adc_gclk_ids>:
    5e80:	00002221 42004400 42004800 00000002     !"...D.B.H.B....
    5e90:	00000003 00000028 00000029 00000004     ....(...).......
    5ea0:	00000005 00000006 00000007 00000008     ................
    5eb0:	00000009 0000000a 0000000b 00000020     ............ ...
    5ec0:	00000021 00000022 00000023 00000028     !..."...#...(...
    5ed0:	00000029 00000024 00000025 00000026     )...$...%...&...
    5ee0:	00000027 00000008 00000009              '...........

00005eec <_adc_biasrefbuf_pos>:
    5eec:	00000600                                ....

00005ef0 <_adc_apbcmasks>:
    5ef0:	00020000 00040000                       ........

00005ef8 <_adc_biascomp_pos>:
    5ef8:	00000903                                ....

00005efc <_adc_extchannel_msb>:
    5efc:	0000000b 0000000b                       ........

00005f04 <_adc_biascomp_addr>:
    5f04:	00806020 00806020                        `.. `..

00005f0c <_adc_biasrefbuf_addr>:
    5f0c:	00806020 00806020                        `.. `..

00005f14 <adc_interrupt_vectors.13737>:
    5f14:	00001a19                                ....

00005f18 <tc_interrupt_vectors.15064>:
    5f18:	17161514 00000018 42000400 42000800     ...........B...B
    5f28:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    5f38:	0c0b0a09 00000e0d 00003eea 00003ee6     .........>...>..
    5f48:	00003ee6 00003f18 00003f18 00003f02     .>...?...?...?..
    5f58:	00003ef0 00003f08 42003000 42003400     .>...?...0.B.4.B
    5f68:	42003800 42003c00 42004000 1f1f1e1e     .8.B.<.B.@.B....
    5f78:	00000020 00000002 00001000 00000002      ...............
    5f88:	00002000 00000002 00004000 00000002     . .......@......
    5f98:	00008000 00000002 00010000 20313243     ............C21 
    5fa8:	42323132 20435220 0d726143 0000000a     212B RC Car.....
    5fb8:	72646441 20737365 7525203d 000d0a0a     Address = %u....
    5fc8:	206c6176 7525203d 00000d0a 20726964     val = %u....dir 
    5fd8:	6425203d 00000d0a 00000043              = %d....C...

00005fe4 <_global_impure_ptr>:
    5fe4:	2000000c                                ... 

00005fe8 <__sf_fake_stdin>:
	...

00006008 <__sf_fake_stdout>:
	...

00006028 <__sf_fake_stderr>:
	...
    6048:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6058:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6068:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6078:	00006665                                ef..

0000607c <_init>:
    607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    607e:	46c0      	nop			; (mov r8, r8)
    6080:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6082:	bc08      	pop	{r3}
    6084:	469e      	mov	lr, r3
    6086:	4770      	bx	lr

00006088 <__init_array_start>:
    6088:	000000e5 	.word	0x000000e5

0000608c <_fini>:
    608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    608e:	46c0      	nop			; (mov r8, r8)
    6090:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6092:	bc08      	pop	{r3}
    6094:	469e      	mov	lr, r3
    6096:	4770      	bx	lr

00006098 <__fini_array_start>:
    6098:	000000bd 	.word	0x000000bd
