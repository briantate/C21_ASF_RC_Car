
C21_ASF_RC_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006294  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00006294  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ddc  20000070  00006304  00010070  2**2
                  ALLOC
  3 .stack        00002004  20000e4c  000070e0  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00045926  00000000  00000000  00010126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007c9b  00000000  00000000  00055a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e631  00000000  00000000  0005d6e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d60  00000000  00000000  0006bd18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001458  00000000  00000000  0006ca78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002a8d5  00000000  00000000  0006ded0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00022b80  00000000  00000000  000987a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a309f  00000000  00000000  000bb325  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000276c  00000000  00000000  0015e3c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002e50 	.word	0x20002e50
       4:	00004919 	.word	0x00004919
       8:	00004915 	.word	0x00004915
       c:	00004915 	.word	0x00004915
	...
      2c:	00004915 	.word	0x00004915
	...
      38:	00004915 	.word	0x00004915
      3c:	00004915 	.word	0x00004915
      40:	00004915 	.word	0x00004915
      44:	00004915 	.word	0x00004915
      48:	00004915 	.word	0x00004915
      4c:	000033b5 	.word	0x000033b5
      50:	00004915 	.word	0x00004915
      54:	00004915 	.word	0x00004915
      58:	00004915 	.word	0x00004915
      5c:	00004915 	.word	0x00004915
      60:	00004915 	.word	0x00004915
      64:	00003a15 	.word	0x00003a15
      68:	00003a25 	.word	0x00003a25
      6c:	00003a35 	.word	0x00003a35
      70:	00003a45 	.word	0x00003a45
      74:	00003a55 	.word	0x00003a55
      78:	00003a65 	.word	0x00003a65
      7c:	00004915 	.word	0x00004915
      80:	00004915 	.word	0x00004915
      84:	00004915 	.word	0x00004915
      88:	00004915 	.word	0x00004915
      8c:	00004915 	.word	0x00004915
      90:	00004505 	.word	0x00004505
      94:	00004515 	.word	0x00004515
      98:	00004525 	.word	0x00004525
      9c:	00004535 	.word	0x00004535
      a0:	00004545 	.word	0x00004545
      a4:	00002e51 	.word	0x00002e51
      a8:	00002e61 	.word	0x00002e61
      ac:	00004915 	.word	0x00004915
      b0:	00004915 	.word	0x00004915
      b4:	00004915 	.word	0x00004915
      b8:	00004915 	.word	0x00004915

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000070 	.word	0x20000070
      dc:	00000000 	.word	0x00000000
      e0:	00006294 	.word	0x00006294

000000e4 <frame_dummy>:
      e4:	b508      	push	{r3, lr}
      e6:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4908      	ldr	r1, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd08      	pop	{r3, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	00006294 	.word	0x00006294
     110:	20000074 	.word	0x20000074
     114:	00006294 	.word	0x00006294
     118:	00000000 	.word	0x00000000

0000011c <spi_init>:

					/* Write the data to send */
					spi_write(module, data_to_send);
					length--;
				}
				if (spi_is_ready_to_read(module)) {
     11c:	b5f0      	push	{r4, r5, r6, r7, lr}
     11e:	b08b      	sub	sp, #44	; 0x2c
     120:	6001      	str	r1, [r0, #0]
		spi_write(module, data_to_send);

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     122:	680c      	ldr	r4, [r1, #0]
     124:	231c      	movs	r3, #28
     126:	07a4      	lsls	r4, r4, #30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     128:	d500      	bpl.n	12c <spi_init+0x10>
				if (spi_is_ready_to_read(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     12a:	e0e7      	b.n	2fc <spi_init+0x1e0>
     12c:	680c      	ldr	r4, [r1, #0]
     12e:	3b17      	subs	r3, #23
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     130:	07e4      	lsls	r4, r4, #31
     132:	d500      	bpl.n	136 <spi_init+0x1a>
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
     134:	e0e2      	b.n	2fc <spi_init+0x1e0>
     136:	1c16      	adds	r6, r2, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     138:	1c0c      	adds	r4, r1, #0
			}

			if (!spi_is_ready_to_read(module)) {
     13a:	1c05      	adds	r5, r0, #0
     13c:	1c08      	adds	r0, r1, #0
     13e:	4b71      	ldr	r3, [pc, #452]	; (304 <spi_init+0x1e8>)
     140:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     142:	2805      	cmp	r0, #5

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     144:	d002      	beq.n	14c <spi_init+0x30>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
     146:	1c47      	adds	r7, r0, #1
     148:	3013      	adds	r0, #19
		}

		enum status_code retval;
		uint16_t received_data = 0;
		rx_length--;
     14a:	e001      	b.n	150 <spi_init+0x34>
     14c:	2019      	movs	r0, #25
     14e:	2706      	movs	r7, #6
     150:	496d      	ldr	r1, [pc, #436]	; (308 <spi_init+0x1ec>)
     152:	69ca      	ldr	r2, [r1, #28]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     154:	2301      	movs	r3, #1
     156:	40bb      	lsls	r3, r7

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     158:	4313      	orrs	r3, r2
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     15a:	61cb      	str	r3, [r1, #28]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     15c:	a909      	add	r1, sp, #36	; 0x24
     15e:	2724      	movs	r7, #36	; 0x24
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     160:	5df3      	ldrb	r3, [r6, r7]
     162:	700b      	strb	r3, [r1, #0]
     164:	b2c3      	uxtb	r3, r0
     166:	9301      	str	r3, [sp, #4]
     168:	1c18      	adds	r0, r3, #0
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     16a:	4b68      	ldr	r3, [pc, #416]	; (30c <spi_init+0x1f0>)
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     16c:	4798      	blx	r3
     16e:	9801      	ldr	r0, [sp, #4]
     170:	4b67      	ldr	r3, [pc, #412]	; (310 <spi_init+0x1f4>)
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     172:	4798      	blx	r3
     174:	5df0      	ldrb	r0, [r6, r7]
     176:	2100      	movs	r1, #0
     178:	4b66      	ldr	r3, [pc, #408]	; (314 <spi_init+0x1f8>)
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     17a:	4798      	blx	r3
     17c:	7833      	ldrb	r3, [r6, #0]

		retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
     17e:	2b01      	cmp	r3, #1
     180:	d103      	bne.n	18a <spi_init+0x6e>
     182:	6822      	ldr	r2, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
     184:	330b      	adds	r3, #11
			/* Overflow, abort */
			return retval;
     186:	4313      	orrs	r3, r2
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     188:	6023      	str	r3, [r4, #0]
     18a:	7833      	ldrb	r3, [r6, #0]
     18c:	2b00      	cmp	r3, #0
     18e:	d000      	beq.n	192 <spi_init+0x76>
     190:	e0ae      	b.n	2f0 <spi_init+0x1d4>
     192:	6822      	ldr	r2, [r4, #0]
     194:	3308      	adds	r3, #8

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     196:	4313      	orrs	r3, r2
     198:	6023      	str	r3, [r4, #0]
     19a:	e0a9      	b.n	2f0 <spi_init+0x1d4>
			rx_data[rx_pos++] = (received_data >> 8);
     19c:	c304      	stmia	r3!, {r2}
     19e:	428b      	cmp	r3, r1
     1a0:	d1fc      	bne.n	19c <spi_init+0x80>
     1a2:	2300      	movs	r3, #0
     1a4:	62eb      	str	r3, [r5, #44]	; 0x2c
     1a6:	62ab      	str	r3, [r5, #40]	; 0x28
     1a8:	2400      	movs	r4, #0
     1aa:	86ab      	strh	r3, [r5, #52]	; 0x34
     1ac:	862b      	strh	r3, [r5, #48]	; 0x30
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     1ae:	3336      	adds	r3, #54	; 0x36
	uint16_t tx_pos = 0;
	uint16_t rx_pos = 0;
	uint16_t rx_length = length;

	/* Send and receive buffer */
	while (length--) {
     1b0:	54ec      	strb	r4, [r5, r3]
     1b2:	3301      	adds	r3, #1
     1b4:	54ec      	strb	r4, [r5, r3]
     1b6:	3301      	adds	r3, #1
     1b8:	54ec      	strb	r4, [r5, r3]
		while (!spi_is_ready_to_read(module)) {
		}

		enum status_code retval;
		uint16_t received_data = 0;
		rx_length--;
     1ba:	3b35      	subs	r3, #53	; 0x35
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     1bc:	726b      	strb	r3, [r5, #9]
     1be:	712c      	strb	r4, [r5, #4]
     1c0:	6828      	ldr	r0, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1c2:	4b50      	ldr	r3, [pc, #320]	; (304 <spi_init+0x1e8>)

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     1c4:	4798      	blx	r3
     1c6:	1c07      	adds	r7, r0, #0
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
     1c8:	4953      	ldr	r1, [pc, #332]	; (318 <spi_init+0x1fc>)
     1ca:	4b54      	ldr	r3, [pc, #336]	; (31c <spi_init+0x200>)
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     1cc:	4798      	blx	r3
     1ce:	00bf      	lsls	r7, r7, #2
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     1d0:	4b53      	ldr	r3, [pc, #332]	; (320 <spi_init+0x204>)
     1d2:	50fd      	str	r5, [r7, r3]
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     1d4:	682f      	ldr	r7, [r5, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		while (rx_length) {
     1d6:	ab04      	add	r3, sp, #16
     1d8:	2280      	movs	r2, #128	; 0x80
     1da:	701a      	strb	r2, [r3, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     1dc:	705c      	strb	r4, [r3, #1]
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
     1de:	3a7f      	subs	r2, #127	; 0x7f
     1e0:	709a      	strb	r2, [r3, #2]
     1e2:	70dc      	strb	r4, [r3, #3]

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		while (rx_length) {
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     1e4:	7833      	ldrb	r3, [r6, #0]
     1e6:	2b00      	cmp	r3, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1e8:	d102      	bne.n	1f0 <spi_init+0xd4>
     1ea:	2200      	movs	r2, #0

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     1ec:	ab04      	add	r3, sp, #16
				if (spi_is_ready_to_read(module)) {
					break;
				}
			}
			if (!spi_is_ready_to_read(module)) {
     1ee:	709a      	strb	r2, [r3, #2]
     1f0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
			}
			enum status_code retval;
			uint16_t received_data = 0;
			rx_length--;
     1f2:	9305      	str	r3, [sp, #20]
     1f4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     1f6:	9306      	str	r3, [sp, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     1f8:	6b33      	ldr	r3, [r6, #48]	; 0x30
     1fa:	9307      	str	r3, [sp, #28]

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     1fc:	6b73      	ldr	r3, [r6, #52]	; 0x34
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     1fe:	9308      	str	r3, [sp, #32]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     200:	2400      	movs	r4, #0
     202:	b2e1      	uxtb	r1, r4
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     204:	00a3      	lsls	r3, r4, #2
     206:	aa05      	add	r2, sp, #20
     208:	5898      	ldr	r0, [r3, r2]
     20a:	2800      	cmp	r0, #0
     20c:	d102      	bne.n	214 <spi_init+0xf8>
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     20e:	1c38      	adds	r0, r7, #0
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     210:	4b44      	ldr	r3, [pc, #272]	; (324 <spi_init+0x208>)
     212:	4798      	blx	r3
     214:	1c43      	adds	r3, r0, #1
     216:	d006      	beq.n	226 <spi_init+0x10a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     218:	ab02      	add	r3, sp, #8
     21a:	7218      	strb	r0, [r3, #8]
     21c:	0c00      	lsrs	r0, r0, #16
     21e:	b2c0      	uxtb	r0, r0
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     220:	a904      	add	r1, sp, #16
     222:	4b41      	ldr	r3, [pc, #260]	; (328 <spi_init+0x20c>)

			retval = spi_read(module, &received_data);

			if (retval != STATUS_OK) {
     224:	4798      	blx	r3
     226:	3401      	adds	r4, #1
     228:	2c04      	cmp	r4, #4
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
     22a:	d1ea      	bne.n	202 <spi_init+0xe6>
				/* Overflow, abort */
				return retval;
     22c:	7833      	ldrb	r3, [r6, #0]
			}
			/* Read value will be at least 8-bits long */
			rx_data[rx_pos++] = received_data;
     22e:	716b      	strb	r3, [r5, #5]
     230:	7c33      	ldrb	r3, [r6, #16]
     232:	71ab      	strb	r3, [r5, #6]
     234:	7cb3      	ldrb	r3, [r6, #18]
     236:	71eb      	strb	r3, [r5, #7]
     238:	7d33      	ldrb	r3, [r6, #20]

			/* If 9-bit data, write next received byte to the buffer */
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     23a:	722b      	strb	r3, [r5, #8]
     23c:	2200      	movs	r2, #0
     23e:	ab02      	add	r3, sp, #8
     240:	80da      	strh	r2, [r3, #6]
				rx_data[rx_pos++] = (received_data >> 8);
     242:	7833      	ldrb	r3, [r6, #0]
     244:	2b01      	cmp	r3, #1
     246:	d113      	bne.n	270 <spi_init+0x154>
     248:	6828      	ldr	r0, [r5, #0]
     24a:	4b2e      	ldr	r3, [pc, #184]	; (304 <spi_init+0x1e8>)
     24c:	4798      	blx	r3
     24e:	3013      	adds	r0, #19
     250:	b2c0      	uxtb	r0, r0
			if (retval != STATUS_OK) {
				/* Overflow, abort */
				return retval;
			}
			/* Read value will be at least 8-bits long */
			rx_data[rx_pos++] = received_data;
     252:	4b36      	ldr	r3, [pc, #216]	; (32c <spi_init+0x210>)
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		while (rx_length) {
     254:	4798      	blx	r3
     256:	1c01      	adds	r1, r0, #0
     258:	69b0      	ldr	r0, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     25a:	ab02      	add	r3, sp, #8
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
     25c:	1d9a      	adds	r2, r3, #6
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     25e:	4b34      	ldr	r3, [pc, #208]	; (330 <spi_init+0x214>)

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     260:	4798      	blx	r3
     262:	2317      	movs	r3, #23
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     264:	2800      	cmp	r0, #0
     266:	d149      	bne.n	2fc <spi_init+0x1e0>
     268:	ab02      	add	r3, sp, #8
     26a:	3306      	adds	r3, #6
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     26c:	781b      	ldrb	r3, [r3, #0]
     26e:	733b      	strb	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     270:	7833      	ldrb	r3, [r6, #0]
     272:	2b00      	cmp	r3, #0
     274:	d10f      	bne.n	296 <spi_init+0x17a>
     276:	69b0      	ldr	r0, [r6, #24]
     278:	8bb3      	ldrh	r3, [r6, #28]
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     27a:	6a79      	ldr	r1, [r7, #36]	; 0x24
     27c:	7ff2      	ldrb	r2, [r6, #31]
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
     27e:	0412      	lsls	r2, r2, #16
     280:	7fb4      	ldrb	r4, [r6, #30]
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     282:	4322      	orrs	r2, r4
     284:	430a      	orrs	r2, r1
					break;
				}
			}
			if (!spi_is_ready_to_read(module)) {
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
     286:	627a      	str	r2, [r7, #36]	; 0x24
     288:	2220      	movs	r2, #32
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     28a:	5cb2      	ldrb	r2, [r6, r2]
     28c:	2a00      	cmp	r2, #0
		/* Write the data to send */
		spi_write(module, data_to_send);

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     28e:	d004      	beq.n	29a <spi_init+0x17e>
     290:	2140      	movs	r1, #64	; 0x40
     292:	430b      	orrs	r3, r1
     294:	e001      	b.n	29a <spi_init+0x17e>
     296:	2300      	movs	r3, #0
     298:	2000      	movs	r0, #0
			}
		}
	}
#  endif
	return STATUS_OK;
}
     29a:	68b2      	ldr	r2, [r6, #8]
     29c:	6871      	ldr	r1, [r6, #4]
     29e:	430a      	orrs	r2, r1
     2a0:	68f1      	ldr	r1, [r6, #12]
     2a2:	430a      	orrs	r2, r1
     2a4:	4302      	orrs	r2, r0
     2a6:	7c31      	ldrb	r1, [r6, #16]
     2a8:	430b      	orrs	r3, r1
     2aa:	7c71      	ldrb	r1, [r6, #17]
     2ac:	2900      	cmp	r1, #0
     2ae:	d103      	bne.n	2b8 <spi_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     2b0:	4920      	ldr	r1, [pc, #128]	; (334 <spi_init+0x218>)
     2b2:	7889      	ldrb	r1, [r1, #2]

	/* Set SPI character size */
	ctrlb |= config->character_size;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     2b4:	0789      	lsls	r1, r1, #30
     2b6:	d501      	bpl.n	2bc <spi_init+0x1a0>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     2b8:	2180      	movs	r1, #128	; 0x80
     2ba:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     2bc:	7cb1      	ldrb	r1, [r6, #18]
     2be:	2900      	cmp	r1, #0
     2c0:	d002      	beq.n	2c8 <spi_init+0x1ac>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     2c2:	2180      	movs	r1, #128	; 0x80
     2c4:	0289      	lsls	r1, r1, #10
     2c6:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     2c8:	7cf1      	ldrb	r1, [r6, #19]
     2ca:	2900      	cmp	r1, #0
     2cc:	d002      	beq.n	2d4 <spi_init+0x1b8>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     2ce:	2180      	movs	r1, #128	; 0x80
     2d0:	0089      	lsls	r1, r1, #2
     2d2:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     2d4:	7d31      	ldrb	r1, [r6, #20]
     2d6:	2900      	cmp	r1, #0
     2d8:	d002      	beq.n	2e0 <spi_init+0x1c4>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     2da:	2180      	movs	r1, #128	; 0x80
     2dc:	0189      	lsls	r1, r1, #6
     2de:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     2e0:	6839      	ldr	r1, [r7, #0]
     2e2:	430a      	orrs	r2, r1
     2e4:	603a      	str	r2, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     2e6:	687a      	ldr	r2, [r7, #4]
     2e8:	4313      	orrs	r3, r2
     2ea:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
     2ec:	2300      	movs	r3, #0
     2ee:	e005      	b.n	2fc <spi_init+0x1e0>
     2f0:	1c2b      	adds	r3, r5, #0
     2f2:	330c      	adds	r3, #12
     2f4:	1c29      	adds	r1, r5, #0
     2f6:	3128      	adds	r1, #40	; 0x28
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     2f8:	2200      	movs	r2, #0
     2fa:	e74f      	b.n	19c <spi_init+0x80>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     2fc:	1c18      	adds	r0, r3, #0
     2fe:	b00b      	add	sp, #44	; 0x2c
     300:	bdf0      	pop	{r4, r5, r6, r7, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	0000396d 	.word	0x0000396d
     308:	40000800 	.word	0x40000800
     30c:	0000431d 	.word	0x0000431d
     310:	000042b5 	.word	0x000042b5
     314:	00003795 	.word	0x00003795
     318:	00000431 	.word	0x00000431
     31c:	000039ad 	.word	0x000039ad
     320:	20000e0c 	.word	0x20000e0c
     324:	000037e1 	.word	0x000037e1
     328:	00004419 	.word	0x00004419
     32c:	00004341 	.word	0x00004341
     330:	000035a5 	.word	0x000035a5
     334:	41002000 	.word	0x41002000

00000338 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     338:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     33a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     33c:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     33e:	2c01      	cmp	r4, #1
     340:	d174      	bne.n	42c <spi_select_slave+0xf4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     342:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     344:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     346:	2c00      	cmp	r4, #0
     348:	d170      	bne.n	42c <spi_select_slave+0xf4>
#  endif
	{
		if (select) {
     34a:	2a00      	cmp	r2, #0
     34c:	d05d      	beq.n	40a <spi_select_slave+0xd2>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     34e:	784b      	ldrb	r3, [r1, #1]
     350:	2b00      	cmp	r3, #0
     352:	d048      	beq.n	3e6 <spi_select_slave+0xae>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     354:	6803      	ldr	r3, [r0, #0]
     356:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     358:	07db      	lsls	r3, r3, #31
     35a:	d411      	bmi.n	380 <spi_select_slave+0x48>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     35c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     35e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     360:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     362:	2900      	cmp	r1, #0
     364:	d105      	bne.n	372 <spi_select_slave+0x3a>
		return &(ports[port_index]->Group[group_index]);
     366:	095a      	lsrs	r2, r3, #5
     368:	01d2      	lsls	r2, r2, #7
     36a:	2182      	movs	r1, #130	; 0x82
     36c:	05c9      	lsls	r1, r1, #23
     36e:	468c      	mov	ip, r1
     370:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     372:	211f      	movs	r1, #31
     374:	400b      	ands	r3, r1
     376:	391e      	subs	r1, #30
     378:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     37a:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     37c:	2305      	movs	r3, #5
     37e:	e055      	b.n	42c <spi_select_slave+0xf4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     380:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     382:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     384:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     386:	2c00      	cmp	r4, #0
     388:	d105      	bne.n	396 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
     38a:	095a      	lsrs	r2, r3, #5
     38c:	01d2      	lsls	r2, r2, #7
     38e:	2482      	movs	r4, #130	; 0x82
     390:	05e4      	lsls	r4, r4, #23
     392:	46a4      	mov	ip, r4
     394:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     396:	241f      	movs	r4, #31
     398:	4023      	ands	r3, r4
     39a:	3c1e      	subs	r4, #30
     39c:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     39e:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     3a0:	788a      	ldrb	r2, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3a2:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     3a4:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     3a6:	07c9      	lsls	r1, r1, #31
     3a8:	d500      	bpl.n	3ac <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     3aa:	629a      	str	r2, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
     3ac:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     3ae:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     3b0:	2a00      	cmp	r2, #0
     3b2:	d13b      	bne.n	42c <spi_select_slave+0xf4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3b4:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     3b6:	2104      	movs	r1, #4
     3b8:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     3ba:	420b      	tst	r3, r1
     3bc:	d0fc      	beq.n	3b8 <spi_select_slave+0x80>
     3be:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     3c0:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     3c2:	0749      	lsls	r1, r1, #29
     3c4:	d532      	bpl.n	42c <spi_select_slave+0xf4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     3c6:	8b53      	ldrh	r3, [r2, #26]
     3c8:	075b      	lsls	r3, r3, #29
     3ca:	d503      	bpl.n	3d4 <spi_select_slave+0x9c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     3cc:	8b51      	ldrh	r1, [r2, #26]
     3ce:	2304      	movs	r3, #4
     3d0:	430b      	orrs	r3, r1
     3d2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     3d4:	7983      	ldrb	r3, [r0, #6]
     3d6:	2b01      	cmp	r3, #1
     3d8:	d102      	bne.n	3e0 <spi_select_slave+0xa8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     3da:	6a93      	ldr	r3, [r2, #40]	; 0x28
     3dc:	2300      	movs	r3, #0
     3de:	e025      	b.n	42c <spi_select_slave+0xf4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     3e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
     3e2:	2300      	movs	r3, #0
     3e4:	e022      	b.n	42c <spi_select_slave+0xf4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     3e6:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3e8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     3ea:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3ec:	2900      	cmp	r1, #0
     3ee:	d105      	bne.n	3fc <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     3f0:	095a      	lsrs	r2, r3, #5
     3f2:	01d2      	lsls	r2, r2, #7
     3f4:	2182      	movs	r1, #130	; 0x82
     3f6:	05c9      	lsls	r1, r1, #23
     3f8:	468c      	mov	ip, r1
     3fa:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3fc:	211f      	movs	r1, #31
     3fe:	400b      	ands	r3, r1
     400:	391e      	subs	r1, #30
     402:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     404:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     406:	2300      	movs	r3, #0
     408:	e010      	b.n	42c <spi_select_slave+0xf4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     40a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     40c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     40e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     410:	2900      	cmp	r1, #0
     412:	d105      	bne.n	420 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
     414:	095a      	lsrs	r2, r3, #5
     416:	01d2      	lsls	r2, r2, #7
     418:	2182      	movs	r1, #130	; 0x82
     41a:	05c9      	lsls	r1, r1, #23
     41c:	468c      	mov	ip, r1
     41e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     420:	211f      	movs	r1, #31
     422:	400b      	ands	r3, r1
     424:	391e      	subs	r1, #30
     426:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     428:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     42a:	2300      	movs	r3, #0
}
     42c:	1c18      	adds	r0, r3, #0
     42e:	bd10      	pop	{r4, pc}

00000430 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     432:	0080      	lsls	r0, r0, #2
     434:	4b7b      	ldr	r3, [pc, #492]	; (624 <_spi_interrupt_handler+0x1f4>)
     436:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     438:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     43a:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     43c:	5ce3      	ldrb	r3, [r4, r3]
     43e:	2237      	movs	r2, #55	; 0x37
     440:	5ca7      	ldrb	r7, [r4, r2]
     442:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     444:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     446:	7db5      	ldrb	r5, [r6, #22]
     448:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     44a:	07eb      	lsls	r3, r5, #31
     44c:	d543      	bpl.n	4d6 <_spi_interrupt_handler+0xa6>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     44e:	7963      	ldrb	r3, [r4, #5]
     450:	2b01      	cmp	r3, #1
     452:	d116      	bne.n	482 <_spi_interrupt_handler+0x52>
			(module->dir == SPI_DIRECTION_READ)) {
     454:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     456:	2b00      	cmp	r3, #0
     458:	d10f      	bne.n	47a <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
     45a:	4b73      	ldr	r3, [pc, #460]	; (628 <_spi_interrupt_handler+0x1f8>)
     45c:	881b      	ldrh	r3, [r3, #0]
     45e:	62b3      	str	r3, [r6, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     460:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     462:	3b01      	subs	r3, #1
     464:	b29b      	uxth	r3, r3
     466:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
     468:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     46a:	b29b      	uxth	r3, r3
     46c:	2b00      	cmp	r3, #0
     46e:	d101      	bne.n	474 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     470:	3301      	adds	r3, #1
     472:	7533      	strb	r3, [r6, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     474:	7963      	ldrb	r3, [r4, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
     476:	2b01      	cmp	r3, #1
     478:	d103      	bne.n	482 <_spi_interrupt_handler+0x52>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
     47a:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     47c:	2b00      	cmp	r3, #0
     47e:	d105      	bne.n	48c <_spi_interrupt_handler+0x5c>
     480:	e029      	b.n	4d6 <_spi_interrupt_handler+0xa6>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     482:	2b00      	cmp	r3, #0
     484:	d127      	bne.n	4d6 <_spi_interrupt_handler+0xa6>
			(module->dir != SPI_DIRECTION_READ))
     486:	7a63      	ldrb	r3, [r4, #9]
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     488:	2b00      	cmp	r3, #0
     48a:	d024      	beq.n	4d6 <_spi_interrupt_handler+0xa6>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     48c:	6820      	ldr	r0, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     48e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     490:	780b      	ldrb	r3, [r1, #0]
     492:	b2da      	uxtb	r2, r3
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     494:	1c4b      	adds	r3, r1, #1
     496:	62e3      	str	r3, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     498:	79a3      	ldrb	r3, [r4, #6]
     49a:	2b01      	cmp	r3, #1
     49c:	d001      	beq.n	4a2 <_spi_interrupt_handler+0x72>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     49e:	b293      	uxth	r3, r2
     4a0:	e004      	b.n	4ac <_spi_interrupt_handler+0x7c>
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     4a2:	784b      	ldrb	r3, [r1, #1]
     4a4:	021b      	lsls	r3, r3, #8
     4a6:	4313      	orrs	r3, r2
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
     4a8:	3102      	adds	r1, #2
     4aa:	62e1      	str	r1, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     4ac:	05db      	lsls	r3, r3, #23
     4ae:	0ddb      	lsrs	r3, r3, #23
     4b0:	6283      	str	r3, [r0, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     4b2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     4b4:	3b01      	subs	r3, #1
     4b6:	b29b      	uxth	r3, r3
     4b8:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     4ba:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     4bc:	b29b      	uxth	r3, r3
     4be:	2b00      	cmp	r3, #0
     4c0:	d109      	bne.n	4d6 <_spi_interrupt_handler+0xa6>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     4c2:	3301      	adds	r3, #1
     4c4:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     4c6:	7a63      	ldrb	r3, [r4, #9]
     4c8:	2b01      	cmp	r3, #1
     4ca:	d104      	bne.n	4d6 <_spi_interrupt_handler+0xa6>
     4cc:	79e3      	ldrb	r3, [r4, #7]
     4ce:	2b00      	cmp	r3, #0
     4d0:	d101      	bne.n	4d6 <_spi_interrupt_handler+0xa6>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     4d2:	3302      	adds	r3, #2
     4d4:	75b3      	strb	r3, [r6, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     4d6:	076b      	lsls	r3, r5, #29
     4d8:	d561      	bpl.n	59e <_spi_interrupt_handler+0x16e>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     4da:	8b73      	ldrh	r3, [r6, #26]
     4dc:	075b      	lsls	r3, r3, #29
     4de:	d514      	bpl.n	50a <_spi_interrupt_handler+0xda>
			if (module->dir != SPI_DIRECTION_WRITE) {
     4e0:	7a63      	ldrb	r3, [r4, #9]
     4e2:	2b01      	cmp	r3, #1
     4e4:	d00b      	beq.n	4fe <_spi_interrupt_handler+0xce>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     4e6:	221e      	movs	r2, #30
     4e8:	2338      	movs	r3, #56	; 0x38
     4ea:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     4ec:	3b35      	subs	r3, #53	; 0x35
     4ee:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     4f0:	3302      	adds	r3, #2
     4f2:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     4f4:	073b      	lsls	r3, r7, #28
     4f6:	d502      	bpl.n	4fe <_spi_interrupt_handler+0xce>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     4f8:	1c20      	adds	r0, r4, #0
     4fa:	69a3      	ldr	r3, [r4, #24]
     4fc:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     4fe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     500:	8b72      	ldrh	r2, [r6, #26]
     502:	2304      	movs	r3, #4
     504:	4313      	orrs	r3, r2
     506:	8373      	strh	r3, [r6, #26]
     508:	e049      	b.n	59e <_spi_interrupt_handler+0x16e>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
     50a:	7a63      	ldrb	r3, [r4, #9]
     50c:	2b01      	cmp	r3, #1
     50e:	d116      	bne.n	53e <_spi_interrupt_handler+0x10e>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     510:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
     512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     514:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     516:	3b01      	subs	r3, #1
     518:	b29b      	uxth	r3, r3
     51a:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
     51c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     51e:	b29b      	uxth	r3, r3
     520:	2b00      	cmp	r3, #0
     522:	d13c      	bne.n	59e <_spi_interrupt_handler+0x16e>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     524:	3304      	adds	r3, #4
     526:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
     528:	2200      	movs	r2, #0
     52a:	3334      	adds	r3, #52	; 0x34
     52c:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     52e:	3b35      	subs	r3, #53	; 0x35
     530:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
     532:	07fb      	lsls	r3, r7, #31
     534:	d533      	bpl.n	59e <_spi_interrupt_handler+0x16e>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     536:	1c20      	adds	r0, r4, #0
     538:	68e3      	ldr	r3, [r4, #12]
     53a:	4798      	blx	r3
     53c:	e02f      	b.n	59e <_spi_interrupt_handler+0x16e>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     53e:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     542:	05db      	lsls	r3, r3, #23
     544:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
     546:	b2da      	uxtb	r2, r3
     548:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     54a:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
     54c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     54e:	1c51      	adds	r1, r2, #1
     550:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     552:	79a1      	ldrb	r1, [r4, #6]
     554:	2901      	cmp	r1, #1
     556:	d104      	bne.n	562 <_spi_interrupt_handler+0x132>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
     558:	0a1b      	lsrs	r3, r3, #8
     55a:	7053      	strb	r3, [r2, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
     55c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     55e:	3301      	adds	r3, #1
     560:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
     562:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     564:	3b01      	subs	r3, #1
     566:	b29b      	uxth	r3, r3
     568:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
     56a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     56c:	b29b      	uxth	r3, r3
     56e:	2b00      	cmp	r3, #0
     570:	d115      	bne.n	59e <_spi_interrupt_handler+0x16e>
					module->status = STATUS_OK;
     572:	2200      	movs	r2, #0
     574:	3338      	adds	r3, #56	; 0x38
     576:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     578:	3b34      	subs	r3, #52	; 0x34
     57a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     57c:	7a63      	ldrb	r3, [r4, #9]
     57e:	2b02      	cmp	r3, #2
     580:	d105      	bne.n	58e <_spi_interrupt_handler+0x15e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     582:	077b      	lsls	r3, r7, #29
     584:	d50b      	bpl.n	59e <_spi_interrupt_handler+0x16e>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     586:	1c20      	adds	r0, r4, #0
     588:	6963      	ldr	r3, [r4, #20]
     58a:	4798      	blx	r3
     58c:	e007      	b.n	59e <_spi_interrupt_handler+0x16e>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
     58e:	7a63      	ldrb	r3, [r4, #9]
     590:	2b00      	cmp	r3, #0
     592:	d104      	bne.n	59e <_spi_interrupt_handler+0x16e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     594:	07bb      	lsls	r3, r7, #30
     596:	d502      	bpl.n	59e <_spi_interrupt_handler+0x16e>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     598:	1c20      	adds	r0, r4, #0
     59a:	6923      	ldr	r3, [r4, #16]
     59c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     59e:	07ab      	lsls	r3, r5, #30
     5a0:	d528      	bpl.n	5f4 <_spi_interrupt_handler+0x1c4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     5a2:	7963      	ldrb	r3, [r4, #5]
     5a4:	2b00      	cmp	r3, #0
     5a6:	d110      	bne.n	5ca <_spi_interrupt_handler+0x19a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     5a8:	3307      	adds	r3, #7
     5aa:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     5ac:	3b05      	subs	r3, #5
     5ae:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     5b0:	3301      	adds	r3, #1
     5b2:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
     5b4:	2300      	movs	r3, #0
     5b6:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     5b8:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     5ba:	3338      	adds	r3, #56	; 0x38
     5bc:	2200      	movs	r2, #0
     5be:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
     5c0:	06fb      	lsls	r3, r7, #27
     5c2:	d502      	bpl.n	5ca <_spi_interrupt_handler+0x19a>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
     5c4:	1c20      	adds	r0, r4, #0
     5c6:	69e3      	ldr	r3, [r4, #28]
     5c8:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     5ca:	7963      	ldrb	r3, [r4, #5]
     5cc:	2b01      	cmp	r3, #1
     5ce:	d111      	bne.n	5f4 <_spi_interrupt_handler+0x1c4>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     5d0:	7a63      	ldrb	r3, [r4, #9]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     5d2:	2b01      	cmp	r3, #1
     5d4:	d11b      	bne.n	60e <_spi_interrupt_handler+0x1de>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     5d6:	79e3      	ldrb	r3, [r4, #7]
     5d8:	2b00      	cmp	r3, #0
     5da:	d118      	bne.n	60e <_spi_interrupt_handler+0x1de>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     5dc:	3302      	adds	r3, #2
     5de:	7533      	strb	r3, [r6, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
     5e0:	3301      	adds	r3, #1
     5e2:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
     5e4:	2200      	movs	r2, #0
     5e6:	3335      	adds	r3, #53	; 0x35
     5e8:	54e2      	strb	r2, [r4, r3]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     5ea:	07fb      	lsls	r3, r7, #31
     5ec:	d502      	bpl.n	5f4 <_spi_interrupt_handler+0x1c4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
     5ee:	1c20      	adds	r0, r4, #0
     5f0:	68e3      	ldr	r3, [r4, #12]
     5f2:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     5f4:	072b      	lsls	r3, r5, #28
     5f6:	d50a      	bpl.n	60e <_spi_interrupt_handler+0x1de>
			if (module->mode == SPI_MODE_SLAVE) {
     5f8:	7963      	ldrb	r3, [r4, #5]
     5fa:	2b00      	cmp	r3, #0
     5fc:	d107      	bne.n	60e <_spi_interrupt_handler+0x1de>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     5fe:	3308      	adds	r3, #8
     600:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     602:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     604:	06bb      	lsls	r3, r7, #26
     606:	d502      	bpl.n	60e <_spi_interrupt_handler+0x1de>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     608:	1c20      	adds	r0, r4, #0
     60a:	6a23      	ldr	r3, [r4, #32]
     60c:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     60e:	09ed      	lsrs	r5, r5, #7
     610:	d007      	beq.n	622 <_spi_interrupt_handler+0x1f2>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     612:	2380      	movs	r3, #128	; 0x80
     614:	7533      	strb	r3, [r6, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     616:	7633      	strb	r3, [r6, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     618:	067b      	lsls	r3, r7, #25
     61a:	d502      	bpl.n	622 <_spi_interrupt_handler+0x1f2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     61c:	6a63      	ldr	r3, [r4, #36]	; 0x24
     61e:	1c20      	adds	r0, r4, #0
     620:	4798      	blx	r3
		}
	}
#  endif
}
     622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     624:	20000e0c 	.word	0x20000e0c
     628:	20000c40 	.word	0x20000c40

0000062c <configure_motor_tc>:
	//set up the enable_pin
	//timer.enable_pin;
}

void configure_motor_tc(timer_instance_t timer)
{
     62c:	b084      	sub	sp, #16
     62e:	b570      	push	{r4, r5, r6, lr}
     630:	b08e      	sub	sp, #56	; 0x38
     632:	1c05      	adds	r5, r0, #0
     634:	9012      	str	r0, [sp, #72]	; 0x48
     636:	1c0c      	adds	r4, r1, #0
     638:	9113      	str	r1, [sp, #76]	; 0x4c
     63a:	9214      	str	r2, [sp, #80]	; 0x50
     63c:	1c18      	adds	r0, r3, #0
     63e:	9315      	str	r3, [sp, #84]	; 0x54
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     640:	2100      	movs	r1, #0
     642:	2300      	movs	r3, #0
     644:	466a      	mov	r2, sp
     646:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
     648:	2200      	movs	r2, #0
     64a:	466e      	mov	r6, sp
     64c:	80b1      	strh	r1, [r6, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     64e:	71f2      	strb	r2, [r6, #7]
	config->run_in_standby             = false;
     650:	7073      	strb	r3, [r6, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
     652:	70b3      	strb	r3, [r6, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     654:	7233      	strb	r3, [r6, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     656:	7273      	strb	r3, [r6, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     658:	72b3      	strb	r3, [r6, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     65a:	72f3      	strb	r3, [r6, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     65c:	7333      	strb	r3, [r6, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     65e:	73b3      	strb	r3, [r6, #14]
	config->oneshot                    = false;
     660:	7373      	strb	r3, [r6, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
     662:	8531      	strh	r1, [r6, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     664:	85b1      	strh	r1, [r6, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
     666:	2334      	movs	r3, #52	; 0x34
     668:	54f2      	strb	r2, [r6, r3]
	struct tc_config config_motor_tc;
	
	tc_get_config_defaults(&config_motor_tc);
	
	config_motor_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
     66a:	3b30      	subs	r3, #48	; 0x30
     66c:	70f3      	strb	r3, [r6, #3]
	config_motor_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     66e:	3b02      	subs	r3, #2
     670:	71b3      	strb	r3, [r6, #6]
//	config_motor_a_tc.counter_16_bit.compare_capture_channel[0] = (0xFFFF / 4);	
	config_motor_tc.counter_8_bit.period = 255;
     672:	21ff      	movs	r1, #255	; 0xff
     674:	3327      	adds	r3, #39	; 0x27
     676:	54f1      	strb	r1, [r6, r3]
	config_motor_tc.counter_8_bit.compare_capture_channel[0] = (0); //start with PWM off
     678:	3301      	adds	r3, #1
     67a:	54f2      	strb	r2, [r6, r3]
	config_motor_tc.counter_8_bit.compare_capture_channel[1] = (0); //start with PWM off
     67c:	3301      	adds	r3, #1
     67e:	54f2      	strb	r2, [r6, r3]

	config_motor_tc.pwm_channel[0].enabled = true;
     680:	3b2a      	subs	r3, #42	; 0x2a
     682:	466a      	mov	r2, sp
     684:	7433      	strb	r3, [r6, #16]
	config_motor_tc.pwm_channel[0].pin_out = timer.forward_pin;  //MOTOR_A_FORWARD_PIN;
     686:	9505      	str	r5, [sp, #20]
	config_motor_tc.pwm_channel[0].pin_mux = timer.forward_pin_mux; //MOTOR_A_FORWARD_PIN_MUX;
     688:	9406      	str	r4, [sp, #24]
	
	config_motor_tc.pwm_channel[1].enabled = true;
     68a:	7733      	strb	r3, [r6, #28]
	config_motor_tc.pwm_channel[1].pin_out = timer.backward_pin;//MOTOR_A_BACKWARD_PIN;
     68c:	9008      	str	r0, [sp, #32]
	config_motor_tc.pwm_channel[1].pin_mux = timer.backward_pin_mux;//MOTOR_A_BACWARD_PIN_MUX;
     68e:	9b16      	ldr	r3, [sp, #88]	; 0x58
     690:	9309      	str	r3, [sp, #36]	; 0x24

	tc_init(&tc_motor_a_instance, /*MOTOR_A_PWM_MODULE*/timer.timer_module, &config_motor_tc);
     692:	4c09      	ldr	r4, [pc, #36]	; (6b8 <configure_motor_tc+0x8c>)
     694:	1c20      	adds	r0, r4, #0
     696:	9919      	ldr	r1, [sp, #100]	; 0x64
     698:	4b08      	ldr	r3, [pc, #32]	; (6bc <configure_motor_tc+0x90>)
     69a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     69c:	6822      	ldr	r2, [r4, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
     69e:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     6a0:	2b00      	cmp	r3, #0
     6a2:	d1fc      	bne.n	69e <configure_motor_tc+0x72>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     6a4:	6811      	ldr	r1, [r2, #0]
     6a6:	3302      	adds	r3, #2
     6a8:	430b      	orrs	r3, r1
     6aa:	6013      	str	r3, [r2, #0]

	tc_enable(&tc_motor_a_instance);
}
     6ac:	b00e      	add	sp, #56	; 0x38
     6ae:	bc70      	pop	{r4, r5, r6}
     6b0:	bc08      	pop	{r3}
     6b2:	b004      	add	sp, #16
     6b4:	4718      	bx	r3
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	20000c44 	.word	0x20000c44
     6bc:	00004591 	.word	0x00004591

000006c0 <createMotor>:
void initPWM(timer_instance_t timer){
	configure_motor_enable(timer);
	configure_motor_tc(timer);	
}

MotorPtr createMotor(timer_instance_t timer){
     6c0:	b084      	sub	sp, #16
     6c2:	b570      	push	{r4, r5, r6, lr}
     6c4:	b08c      	sub	sp, #48	; 0x30
     6c6:	9010      	str	r0, [sp, #64]	; 0x40
     6c8:	9111      	str	r1, [sp, #68]	; 0x44
     6ca:	9212      	str	r2, [sp, #72]	; 0x48
     6cc:	9313      	str	r3, [sp, #76]	; 0x4c
	MotorPtr MotorInstance = NULL;
	if(numberOfMotors < MAX_MOTORS){
     6ce:	4b15      	ldr	r3, [pc, #84]	; (724 <createMotor+0x64>)
     6d0:	781b      	ldrb	r3, [r3, #0]
     6d2:	2b03      	cmp	r3, #3
     6d4:	d80a      	bhi.n	6ec <createMotor+0x2c>
		MotorInstance = &MotorPool[numberOfMotors++];
     6d6:	1c59      	adds	r1, r3, #1
     6d8:	4a12      	ldr	r2, [pc, #72]	; (724 <createMotor+0x64>)
     6da:	7011      	strb	r1, [r2, #0]
     6dc:	4a12      	ldr	r2, [pc, #72]	; (728 <createMotor+0x68>)
     6de:	005b      	lsls	r3, r3, #1
     6e0:	18d5      	adds	r5, r2, r3
		//initialize the object
		MotorInstance->speed = 0;
     6e2:	2100      	movs	r1, #0
     6e4:	5499      	strb	r1, [r3, r2]
		MotorInstance->direction = FORWARD;
     6e6:	2301      	movs	r3, #1
     6e8:	706b      	strb	r3, [r5, #1]
     6ea:	e000      	b.n	6ee <createMotor+0x2e>
	configure_motor_enable(timer);
	configure_motor_tc(timer);	
}

MotorPtr createMotor(timer_instance_t timer){
	MotorPtr MotorInstance = NULL;
     6ec:	2500      	movs	r5, #0
     6ee:	ac04      	add	r4, sp, #16
     6f0:	1c23      	adds	r3, r4, #0
     6f2:	aa10      	add	r2, sp, #64	; 0x40
     6f4:	ca43      	ldmia	r2!, {r0, r1, r6}
     6f6:	c343      	stmia	r3!, {r0, r1, r6}
     6f8:	ca43      	ldmia	r2!, {r0, r1, r6}
     6fa:	c343      	stmia	r3!, {r0, r1, r6}
     6fc:	ca03      	ldmia	r2!, {r0, r1}
     6fe:	c303      	stmia	r3!, {r0, r1}
	tc_enable(&tc_motor_a_instance);
}

void initPWM(timer_instance_t timer){
	configure_motor_enable(timer);
	configure_motor_tc(timer);	
     700:	ab08      	add	r3, sp, #32
     702:	466a      	mov	r2, sp
     704:	cb43      	ldmia	r3!, {r0, r1, r6}
     706:	c243      	stmia	r2!, {r0, r1, r6}
     708:	681b      	ldr	r3, [r3, #0]
     70a:	6013      	str	r3, [r2, #0]
     70c:	9804      	ldr	r0, [sp, #16]
     70e:	9905      	ldr	r1, [sp, #20]
     710:	9a06      	ldr	r2, [sp, #24]
     712:	9b07      	ldr	r3, [sp, #28]
     714:	4c05      	ldr	r4, [pc, #20]	; (72c <createMotor+0x6c>)
     716:	47a0      	blx	r4
	}
	
	initPWM((timer_instance_t)timer);
	
	return MotorInstance;
}
     718:	1c28      	adds	r0, r5, #0
     71a:	b00c      	add	sp, #48	; 0x30
     71c:	bc70      	pop	{r4, r5, r6}
     71e:	bc08      	pop	{r3}
     720:	b004      	add	sp, #16
     722:	4718      	bx	r3
     724:	2000008c 	.word	0x2000008c
     728:	20000090 	.word	0x20000090
     72c:	0000062d 	.word	0x0000062d

00000730 <setMotorSpeed>:
bool getMotorDirection(MotorPtr motorInstance){
	return motorInstance->direction;
}

void setMotorSpeed(MotorPtr motorInstance, uint8_t speed){
	motorInstance->speed = speed;
     730:	7001      	strb	r1, [r0, #0]
}
     732:	4770      	bx	lr

00000734 <setMotorDirection>:

void setMotorDirection(MotorPtr motorInstance, direction_t direction){
	motorInstance->direction = direction;
     734:	7041      	strb	r1, [r0, #1]
}
     736:	4770      	bx	lr

00000738 <spinMotor>:

void spinMotor(MotorPtr motorInstance, timer_instance_t timer){
     738:	b084      	sub	sp, #16
     73a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     73c:	9107      	str	r1, [sp, #28]
     73e:	9208      	str	r2, [sp, #32]
     740:	1c1c      	adds	r4, r3, #0
     742:	9309      	str	r3, [sp, #36]	; 0x24
     744:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	
	uint8_t forward_pin,backward_pin;
	
	//set the drive signals based on direction
	if(motorInstance->direction == FORWARD){
     746:	7843      	ldrb	r3, [r0, #1]
     748:	2b01      	cmp	r3, #1
     74a:	d10b      	bne.n	764 <spinMotor+0x2c>
		//set waveform out to be the forward pin
		forward_pin = motorInstance->speed;
     74c:	7807      	ldrb	r7, [r0, #0]
//		forward_pin = 50;
		backward_pin = LOW;
		tc_set_compare_value(&tc_motor_a_instance, timer.forward_pin_channel/*MOTOR_A_FORWARD_PIN_CHANNEL*/, backward_pin);
     74e:	4e0d      	ldr	r6, [pc, #52]	; (784 <spinMotor+0x4c>)
     750:	b2e1      	uxtb	r1, r4
     752:	1c30      	adds	r0, r6, #0
     754:	2200      	movs	r2, #0
     756:	4c0c      	ldr	r4, [pc, #48]	; (788 <spinMotor+0x50>)
     758:	47a0      	blx	r4
		tc_set_compare_value(&tc_motor_a_instance, timer.backward_pin_channel/*MOTOR_A_BACKWARD_PIN_CHANNEL*/, forward_pin);
     75a:	b2e9      	uxtb	r1, r5
     75c:	1c30      	adds	r0, r6, #0
     75e:	1c3a      	adds	r2, r7, #0
     760:	47a0      	blx	r4
     762:	e00a      	b.n	77a <spinMotor+0x42>
	}
	else{
		//set waveform out to be the backward pin
		forward_pin = LOW;
		backward_pin = motorInstance->speed;
     764:	7807      	ldrb	r7, [r0, #0]
//		backward_pin = 50;
		tc_set_compare_value(&tc_motor_a_instance, timer.backward_pin_channel/*MOTOR_A_BACKWARD_PIN_CHANNEL*/, forward_pin);
     766:	4e07      	ldr	r6, [pc, #28]	; (784 <spinMotor+0x4c>)
     768:	b2e9      	uxtb	r1, r5
     76a:	1c30      	adds	r0, r6, #0
     76c:	2200      	movs	r2, #0
     76e:	4d06      	ldr	r5, [pc, #24]	; (788 <spinMotor+0x50>)
     770:	47a8      	blx	r5
		tc_set_compare_value(&tc_motor_a_instance, timer.forward_pin_channel/*MOTOR_A_FORWARD_PIN_CHANNEL*/, backward_pin);
     772:	b2e1      	uxtb	r1, r4
     774:	1c30      	adds	r0, r6, #0
     776:	1c3a      	adds	r2, r7, #0
     778:	47a8      	blx	r5
	//set Enable Pin
	
	//drive PWM

	
}
     77a:	bcf8      	pop	{r3, r4, r5, r6, r7}
     77c:	bc08      	pop	{r3}
     77e:	b004      	add	sp, #16
     780:	4718      	bx	r3
     782:	46c0      	nop			; (mov r8, r8)
     784:	20000c44 	.word	0x20000c44
     788:	00004889 	.word	0x00004889

0000078c <radioTimerHandler>:
     78c:	4770      	bx	lr
     78e:	46c0      	nop			; (mov r8, r8)

00000790 <radioDataInd>:
     790:	b508      	push	{r3, lr}
     792:	6883      	ldr	r3, [r0, #8]
     794:	7819      	ldrb	r1, [r3, #0]
     796:	785a      	ldrb	r2, [r3, #1]
     798:	4804      	ldr	r0, [pc, #16]	; (7ac <radioDataInd+0x1c>)
     79a:	4b05      	ldr	r3, [pc, #20]	; (7b0 <radioDataInd+0x20>)
     79c:	4798      	blx	r3
     79e:	2280      	movs	r2, #128	; 0x80
     7a0:	0212      	lsls	r2, r2, #8
     7a2:	2382      	movs	r3, #130	; 0x82
     7a4:	05db      	lsls	r3, r3, #23
     7a6:	61da      	str	r2, [r3, #28]
     7a8:	2001      	movs	r0, #1
     7aa:	bd08      	pop	{r3, pc}
     7ac:	00005f24 	.word	0x00005f24
     7b0:	00004ea1 	.word	0x00004ea1

000007b4 <radioInit>:
     7b4:	b508      	push	{r3, lr}
     7b6:	2001      	movs	r0, #1
     7b8:	4b0b      	ldr	r3, [pc, #44]	; (7e8 <radioInit+0x34>)
     7ba:	4798      	blx	r3
     7bc:	480b      	ldr	r0, [pc, #44]	; (7ec <radioInit+0x38>)
     7be:	4b0c      	ldr	r3, [pc, #48]	; (7f0 <radioInit+0x3c>)
     7c0:	4798      	blx	r3
     7c2:	2001      	movs	r0, #1
     7c4:	4b0b      	ldr	r3, [pc, #44]	; (7f4 <radioInit+0x40>)
     7c6:	4798      	blx	r3
     7c8:	2001      	movs	r0, #1
     7ca:	4b0b      	ldr	r3, [pc, #44]	; (7f8 <radioInit+0x44>)
     7cc:	4798      	blx	r3
     7ce:	2001      	movs	r0, #1
     7d0:	490a      	ldr	r1, [pc, #40]	; (7fc <radioInit+0x48>)
     7d2:	4b0b      	ldr	r3, [pc, #44]	; (800 <radioInit+0x4c>)
     7d4:	4798      	blx	r3
     7d6:	4b0b      	ldr	r3, [pc, #44]	; (804 <radioInit+0x50>)
     7d8:	2214      	movs	r2, #20
     7da:	609a      	str	r2, [r3, #8]
     7dc:	2200      	movs	r2, #0
     7de:	731a      	strb	r2, [r3, #12]
     7e0:	4a09      	ldr	r2, [pc, #36]	; (808 <radioInit+0x54>)
     7e2:	611a      	str	r2, [r3, #16]
     7e4:	bd08      	pop	{r3, pc}
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	00000861 	.word	0x00000861
     7ec:	00001239 	.word	0x00001239
     7f0:	00000875 	.word	0x00000875
     7f4:	00001d01 	.word	0x00001d01
     7f8:	00001ced 	.word	0x00001ced
     7fc:	00000791 	.word	0x00000791
     800:	00000889 	.word	0x00000889
     804:	20000098 	.word	0x20000098
     808:	0000078d 	.word	0x0000078d

0000080c <NWK_Init>:
     80c:	b508      	push	{r3, lr}
     80e:	4a0d      	ldr	r2, [pc, #52]	; (844 <NWK_Init+0x38>)
     810:	2300      	movs	r3, #0
     812:	7113      	strb	r3, [r2, #4]
     814:	7153      	strb	r3, [r2, #5]
     816:	8013      	strh	r3, [r2, #0]
     818:	2148      	movs	r1, #72	; 0x48
     81a:	5253      	strh	r3, [r2, r1]
     81c:	1c13      	adds	r3, r2, #0
     81e:	3240      	adds	r2, #64	; 0x40
     820:	2100      	movs	r1, #0
     822:	6099      	str	r1, [r3, #8]
     824:	3304      	adds	r3, #4
     826:	4293      	cmp	r3, r2
     828:	d1fb      	bne.n	822 <NWK_Init+0x16>
     82a:	4b07      	ldr	r3, [pc, #28]	; (848 <NWK_Init+0x3c>)
     82c:	4798      	blx	r3
     82e:	4b07      	ldr	r3, [pc, #28]	; (84c <NWK_Init+0x40>)
     830:	4798      	blx	r3
     832:	4b07      	ldr	r3, [pc, #28]	; (850 <NWK_Init+0x44>)
     834:	4798      	blx	r3
     836:	4b07      	ldr	r3, [pc, #28]	; (854 <NWK_Init+0x48>)
     838:	4798      	blx	r3
     83a:	4b07      	ldr	r3, [pc, #28]	; (858 <NWK_Init+0x4c>)
     83c:	4798      	blx	r3
     83e:	4b07      	ldr	r3, [pc, #28]	; (85c <NWK_Init+0x50>)
     840:	4798      	blx	r3
     842:	bd08      	pop	{r3, pc}
     844:	20000c60 	.word	0x20000c60
     848:	00001899 	.word	0x00001899
     84c:	0000139d 	.word	0x0000139d
     850:	00000a35 	.word	0x00000a35
     854:	000008f5 	.word	0x000008f5
     858:	00000b39 	.word	0x00000b39
     85c:	000010bd 	.word	0x000010bd

00000860 <NWK_SetAddr>:
     860:	b508      	push	{r3, lr}
     862:	4b02      	ldr	r3, [pc, #8]	; (86c <NWK_SetAddr+0xc>)
     864:	8018      	strh	r0, [r3, #0]
     866:	4b02      	ldr	r3, [pc, #8]	; (870 <NWK_SetAddr+0x10>)
     868:	4798      	blx	r3
     86a:	bd08      	pop	{r3, pc}
     86c:	20000c60 	.word	0x20000c60
     870:	00001d35 	.word	0x00001d35

00000874 <NWK_SetPanId>:
     874:	b508      	push	{r3, lr}
     876:	4b02      	ldr	r3, [pc, #8]	; (880 <NWK_SetPanId+0xc>)
     878:	8058      	strh	r0, [r3, #2]
     87a:	4b02      	ldr	r3, [pc, #8]	; (884 <NWK_SetPanId+0x10>)
     87c:	4798      	blx	r3
     87e:	bd08      	pop	{r3, pc}
     880:	20000c60 	.word	0x20000c60
     884:	00001d15 	.word	0x00001d15

00000888 <NWK_OpenEndpoint>:
     888:	3002      	adds	r0, #2
     88a:	0080      	lsls	r0, r0, #2
     88c:	4b01      	ldr	r3, [pc, #4]	; (894 <NWK_OpenEndpoint+0xc>)
     88e:	50c1      	str	r1, [r0, r3]
     890:	4770      	bx	lr
     892:	46c0      	nop			; (mov r8, r8)
     894:	20000c60 	.word	0x20000c60

00000898 <NWK_TaskHandler>:
     898:	b508      	push	{r3, lr}
     89a:	4b03      	ldr	r3, [pc, #12]	; (8a8 <NWK_TaskHandler+0x10>)
     89c:	4798      	blx	r3
     89e:	4b03      	ldr	r3, [pc, #12]	; (8ac <NWK_TaskHandler+0x14>)
     8a0:	4798      	blx	r3
     8a2:	4b03      	ldr	r3, [pc, #12]	; (8b0 <NWK_TaskHandler+0x18>)
     8a4:	4798      	blx	r3
     8a6:	bd08      	pop	{r3, pc}
     8a8:	00001429 	.word	0x00001429
     8ac:	00001a89 	.word	0x00001a89
     8b0:	00000901 	.word	0x00000901

000008b4 <nwkDataReqTxConf>:
     8b4:	b508      	push	{r3, lr}
     8b6:	4b0d      	ldr	r3, [pc, #52]	; (8ec <nwkDataReqTxConf+0x38>)
     8b8:	681b      	ldr	r3, [r3, #0]
     8ba:	2b00      	cmp	r3, #0
     8bc:	d012      	beq.n	8e4 <nwkDataReqTxConf+0x30>
     8be:	685a      	ldr	r2, [r3, #4]
     8c0:	4282      	cmp	r2, r0
     8c2:	d10c      	bne.n	8de <nwkDataReqTxConf+0x2a>
     8c4:	e002      	b.n	8cc <nwkDataReqTxConf+0x18>
     8c6:	685a      	ldr	r2, [r3, #4]
     8c8:	4282      	cmp	r2, r0
     8ca:	d108      	bne.n	8de <nwkDataReqTxConf+0x2a>
     8cc:	2285      	movs	r2, #133	; 0x85
     8ce:	5c82      	ldrb	r2, [r0, r2]
     8d0:	771a      	strb	r2, [r3, #28]
     8d2:	2288      	movs	r2, #136	; 0x88
     8d4:	5c82      	ldrb	r2, [r0, r2]
     8d6:	775a      	strb	r2, [r3, #29]
     8d8:	2202      	movs	r2, #2
     8da:	721a      	strb	r2, [r3, #8]
     8dc:	e002      	b.n	8e4 <nwkDataReqTxConf+0x30>
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	2b00      	cmp	r3, #0
     8e2:	d1f0      	bne.n	8c6 <nwkDataReqTxConf+0x12>
     8e4:	4b02      	ldr	r3, [pc, #8]	; (8f0 <nwkDataReqTxConf+0x3c>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	200000ac 	.word	0x200000ac
     8f0:	00000ac1 	.word	0x00000ac1

000008f4 <nwkDataReqInit>:
     8f4:	2200      	movs	r2, #0
     8f6:	4b01      	ldr	r3, [pc, #4]	; (8fc <nwkDataReqInit+0x8>)
     8f8:	601a      	str	r2, [r3, #0]
     8fa:	4770      	bx	lr
     8fc:	200000ac 	.word	0x200000ac

00000900 <nwkDataReqTaskHandler>:
     900:	b570      	push	{r4, r5, r6, lr}
     902:	4b46      	ldr	r3, [pc, #280]	; (a1c <nwkDataReqTaskHandler+0x11c>)
     904:	681a      	ldr	r2, [r3, #0]
     906:	2a00      	cmp	r2, #0
     908:	d100      	bne.n	90c <nwkDataReqTaskHandler+0xc>
     90a:	e085      	b.n	a18 <nwkDataReqTaskHandler+0x118>
     90c:	1c14      	adds	r4, r2, #0
     90e:	7a23      	ldrb	r3, [r4, #8]
     910:	2b00      	cmp	r3, #0
     912:	d002      	beq.n	91a <nwkDataReqTaskHandler+0x1a>
     914:	2b02      	cmp	r3, #2
     916:	d066      	beq.n	9e6 <nwkDataReqTaskHandler+0xe6>
     918:	e07a      	b.n	a10 <nwkDataReqTaskHandler+0x110>
     91a:	4b41      	ldr	r3, [pc, #260]	; (a20 <nwkDataReqTaskHandler+0x120>)
     91c:	4798      	blx	r3
     91e:	1e05      	subs	r5, r0, #0
     920:	d103      	bne.n	92a <nwkDataReqTaskHandler+0x2a>
     922:	2302      	movs	r3, #2
     924:	7223      	strb	r3, [r4, #8]
     926:	7723      	strb	r3, [r4, #28]
     928:	e076      	b.n	a18 <nwkDataReqTaskHandler+0x118>
     92a:	6060      	str	r0, [r4, #4]
     92c:	2601      	movs	r6, #1
     92e:	7226      	strb	r6, [r4, #8]
     930:	4b3c      	ldr	r3, [pc, #240]	; (a24 <nwkDataReqTaskHandler+0x124>)
     932:	2289      	movs	r2, #137	; 0x89
     934:	5483      	strb	r3, [r0, r2]
     936:	0a19      	lsrs	r1, r3, #8
     938:	1c02      	adds	r2, r0, #0
     93a:	3289      	adds	r2, #137	; 0x89
     93c:	7051      	strb	r1, [r2, #1]
     93e:	0c19      	lsrs	r1, r3, #16
     940:	7091      	strb	r1, [r2, #2]
     942:	0e1b      	lsrs	r3, r3, #24
     944:	70d3      	strb	r3, [r2, #3]
     946:	7ba1      	ldrb	r1, [r4, #14]
     948:	0889      	lsrs	r1, r1, #2
     94a:	2201      	movs	r2, #1
     94c:	4011      	ands	r1, r2
     94e:	2388      	movs	r3, #136	; 0x88
     950:	54c1      	strb	r1, [r0, r3]
     952:	7ba1      	ldrb	r1, [r4, #14]
     954:	4011      	ands	r1, r2
     956:	1c08      	adds	r0, r1, #0
     958:	7ae9      	ldrb	r1, [r5, #11]
     95a:	43b1      	bics	r1, r6
     95c:	4301      	orrs	r1, r0
     95e:	72e9      	strb	r1, [r5, #11]
     960:	7ba3      	ldrb	r3, [r4, #14]
     962:	08db      	lsrs	r3, r3, #3
     964:	4013      	ands	r3, r2
     966:	009a      	lsls	r2, r3, #2
     968:	b2cb      	uxtb	r3, r1
     96a:	2104      	movs	r1, #4
     96c:	438b      	bics	r3, r1
     96e:	4313      	orrs	r3, r2
     970:	72eb      	strb	r3, [r5, #11]
     972:	4a2d      	ldr	r2, [pc, #180]	; (a28 <nwkDataReqTaskHandler+0x128>)
     974:	7913      	ldrb	r3, [r2, #4]
     976:	3301      	adds	r3, #1
     978:	b2db      	uxtb	r3, r3
     97a:	7113      	strb	r3, [r2, #4]
     97c:	732b      	strb	r3, [r5, #12]
     97e:	7813      	ldrb	r3, [r2, #0]
     980:	736b      	strb	r3, [r5, #13]
     982:	7853      	ldrb	r3, [r2, #1]
     984:	73ab      	strb	r3, [r5, #14]
     986:	8963      	ldrh	r3, [r4, #10]
     988:	7aa2      	ldrb	r2, [r4, #10]
     98a:	73ea      	strb	r2, [r5, #15]
     98c:	0a1b      	lsrs	r3, r3, #8
     98e:	742b      	strb	r3, [r5, #16]
     990:	7b62      	ldrb	r2, [r4, #13]
     992:	200f      	movs	r0, #15
     994:	4002      	ands	r2, r0
     996:	1c11      	adds	r1, r2, #0
     998:	7c6a      	ldrb	r2, [r5, #17]
     99a:	230f      	movs	r3, #15
     99c:	439a      	bics	r2, r3
     99e:	430a      	orrs	r2, r1
     9a0:	746a      	strb	r2, [r5, #17]
     9a2:	7b22      	ldrb	r2, [r4, #12]
     9a4:	0112      	lsls	r2, r2, #4
     9a6:	7c6b      	ldrb	r3, [r5, #17]
     9a8:	4003      	ands	r3, r0
     9aa:	4313      	orrs	r3, r2
     9ac:	746b      	strb	r3, [r5, #17]
     9ae:	2381      	movs	r3, #129	; 0x81
     9b0:	5ce9      	ldrb	r1, [r5, r3]
     9b2:	3301      	adds	r3, #1
     9b4:	5ceb      	ldrb	r3, [r5, r3]
     9b6:	021b      	lsls	r3, r3, #8
     9b8:	430b      	orrs	r3, r1
     9ba:	1c1a      	adds	r2, r3, #0
     9bc:	2383      	movs	r3, #131	; 0x83
     9be:	5ce8      	ldrb	r0, [r5, r3]
     9c0:	0400      	lsls	r0, r0, #16
     9c2:	1c03      	adds	r3, r0, #0
     9c4:	4313      	orrs	r3, r2
     9c6:	2284      	movs	r2, #132	; 0x84
     9c8:	5ca8      	ldrb	r0, [r5, r2]
     9ca:	0600      	lsls	r0, r0, #24
     9cc:	4318      	orrs	r0, r3
     9ce:	7d22      	ldrb	r2, [r4, #20]
     9d0:	6921      	ldr	r1, [r4, #16]
     9d2:	4b16      	ldr	r3, [pc, #88]	; (a2c <nwkDataReqTaskHandler+0x12c>)
     9d4:	4798      	blx	r3
     9d6:	7d22      	ldrb	r2, [r4, #20]
     9d8:	786b      	ldrb	r3, [r5, #1]
     9da:	18d3      	adds	r3, r2, r3
     9dc:	706b      	strb	r3, [r5, #1]
     9de:	1c28      	adds	r0, r5, #0
     9e0:	4b13      	ldr	r3, [pc, #76]	; (a30 <nwkDataReqTaskHandler+0x130>)
     9e2:	4798      	blx	r3
     9e4:	e018      	b.n	a18 <nwkDataReqTaskHandler+0x118>
     9e6:	4294      	cmp	r4, r2
     9e8:	d104      	bne.n	9f4 <nwkDataReqTaskHandler+0xf4>
     9ea:	4b0c      	ldr	r3, [pc, #48]	; (a1c <nwkDataReqTaskHandler+0x11c>)
     9ec:	6822      	ldr	r2, [r4, #0]
     9ee:	601a      	str	r2, [r3, #0]
     9f0:	e005      	b.n	9fe <nwkDataReqTaskHandler+0xfe>
     9f2:	1c1a      	adds	r2, r3, #0
     9f4:	6813      	ldr	r3, [r2, #0]
     9f6:	429c      	cmp	r4, r3
     9f8:	d1fb      	bne.n	9f2 <nwkDataReqTaskHandler+0xf2>
     9fa:	6823      	ldr	r3, [r4, #0]
     9fc:	6013      	str	r3, [r2, #0]
     9fe:	490a      	ldr	r1, [pc, #40]	; (a28 <nwkDataReqTaskHandler+0x128>)
     a00:	2248      	movs	r2, #72	; 0x48
     a02:	5a8b      	ldrh	r3, [r1, r2]
     a04:	3b01      	subs	r3, #1
     a06:	528b      	strh	r3, [r1, r2]
     a08:	69a3      	ldr	r3, [r4, #24]
     a0a:	1c20      	adds	r0, r4, #0
     a0c:	4798      	blx	r3
     a0e:	e003      	b.n	a18 <nwkDataReqTaskHandler+0x118>
     a10:	6824      	ldr	r4, [r4, #0]
     a12:	2c00      	cmp	r4, #0
     a14:	d000      	beq.n	a18 <nwkDataReqTaskHandler+0x118>
     a16:	e77a      	b.n	90e <nwkDataReqTaskHandler+0xe>
     a18:	bd70      	pop	{r4, r5, r6, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	200000ac 	.word	0x200000ac
     a20:	00000a51 	.word	0x00000a51
     a24:	000008b5 	.word	0x000008b5
     a28:	20000c60 	.word	0x20000c60
     a2c:	00004e7d 	.word	0x00004e7d
     a30:	000018cd 	.word	0x000018cd

00000a34 <nwkFrameInit>:
     a34:	4b04      	ldr	r3, [pc, #16]	; (a48 <nwkFrameInit+0x14>)
     a36:	4a05      	ldr	r2, [pc, #20]	; (a4c <nwkFrameInit+0x18>)
     a38:	1899      	adds	r1, r3, r2
     a3a:	2200      	movs	r2, #0
     a3c:	701a      	strb	r2, [r3, #0]
     a3e:	338d      	adds	r3, #141	; 0x8d
     a40:	428b      	cmp	r3, r1
     a42:	d1fb      	bne.n	a3c <nwkFrameInit+0x8>
     a44:	4770      	bx	lr
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	200000b0 	.word	0x200000b0
     a4c:	00000582 	.word	0x00000582

00000a50 <nwkFrameAlloc>:
     a50:	b570      	push	{r4, r5, r6, lr}
     a52:	4b18      	ldr	r3, [pc, #96]	; (ab4 <nwkFrameAlloc+0x64>)
     a54:	781b      	ldrb	r3, [r3, #0]
     a56:	2b00      	cmp	r3, #0
     a58:	d007      	beq.n	a6a <nwkFrameAlloc+0x1a>
     a5a:	4a16      	ldr	r2, [pc, #88]	; (ab4 <nwkFrameAlloc+0x64>)
     a5c:	328d      	adds	r2, #141	; 0x8d
     a5e:	2301      	movs	r3, #1
     a60:	1c18      	adds	r0, r3, #0
     a62:	7811      	ldrb	r1, [r2, #0]
     a64:	2900      	cmp	r1, #0
     a66:	d11d      	bne.n	aa4 <nwkFrameAlloc+0x54>
     a68:	e000      	b.n	a6c <nwkFrameAlloc+0x1c>
     a6a:	2000      	movs	r0, #0
     a6c:	4e11      	ldr	r6, [pc, #68]	; (ab4 <nwkFrameAlloc+0x64>)
     a6e:	248d      	movs	r4, #141	; 0x8d
     a70:	4344      	muls	r4, r0
     a72:	1935      	adds	r5, r6, r4
     a74:	1c28      	adds	r0, r5, #0
     a76:	2100      	movs	r1, #0
     a78:	228d      	movs	r2, #141	; 0x8d
     a7a:	4b0f      	ldr	r3, [pc, #60]	; (ab8 <nwkFrameAlloc+0x68>)
     a7c:	4798      	blx	r3
     a7e:	2310      	movs	r3, #16
     a80:	706b      	strb	r3, [r5, #1]
     a82:	1c28      	adds	r0, r5, #0
     a84:	3012      	adds	r0, #18
     a86:	1c2b      	adds	r3, r5, #0
     a88:	3381      	adds	r3, #129	; 0x81
     a8a:	7018      	strb	r0, [r3, #0]
     a8c:	0a02      	lsrs	r2, r0, #8
     a8e:	705a      	strb	r2, [r3, #1]
     a90:	0c02      	lsrs	r2, r0, #16
     a92:	709a      	strb	r2, [r3, #2]
     a94:	0e00      	lsrs	r0, r0, #24
     a96:	70d8      	strb	r0, [r3, #3]
     a98:	4908      	ldr	r1, [pc, #32]	; (abc <nwkFrameAlloc+0x6c>)
     a9a:	2248      	movs	r2, #72	; 0x48
     a9c:	5a8b      	ldrh	r3, [r1, r2]
     a9e:	3301      	adds	r3, #1
     aa0:	528b      	strh	r3, [r1, r2]
     aa2:	e004      	b.n	aae <nwkFrameAlloc+0x5e>
     aa4:	3301      	adds	r3, #1
     aa6:	328d      	adds	r2, #141	; 0x8d
     aa8:	2b0a      	cmp	r3, #10
     aaa:	d1d9      	bne.n	a60 <nwkFrameAlloc+0x10>
     aac:	2500      	movs	r5, #0
     aae:	1c28      	adds	r0, r5, #0
     ab0:	bd70      	pop	{r4, r5, r6, pc}
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	200000b0 	.word	0x200000b0
     ab8:	00004e8f 	.word	0x00004e8f
     abc:	20000c60 	.word	0x20000c60

00000ac0 <nwkFrameFree>:
     ac0:	2300      	movs	r3, #0
     ac2:	7003      	strb	r3, [r0, #0]
     ac4:	4902      	ldr	r1, [pc, #8]	; (ad0 <nwkFrameFree+0x10>)
     ac6:	2248      	movs	r2, #72	; 0x48
     ac8:	5a8b      	ldrh	r3, [r1, r2]
     aca:	3b01      	subs	r3, #1
     acc:	528b      	strh	r3, [r1, r2]
     ace:	4770      	bx	lr
     ad0:	20000c60 	.word	0x20000c60

00000ad4 <nwkFrameNext>:
     ad4:	2800      	cmp	r0, #0
     ad6:	d007      	beq.n	ae8 <nwkFrameNext+0x14>
     ad8:	308d      	adds	r0, #141	; 0x8d
     ada:	4b0d      	ldr	r3, [pc, #52]	; (b10 <nwkFrameNext+0x3c>)
     adc:	4a0d      	ldr	r2, [pc, #52]	; (b14 <nwkFrameNext+0x40>)
     ade:	4694      	mov	ip, r2
     ae0:	4463      	add	r3, ip
     ae2:	4298      	cmp	r0, r3
     ae4:	d301      	bcc.n	aea <nwkFrameNext+0x16>
     ae6:	e010      	b.n	b0a <nwkFrameNext+0x36>
     ae8:	4809      	ldr	r0, [pc, #36]	; (b10 <nwkFrameNext+0x3c>)
     aea:	7803      	ldrb	r3, [r0, #0]
     aec:	2b00      	cmp	r3, #0
     aee:	d10d      	bne.n	b0c <nwkFrameNext+0x38>
     af0:	4a07      	ldr	r2, [pc, #28]	; (b10 <nwkFrameNext+0x3c>)
     af2:	4b08      	ldr	r3, [pc, #32]	; (b14 <nwkFrameNext+0x40>)
     af4:	469c      	mov	ip, r3
     af6:	4462      	add	r2, ip
     af8:	e002      	b.n	b00 <nwkFrameNext+0x2c>
     afa:	7803      	ldrb	r3, [r0, #0]
     afc:	2b00      	cmp	r3, #0
     afe:	d105      	bne.n	b0c <nwkFrameNext+0x38>
     b00:	308d      	adds	r0, #141	; 0x8d
     b02:	4290      	cmp	r0, r2
     b04:	d3f9      	bcc.n	afa <nwkFrameNext+0x26>
     b06:	2000      	movs	r0, #0
     b08:	e000      	b.n	b0c <nwkFrameNext+0x38>
     b0a:	2000      	movs	r0, #0
     b0c:	4770      	bx	lr
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	200000b0 	.word	0x200000b0
     b14:	00000582 	.word	0x00000582

00000b18 <nwkFrameCommandInit>:
     b18:	2200      	movs	r2, #0
     b1a:	2385      	movs	r3, #133	; 0x85
     b1c:	54c2      	strb	r2, [r0, r3]
     b1e:	4a05      	ldr	r2, [pc, #20]	; (b34 <nwkFrameCommandInit+0x1c>)
     b20:	7913      	ldrb	r3, [r2, #4]
     b22:	3301      	adds	r3, #1
     b24:	b2db      	uxtb	r3, r3
     b26:	7113      	strb	r3, [r2, #4]
     b28:	7303      	strb	r3, [r0, #12]
     b2a:	7813      	ldrb	r3, [r2, #0]
     b2c:	7343      	strb	r3, [r0, #13]
     b2e:	7853      	ldrb	r3, [r2, #1]
     b30:	7383      	strb	r3, [r0, #14]
     b32:	4770      	bx	lr
     b34:	20000c60 	.word	0x20000c60

00000b38 <nwkRouteInit>:
     b38:	b5f0      	push	{r4, r5, r6, r7, lr}
     b3a:	4b09      	ldr	r3, [pc, #36]	; (b60 <nwkRouteInit+0x28>)
     b3c:	3302      	adds	r3, #2
     b3e:	2200      	movs	r2, #0
     b40:	2701      	movs	r7, #1
     b42:	427f      	negs	r7, r7
     b44:	4c06      	ldr	r4, [pc, #24]	; (b60 <nwkRouteInit+0x28>)
     b46:	2601      	movs	r6, #1
     b48:	2500      	movs	r5, #0
     b4a:	801f      	strh	r7, [r3, #0]
     b4c:	00d0      	lsls	r0, r2, #3
     b4e:	5d01      	ldrb	r1, [r0, r4]
     b50:	43b1      	bics	r1, r6
     b52:	5501      	strb	r1, [r0, r4]
     b54:	711d      	strb	r5, [r3, #4]
     b56:	3201      	adds	r2, #1
     b58:	3308      	adds	r3, #8
     b5a:	2a64      	cmp	r2, #100	; 0x64
     b5c:	d1f5      	bne.n	b4a <nwkRouteInit+0x12>
     b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b60:	20000634 	.word	0x20000634

00000b64 <NWK_RouteFindEntry>:
     b64:	b570      	push	{r4, r5, r6, lr}
     b66:	4a0b      	ldr	r2, [pc, #44]	; (b94 <NWK_RouteFindEntry+0x30>)
     b68:	3202      	adds	r2, #2
     b6a:	2300      	movs	r3, #0
     b6c:	4e09      	ldr	r6, [pc, #36]	; (b94 <NWK_RouteFindEntry+0x30>)
     b6e:	8814      	ldrh	r4, [r2, #0]
     b70:	4284      	cmp	r4, r0
     b72:	d109      	bne.n	b88 <NWK_RouteFindEntry+0x24>
     b74:	00dc      	lsls	r4, r3, #3
     b76:	5da4      	ldrb	r4, [r4, r6]
     b78:	07a4      	lsls	r4, r4, #30
     b7a:	0fe4      	lsrs	r4, r4, #31
     b7c:	428c      	cmp	r4, r1
     b7e:	d103      	bne.n	b88 <NWK_RouteFindEntry+0x24>
     b80:	00dd      	lsls	r5, r3, #3
     b82:	4804      	ldr	r0, [pc, #16]	; (b94 <NWK_RouteFindEntry+0x30>)
     b84:	1940      	adds	r0, r0, r5
     b86:	e004      	b.n	b92 <NWK_RouteFindEntry+0x2e>
     b88:	3301      	adds	r3, #1
     b8a:	3208      	adds	r2, #8
     b8c:	2b64      	cmp	r3, #100	; 0x64
     b8e:	d1ee      	bne.n	b6e <NWK_RouteFindEntry+0xa>
     b90:	2000      	movs	r0, #0
     b92:	bd70      	pop	{r4, r5, r6, pc}
     b94:	20000634 	.word	0x20000634

00000b98 <NWK_RouteNewEntry>:
     b98:	b530      	push	{r4, r5, lr}
     b9a:	2200      	movs	r2, #0
     b9c:	4812      	ldr	r0, [pc, #72]	; (be8 <NWK_RouteNewEntry+0x50>)
     b9e:	2401      	movs	r4, #1
     ba0:	1c03      	adds	r3, r0, #0
     ba2:	25c8      	movs	r5, #200	; 0xc8
     ba4:	00ad      	lsls	r5, r5, #2
     ba6:	46ac      	mov	ip, r5
     ba8:	4463      	add	r3, ip
     baa:	1c19      	adds	r1, r3, #0
     bac:	7803      	ldrb	r3, [r0, #0]
     bae:	421c      	tst	r4, r3
     bb0:	d10a      	bne.n	bc8 <NWK_RouteNewEntry+0x30>
     bb2:	7983      	ldrb	r3, [r0, #6]
     bb4:	2b00      	cmp	r3, #0
     bb6:	d00b      	beq.n	bd0 <NWK_RouteNewEntry+0x38>
     bb8:	2a00      	cmp	r2, #0
     bba:	d004      	beq.n	bc6 <NWK_RouteNewEntry+0x2e>
     bbc:	7995      	ldrb	r5, [r2, #6]
     bbe:	429d      	cmp	r5, r3
     bc0:	d902      	bls.n	bc8 <NWK_RouteNewEntry+0x30>
     bc2:	1c02      	adds	r2, r0, #0
     bc4:	e000      	b.n	bc8 <NWK_RouteNewEntry+0x30>
     bc6:	1c02      	adds	r2, r0, #0
     bc8:	3008      	adds	r0, #8
     bca:	4288      	cmp	r0, r1
     bcc:	d1ee      	bne.n	bac <NWK_RouteNewEntry+0x14>
     bce:	1c10      	adds	r0, r2, #0
     bd0:	7803      	ldrb	r3, [r0, #0]
     bd2:	2202      	movs	r2, #2
     bd4:	4393      	bics	r3, r2
     bd6:	320d      	adds	r2, #13
     bd8:	4013      	ands	r3, r2
     bda:	2230      	movs	r2, #48	; 0x30
     bdc:	4313      	orrs	r3, r2
     bde:	7003      	strb	r3, [r0, #0]
     be0:	2380      	movs	r3, #128	; 0x80
     be2:	7183      	strb	r3, [r0, #6]
     be4:	bd30      	pop	{r4, r5, pc}
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	20000634 	.word	0x20000634

00000bec <NWK_RouteFreeEntry>:
     bec:	7803      	ldrb	r3, [r0, #0]
     bee:	07db      	lsls	r3, r3, #31
     bf0:	d404      	bmi.n	bfc <NWK_RouteFreeEntry+0x10>
     bf2:	2301      	movs	r3, #1
     bf4:	425b      	negs	r3, r3
     bf6:	8043      	strh	r3, [r0, #2]
     bf8:	2300      	movs	r3, #0
     bfa:	7183      	strb	r3, [r0, #6]
     bfc:	4770      	bx	lr
     bfe:	46c0      	nop			; (mov r8, r8)

00000c00 <NWK_RouteNextHop>:
     c00:	b508      	push	{r3, lr}
     c02:	4b04      	ldr	r3, [pc, #16]	; (c14 <NWK_RouteNextHop+0x14>)
     c04:	4798      	blx	r3
     c06:	2800      	cmp	r0, #0
     c08:	d001      	beq.n	c0e <NWK_RouteNextHop+0xe>
     c0a:	8880      	ldrh	r0, [r0, #4]
     c0c:	e000      	b.n	c10 <NWK_RouteNextHop+0x10>
     c0e:	4802      	ldr	r0, [pc, #8]	; (c18 <NWK_RouteNextHop+0x18>)
     c10:	bd08      	pop	{r3, pc}
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	00000b65 	.word	0x00000b65
     c18:	0000ffff 	.word	0x0000ffff

00000c1c <nwkRouteUpdateEntry>:
     c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c1e:	1c06      	adds	r6, r0, #0
     c20:	1c0c      	adds	r4, r1, #0
     c22:	1c17      	adds	r7, r2, #0
     c24:	1c1d      	adds	r5, r3, #0
     c26:	4b0c      	ldr	r3, [pc, #48]	; (c58 <nwkRouteUpdateEntry+0x3c>)
     c28:	4798      	blx	r3
     c2a:	2800      	cmp	r0, #0
     c2c:	d101      	bne.n	c32 <nwkRouteUpdateEntry+0x16>
     c2e:	4b0b      	ldr	r3, [pc, #44]	; (c5c <nwkRouteUpdateEntry+0x40>)
     c30:	4798      	blx	r3
     c32:	8046      	strh	r6, [r0, #2]
     c34:	8087      	strh	r7, [r0, #4]
     c36:	2301      	movs	r3, #1
     c38:	401c      	ands	r4, r3
     c3a:	0063      	lsls	r3, r4, #1
     c3c:	7804      	ldrb	r4, [r0, #0]
     c3e:	2202      	movs	r2, #2
     c40:	4394      	bics	r4, r2
     c42:	431c      	orrs	r4, r3
     c44:	230f      	movs	r3, #15
     c46:	401c      	ands	r4, r3
     c48:	2330      	movs	r3, #48	; 0x30
     c4a:	431c      	orrs	r4, r3
     c4c:	7004      	strb	r4, [r0, #0]
     c4e:	2380      	movs	r3, #128	; 0x80
     c50:	7183      	strb	r3, [r0, #6]
     c52:	71c5      	strb	r5, [r0, #7]
     c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c56:	46c0      	nop			; (mov r8, r8)
     c58:	00000b65 	.word	0x00000b65
     c5c:	00000b99 	.word	0x00000b99

00000c60 <nwkRouteRemove>:
     c60:	b508      	push	{r3, lr}
     c62:	4b03      	ldr	r3, [pc, #12]	; (c70 <nwkRouteRemove+0x10>)
     c64:	4798      	blx	r3
     c66:	2800      	cmp	r0, #0
     c68:	d001      	beq.n	c6e <nwkRouteRemove+0xe>
     c6a:	4b02      	ldr	r3, [pc, #8]	; (c74 <nwkRouteRemove+0x14>)
     c6c:	4798      	blx	r3
     c6e:	bd08      	pop	{r3, pc}
     c70:	00000b65 	.word	0x00000b65
     c74:	00000bed 	.word	0x00000bed

00000c78 <nwkRouteFrameReceived>:
     c78:	4770      	bx	lr
     c7a:	46c0      	nop			; (mov r8, r8)

00000c7c <nwkRouteFrameSent>:
     c7c:	b510      	push	{r4, lr}
     c7e:	7bc2      	ldrb	r2, [r0, #15]
     c80:	7c03      	ldrb	r3, [r0, #16]
     c82:	021b      	lsls	r3, r3, #8
     c84:	4313      	orrs	r3, r2
     c86:	4a1d      	ldr	r2, [pc, #116]	; (cfc <nwkRouteFrameSent+0x80>)
     c88:	4293      	cmp	r3, r2
     c8a:	d035      	beq.n	cf8 <nwkRouteFrameSent+0x7c>
     c8c:	1c04      	adds	r4, r0, #0
     c8e:	7ac1      	ldrb	r1, [r0, #11]
     c90:	0709      	lsls	r1, r1, #28
     c92:	0fc9      	lsrs	r1, r1, #31
     c94:	1c18      	adds	r0, r3, #0
     c96:	4b1a      	ldr	r3, [pc, #104]	; (d00 <nwkRouteFrameSent+0x84>)
     c98:	4798      	blx	r3
     c9a:	2800      	cmp	r0, #0
     c9c:	d02c      	beq.n	cf8 <nwkRouteFrameSent+0x7c>
     c9e:	7803      	ldrb	r3, [r0, #0]
     ca0:	07db      	lsls	r3, r3, #31
     ca2:	d429      	bmi.n	cf8 <nwkRouteFrameSent+0x7c>
     ca4:	2385      	movs	r3, #133	; 0x85
     ca6:	5ce3      	ldrb	r3, [r4, r3]
     ca8:	2b00      	cmp	r3, #0
     caa:	d118      	bne.n	cde <nwkRouteFrameSent+0x62>
     cac:	7803      	ldrb	r3, [r0, #0]
     cae:	220f      	movs	r2, #15
     cb0:	4013      	ands	r3, r2
     cb2:	2230      	movs	r2, #48	; 0x30
     cb4:	4313      	orrs	r3, r2
     cb6:	7003      	strb	r3, [r0, #0]
     cb8:	7983      	ldrb	r3, [r0, #6]
     cba:	3301      	adds	r3, #1
     cbc:	b2db      	uxtb	r3, r3
     cbe:	7183      	strb	r3, [r0, #6]
     cc0:	2bff      	cmp	r3, #255	; 0xff
     cc2:	d119      	bne.n	cf8 <nwkRouteFrameSent+0x7c>
     cc4:	490f      	ldr	r1, [pc, #60]	; (d04 <nwkRouteFrameSent+0x88>)
     cc6:	1d8a      	adds	r2, r1, #6
     cc8:	4b0f      	ldr	r3, [pc, #60]	; (d08 <nwkRouteFrameSent+0x8c>)
     cca:	469c      	mov	ip, r3
     ccc:	4461      	add	r1, ip
     cce:	7813      	ldrb	r3, [r2, #0]
     cd0:	085b      	lsrs	r3, r3, #1
     cd2:	3301      	adds	r3, #1
     cd4:	7013      	strb	r3, [r2, #0]
     cd6:	3208      	adds	r2, #8
     cd8:	428a      	cmp	r2, r1
     cda:	d1f8      	bne.n	cce <nwkRouteFrameSent+0x52>
     cdc:	e00c      	b.n	cf8 <nwkRouteFrameSent+0x7c>
     cde:	7802      	ldrb	r2, [r0, #0]
     ce0:	0913      	lsrs	r3, r2, #4
     ce2:	330f      	adds	r3, #15
     ce4:	240f      	movs	r4, #15
     ce6:	4023      	ands	r3, r4
     ce8:	0119      	lsls	r1, r3, #4
     cea:	4022      	ands	r2, r4
     cec:	430a      	orrs	r2, r1
     cee:	7002      	strb	r2, [r0, #0]
     cf0:	2b00      	cmp	r3, #0
     cf2:	d101      	bne.n	cf8 <nwkRouteFrameSent+0x7c>
     cf4:	4b05      	ldr	r3, [pc, #20]	; (d0c <nwkRouteFrameSent+0x90>)
     cf6:	4798      	blx	r3
     cf8:	bd10      	pop	{r4, pc}
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	0000ffff 	.word	0x0000ffff
     d00:	00000b65 	.word	0x00000b65
     d04:	20000634 	.word	0x20000634
     d08:	00000326 	.word	0x00000326
     d0c:	00000bed 	.word	0x00000bed

00000d10 <nwkRoutePrepareTx>:
     d10:	b510      	push	{r4, lr}
     d12:	7bc2      	ldrb	r2, [r0, #15]
     d14:	7c03      	ldrb	r3, [r0, #16]
     d16:	021b      	lsls	r3, r3, #8
     d18:	4313      	orrs	r3, r2
     d1a:	4a10      	ldr	r2, [pc, #64]	; (d5c <nwkRoutePrepareTx+0x4c>)
     d1c:	4293      	cmp	r3, r2
     d1e:	d104      	bne.n	d2a <nwkRoutePrepareTx+0x1a>
     d20:	2301      	movs	r3, #1
     d22:	425b      	negs	r3, r3
     d24:	71c3      	strb	r3, [r0, #7]
     d26:	7203      	strb	r3, [r0, #8]
     d28:	e016      	b.n	d58 <nwkRoutePrepareTx+0x48>
     d2a:	7ac2      	ldrb	r2, [r0, #11]
     d2c:	0752      	lsls	r2, r2, #29
     d2e:	d503      	bpl.n	d38 <nwkRoutePrepareTx+0x28>
     d30:	71c3      	strb	r3, [r0, #7]
     d32:	0a1b      	lsrs	r3, r3, #8
     d34:	7203      	strb	r3, [r0, #8]
     d36:	e00f      	b.n	d58 <nwkRoutePrepareTx+0x48>
     d38:	1c04      	adds	r4, r0, #0
     d3a:	7ac1      	ldrb	r1, [r0, #11]
     d3c:	0709      	lsls	r1, r1, #28
     d3e:	0fc9      	lsrs	r1, r1, #31
     d40:	1c18      	adds	r0, r3, #0
     d42:	4b07      	ldr	r3, [pc, #28]	; (d60 <nwkRoutePrepareTx+0x50>)
     d44:	4798      	blx	r3
     d46:	71e0      	strb	r0, [r4, #7]
     d48:	0a03      	lsrs	r3, r0, #8
     d4a:	7223      	strb	r3, [r4, #8]
     d4c:	4b03      	ldr	r3, [pc, #12]	; (d5c <nwkRoutePrepareTx+0x4c>)
     d4e:	4298      	cmp	r0, r3
     d50:	d102      	bne.n	d58 <nwkRoutePrepareTx+0x48>
     d52:	1c20      	adds	r0, r4, #0
     d54:	4b03      	ldr	r3, [pc, #12]	; (d64 <nwkRoutePrepareTx+0x54>)
     d56:	4798      	blx	r3
     d58:	bd10      	pop	{r4, pc}
     d5a:	46c0      	nop			; (mov r8, r8)
     d5c:	0000ffff 	.word	0x0000ffff
     d60:	00000c01 	.word	0x00000c01
     d64:	000010e9 	.word	0x000010e9

00000d68 <nwkRouteFrame>:
     d68:	b5f0      	push	{r4, r5, r6, r7, lr}
     d6a:	4647      	mov	r7, r8
     d6c:	b480      	push	{r7}
     d6e:	1c06      	adds	r6, r0, #0
     d70:	7bc2      	ldrb	r2, [r0, #15]
     d72:	7c07      	ldrb	r7, [r0, #16]
     d74:	023f      	lsls	r7, r7, #8
     d76:	4317      	orrs	r7, r2
     d78:	7ac4      	ldrb	r4, [r0, #11]
     d7a:	0724      	lsls	r4, r4, #28
     d7c:	0fe4      	lsrs	r4, r4, #31
     d7e:	b2e1      	uxtb	r1, r4
     d80:	1c38      	adds	r0, r7, #0
     d82:	4b2a      	ldr	r3, [pc, #168]	; (e2c <nwkRouteFrame+0xc4>)
     d84:	4798      	blx	r3
     d86:	4b2a      	ldr	r3, [pc, #168]	; (e30 <nwkRouteFrame+0xc8>)
     d88:	4298      	cmp	r0, r3
     d8a:	d00e      	beq.n	daa <nwkRouteFrame+0x42>
     d8c:	2200      	movs	r2, #0
     d8e:	2389      	movs	r3, #137	; 0x89
     d90:	54f2      	strb	r2, [r6, r3]
     d92:	1c33      	adds	r3, r6, #0
     d94:	3389      	adds	r3, #137	; 0x89
     d96:	705a      	strb	r2, [r3, #1]
     d98:	709a      	strb	r2, [r3, #2]
     d9a:	70da      	strb	r2, [r3, #3]
     d9c:	3202      	adds	r2, #2
     d9e:	2388      	movs	r3, #136	; 0x88
     da0:	54f2      	strb	r2, [r6, r3]
     da2:	1c30      	adds	r0, r6, #0
     da4:	4b23      	ldr	r3, [pc, #140]	; (e34 <nwkRouteFrame+0xcc>)
     da6:	4798      	blx	r3
     da8:	e03d      	b.n	e26 <nwkRouteFrame+0xbe>
     daa:	7b72      	ldrb	r2, [r6, #13]
     dac:	7bb3      	ldrb	r3, [r6, #14]
     dae:	021b      	lsls	r3, r3, #8
     db0:	4313      	orrs	r3, r2
     db2:	4698      	mov	r8, r3
     db4:	4b20      	ldr	r3, [pc, #128]	; (e38 <nwkRouteFrame+0xd0>)
     db6:	4798      	blx	r3
     db8:	1e05      	subs	r5, r0, #0
     dba:	d031      	beq.n	e20 <nwkRouteFrame+0xb8>
     dbc:	4b1f      	ldr	r3, [pc, #124]	; (e3c <nwkRouteFrame+0xd4>)
     dbe:	4798      	blx	r3
     dc0:	786b      	ldrb	r3, [r5, #1]
     dc2:	3306      	adds	r3, #6
     dc4:	706b      	strb	r3, [r5, #1]
     dc6:	2200      	movs	r2, #0
     dc8:	2389      	movs	r3, #137	; 0x89
     dca:	54ea      	strb	r2, [r5, r3]
     dcc:	1c2b      	adds	r3, r5, #0
     dce:	3389      	adds	r3, #137	; 0x89
     dd0:	705a      	strb	r2, [r3, #1]
     dd2:	709a      	strb	r2, [r3, #2]
     dd4:	70da      	strb	r2, [r3, #3]
     dd6:	23ff      	movs	r3, #255	; 0xff
     dd8:	4642      	mov	r2, r8
     dda:	401a      	ands	r2, r3
     ddc:	4694      	mov	ip, r2
     dde:	73ea      	strb	r2, [r5, #15]
     de0:	4643      	mov	r3, r8
     de2:	0a1b      	lsrs	r3, r3, #8
     de4:	4698      	mov	r8, r3
     de6:	742b      	strb	r3, [r5, #16]
     de8:	2381      	movs	r3, #129	; 0x81
     dea:	5ce8      	ldrb	r0, [r5, r3]
     dec:	3301      	adds	r3, #1
     dee:	5cea      	ldrb	r2, [r5, r3]
     df0:	0212      	lsls	r2, r2, #8
     df2:	4302      	orrs	r2, r0
     df4:	3301      	adds	r3, #1
     df6:	5ceb      	ldrb	r3, [r5, r3]
     df8:	041b      	lsls	r3, r3, #16
     dfa:	4313      	orrs	r3, r2
     dfc:	1c1a      	adds	r2, r3, #0
     dfe:	2384      	movs	r3, #132	; 0x84
     e00:	5ceb      	ldrb	r3, [r5, r3]
     e02:	061b      	lsls	r3, r3, #24
     e04:	4313      	orrs	r3, r2
     e06:	2201      	movs	r2, #1
     e08:	701a      	strb	r2, [r3, #0]
     e0a:	4662      	mov	r2, ip
     e0c:	705a      	strb	r2, [r3, #1]
     e0e:	4642      	mov	r2, r8
     e10:	709a      	strb	r2, [r3, #2]
     e12:	70df      	strb	r7, [r3, #3]
     e14:	0a3f      	lsrs	r7, r7, #8
     e16:	711f      	strb	r7, [r3, #4]
     e18:	715c      	strb	r4, [r3, #5]
     e1a:	1c28      	adds	r0, r5, #0
     e1c:	4b05      	ldr	r3, [pc, #20]	; (e34 <nwkRouteFrame+0xcc>)
     e1e:	4798      	blx	r3
     e20:	1c30      	adds	r0, r6, #0
     e22:	4b07      	ldr	r3, [pc, #28]	; (e40 <nwkRouteFrame+0xd8>)
     e24:	4798      	blx	r3
     e26:	bc04      	pop	{r2}
     e28:	4690      	mov	r8, r2
     e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e2c:	00000c01 	.word	0x00000c01
     e30:	0000ffff 	.word	0x0000ffff
     e34:	000018cd 	.word	0x000018cd
     e38:	00000a51 	.word	0x00000a51
     e3c:	00000b19 	.word	0x00000b19
     e40:	00000ac1 	.word	0x00000ac1

00000e44 <nwkRouteErrorReceived>:
     e44:	b508      	push	{r3, lr}
     e46:	6882      	ldr	r2, [r0, #8]
     e48:	7b03      	ldrb	r3, [r0, #12]
     e4a:	2000      	movs	r0, #0
     e4c:	2b06      	cmp	r3, #6
     e4e:	d107      	bne.n	e60 <nwkRouteErrorReceived+0x1c>
     e50:	78d3      	ldrb	r3, [r2, #3]
     e52:	7910      	ldrb	r0, [r2, #4]
     e54:	0200      	lsls	r0, r0, #8
     e56:	4318      	orrs	r0, r3
     e58:	7951      	ldrb	r1, [r2, #5]
     e5a:	4b02      	ldr	r3, [pc, #8]	; (e64 <nwkRouteErrorReceived+0x20>)
     e5c:	4798      	blx	r3
     e5e:	2001      	movs	r0, #1
     e60:	bd08      	pop	{r3, pc}
     e62:	46c0      	nop			; (mov r8, r8)
     e64:	00000c61 	.word	0x00000c61

00000e68 <nwkRouteDiscoveryFindEntry>:
     e68:	b5f0      	push	{r4, r5, r6, r7, lr}
     e6a:	4b0d      	ldr	r3, [pc, #52]	; (ea0 <nwkRouteDiscoveryFindEntry+0x38>)
     e6c:	2400      	movs	r4, #0
     e6e:	895d      	ldrh	r5, [r3, #10]
     e70:	2d00      	cmp	r5, #0
     e72:	d00e      	beq.n	e92 <nwkRouteDiscoveryFindEntry+0x2a>
     e74:	881d      	ldrh	r5, [r3, #0]
     e76:	4285      	cmp	r5, r0
     e78:	d10b      	bne.n	e92 <nwkRouteDiscoveryFindEntry+0x2a>
     e7a:	885d      	ldrh	r5, [r3, #2]
     e7c:	428d      	cmp	r5, r1
     e7e:	d108      	bne.n	e92 <nwkRouteDiscoveryFindEntry+0x2a>
     e80:	791d      	ldrb	r5, [r3, #4]
     e82:	4295      	cmp	r5, r2
     e84:	d105      	bne.n	e92 <nwkRouteDiscoveryFindEntry+0x2a>
     e86:	0060      	lsls	r0, r4, #1
     e88:	1906      	adds	r6, r0, r4
     e8a:	00b6      	lsls	r6, r6, #2
     e8c:	4804      	ldr	r0, [pc, #16]	; (ea0 <nwkRouteDiscoveryFindEntry+0x38>)
     e8e:	1980      	adds	r0, r0, r6
     e90:	e004      	b.n	e9c <nwkRouteDiscoveryFindEntry+0x34>
     e92:	3401      	adds	r4, #1
     e94:	330c      	adds	r3, #12
     e96:	2c05      	cmp	r4, #5
     e98:	d1e9      	bne.n	e6e <nwkRouteDiscoveryFindEntry+0x6>
     e9a:	2000      	movs	r0, #0
     e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	20000968 	.word	0x20000968

00000ea4 <nwkRouteDiscoveryNewEntry>:
     ea4:	b538      	push	{r3, r4, r5, lr}
     ea6:	4b11      	ldr	r3, [pc, #68]	; (eec <nwkRouteDiscoveryNewEntry+0x48>)
     ea8:	895b      	ldrh	r3, [r3, #10]
     eaa:	2b00      	cmp	r3, #0
     eac:	d007      	beq.n	ebe <nwkRouteDiscoveryNewEntry+0x1a>
     eae:	4a0f      	ldr	r2, [pc, #60]	; (eec <nwkRouteDiscoveryNewEntry+0x48>)
     eb0:	3216      	adds	r2, #22
     eb2:	2301      	movs	r3, #1
     eb4:	1c1c      	adds	r4, r3, #0
     eb6:	8811      	ldrh	r1, [r2, #0]
     eb8:	2900      	cmp	r1, #0
     eba:	d110      	bne.n	ede <nwkRouteDiscoveryNewEntry+0x3a>
     ebc:	e000      	b.n	ec0 <nwkRouteDiscoveryNewEntry+0x1c>
     ebe:	2400      	movs	r4, #0
     ec0:	4b0a      	ldr	r3, [pc, #40]	; (eec <nwkRouteDiscoveryNewEntry+0x48>)
     ec2:	0062      	lsls	r2, r4, #1
     ec4:	1915      	adds	r5, r2, r4
     ec6:	00ad      	lsls	r5, r5, #2
     ec8:	195d      	adds	r5, r3, r5
     eca:	2100      	movs	r1, #0
     ecc:	7229      	strb	r1, [r5, #8]
     ece:	7269      	strb	r1, [r5, #9]
     ed0:	23fa      	movs	r3, #250	; 0xfa
     ed2:	009b      	lsls	r3, r3, #2
     ed4:	816b      	strh	r3, [r5, #10]
     ed6:	4806      	ldr	r0, [pc, #24]	; (ef0 <nwkRouteDiscoveryNewEntry+0x4c>)
     ed8:	4b06      	ldr	r3, [pc, #24]	; (ef4 <nwkRouteDiscoveryNewEntry+0x50>)
     eda:	4798      	blx	r3
     edc:	e004      	b.n	ee8 <nwkRouteDiscoveryNewEntry+0x44>
     ede:	3301      	adds	r3, #1
     ee0:	320c      	adds	r2, #12
     ee2:	2b05      	cmp	r3, #5
     ee4:	d1e6      	bne.n	eb4 <nwkRouteDiscoveryNewEntry+0x10>
     ee6:	2500      	movs	r5, #0
     ee8:	1c28      	adds	r0, r5, #0
     eea:	bd38      	pop	{r3, r4, r5, pc}
     eec:	20000968 	.word	0x20000968
     ef0:	20000954 	.word	0x20000954
     ef4:	00001fb5 	.word	0x00001fb5

00000ef8 <nwkRouteDiscoveryTimerHandler>:
     ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
     efa:	4647      	mov	r7, r8
     efc:	b480      	push	{r7}
     efe:	b082      	sub	sp, #8
     f00:	9001      	str	r0, [sp, #4]
     f02:	4d23      	ldr	r5, [pc, #140]	; (f90 <nwkRouteDiscoveryTimerHandler+0x98>)
     f04:	1c2e      	adds	r6, r5, #0
     f06:	363c      	adds	r6, #60	; 0x3c
     f08:	2700      	movs	r7, #0
     f0a:	9500      	str	r5, [sp, #0]
     f0c:	896b      	ldrh	r3, [r5, #10]
     f0e:	2b64      	cmp	r3, #100	; 0x64
     f10:	d903      	bls.n	f1a <nwkRouteDiscoveryTimerHandler+0x22>
     f12:	3b64      	subs	r3, #100	; 0x64
     f14:	816b      	strh	r3, [r5, #10]
     f16:	2701      	movs	r7, #1
     f18:	e02d      	b.n	f76 <nwkRouteDiscoveryTimerHandler+0x7e>
     f1a:	2300      	movs	r3, #0
     f1c:	816b      	strh	r3, [r5, #10]
     f1e:	882a      	ldrh	r2, [r5, #0]
     f20:	4b1c      	ldr	r3, [pc, #112]	; (f94 <nwkRouteDiscoveryTimerHandler+0x9c>)
     f22:	881b      	ldrh	r3, [r3, #0]
     f24:	429a      	cmp	r2, r3
     f26:	d126      	bne.n	f76 <nwkRouteDiscoveryTimerHandler+0x7e>
     f28:	9b00      	ldr	r3, [sp, #0]
     f2a:	7a5b      	ldrb	r3, [r3, #9]
     f2c:	4698      	mov	r8, r3
     f2e:	2400      	movs	r4, #0
     f30:	e01c      	b.n	f6c <nwkRouteDiscoveryTimerHandler+0x74>
     f32:	7823      	ldrb	r3, [r4, #0]
     f34:	2b40      	cmp	r3, #64	; 0x40
     f36:	d119      	bne.n	f6c <nwkRouteDiscoveryTimerHandler+0x74>
     f38:	7be2      	ldrb	r2, [r4, #15]
     f3a:	7c23      	ldrb	r3, [r4, #16]
     f3c:	021b      	lsls	r3, r3, #8
     f3e:	9900      	ldr	r1, [sp, #0]
     f40:	8849      	ldrh	r1, [r1, #2]
     f42:	4313      	orrs	r3, r2
     f44:	4299      	cmp	r1, r3
     f46:	d111      	bne.n	f6c <nwkRouteDiscoveryTimerHandler+0x74>
     f48:	7ae3      	ldrb	r3, [r4, #11]
     f4a:	071b      	lsls	r3, r3, #28
     f4c:	9a00      	ldr	r2, [sp, #0]
     f4e:	7912      	ldrb	r2, [r2, #4]
     f50:	0fdb      	lsrs	r3, r3, #31
     f52:	429a      	cmp	r2, r3
     f54:	d10a      	bne.n	f6c <nwkRouteDiscoveryTimerHandler+0x74>
     f56:	4643      	mov	r3, r8
     f58:	2b00      	cmp	r3, #0
     f5a:	d003      	beq.n	f64 <nwkRouteDiscoveryTimerHandler+0x6c>
     f5c:	1c20      	adds	r0, r4, #0
     f5e:	4b0e      	ldr	r3, [pc, #56]	; (f98 <nwkRouteDiscoveryTimerHandler+0xa0>)
     f60:	4798      	blx	r3
     f62:	e003      	b.n	f6c <nwkRouteDiscoveryTimerHandler+0x74>
     f64:	1c20      	adds	r0, r4, #0
     f66:	2111      	movs	r1, #17
     f68:	4b0c      	ldr	r3, [pc, #48]	; (f9c <nwkRouteDiscoveryTimerHandler+0xa4>)
     f6a:	4798      	blx	r3
     f6c:	1c20      	adds	r0, r4, #0
     f6e:	4b0c      	ldr	r3, [pc, #48]	; (fa0 <nwkRouteDiscoveryTimerHandler+0xa8>)
     f70:	4798      	blx	r3
     f72:	1e04      	subs	r4, r0, #0
     f74:	d1dd      	bne.n	f32 <nwkRouteDiscoveryTimerHandler+0x3a>
     f76:	350c      	adds	r5, #12
     f78:	42b5      	cmp	r5, r6
     f7a:	d1c6      	bne.n	f0a <nwkRouteDiscoveryTimerHandler+0x12>
     f7c:	2f00      	cmp	r7, #0
     f7e:	d002      	beq.n	f86 <nwkRouteDiscoveryTimerHandler+0x8e>
     f80:	9801      	ldr	r0, [sp, #4]
     f82:	4b08      	ldr	r3, [pc, #32]	; (fa4 <nwkRouteDiscoveryTimerHandler+0xac>)
     f84:	4798      	blx	r3
     f86:	b002      	add	sp, #8
     f88:	bc04      	pop	{r2}
     f8a:	4690      	mov	r8, r2
     f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f8e:	46c0      	nop			; (mov r8, r8)
     f90:	20000968 	.word	0x20000968
     f94:	20000c60 	.word	0x20000c60
     f98:	000018cd 	.word	0x000018cd
     f9c:	00001a3d 	.word	0x00001a3d
     fa0:	00000ad5 	.word	0x00000ad5
     fa4:	00001fb5 	.word	0x00001fb5

00000fa8 <nwkRouteDiscoverySendRequest>:
     fa8:	b570      	push	{r4, r5, r6, lr}
     faa:	1c05      	adds	r5, r0, #0
     fac:	1c0e      	adds	r6, r1, #0
     fae:	4b1e      	ldr	r3, [pc, #120]	; (1028 <nwkRouteDiscoverySendRequest+0x80>)
     fb0:	4798      	blx	r3
     fb2:	1e04      	subs	r4, r0, #0
     fb4:	d036      	beq.n	1024 <nwkRouteDiscoverySendRequest+0x7c>
     fb6:	4b1d      	ldr	r3, [pc, #116]	; (102c <nwkRouteDiscoverySendRequest+0x84>)
     fb8:	4798      	blx	r3
     fba:	7863      	ldrb	r3, [r4, #1]
     fbc:	3307      	adds	r3, #7
     fbe:	7063      	strb	r3, [r4, #1]
     fc0:	2200      	movs	r2, #0
     fc2:	2389      	movs	r3, #137	; 0x89
     fc4:	54e2      	strb	r2, [r4, r3]
     fc6:	1c23      	adds	r3, r4, #0
     fc8:	3389      	adds	r3, #137	; 0x89
     fca:	705a      	strb	r2, [r3, #1]
     fcc:	709a      	strb	r2, [r3, #2]
     fce:	70da      	strb	r2, [r3, #3]
     fd0:	7ae2      	ldrb	r2, [r4, #11]
     fd2:	2304      	movs	r3, #4
     fd4:	4313      	orrs	r3, r2
     fd6:	72e3      	strb	r3, [r4, #11]
     fd8:	2301      	movs	r3, #1
     fda:	425b      	negs	r3, r3
     fdc:	73e3      	strb	r3, [r4, #15]
     fde:	7423      	strb	r3, [r4, #16]
     fe0:	3382      	adds	r3, #130	; 0x82
     fe2:	5ce0      	ldrb	r0, [r4, r3]
     fe4:	3301      	adds	r3, #1
     fe6:	5ce2      	ldrb	r2, [r4, r3]
     fe8:	0212      	lsls	r2, r2, #8
     fea:	4302      	orrs	r2, r0
     fec:	3301      	adds	r3, #1
     fee:	5ce3      	ldrb	r3, [r4, r3]
     ff0:	041b      	lsls	r3, r3, #16
     ff2:	4313      	orrs	r3, r2
     ff4:	1c1a      	adds	r2, r3, #0
     ff6:	2384      	movs	r3, #132	; 0x84
     ff8:	5ce3      	ldrb	r3, [r4, r3]
     ffa:	061b      	lsls	r3, r3, #24
     ffc:	4313      	orrs	r3, r2
     ffe:	2202      	movs	r2, #2
    1000:	701a      	strb	r2, [r3, #0]
    1002:	882a      	ldrh	r2, [r5, #0]
    1004:	705a      	strb	r2, [r3, #1]
    1006:	0a12      	lsrs	r2, r2, #8
    1008:	709a      	strb	r2, [r3, #2]
    100a:	886a      	ldrh	r2, [r5, #2]
    100c:	78a9      	ldrb	r1, [r5, #2]
    100e:	70d9      	strb	r1, [r3, #3]
    1010:	0a12      	lsrs	r2, r2, #8
    1012:	711a      	strb	r2, [r3, #4]
    1014:	792a      	ldrb	r2, [r5, #4]
    1016:	715a      	strb	r2, [r3, #5]
    1018:	719e      	strb	r6, [r3, #6]
    101a:	1c20      	adds	r0, r4, #0
    101c:	4b04      	ldr	r3, [pc, #16]	; (1030 <nwkRouteDiscoverySendRequest+0x88>)
    101e:	4798      	blx	r3
    1020:	2001      	movs	r0, #1
    1022:	e000      	b.n	1026 <nwkRouteDiscoverySendRequest+0x7e>
    1024:	2000      	movs	r0, #0
    1026:	bd70      	pop	{r4, r5, r6, pc}
    1028:	00000a51 	.word	0x00000a51
    102c:	00000b19 	.word	0x00000b19
    1030:	000018cd 	.word	0x000018cd

00001034 <nwkRouteDiscoverySendReply>:
    1034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1036:	1c05      	adds	r5, r0, #0
    1038:	1c0f      	adds	r7, r1, #0
    103a:	1c16      	adds	r6, r2, #0
    103c:	4b1c      	ldr	r3, [pc, #112]	; (10b0 <nwkRouteDiscoverySendReply+0x7c>)
    103e:	4798      	blx	r3
    1040:	1e04      	subs	r4, r0, #0
    1042:	d034      	beq.n	10ae <nwkRouteDiscoverySendReply+0x7a>
    1044:	4b1b      	ldr	r3, [pc, #108]	; (10b4 <nwkRouteDiscoverySendReply+0x80>)
    1046:	4798      	blx	r3
    1048:	7863      	ldrb	r3, [r4, #1]
    104a:	3308      	adds	r3, #8
    104c:	7063      	strb	r3, [r4, #1]
    104e:	2200      	movs	r2, #0
    1050:	2389      	movs	r3, #137	; 0x89
    1052:	54e2      	strb	r2, [r4, r3]
    1054:	1c23      	adds	r3, r4, #0
    1056:	3389      	adds	r3, #137	; 0x89
    1058:	705a      	strb	r2, [r3, #1]
    105a:	709a      	strb	r2, [r3, #2]
    105c:	70da      	strb	r2, [r3, #3]
    105e:	3204      	adds	r2, #4
    1060:	2388      	movs	r3, #136	; 0x88
    1062:	54e2      	strb	r2, [r4, r3]
    1064:	88eb      	ldrh	r3, [r5, #6]
    1066:	73e3      	strb	r3, [r4, #15]
    1068:	0a1b      	lsrs	r3, r3, #8
    106a:	7423      	strb	r3, [r4, #16]
    106c:	2381      	movs	r3, #129	; 0x81
    106e:	5ce0      	ldrb	r0, [r4, r3]
    1070:	3301      	adds	r3, #1
    1072:	5ce2      	ldrb	r2, [r4, r3]
    1074:	0212      	lsls	r2, r2, #8
    1076:	4302      	orrs	r2, r0
    1078:	3301      	adds	r3, #1
    107a:	5ce3      	ldrb	r3, [r4, r3]
    107c:	041b      	lsls	r3, r3, #16
    107e:	4313      	orrs	r3, r2
    1080:	1c1a      	adds	r2, r3, #0
    1082:	2384      	movs	r3, #132	; 0x84
    1084:	5ce3      	ldrb	r3, [r4, r3]
    1086:	061b      	lsls	r3, r3, #24
    1088:	4313      	orrs	r3, r2
    108a:	2203      	movs	r2, #3
    108c:	701a      	strb	r2, [r3, #0]
    108e:	882a      	ldrh	r2, [r5, #0]
    1090:	705a      	strb	r2, [r3, #1]
    1092:	0a12      	lsrs	r2, r2, #8
    1094:	709a      	strb	r2, [r3, #2]
    1096:	886a      	ldrh	r2, [r5, #2]
    1098:	78a9      	ldrb	r1, [r5, #2]
    109a:	70d9      	strb	r1, [r3, #3]
    109c:	0a12      	lsrs	r2, r2, #8
    109e:	711a      	strb	r2, [r3, #4]
    10a0:	792a      	ldrb	r2, [r5, #4]
    10a2:	715a      	strb	r2, [r3, #5]
    10a4:	719f      	strb	r7, [r3, #6]
    10a6:	71de      	strb	r6, [r3, #7]
    10a8:	1c20      	adds	r0, r4, #0
    10aa:	4b03      	ldr	r3, [pc, #12]	; (10b8 <nwkRouteDiscoverySendReply+0x84>)
    10ac:	4798      	blx	r3
    10ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10b0:	00000a51 	.word	0x00000a51
    10b4:	00000b19 	.word	0x00000b19
    10b8:	000018cd 	.word	0x000018cd

000010bc <nwkRouteDiscoveryInit>:
    10bc:	4b07      	ldr	r3, [pc, #28]	; (10dc <nwkRouteDiscoveryInit+0x20>)
    10be:	2200      	movs	r2, #0
    10c0:	815a      	strh	r2, [r3, #10]
    10c2:	82da      	strh	r2, [r3, #22]
    10c4:	845a      	strh	r2, [r3, #34]	; 0x22
    10c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    10c8:	875a      	strh	r2, [r3, #58]	; 0x3a
    10ca:	4b05      	ldr	r3, [pc, #20]	; (10e0 <nwkRouteDiscoveryInit+0x24>)
    10cc:	3264      	adds	r2, #100	; 0x64
    10ce:	609a      	str	r2, [r3, #8]
    10d0:	2200      	movs	r2, #0
    10d2:	731a      	strb	r2, [r3, #12]
    10d4:	4a03      	ldr	r2, [pc, #12]	; (10e4 <nwkRouteDiscoveryInit+0x28>)
    10d6:	611a      	str	r2, [r3, #16]
    10d8:	4770      	bx	lr
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	20000968 	.word	0x20000968
    10e0:	20000954 	.word	0x20000954
    10e4:	00000ef9 	.word	0x00000ef9

000010e8 <nwkRouteDiscoveryRequest>:
    10e8:	b510      	push	{r4, lr}
    10ea:	1c04      	adds	r4, r0, #0
    10ec:	4b17      	ldr	r3, [pc, #92]	; (114c <nwkRouteDiscoveryRequest+0x64>)
    10ee:	8818      	ldrh	r0, [r3, #0]
    10f0:	7be3      	ldrb	r3, [r4, #15]
    10f2:	7c21      	ldrb	r1, [r4, #16]
    10f4:	0209      	lsls	r1, r1, #8
    10f6:	4319      	orrs	r1, r3
    10f8:	7ae2      	ldrb	r2, [r4, #11]
    10fa:	0712      	lsls	r2, r2, #28
    10fc:	0fd2      	lsrs	r2, r2, #31
    10fe:	4b14      	ldr	r3, [pc, #80]	; (1150 <nwkRouteDiscoveryRequest+0x68>)
    1100:	4798      	blx	r3
    1102:	2800      	cmp	r0, #0
    1104:	d002      	beq.n	110c <nwkRouteDiscoveryRequest+0x24>
    1106:	2340      	movs	r3, #64	; 0x40
    1108:	7023      	strb	r3, [r4, #0]
    110a:	e01e      	b.n	114a <nwkRouteDiscoveryRequest+0x62>
    110c:	4b11      	ldr	r3, [pc, #68]	; (1154 <nwkRouteDiscoveryRequest+0x6c>)
    110e:	4798      	blx	r3
    1110:	2800      	cmp	r0, #0
    1112:	d016      	beq.n	1142 <nwkRouteDiscoveryRequest+0x5a>
    1114:	4b0d      	ldr	r3, [pc, #52]	; (114c <nwkRouteDiscoveryRequest+0x64>)
    1116:	881b      	ldrh	r3, [r3, #0]
    1118:	8003      	strh	r3, [r0, #0]
    111a:	7be1      	ldrb	r1, [r4, #15]
    111c:	7c22      	ldrb	r2, [r4, #16]
    111e:	0212      	lsls	r2, r2, #8
    1120:	430a      	orrs	r2, r1
    1122:	8042      	strh	r2, [r0, #2]
    1124:	7ae3      	ldrb	r3, [r4, #11]
    1126:	071b      	lsls	r3, r3, #28
    1128:	0fdb      	lsrs	r3, r3, #31
    112a:	7103      	strb	r3, [r0, #4]
    112c:	2301      	movs	r3, #1
    112e:	425b      	negs	r3, r3
    1130:	80c3      	strh	r3, [r0, #6]
    1132:	21ff      	movs	r1, #255	; 0xff
    1134:	4b08      	ldr	r3, [pc, #32]	; (1158 <nwkRouteDiscoveryRequest+0x70>)
    1136:	4798      	blx	r3
    1138:	2800      	cmp	r0, #0
    113a:	d002      	beq.n	1142 <nwkRouteDiscoveryRequest+0x5a>
    113c:	2340      	movs	r3, #64	; 0x40
    113e:	7023      	strb	r3, [r4, #0]
    1140:	e003      	b.n	114a <nwkRouteDiscoveryRequest+0x62>
    1142:	1c20      	adds	r0, r4, #0
    1144:	2111      	movs	r1, #17
    1146:	4b05      	ldr	r3, [pc, #20]	; (115c <nwkRouteDiscoveryRequest+0x74>)
    1148:	4798      	blx	r3
    114a:	bd10      	pop	{r4, pc}
    114c:	20000c60 	.word	0x20000c60
    1150:	00000e69 	.word	0x00000e69
    1154:	00000ea5 	.word	0x00000ea5
    1158:	00000fa9 	.word	0x00000fa9
    115c:	00001a3d 	.word	0x00001a3d

00001160 <nwkRouteDiscoveryRequestReceived>:
    1160:	b5f0      	push	{r4, r5, r6, r7, lr}
    1162:	4647      	mov	r7, r8
    1164:	b480      	push	{r7}
    1166:	6884      	ldr	r4, [r0, #8]
    1168:	7b02      	ldrb	r2, [r0, #12]
    116a:	2300      	movs	r3, #0
    116c:	2a07      	cmp	r2, #7
    116e:	d168      	bne.n	1242 <nwkRouteDiscoveryRequestReceived+0xe2>
    1170:	7962      	ldrb	r2, [r4, #5]
    1172:	2a00      	cmp	r2, #0
    1174:	d15c      	bne.n	1230 <nwkRouteDiscoveryRequestReceived+0xd0>
    1176:	78e3      	ldrb	r3, [r4, #3]
    1178:	7925      	ldrb	r5, [r4, #4]
    117a:	022d      	lsls	r5, r5, #8
    117c:	431d      	orrs	r5, r3
    117e:	4b33      	ldr	r3, [pc, #204]	; (124c <nwkRouteDiscoveryRequestReceived+0xec>)
    1180:	8819      	ldrh	r1, [r3, #0]
    1182:	7866      	ldrb	r6, [r4, #1]
    1184:	78a3      	ldrb	r3, [r4, #2]
    1186:	021b      	lsls	r3, r3, #8
    1188:	4333      	orrs	r3, r6
    118a:	4299      	cmp	r1, r3
    118c:	d048      	beq.n	1220 <nwkRouteDiscoveryRequestReceived+0xc0>
    118e:	428d      	cmp	r5, r1
    1190:	d005      	beq.n	119e <nwkRouteDiscoveryRequestReceived+0x3e>
    1192:	b209      	sxth	r1, r1
    1194:	2900      	cmp	r1, #0
    1196:	db45      	blt.n	1224 <nwkRouteDiscoveryRequestReceived+0xc4>
    1198:	2100      	movs	r1, #0
    119a:	4688      	mov	r8, r1
    119c:	e001      	b.n	11a2 <nwkRouteDiscoveryRequestReceived+0x42>
    119e:	2101      	movs	r1, #1
    11a0:	4688      	mov	r8, r1
    11a2:	1c05      	adds	r5, r0, #0
    11a4:	79a6      	ldrb	r6, [r4, #6]
    11a6:	7b41      	ldrb	r1, [r0, #13]
    11a8:	434e      	muls	r6, r1
    11aa:	0a36      	lsrs	r6, r6, #8
    11ac:	78e0      	ldrb	r0, [r4, #3]
    11ae:	7921      	ldrb	r1, [r4, #4]
    11b0:	0209      	lsls	r1, r1, #8
    11b2:	4301      	orrs	r1, r0
    11b4:	1c18      	adds	r0, r3, #0
    11b6:	4b26      	ldr	r3, [pc, #152]	; (1250 <nwkRouteDiscoveryRequestReceived+0xf0>)
    11b8:	4798      	blx	r3
    11ba:	1e07      	subs	r7, r0, #0
    11bc:	d004      	beq.n	11c8 <nwkRouteDiscoveryRequestReceived+0x68>
    11be:	7a02      	ldrb	r2, [r0, #8]
    11c0:	2301      	movs	r3, #1
    11c2:	42b2      	cmp	r2, r6
    11c4:	d304      	bcc.n	11d0 <nwkRouteDiscoveryRequestReceived+0x70>
    11c6:	e03c      	b.n	1242 <nwkRouteDiscoveryRequestReceived+0xe2>
    11c8:	4b22      	ldr	r3, [pc, #136]	; (1254 <nwkRouteDiscoveryRequestReceived+0xf4>)
    11ca:	4798      	blx	r3
    11cc:	1e07      	subs	r7, r0, #0
    11ce:	d02b      	beq.n	1228 <nwkRouteDiscoveryRequestReceived+0xc8>
    11d0:	7862      	ldrb	r2, [r4, #1]
    11d2:	78a3      	ldrb	r3, [r4, #2]
    11d4:	021b      	lsls	r3, r3, #8
    11d6:	4313      	orrs	r3, r2
    11d8:	803b      	strh	r3, [r7, #0]
    11da:	78e2      	ldrb	r2, [r4, #3]
    11dc:	7923      	ldrb	r3, [r4, #4]
    11de:	021b      	lsls	r3, r3, #8
    11e0:	4313      	orrs	r3, r2
    11e2:	807b      	strh	r3, [r7, #2]
    11e4:	7963      	ldrb	r3, [r4, #5]
    11e6:	713b      	strb	r3, [r7, #4]
    11e8:	882b      	ldrh	r3, [r5, #0]
    11ea:	80fb      	strh	r3, [r7, #6]
    11ec:	723e      	strb	r6, [r7, #8]
    11ee:	4643      	mov	r3, r8
    11f0:	2b00      	cmp	r3, #0
    11f2:	d00f      	beq.n	1214 <nwkRouteDiscoveryRequestReceived+0xb4>
    11f4:	7863      	ldrb	r3, [r4, #1]
    11f6:	78a0      	ldrb	r0, [r4, #2]
    11f8:	0200      	lsls	r0, r0, #8
    11fa:	4318      	orrs	r0, r3
    11fc:	882a      	ldrh	r2, [r5, #0]
    11fe:	2100      	movs	r1, #0
    1200:	1c33      	adds	r3, r6, #0
    1202:	4c15      	ldr	r4, [pc, #84]	; (1258 <nwkRouteDiscoveryRequestReceived+0xf8>)
    1204:	47a0      	blx	r4
    1206:	1c38      	adds	r0, r7, #0
    1208:	1c31      	adds	r1, r6, #0
    120a:	22ff      	movs	r2, #255	; 0xff
    120c:	4b13      	ldr	r3, [pc, #76]	; (125c <nwkRouteDiscoveryRequestReceived+0xfc>)
    120e:	4798      	blx	r3
    1210:	2301      	movs	r3, #1
    1212:	e016      	b.n	1242 <nwkRouteDiscoveryRequestReceived+0xe2>
    1214:	1c38      	adds	r0, r7, #0
    1216:	1c31      	adds	r1, r6, #0
    1218:	4b11      	ldr	r3, [pc, #68]	; (1260 <nwkRouteDiscoveryRequestReceived+0x100>)
    121a:	4798      	blx	r3
    121c:	2301      	movs	r3, #1
    121e:	e010      	b.n	1242 <nwkRouteDiscoveryRequestReceived+0xe2>
    1220:	2301      	movs	r3, #1
    1222:	e00e      	b.n	1242 <nwkRouteDiscoveryRequestReceived+0xe2>
    1224:	2301      	movs	r3, #1
    1226:	e00c      	b.n	1242 <nwkRouteDiscoveryRequestReceived+0xe2>
    1228:	2301      	movs	r3, #1
    122a:	e00a      	b.n	1242 <nwkRouteDiscoveryRequestReceived+0xe2>
    122c:	2301      	movs	r3, #1
    122e:	e008      	b.n	1242 <nwkRouteDiscoveryRequestReceived+0xe2>
    1230:	7861      	ldrb	r1, [r4, #1]
    1232:	78a3      	ldrb	r3, [r4, #2]
    1234:	021b      	lsls	r3, r3, #8
    1236:	430b      	orrs	r3, r1
    1238:	4904      	ldr	r1, [pc, #16]	; (124c <nwkRouteDiscoveryRequestReceived+0xec>)
    123a:	8809      	ldrh	r1, [r1, #0]
    123c:	428b      	cmp	r3, r1
    123e:	d1a8      	bne.n	1192 <nwkRouteDiscoveryRequestReceived+0x32>
    1240:	e7f4      	b.n	122c <nwkRouteDiscoveryRequestReceived+0xcc>
    1242:	1c18      	adds	r0, r3, #0
    1244:	bc04      	pop	{r2}
    1246:	4690      	mov	r8, r2
    1248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    124a:	46c0      	nop			; (mov r8, r8)
    124c:	20000c60 	.word	0x20000c60
    1250:	00000e69 	.word	0x00000e69
    1254:	00000ea5 	.word	0x00000ea5
    1258:	00000c1d 	.word	0x00000c1d
    125c:	00001035 	.word	0x00001035
    1260:	00000fa9 	.word	0x00000fa9

00001264 <nwkRouteDiscoveryReplyReceived>:
    1264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1266:	6884      	ldr	r4, [r0, #8]
    1268:	7b03      	ldrb	r3, [r0, #12]
    126a:	2100      	movs	r1, #0
    126c:	2b08      	cmp	r3, #8
    126e:	d144      	bne.n	12fa <nwkRouteDiscoveryReplyReceived+0x96>
    1270:	1c05      	adds	r5, r0, #0
    1272:	7863      	ldrb	r3, [r4, #1]
    1274:	78a0      	ldrb	r0, [r4, #2]
    1276:	0200      	lsls	r0, r0, #8
    1278:	4318      	orrs	r0, r3
    127a:	78e3      	ldrb	r3, [r4, #3]
    127c:	7921      	ldrb	r1, [r4, #4]
    127e:	0209      	lsls	r1, r1, #8
    1280:	4319      	orrs	r1, r3
    1282:	7962      	ldrb	r2, [r4, #5]
    1284:	4b1e      	ldr	r3, [pc, #120]	; (1300 <nwkRouteDiscoveryReplyReceived+0x9c>)
    1286:	4798      	blx	r3
    1288:	1c06      	adds	r6, r0, #0
    128a:	79e7      	ldrb	r7, [r4, #7]
    128c:	7b6b      	ldrb	r3, [r5, #13]
    128e:	2800      	cmp	r0, #0
    1290:	d032      	beq.n	12f8 <nwkRouteDiscoveryReplyReceived+0x94>
    1292:	79a0      	ldrb	r0, [r4, #6]
    1294:	7a72      	ldrb	r2, [r6, #9]
    1296:	2101      	movs	r1, #1
    1298:	4282      	cmp	r2, r0
    129a:	d22e      	bcs.n	12fa <nwkRouteDiscoveryReplyReceived+0x96>
    129c:	7270      	strb	r0, [r6, #9]
    129e:	7861      	ldrb	r1, [r4, #1]
    12a0:	78a2      	ldrb	r2, [r4, #2]
    12a2:	0212      	lsls	r2, r2, #8
    12a4:	4817      	ldr	r0, [pc, #92]	; (1304 <nwkRouteDiscoveryReplyReceived+0xa0>)
    12a6:	8800      	ldrh	r0, [r0, #0]
    12a8:	430a      	orrs	r2, r1
    12aa:	4290      	cmp	r0, r2
    12ac:	d10a      	bne.n	12c4 <nwkRouteDiscoveryReplyReceived+0x60>
    12ae:	78e3      	ldrb	r3, [r4, #3]
    12b0:	7920      	ldrb	r0, [r4, #4]
    12b2:	0200      	lsls	r0, r0, #8
    12b4:	4318      	orrs	r0, r3
    12b6:	7961      	ldrb	r1, [r4, #5]
    12b8:	882a      	ldrh	r2, [r5, #0]
    12ba:	79a3      	ldrb	r3, [r4, #6]
    12bc:	4c12      	ldr	r4, [pc, #72]	; (1308 <nwkRouteDiscoveryReplyReceived+0xa4>)
    12be:	47a0      	blx	r4
    12c0:	2101      	movs	r1, #1
    12c2:	e01a      	b.n	12fa <nwkRouteDiscoveryReplyReceived+0x96>
    12c4:	437b      	muls	r3, r7
    12c6:	0a1f      	lsrs	r7, r3, #8
    12c8:	78e3      	ldrb	r3, [r4, #3]
    12ca:	7920      	ldrb	r0, [r4, #4]
    12cc:	0200      	lsls	r0, r0, #8
    12ce:	4318      	orrs	r0, r3
    12d0:	7961      	ldrb	r1, [r4, #5]
    12d2:	882a      	ldrh	r2, [r5, #0]
    12d4:	1c3b      	adds	r3, r7, #0
    12d6:	4d0c      	ldr	r5, [pc, #48]	; (1308 <nwkRouteDiscoveryReplyReceived+0xa4>)
    12d8:	47a8      	blx	r5
    12da:	7863      	ldrb	r3, [r4, #1]
    12dc:	78a0      	ldrb	r0, [r4, #2]
    12de:	0200      	lsls	r0, r0, #8
    12e0:	4318      	orrs	r0, r3
    12e2:	88f2      	ldrh	r2, [r6, #6]
    12e4:	7a33      	ldrb	r3, [r6, #8]
    12e6:	2100      	movs	r1, #0
    12e8:	47a8      	blx	r5
    12ea:	79a1      	ldrb	r1, [r4, #6]
    12ec:	1c30      	adds	r0, r6, #0
    12ee:	1c3a      	adds	r2, r7, #0
    12f0:	4b06      	ldr	r3, [pc, #24]	; (130c <nwkRouteDiscoveryReplyReceived+0xa8>)
    12f2:	4798      	blx	r3
    12f4:	2101      	movs	r1, #1
    12f6:	e000      	b.n	12fa <nwkRouteDiscoveryReplyReceived+0x96>
    12f8:	2101      	movs	r1, #1
    12fa:	1c08      	adds	r0, r1, #0
    12fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12fe:	46c0      	nop			; (mov r8, r8)
    1300:	00000e69 	.word	0x00000e69
    1304:	20000c60 	.word	0x20000c60
    1308:	00000c1d 	.word	0x00000c1d
    130c:	00001035 	.word	0x00001035

00001310 <nwkRxSeriveDataInd>:
    1310:	b508      	push	{r3, lr}
    1312:	7b02      	ldrb	r2, [r0, #12]
    1314:	2300      	movs	r3, #0
    1316:	2a00      	cmp	r2, #0
    1318:	d01b      	beq.n	1352 <nwkRxSeriveDataInd+0x42>
    131a:	6883      	ldr	r3, [r0, #8]
    131c:	781b      	ldrb	r3, [r3, #0]
    131e:	2b01      	cmp	r3, #1
    1320:	d00a      	beq.n	1338 <nwkRxSeriveDataInd+0x28>
    1322:	2b00      	cmp	r3, #0
    1324:	d004      	beq.n	1330 <nwkRxSeriveDataInd+0x20>
    1326:	2b02      	cmp	r3, #2
    1328:	d00a      	beq.n	1340 <nwkRxSeriveDataInd+0x30>
    132a:	2b03      	cmp	r3, #3
    132c:	d00c      	beq.n	1348 <nwkRxSeriveDataInd+0x38>
    132e:	e00f      	b.n	1350 <nwkRxSeriveDataInd+0x40>
    1330:	4b09      	ldr	r3, [pc, #36]	; (1358 <nwkRxSeriveDataInd+0x48>)
    1332:	4798      	blx	r3
    1334:	1c03      	adds	r3, r0, #0
    1336:	e00c      	b.n	1352 <nwkRxSeriveDataInd+0x42>
    1338:	4b08      	ldr	r3, [pc, #32]	; (135c <nwkRxSeriveDataInd+0x4c>)
    133a:	4798      	blx	r3
    133c:	1c03      	adds	r3, r0, #0
    133e:	e008      	b.n	1352 <nwkRxSeriveDataInd+0x42>
    1340:	4b07      	ldr	r3, [pc, #28]	; (1360 <nwkRxSeriveDataInd+0x50>)
    1342:	4798      	blx	r3
    1344:	1c03      	adds	r3, r0, #0
    1346:	e004      	b.n	1352 <nwkRxSeriveDataInd+0x42>
    1348:	4b06      	ldr	r3, [pc, #24]	; (1364 <nwkRxSeriveDataInd+0x54>)
    134a:	4798      	blx	r3
    134c:	1c03      	adds	r3, r0, #0
    134e:	e000      	b.n	1352 <nwkRxSeriveDataInd+0x42>
    1350:	2300      	movs	r3, #0
    1352:	1c18      	adds	r0, r3, #0
    1354:	bd08      	pop	{r3, pc}
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	00001a05 	.word	0x00001a05
    135c:	00000e45 	.word	0x00000e45
    1360:	00001161 	.word	0x00001161
    1364:	00001265 	.word	0x00001265

00001368 <nwkRxDuplicateRejectionTimerHandler>:
    1368:	b538      	push	{r3, r4, r5, lr}
    136a:	490a      	ldr	r1, [pc, #40]	; (1394 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    136c:	1d0b      	adds	r3, r1, #4
    136e:	3131      	adds	r1, #49	; 0x31
    1370:	31ff      	adds	r1, #255	; 0xff
    1372:	2400      	movs	r4, #0
    1374:	2501      	movs	r5, #1
    1376:	781a      	ldrb	r2, [r3, #0]
    1378:	2a00      	cmp	r2, #0
    137a:	d002      	beq.n	1382 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    137c:	3a01      	subs	r2, #1
    137e:	701a      	strb	r2, [r3, #0]
    1380:	1c2c      	adds	r4, r5, #0
    1382:	3306      	adds	r3, #6
    1384:	428b      	cmp	r3, r1
    1386:	d1f6      	bne.n	1376 <nwkRxDuplicateRejectionTimerHandler+0xe>
    1388:	2c00      	cmp	r4, #0
    138a:	d001      	beq.n	1390 <nwkRxDuplicateRejectionTimerHandler+0x28>
    138c:	4b02      	ldr	r3, [pc, #8]	; (1398 <nwkRxDuplicateRejectionTimerHandler+0x30>)
    138e:	4798      	blx	r3
    1390:	bd38      	pop	{r3, r4, r5, pc}
    1392:	46c0      	nop			; (mov r8, r8)
    1394:	200009a4 	.word	0x200009a4
    1398:	00001fb5 	.word	0x00001fb5

0000139c <nwkRxInit>:
    139c:	b508      	push	{r3, lr}
    139e:	4a0a      	ldr	r2, [pc, #40]	; (13c8 <nwkRxInit+0x2c>)
    13a0:	1d13      	adds	r3, r2, #4
    13a2:	3231      	adds	r2, #49	; 0x31
    13a4:	32ff      	adds	r2, #255	; 0xff
    13a6:	2100      	movs	r1, #0
    13a8:	7019      	strb	r1, [r3, #0]
    13aa:	3306      	adds	r3, #6
    13ac:	4293      	cmp	r3, r2
    13ae:	d1fb      	bne.n	13a8 <nwkRxInit+0xc>
    13b0:	4b06      	ldr	r3, [pc, #24]	; (13cc <nwkRxInit+0x30>)
    13b2:	2264      	movs	r2, #100	; 0x64
    13b4:	609a      	str	r2, [r3, #8]
    13b6:	2200      	movs	r2, #0
    13b8:	731a      	strb	r2, [r3, #12]
    13ba:	4a05      	ldr	r2, [pc, #20]	; (13d0 <nwkRxInit+0x34>)
    13bc:	611a      	str	r2, [r3, #16]
    13be:	2000      	movs	r0, #0
    13c0:	4904      	ldr	r1, [pc, #16]	; (13d4 <nwkRxInit+0x38>)
    13c2:	4b05      	ldr	r3, [pc, #20]	; (13d8 <nwkRxInit+0x3c>)
    13c4:	4798      	blx	r3
    13c6:	bd08      	pop	{r3, pc}
    13c8:	200009a4 	.word	0x200009a4
    13cc:	20000ad4 	.word	0x20000ad4
    13d0:	00001369 	.word	0x00001369
    13d4:	00001311 	.word	0x00001311
    13d8:	00000889 	.word	0x00000889

000013dc <PHY_DataInd>:
    13dc:	b510      	push	{r4, lr}
    13de:	6803      	ldr	r3, [r0, #0]
    13e0:	785a      	ldrb	r2, [r3, #1]
    13e2:	2a88      	cmp	r2, #136	; 0x88
    13e4:	d11b      	bne.n	141e <PHY_DataInd+0x42>
    13e6:	781b      	ldrb	r3, [r3, #0]
    13e8:	3a68      	subs	r2, #104	; 0x68
    13ea:	4393      	bics	r3, r2
    13ec:	2b41      	cmp	r3, #65	; 0x41
    13ee:	d116      	bne.n	141e <PHY_DataInd+0x42>
    13f0:	7903      	ldrb	r3, [r0, #4]
    13f2:	2b0f      	cmp	r3, #15
    13f4:	d913      	bls.n	141e <PHY_DataInd+0x42>
    13f6:	1c04      	adds	r4, r0, #0
    13f8:	4b09      	ldr	r3, [pc, #36]	; (1420 <PHY_DataInd+0x44>)
    13fa:	4798      	blx	r3
    13fc:	2800      	cmp	r0, #0
    13fe:	d00e      	beq.n	141e <PHY_DataInd+0x42>
    1400:	2320      	movs	r3, #32
    1402:	7003      	strb	r3, [r0, #0]
    1404:	7923      	ldrb	r3, [r4, #4]
    1406:	7043      	strb	r3, [r0, #1]
    1408:	7962      	ldrb	r2, [r4, #5]
    140a:	2385      	movs	r3, #133	; 0x85
    140c:	54c2      	strb	r2, [r0, r3]
    140e:	79a2      	ldrb	r2, [r4, #6]
    1410:	3301      	adds	r3, #1
    1412:	54c2      	strb	r2, [r0, r3]
    1414:	3002      	adds	r0, #2
    1416:	7922      	ldrb	r2, [r4, #4]
    1418:	6821      	ldr	r1, [r4, #0]
    141a:	4b02      	ldr	r3, [pc, #8]	; (1424 <PHY_DataInd+0x48>)
    141c:	4798      	blx	r3
    141e:	bd10      	pop	{r4, pc}
    1420:	00000a51 	.word	0x00000a51
    1424:	00004e7d 	.word	0x00004e7d

00001428 <nwkRxTaskHandler>:
    1428:	b5f0      	push	{r4, r5, r6, r7, lr}
    142a:	b087      	sub	sp, #28
    142c:	2400      	movs	r4, #0
    142e:	4fd3      	ldr	r7, [pc, #844]	; (177c <nwkRxTaskHandler+0x354>)
    1430:	e1c5      	b.n	17be <nwkRxTaskHandler+0x396>
    1432:	7823      	ldrb	r3, [r4, #0]
    1434:	2b22      	cmp	r3, #34	; 0x22
    1436:	d100      	bne.n	143a <nwkRxTaskHandler+0x12>
    1438:	e0d6      	b.n	15e8 <nwkRxTaskHandler+0x1c0>
    143a:	b2da      	uxtb	r2, r3
    143c:	2a22      	cmp	r2, #34	; 0x22
    143e:	d802      	bhi.n	1446 <nwkRxTaskHandler+0x1e>
    1440:	2b20      	cmp	r3, #32
    1442:	d007      	beq.n	1454 <nwkRxTaskHandler+0x2c>
    1444:	e1bb      	b.n	17be <nwkRxTaskHandler+0x396>
    1446:	2b23      	cmp	r3, #35	; 0x23
    1448:	d100      	bne.n	144c <nwkRxTaskHandler+0x24>
    144a:	e192      	b.n	1772 <nwkRxTaskHandler+0x34a>
    144c:	2b24      	cmp	r3, #36	; 0x24
    144e:	d100      	bne.n	1452 <nwkRxTaskHandler+0x2a>
    1450:	e1b2      	b.n	17b8 <nwkRxTaskHandler+0x390>
    1452:	e1b4      	b.n	17be <nwkRxTaskHandler+0x396>
    1454:	2324      	movs	r3, #36	; 0x24
    1456:	7023      	strb	r3, [r4, #0]
    1458:	7ae3      	ldrb	r3, [r4, #11]
    145a:	220a      	movs	r2, #10
    145c:	421a      	tst	r2, r3
    145e:	d000      	beq.n	1462 <nwkRxTaskHandler+0x3a>
    1460:	e1ad      	b.n	17be <nwkRxTaskHandler+0x396>
    1462:	7961      	ldrb	r1, [r4, #5]
    1464:	79a2      	ldrb	r2, [r4, #6]
    1466:	0212      	lsls	r2, r2, #8
    1468:	430a      	orrs	r2, r1
    146a:	49c5      	ldr	r1, [pc, #788]	; (1780 <nwkRxTaskHandler+0x358>)
    146c:	428a      	cmp	r2, r1
    146e:	d10d      	bne.n	148c <nwkRxTaskHandler+0x64>
    1470:	7be2      	ldrb	r2, [r4, #15]
    1472:	7c23      	ldrb	r3, [r4, #16]
    1474:	021b      	lsls	r3, r3, #8
    1476:	4313      	orrs	r3, r2
    1478:	4ac2      	ldr	r2, [pc, #776]	; (1784 <nwkRxTaskHandler+0x35c>)
    147a:	8812      	ldrh	r2, [r2, #0]
    147c:	429a      	cmp	r2, r3
    147e:	d002      	beq.n	1486 <nwkRxTaskHandler+0x5e>
    1480:	428b      	cmp	r3, r1
    1482:	d000      	beq.n	1486 <nwkRxTaskHandler+0x5e>
    1484:	e19b      	b.n	17be <nwkRxTaskHandler+0x396>
    1486:	2322      	movs	r3, #34	; 0x22
    1488:	7023      	strb	r3, [r4, #0]
    148a:	e198      	b.n	17be <nwkRxTaskHandler+0x396>
    148c:	7be1      	ldrb	r1, [r4, #15]
    148e:	7c22      	ldrb	r2, [r4, #16]
    1490:	0212      	lsls	r2, r2, #8
    1492:	430a      	orrs	r2, r1
    1494:	49ba      	ldr	r1, [pc, #744]	; (1780 <nwkRxTaskHandler+0x358>)
    1496:	428a      	cmp	r2, r1
    1498:	d102      	bne.n	14a0 <nwkRxTaskHandler+0x78>
    149a:	07db      	lsls	r3, r3, #31
    149c:	d500      	bpl.n	14a0 <nwkRxTaskHandler+0x78>
    149e:	e18e      	b.n	17be <nwkRxTaskHandler+0x396>
    14a0:	7b62      	ldrb	r2, [r4, #13]
    14a2:	7ba3      	ldrb	r3, [r4, #14]
    14a4:	021b      	lsls	r3, r3, #8
    14a6:	49b7      	ldr	r1, [pc, #732]	; (1784 <nwkRxTaskHandler+0x35c>)
    14a8:	8809      	ldrh	r1, [r1, #0]
    14aa:	4313      	orrs	r3, r2
    14ac:	4299      	cmp	r1, r3
    14ae:	d100      	bne.n	14b2 <nwkRxTaskHandler+0x8a>
    14b0:	e185      	b.n	17be <nwkRxTaskHandler+0x396>
    14b2:	1c20      	adds	r0, r4, #0
    14b4:	4bb4      	ldr	r3, [pc, #720]	; (1788 <nwkRxTaskHandler+0x360>)
    14b6:	4798      	blx	r3
    14b8:	4bb4      	ldr	r3, [pc, #720]	; (178c <nwkRxTaskHandler+0x364>)
    14ba:	2200      	movs	r2, #0
    14bc:	2100      	movs	r1, #0
    14be:	9101      	str	r1, [sp, #4]
    14c0:	1ca5      	adds	r5, r4, #2
    14c2:	9200      	str	r2, [sp, #0]
    14c4:	7919      	ldrb	r1, [r3, #4]
    14c6:	2900      	cmp	r1, #0
    14c8:	d050      	beq.n	156c <nwkRxTaskHandler+0x144>
    14ca:	7aee      	ldrb	r6, [r5, #11]
    14cc:	7b29      	ldrb	r1, [r5, #12]
    14ce:	0209      	lsls	r1, r1, #8
    14d0:	8818      	ldrh	r0, [r3, #0]
    14d2:	430e      	orrs	r6, r1
    14d4:	42b0      	cmp	r0, r6
    14d6:	d14a      	bne.n	156e <nwkRxTaskHandler+0x146>
    14d8:	7b20      	ldrb	r0, [r4, #12]
    14da:	1c11      	adds	r1, r2, #0
    14dc:	0053      	lsls	r3, r2, #1
    14de:	4694      	mov	ip, r2
    14e0:	4463      	add	r3, ip
    14e2:	005b      	lsls	r3, r3, #1
    14e4:	4aa9      	ldr	r2, [pc, #676]	; (178c <nwkRxTaskHandler+0x364>)
    14e6:	18d3      	adds	r3, r2, r3
    14e8:	789a      	ldrb	r2, [r3, #2]
    14ea:	1a12      	subs	r2, r2, r0
    14ec:	b2d2      	uxtb	r2, r2
    14ee:	2a07      	cmp	r2, #7
    14f0:	d827      	bhi.n	1542 <nwkRxTaskHandler+0x11a>
    14f2:	004b      	lsls	r3, r1, #1
    14f4:	4463      	add	r3, ip
    14f6:	005b      	lsls	r3, r3, #1
    14f8:	48a4      	ldr	r0, [pc, #656]	; (178c <nwkRxTaskHandler+0x364>)
    14fa:	18c3      	adds	r3, r0, r3
    14fc:	78db      	ldrb	r3, [r3, #3]
    14fe:	1c18      	adds	r0, r3, #0
    1500:	4110      	asrs	r0, r2
    1502:	07c1      	lsls	r1, r0, #31
    1504:	d512      	bpl.n	152c <nwkRxTaskHandler+0x104>
    1506:	79e2      	ldrb	r2, [r4, #7]
    1508:	7a23      	ldrb	r3, [r4, #8]
    150a:	021b      	lsls	r3, r3, #8
    150c:	499d      	ldr	r1, [pc, #628]	; (1784 <nwkRxTaskHandler+0x35c>)
    150e:	8809      	ldrh	r1, [r1, #0]
    1510:	4313      	orrs	r3, r2
    1512:	4299      	cmp	r1, r3
    1514:	d000      	beq.n	1518 <nwkRxTaskHandler+0xf0>
    1516:	e152      	b.n	17be <nwkRxTaskHandler+0x396>
    1518:	7be3      	ldrb	r3, [r4, #15]
    151a:	7c20      	ldrb	r0, [r4, #16]
    151c:	0200      	lsls	r0, r0, #8
    151e:	4318      	orrs	r0, r3
    1520:	7ae1      	ldrb	r1, [r4, #11]
    1522:	0709      	lsls	r1, r1, #28
    1524:	0fc9      	lsrs	r1, r1, #31
    1526:	4b9a      	ldr	r3, [pc, #616]	; (1790 <nwkRxTaskHandler+0x368>)
    1528:	4798      	blx	r3
    152a:	e148      	b.n	17be <nwkRxTaskHandler+0x396>
    152c:	9900      	ldr	r1, [sp, #0]
    152e:	0048      	lsls	r0, r1, #1
    1530:	1841      	adds	r1, r0, r1
    1532:	0049      	lsls	r1, r1, #1
    1534:	2001      	movs	r0, #1
    1536:	4090      	lsls	r0, r2
    1538:	4303      	orrs	r3, r0
    153a:	4a94      	ldr	r2, [pc, #592]	; (178c <nwkRxTaskHandler+0x364>)
    153c:	1852      	adds	r2, r2, r1
    153e:	70d3      	strb	r3, [r2, #3]
    1540:	e143      	b.n	17ca <nwkRxTaskHandler+0x3a2>
    1542:	4d92      	ldr	r5, [pc, #584]	; (178c <nwkRxTaskHandler+0x364>)
    1544:	9900      	ldr	r1, [sp, #0]
    1546:	004e      	lsls	r6, r1, #1
    1548:	1873      	adds	r3, r6, r1
    154a:	005b      	lsls	r3, r3, #1
    154c:	18eb      	adds	r3, r5, r3
    154e:	7098      	strb	r0, [r3, #2]
    1550:	78d8      	ldrb	r0, [r3, #3]
    1552:	4252      	negs	r2, r2
    1554:	b2d2      	uxtb	r2, r2
    1556:	4090      	lsls	r0, r2
    1558:	1c02      	adds	r2, r0, #0
    155a:	2001      	movs	r0, #1
    155c:	4302      	orrs	r2, r0
    155e:	70da      	strb	r2, [r3, #3]
    1560:	1871      	adds	r1, r6, r1
    1562:	0049      	lsls	r1, r1, #1
    1564:	186b      	adds	r3, r5, r1
    1566:	2215      	movs	r2, #21
    1568:	711a      	strb	r2, [r3, #4]
    156a:	e12e      	b.n	17ca <nwkRxTaskHandler+0x3a2>
    156c:	9301      	str	r3, [sp, #4]
    156e:	3201      	adds	r2, #1
    1570:	3306      	adds	r3, #6
    1572:	2a32      	cmp	r2, #50	; 0x32
    1574:	d1a5      	bne.n	14c2 <nwkRxTaskHandler+0x9a>
    1576:	9801      	ldr	r0, [sp, #4]
    1578:	2800      	cmp	r0, #0
    157a:	d100      	bne.n	157e <nwkRxTaskHandler+0x156>
    157c:	e11f      	b.n	17be <nwkRxTaskHandler+0x396>
    157e:	7b61      	ldrb	r1, [r4, #13]
    1580:	7ba2      	ldrb	r2, [r4, #14]
    1582:	0212      	lsls	r2, r2, #8
    1584:	430a      	orrs	r2, r1
    1586:	8002      	strh	r2, [r0, #0]
    1588:	7b23      	ldrb	r3, [r4, #12]
    158a:	7083      	strb	r3, [r0, #2]
    158c:	2301      	movs	r3, #1
    158e:	70c3      	strb	r3, [r0, #3]
    1590:	3314      	adds	r3, #20
    1592:	7103      	strb	r3, [r0, #4]
    1594:	487f      	ldr	r0, [pc, #508]	; (1794 <nwkRxTaskHandler+0x36c>)
    1596:	4b80      	ldr	r3, [pc, #512]	; (1798 <nwkRxTaskHandler+0x370>)
    1598:	4798      	blx	r3
    159a:	e116      	b.n	17ca <nwkRxTaskHandler+0x3a2>
    159c:	4b79      	ldr	r3, [pc, #484]	; (1784 <nwkRxTaskHandler+0x35c>)
    159e:	8819      	ldrh	r1, [r3, #0]
    15a0:	7be2      	ldrb	r2, [r4, #15]
    15a2:	7c23      	ldrb	r3, [r4, #16]
    15a4:	021b      	lsls	r3, r3, #8
    15a6:	4313      	orrs	r3, r2
    15a8:	4299      	cmp	r1, r3
    15aa:	d010      	beq.n	15ce <nwkRxTaskHandler+0x1a6>
    15ac:	7ae2      	ldrb	r2, [r4, #11]
    15ae:	0752      	lsls	r2, r2, #29
    15b0:	d40a      	bmi.n	15c8 <nwkRxTaskHandler+0x1a0>
    15b2:	1c20      	adds	r0, r4, #0
    15b4:	4b79      	ldr	r3, [pc, #484]	; (179c <nwkRxTaskHandler+0x374>)
    15b6:	4798      	blx	r3
    15b8:	4b72      	ldr	r3, [pc, #456]	; (1784 <nwkRxTaskHandler+0x35c>)
    15ba:	8819      	ldrh	r1, [r3, #0]
    15bc:	7be2      	ldrb	r2, [r4, #15]
    15be:	7c23      	ldrb	r3, [r4, #16]
    15c0:	021b      	lsls	r3, r3, #8
    15c2:	4313      	orrs	r3, r2
    15c4:	4299      	cmp	r1, r3
    15c6:	d002      	beq.n	15ce <nwkRxTaskHandler+0x1a6>
    15c8:	4a6d      	ldr	r2, [pc, #436]	; (1780 <nwkRxTaskHandler+0x358>)
    15ca:	4293      	cmp	r3, r2
    15cc:	d102      	bne.n	15d4 <nwkRxTaskHandler+0x1ac>
    15ce:	2322      	movs	r3, #34	; 0x22
    15d0:	7023      	strb	r3, [r4, #0]
    15d2:	e0f4      	b.n	17be <nwkRxTaskHandler+0x396>
    15d4:	79e2      	ldrb	r2, [r4, #7]
    15d6:	7a23      	ldrb	r3, [r4, #8]
    15d8:	021b      	lsls	r3, r3, #8
    15da:	4313      	orrs	r3, r2
    15dc:	4299      	cmp	r1, r3
    15de:	d000      	beq.n	15e2 <nwkRxTaskHandler+0x1ba>
    15e0:	e0ed      	b.n	17be <nwkRxTaskHandler+0x396>
    15e2:	2323      	movs	r3, #35	; 0x23
    15e4:	7023      	strb	r3, [r4, #0]
    15e6:	e0ea      	b.n	17be <nwkRxTaskHandler+0x396>
    15e8:	2300      	movs	r3, #0
    15ea:	4a6d      	ldr	r2, [pc, #436]	; (17a0 <nwkRxTaskHandler+0x378>)
    15ec:	7013      	strb	r3, [r2, #0]
    15ee:	7c60      	ldrb	r0, [r4, #17]
    15f0:	0900      	lsrs	r0, r0, #4
    15f2:	b2c3      	uxtb	r3, r0
    15f4:	3302      	adds	r3, #2
    15f6:	009b      	lsls	r3, r3, #2
    15f8:	4a62      	ldr	r2, [pc, #392]	; (1784 <nwkRxTaskHandler+0x35c>)
    15fa:	589d      	ldr	r5, [r3, r2]
    15fc:	2d00      	cmp	r5, #0
    15fe:	d05a      	beq.n	16b6 <nwkRxTaskHandler+0x28e>
    1600:	1ca6      	adds	r6, r4, #2
    1602:	7b63      	ldrb	r3, [r4, #13]
    1604:	7ba2      	ldrb	r2, [r4, #14]
    1606:	0212      	lsls	r2, r2, #8
    1608:	431a      	orrs	r2, r3
    160a:	4694      	mov	ip, r2
    160c:	ab02      	add	r3, sp, #8
    160e:	801a      	strh	r2, [r3, #0]
    1610:	7be3      	ldrb	r3, [r4, #15]
    1612:	7c21      	ldrb	r1, [r4, #16]
    1614:	0209      	lsls	r1, r1, #8
    1616:	4319      	orrs	r1, r3
    1618:	ab02      	add	r3, sp, #8
    161a:	8059      	strh	r1, [r3, #2]
    161c:	7c63      	ldrb	r3, [r4, #17]
    161e:	071b      	lsls	r3, r3, #28
    1620:	0f1b      	lsrs	r3, r3, #28
    1622:	aa02      	add	r2, sp, #8
    1624:	7113      	strb	r3, [r2, #4]
    1626:	7150      	strb	r0, [r2, #5]
    1628:	2381      	movs	r3, #129	; 0x81
    162a:	5ce3      	ldrb	r3, [r4, r3]
    162c:	2082      	movs	r0, #130	; 0x82
    162e:	5c20      	ldrb	r0, [r4, r0]
    1630:	0200      	lsls	r0, r0, #8
    1632:	4318      	orrs	r0, r3
    1634:	2383      	movs	r3, #131	; 0x83
    1636:	5ce3      	ldrb	r3, [r4, r3]
    1638:	041b      	lsls	r3, r3, #16
    163a:	4318      	orrs	r0, r3
    163c:	2384      	movs	r3, #132	; 0x84
    163e:	5ce3      	ldrb	r3, [r4, r3]
    1640:	061b      	lsls	r3, r3, #24
    1642:	4303      	orrs	r3, r0
    1644:	9304      	str	r3, [sp, #16]
    1646:	1af3      	subs	r3, r6, r3
    1648:	7860      	ldrb	r0, [r4, #1]
    164a:	181b      	adds	r3, r3, r0
    164c:	7313      	strb	r3, [r2, #12]
    164e:	2385      	movs	r3, #133	; 0x85
    1650:	5ce3      	ldrb	r3, [r4, r3]
    1652:	7353      	strb	r3, [r2, #13]
    1654:	2386      	movs	r3, #134	; 0x86
    1656:	5ce3      	ldrb	r3, [r4, r3]
    1658:	7393      	strb	r3, [r2, #14]
    165a:	7ae3      	ldrb	r3, [r4, #11]
    165c:	2003      	movs	r0, #3
    165e:	4018      	ands	r0, r3
    1660:	1c06      	adds	r6, r0, #0
    1662:	0758      	lsls	r0, r3, #29
    1664:	0fc0      	lsrs	r0, r0, #31
    1666:	0140      	lsls	r0, r0, #5
    1668:	4330      	orrs	r0, r6
    166a:	071b      	lsls	r3, r3, #28
    166c:	0fdb      	lsrs	r3, r3, #31
    166e:	019b      	lsls	r3, r3, #6
    1670:	4318      	orrs	r0, r3
    1672:	4b4c      	ldr	r3, [pc, #304]	; (17a4 <nwkRxTaskHandler+0x37c>)
    1674:	18cb      	adds	r3, r1, r3
    1676:	4259      	negs	r1, r3
    1678:	414b      	adcs	r3, r1
    167a:	009b      	lsls	r3, r3, #2
    167c:	4303      	orrs	r3, r0
    167e:	7a60      	ldrb	r0, [r4, #9]
    1680:	7aa1      	ldrb	r1, [r4, #10]
    1682:	0209      	lsls	r1, r1, #8
    1684:	4301      	orrs	r1, r0
    1686:	4662      	mov	r2, ip
    1688:	1a52      	subs	r2, r2, r1
    168a:	4251      	negs	r1, r2
    168c:	414a      	adcs	r2, r1
    168e:	00d2      	lsls	r2, r2, #3
    1690:	4313      	orrs	r3, r2
    1692:	aa02      	add	r2, sp, #8
    1694:	7193      	strb	r3, [r2, #6]
    1696:	7961      	ldrb	r1, [r4, #5]
    1698:	79a2      	ldrb	r2, [r4, #6]
    169a:	0212      	lsls	r2, r2, #8
    169c:	430a      	orrs	r2, r1
    169e:	4941      	ldr	r1, [pc, #260]	; (17a4 <nwkRxTaskHandler+0x37c>)
    16a0:	468c      	mov	ip, r1
    16a2:	4462      	add	r2, ip
    16a4:	4251      	negs	r1, r2
    16a6:	414a      	adcs	r2, r1
    16a8:	0112      	lsls	r2, r2, #4
    16aa:	4313      	orrs	r3, r2
    16ac:	aa02      	add	r2, sp, #8
    16ae:	7193      	strb	r3, [r2, #6]
    16b0:	1c10      	adds	r0, r2, #0
    16b2:	47a8      	blx	r5
    16b4:	e000      	b.n	16b8 <nwkRxTaskHandler+0x290>
    16b6:	2000      	movs	r0, #0
    16b8:	7ae1      	ldrb	r1, [r4, #11]
    16ba:	07cb      	lsls	r3, r1, #31
    16bc:	17db      	asrs	r3, r3, #31
    16be:	4018      	ands	r0, r3
    16c0:	79e2      	ldrb	r2, [r4, #7]
    16c2:	7a23      	ldrb	r3, [r4, #8]
    16c4:	021b      	lsls	r3, r3, #8
    16c6:	4313      	orrs	r3, r2
    16c8:	4a2d      	ldr	r2, [pc, #180]	; (1780 <nwkRxTaskHandler+0x358>)
    16ca:	4293      	cmp	r3, r2
    16cc:	d10a      	bne.n	16e4 <nwkRxTaskHandler+0x2bc>
    16ce:	7be2      	ldrb	r2, [r4, #15]
    16d0:	7c23      	ldrb	r3, [r4, #16]
    16d2:	021b      	lsls	r3, r3, #8
    16d4:	4d2b      	ldr	r5, [pc, #172]	; (1784 <nwkRxTaskHandler+0x35c>)
    16d6:	882d      	ldrh	r5, [r5, #0]
    16d8:	4313      	orrs	r3, r2
    16da:	429d      	cmp	r5, r3
    16dc:	d102      	bne.n	16e4 <nwkRxTaskHandler+0x2bc>
    16de:	070b      	lsls	r3, r1, #28
    16e0:	d400      	bmi.n	16e4 <nwkRxTaskHandler+0x2bc>
    16e2:	2001      	movs	r0, #1
    16e4:	7962      	ldrb	r2, [r4, #5]
    16e6:	79a3      	ldrb	r3, [r4, #6]
    16e8:	021b      	lsls	r3, r3, #8
    16ea:	4313      	orrs	r3, r2
    16ec:	4a24      	ldr	r2, [pc, #144]	; (1780 <nwkRxTaskHandler+0x358>)
    16ee:	4293      	cmp	r3, r2
    16f0:	d03c      	beq.n	176c <nwkRxTaskHandler+0x344>
    16f2:	4b24      	ldr	r3, [pc, #144]	; (1784 <nwkRxTaskHandler+0x35c>)
    16f4:	881a      	ldrh	r2, [r3, #0]
    16f6:	4b22      	ldr	r3, [pc, #136]	; (1780 <nwkRxTaskHandler+0x358>)
    16f8:	429a      	cmp	r2, r3
    16fa:	d037      	beq.n	176c <nwkRxTaskHandler+0x344>
    16fc:	2800      	cmp	r0, #0
    16fe:	d035      	beq.n	176c <nwkRxTaskHandler+0x344>
    1700:	4b29      	ldr	r3, [pc, #164]	; (17a8 <nwkRxTaskHandler+0x380>)
    1702:	4798      	blx	r3
    1704:	1e05      	subs	r5, r0, #0
    1706:	d031      	beq.n	176c <nwkRxTaskHandler+0x344>
    1708:	4b28      	ldr	r3, [pc, #160]	; (17ac <nwkRxTaskHandler+0x384>)
    170a:	4798      	blx	r3
    170c:	786b      	ldrb	r3, [r5, #1]
    170e:	3303      	adds	r3, #3
    1710:	706b      	strb	r3, [r5, #1]
    1712:	2200      	movs	r2, #0
    1714:	2389      	movs	r3, #137	; 0x89
    1716:	54ea      	strb	r2, [r5, r3]
    1718:	1c2b      	adds	r3, r5, #0
    171a:	3389      	adds	r3, #137	; 0x89
    171c:	705a      	strb	r2, [r3, #1]
    171e:	709a      	strb	r2, [r3, #2]
    1720:	70da      	strb	r2, [r3, #3]
    1722:	7ae2      	ldrb	r2, [r4, #11]
    1724:	2302      	movs	r3, #2
    1726:	401a      	ands	r2, r3
    1728:	7aeb      	ldrb	r3, [r5, #11]
    172a:	2102      	movs	r1, #2
    172c:	438b      	bics	r3, r1
    172e:	4313      	orrs	r3, r2
    1730:	72eb      	strb	r3, [r5, #11]
    1732:	7b62      	ldrb	r2, [r4, #13]
    1734:	7ba3      	ldrb	r3, [r4, #14]
    1736:	73ea      	strb	r2, [r5, #15]
    1738:	742b      	strb	r3, [r5, #16]
    173a:	2381      	movs	r3, #129	; 0x81
    173c:	5ce8      	ldrb	r0, [r5, r3]
    173e:	3301      	adds	r3, #1
    1740:	5cea      	ldrb	r2, [r5, r3]
    1742:	0212      	lsls	r2, r2, #8
    1744:	4302      	orrs	r2, r0
    1746:	3301      	adds	r3, #1
    1748:	5ceb      	ldrb	r3, [r5, r3]
    174a:	041b      	lsls	r3, r3, #16
    174c:	4313      	orrs	r3, r2
    174e:	1c1a      	adds	r2, r3, #0
    1750:	2384      	movs	r3, #132	; 0x84
    1752:	5ceb      	ldrb	r3, [r5, r3]
    1754:	061b      	lsls	r3, r3, #24
    1756:	4313      	orrs	r3, r2
    1758:	2200      	movs	r2, #0
    175a:	701a      	strb	r2, [r3, #0]
    175c:	4a10      	ldr	r2, [pc, #64]	; (17a0 <nwkRxTaskHandler+0x378>)
    175e:	7812      	ldrb	r2, [r2, #0]
    1760:	709a      	strb	r2, [r3, #2]
    1762:	7b22      	ldrb	r2, [r4, #12]
    1764:	705a      	strb	r2, [r3, #1]
    1766:	1c28      	adds	r0, r5, #0
    1768:	4b11      	ldr	r3, [pc, #68]	; (17b0 <nwkRxTaskHandler+0x388>)
    176a:	4798      	blx	r3
    176c:	2324      	movs	r3, #36	; 0x24
    176e:	7023      	strb	r3, [r4, #0]
    1770:	e025      	b.n	17be <nwkRxTaskHandler+0x396>
    1772:	1c20      	adds	r0, r4, #0
    1774:	4b0f      	ldr	r3, [pc, #60]	; (17b4 <nwkRxTaskHandler+0x38c>)
    1776:	4798      	blx	r3
    1778:	e021      	b.n	17be <nwkRxTaskHandler+0x396>
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	00000ad5 	.word	0x00000ad5
    1780:	0000ffff 	.word	0x0000ffff
    1784:	20000c60 	.word	0x20000c60
    1788:	00000c79 	.word	0x00000c79
    178c:	200009a4 	.word	0x200009a4
    1790:	00000c61 	.word	0x00000c61
    1794:	20000ad4 	.word	0x20000ad4
    1798:	00001fb5 	.word	0x00001fb5
    179c:	0000197d 	.word	0x0000197d
    17a0:	20000ad0 	.word	0x20000ad0
    17a4:	ffff0001 	.word	0xffff0001
    17a8:	00000a51 	.word	0x00000a51
    17ac:	00000b19 	.word	0x00000b19
    17b0:	000018cd 	.word	0x000018cd
    17b4:	00000d69 	.word	0x00000d69
    17b8:	1c20      	adds	r0, r4, #0
    17ba:	4b09      	ldr	r3, [pc, #36]	; (17e0 <nwkRxTaskHandler+0x3b8>)
    17bc:	4798      	blx	r3
    17be:	1c20      	adds	r0, r4, #0
    17c0:	47b8      	blx	r7
    17c2:	1e04      	subs	r4, r0, #0
    17c4:	d000      	beq.n	17c8 <nwkRxTaskHandler+0x3a0>
    17c6:	e634      	b.n	1432 <nwkRxTaskHandler+0xa>
    17c8:	e008      	b.n	17dc <nwkRxTaskHandler+0x3b4>
    17ca:	79e2      	ldrb	r2, [r4, #7]
    17cc:	7a23      	ldrb	r3, [r4, #8]
    17ce:	021b      	lsls	r3, r3, #8
    17d0:	4313      	orrs	r3, r2
    17d2:	4a04      	ldr	r2, [pc, #16]	; (17e4 <nwkRxTaskHandler+0x3bc>)
    17d4:	4293      	cmp	r3, r2
    17d6:	d000      	beq.n	17da <nwkRxTaskHandler+0x3b2>
    17d8:	e6ee      	b.n	15b8 <nwkRxTaskHandler+0x190>
    17da:	e6df      	b.n	159c <nwkRxTaskHandler+0x174>
    17dc:	b007      	add	sp, #28
    17de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17e0:	00000ac1 	.word	0x00000ac1
    17e4:	0000ffff 	.word	0x0000ffff

000017e8 <nwkTxDelayTimerHandler>:
    17e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ea:	b083      	sub	sp, #12
    17ec:	9001      	str	r0, [sp, #4]
    17ee:	2400      	movs	r4, #0
    17f0:	2000      	movs	r0, #0
    17f2:	4d10      	ldr	r5, [pc, #64]	; (1834 <nwkTxDelayTimerHandler+0x4c>)
    17f4:	2686      	movs	r6, #134	; 0x86
    17f6:	2787      	movs	r7, #135	; 0x87
    17f8:	e012      	b.n	1820 <nwkTxDelayTimerHandler+0x38>
    17fa:	7803      	ldrb	r3, [r0, #0]
    17fc:	2b11      	cmp	r3, #17
    17fe:	d10f      	bne.n	1820 <nwkTxDelayTimerHandler+0x38>
    1800:	5d82      	ldrb	r2, [r0, r6]
    1802:	5dc3      	ldrb	r3, [r0, r7]
    1804:	021b      	lsls	r3, r3, #8
    1806:	4313      	orrs	r3, r2
    1808:	3b01      	subs	r3, #1
    180a:	b29b      	uxth	r3, r3
    180c:	5583      	strb	r3, [r0, r6]
    180e:	0a19      	lsrs	r1, r3, #8
    1810:	1c02      	adds	r2, r0, #0
    1812:	3286      	adds	r2, #134	; 0x86
    1814:	7051      	strb	r1, [r2, #1]
    1816:	2401      	movs	r4, #1
    1818:	2b00      	cmp	r3, #0
    181a:	d101      	bne.n	1820 <nwkTxDelayTimerHandler+0x38>
    181c:	3313      	adds	r3, #19
    181e:	7003      	strb	r3, [r0, #0]
    1820:	47a8      	blx	r5
    1822:	2800      	cmp	r0, #0
    1824:	d1e9      	bne.n	17fa <nwkTxDelayTimerHandler+0x12>
    1826:	2c00      	cmp	r4, #0
    1828:	d002      	beq.n	1830 <nwkTxDelayTimerHandler+0x48>
    182a:	9801      	ldr	r0, [sp, #4]
    182c:	4b02      	ldr	r3, [pc, #8]	; (1838 <nwkTxDelayTimerHandler+0x50>)
    182e:	4798      	blx	r3
    1830:	b003      	add	sp, #12
    1832:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1834:	00000ad5 	.word	0x00000ad5
    1838:	00001fb5 	.word	0x00001fb5

0000183c <nwkTxAckWaitTimerHandler>:
    183c:	b5f0      	push	{r4, r5, r6, r7, lr}
    183e:	b083      	sub	sp, #12
    1840:	9001      	str	r0, [sp, #4]
    1842:	2400      	movs	r4, #0
    1844:	2000      	movs	r0, #0
    1846:	4d12      	ldr	r5, [pc, #72]	; (1890 <nwkTxAckWaitTimerHandler+0x54>)
    1848:	2686      	movs	r6, #134	; 0x86
    184a:	2787      	movs	r7, #135	; 0x87
    184c:	e015      	b.n	187a <nwkTxAckWaitTimerHandler+0x3e>
    184e:	7803      	ldrb	r3, [r0, #0]
    1850:	2b16      	cmp	r3, #22
    1852:	d112      	bne.n	187a <nwkTxAckWaitTimerHandler+0x3e>
    1854:	5d82      	ldrb	r2, [r0, r6]
    1856:	5dc3      	ldrb	r3, [r0, r7]
    1858:	021b      	lsls	r3, r3, #8
    185a:	4313      	orrs	r3, r2
    185c:	3b01      	subs	r3, #1
    185e:	b29b      	uxth	r3, r3
    1860:	5583      	strb	r3, [r0, r6]
    1862:	0a19      	lsrs	r1, r3, #8
    1864:	1c02      	adds	r2, r0, #0
    1866:	3286      	adds	r2, #134	; 0x86
    1868:	7051      	strb	r1, [r2, #1]
    186a:	2401      	movs	r4, #1
    186c:	2b00      	cmp	r3, #0
    186e:	d104      	bne.n	187a <nwkTxAckWaitTimerHandler+0x3e>
    1870:	3317      	adds	r3, #23
    1872:	7003      	strb	r3, [r0, #0]
    1874:	2210      	movs	r2, #16
    1876:	336e      	adds	r3, #110	; 0x6e
    1878:	54c2      	strb	r2, [r0, r3]
    187a:	47a8      	blx	r5
    187c:	2800      	cmp	r0, #0
    187e:	d1e6      	bne.n	184e <nwkTxAckWaitTimerHandler+0x12>
    1880:	2c00      	cmp	r4, #0
    1882:	d002      	beq.n	188a <nwkTxAckWaitTimerHandler+0x4e>
    1884:	9801      	ldr	r0, [sp, #4]
    1886:	4b03      	ldr	r3, [pc, #12]	; (1894 <nwkTxAckWaitTimerHandler+0x58>)
    1888:	4798      	blx	r3
    188a:	b003      	add	sp, #12
    188c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	00000ad5 	.word	0x00000ad5
    1894:	00001fb5 	.word	0x00001fb5

00001898 <nwkTxInit>:
    1898:	2200      	movs	r2, #0
    189a:	4b07      	ldr	r3, [pc, #28]	; (18b8 <nwkTxInit+0x20>)
    189c:	601a      	str	r2, [r3, #0]
    189e:	4b07      	ldr	r3, [pc, #28]	; (18bc <nwkTxInit+0x24>)
    18a0:	2132      	movs	r1, #50	; 0x32
    18a2:	6099      	str	r1, [r3, #8]
    18a4:	731a      	strb	r2, [r3, #12]
    18a6:	4906      	ldr	r1, [pc, #24]	; (18c0 <nwkTxInit+0x28>)
    18a8:	6119      	str	r1, [r3, #16]
    18aa:	4b06      	ldr	r3, [pc, #24]	; (18c4 <nwkTxInit+0x2c>)
    18ac:	210a      	movs	r1, #10
    18ae:	6099      	str	r1, [r3, #8]
    18b0:	731a      	strb	r2, [r3, #12]
    18b2:	4a05      	ldr	r2, [pc, #20]	; (18c8 <nwkTxInit+0x30>)
    18b4:	611a      	str	r2, [r3, #16]
    18b6:	4770      	bx	lr
    18b8:	20000afc 	.word	0x20000afc
    18bc:	20000ae8 	.word	0x20000ae8
    18c0:	0000183d 	.word	0x0000183d
    18c4:	20000b00 	.word	0x20000b00
    18c8:	000017e9 	.word	0x000017e9

000018cc <nwkTxFrame>:
    18cc:	b510      	push	{r4, lr}
    18ce:	1c04      	adds	r4, r0, #0
    18d0:	2388      	movs	r3, #136	; 0x88
    18d2:	5cc3      	ldrb	r3, [r0, r3]
    18d4:	079a      	lsls	r2, r3, #30
    18d6:	d502      	bpl.n	18de <nwkTxFrame+0x12>
    18d8:	2212      	movs	r2, #18
    18da:	7002      	strb	r2, [r0, #0]
    18dc:	e001      	b.n	18e2 <nwkTxFrame+0x16>
    18de:	2212      	movs	r2, #18
    18e0:	7002      	strb	r2, [r0, #0]
    18e2:	2100      	movs	r1, #0
    18e4:	2285      	movs	r2, #133	; 0x85
    18e6:	54a1      	strb	r1, [r4, r2]
    18e8:	07da      	lsls	r2, r3, #31
    18ea:	d504      	bpl.n	18f6 <nwkTxFrame+0x2a>
    18ec:	2201      	movs	r2, #1
    18ee:	4252      	negs	r2, r2
    18f0:	7162      	strb	r2, [r4, #5]
    18f2:	71a2      	strb	r2, [r4, #6]
    18f4:	e004      	b.n	1900 <nwkTxFrame+0x34>
    18f6:	4a1d      	ldr	r2, [pc, #116]	; (196c <nwkTxFrame+0xa0>)
    18f8:	7891      	ldrb	r1, [r2, #2]
    18fa:	7161      	strb	r1, [r4, #5]
    18fc:	78d2      	ldrb	r2, [r2, #3]
    18fe:	71a2      	strb	r2, [r4, #6]
    1900:	2205      	movs	r2, #5
    1902:	421a      	tst	r2, r3
    1904:	d103      	bne.n	190e <nwkTxFrame+0x42>
    1906:	1c20      	adds	r0, r4, #0
    1908:	4b19      	ldr	r3, [pc, #100]	; (1970 <nwkTxFrame+0xa4>)
    190a:	4798      	blx	r3
    190c:	e003      	b.n	1916 <nwkTxFrame+0x4a>
    190e:	7be2      	ldrb	r2, [r4, #15]
    1910:	7c23      	ldrb	r3, [r4, #16]
    1912:	71e2      	strb	r2, [r4, #7]
    1914:	7223      	strb	r3, [r4, #8]
    1916:	4915      	ldr	r1, [pc, #84]	; (196c <nwkTxFrame+0xa0>)
    1918:	780b      	ldrb	r3, [r1, #0]
    191a:	7263      	strb	r3, [r4, #9]
    191c:	784b      	ldrb	r3, [r1, #1]
    191e:	72a3      	strb	r3, [r4, #10]
    1920:	794b      	ldrb	r3, [r1, #5]
    1922:	3301      	adds	r3, #1
    1924:	b2db      	uxtb	r3, r3
    1926:	714b      	strb	r3, [r1, #5]
    1928:	7123      	strb	r3, [r4, #4]
    192a:	79e1      	ldrb	r1, [r4, #7]
    192c:	7a23      	ldrb	r3, [r4, #8]
    192e:	021b      	lsls	r3, r3, #8
    1930:	430b      	orrs	r3, r1
    1932:	4a10      	ldr	r2, [pc, #64]	; (1974 <nwkTxFrame+0xa8>)
    1934:	4293      	cmp	r3, r2
    1936:	d10e      	bne.n	1956 <nwkTxFrame+0x8a>
    1938:	2341      	movs	r3, #65	; 0x41
    193a:	70a3      	strb	r3, [r4, #2]
    193c:	3bb9      	subs	r3, #185	; 0xb9
    193e:	70e3      	strb	r3, [r4, #3]
    1940:	4b0d      	ldr	r3, [pc, #52]	; (1978 <nwkTxFrame+0xac>)
    1942:	4798      	blx	r3
    1944:	2307      	movs	r3, #7
    1946:	4018      	ands	r0, r3
    1948:	3001      	adds	r0, #1
    194a:	337f      	adds	r3, #127	; 0x7f
    194c:	54e0      	strb	r0, [r4, r3]
    194e:	3486      	adds	r4, #134	; 0x86
    1950:	2300      	movs	r3, #0
    1952:	7063      	strb	r3, [r4, #1]
    1954:	e009      	b.n	196a <nwkTxFrame+0x9e>
    1956:	2361      	movs	r3, #97	; 0x61
    1958:	70a3      	strb	r3, [r4, #2]
    195a:	3bd9      	subs	r3, #217	; 0xd9
    195c:	70e3      	strb	r3, [r4, #3]
    195e:	2200      	movs	r2, #0
    1960:	33fe      	adds	r3, #254	; 0xfe
    1962:	54e2      	strb	r2, [r4, r3]
    1964:	3486      	adds	r4, #134	; 0x86
    1966:	2300      	movs	r3, #0
    1968:	7063      	strb	r3, [r4, #1]
    196a:	bd10      	pop	{r4, pc}
    196c:	20000c60 	.word	0x20000c60
    1970:	00000d11 	.word	0x00000d11
    1974:	0000ffff 	.word	0x0000ffff
    1978:	00004fad 	.word	0x00004fad

0000197c <nwkTxBroadcastFrame>:
    197c:	b538      	push	{r3, r4, r5, lr}
    197e:	1c05      	adds	r5, r0, #0
    1980:	4b1c      	ldr	r3, [pc, #112]	; (19f4 <nwkTxBroadcastFrame+0x78>)
    1982:	4798      	blx	r3
    1984:	1e04      	subs	r4, r0, #0
    1986:	d033      	beq.n	19f0 <nwkTxBroadcastFrame+0x74>
    1988:	2312      	movs	r3, #18
    198a:	7003      	strb	r3, [r0, #0]
    198c:	786b      	ldrb	r3, [r5, #1]
    198e:	7043      	strb	r3, [r0, #1]
    1990:	2200      	movs	r2, #0
    1992:	2385      	movs	r3, #133	; 0x85
    1994:	54c2      	strb	r2, [r0, r3]
    1996:	4b18      	ldr	r3, [pc, #96]	; (19f8 <nwkTxBroadcastFrame+0x7c>)
    1998:	4798      	blx	r3
    199a:	2307      	movs	r3, #7
    199c:	4018      	ands	r0, r3
    199e:	3001      	adds	r0, #1
    19a0:	337f      	adds	r3, #127	; 0x7f
    19a2:	54e0      	strb	r0, [r4, r3]
    19a4:	0c00      	lsrs	r0, r0, #16
    19a6:	1c23      	adds	r3, r4, #0
    19a8:	3386      	adds	r3, #134	; 0x86
    19aa:	7058      	strb	r0, [r3, #1]
    19ac:	2200      	movs	r2, #0
    19ae:	2389      	movs	r3, #137	; 0x89
    19b0:	54e2      	strb	r2, [r4, r3]
    19b2:	1c23      	adds	r3, r4, #0
    19b4:	3389      	adds	r3, #137	; 0x89
    19b6:	705a      	strb	r2, [r3, #1]
    19b8:	709a      	strb	r2, [r3, #2]
    19ba:	70da      	strb	r2, [r3, #3]
    19bc:	1ca0      	adds	r0, r4, #2
    19be:	786a      	ldrb	r2, [r5, #1]
    19c0:	1ca9      	adds	r1, r5, #2
    19c2:	4b0e      	ldr	r3, [pc, #56]	; (19fc <nwkTxBroadcastFrame+0x80>)
    19c4:	4798      	blx	r3
    19c6:	2341      	movs	r3, #65	; 0x41
    19c8:	70a3      	strb	r3, [r4, #2]
    19ca:	3bb9      	subs	r3, #185	; 0xb9
    19cc:	70e3      	strb	r3, [r4, #3]
    19ce:	3377      	adds	r3, #119	; 0x77
    19d0:	71e3      	strb	r3, [r4, #7]
    19d2:	7223      	strb	r3, [r4, #8]
    19d4:	796a      	ldrb	r2, [r5, #5]
    19d6:	79ab      	ldrb	r3, [r5, #6]
    19d8:	7162      	strb	r2, [r4, #5]
    19da:	71a3      	strb	r3, [r4, #6]
    19dc:	4a08      	ldr	r2, [pc, #32]	; (1a00 <nwkTxBroadcastFrame+0x84>)
    19de:	7813      	ldrb	r3, [r2, #0]
    19e0:	7263      	strb	r3, [r4, #9]
    19e2:	7853      	ldrb	r3, [r2, #1]
    19e4:	72a3      	strb	r3, [r4, #10]
    19e6:	7953      	ldrb	r3, [r2, #5]
    19e8:	3301      	adds	r3, #1
    19ea:	b2db      	uxtb	r3, r3
    19ec:	7153      	strb	r3, [r2, #5]
    19ee:	7123      	strb	r3, [r4, #4]
    19f0:	bd38      	pop	{r3, r4, r5, pc}
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	00000a51 	.word	0x00000a51
    19f8:	00004fad 	.word	0x00004fad
    19fc:	00004e7d 	.word	0x00004e7d
    1a00:	20000c60 	.word	0x20000c60

00001a04 <nwkTxAckReceived>:
    1a04:	b538      	push	{r3, r4, r5, lr}
    1a06:	6885      	ldr	r5, [r0, #8]
    1a08:	7b03      	ldrb	r3, [r0, #12]
    1a0a:	2000      	movs	r0, #0
    1a0c:	2b03      	cmp	r3, #3
    1a0e:	d112      	bne.n	1a36 <nwkTxAckReceived+0x32>
    1a10:	4c09      	ldr	r4, [pc, #36]	; (1a38 <nwkTxAckReceived+0x34>)
    1a12:	e00d      	b.n	1a30 <nwkTxAckReceived+0x2c>
    1a14:	7803      	ldrb	r3, [r0, #0]
    1a16:	2b16      	cmp	r3, #22
    1a18:	d10a      	bne.n	1a30 <nwkTxAckReceived+0x2c>
    1a1a:	7b02      	ldrb	r2, [r0, #12]
    1a1c:	786b      	ldrb	r3, [r5, #1]
    1a1e:	429a      	cmp	r2, r3
    1a20:	d106      	bne.n	1a30 <nwkTxAckReceived+0x2c>
    1a22:	2317      	movs	r3, #23
    1a24:	7003      	strb	r3, [r0, #0]
    1a26:	78aa      	ldrb	r2, [r5, #2]
    1a28:	3371      	adds	r3, #113	; 0x71
    1a2a:	54c2      	strb	r2, [r0, r3]
    1a2c:	2001      	movs	r0, #1
    1a2e:	e002      	b.n	1a36 <nwkTxAckReceived+0x32>
    1a30:	47a0      	blx	r4
    1a32:	2800      	cmp	r0, #0
    1a34:	d1ee      	bne.n	1a14 <nwkTxAckReceived+0x10>
    1a36:	bd38      	pop	{r3, r4, r5, pc}
    1a38:	00000ad5 	.word	0x00000ad5

00001a3c <nwkTxConfirm>:
    1a3c:	2317      	movs	r3, #23
    1a3e:	7003      	strb	r3, [r0, #0]
    1a40:	336e      	adds	r3, #110	; 0x6e
    1a42:	54c1      	strb	r1, [r0, r3]
    1a44:	4770      	bx	lr
    1a46:	46c0      	nop			; (mov r8, r8)

00001a48 <PHY_DataConf>:
    1a48:	4b0d      	ldr	r3, [pc, #52]	; (1a80 <PHY_DataConf+0x38>)
    1a4a:	681b      	ldr	r3, [r3, #0]
    1a4c:	2801      	cmp	r0, #1
    1a4e:	d005      	beq.n	1a5c <PHY_DataConf+0x14>
    1a50:	2800      	cmp	r0, #0
    1a52:	d007      	beq.n	1a64 <PHY_DataConf+0x1c>
    1a54:	2221      	movs	r2, #33	; 0x21
    1a56:	2802      	cmp	r0, #2
    1a58:	d005      	beq.n	1a66 <PHY_DataConf+0x1e>
    1a5a:	e001      	b.n	1a60 <PHY_DataConf+0x18>
    1a5c:	2220      	movs	r2, #32
    1a5e:	e002      	b.n	1a66 <PHY_DataConf+0x1e>
    1a60:	2201      	movs	r2, #1
    1a62:	e000      	b.n	1a66 <PHY_DataConf+0x1e>
    1a64:	2200      	movs	r2, #0
    1a66:	2185      	movs	r1, #133	; 0x85
    1a68:	545a      	strb	r2, [r3, r1]
    1a6a:	2215      	movs	r2, #21
    1a6c:	701a      	strb	r2, [r3, #0]
    1a6e:	2200      	movs	r2, #0
    1a70:	4b03      	ldr	r3, [pc, #12]	; (1a80 <PHY_DataConf+0x38>)
    1a72:	601a      	str	r2, [r3, #0]
    1a74:	4903      	ldr	r1, [pc, #12]	; (1a84 <PHY_DataConf+0x3c>)
    1a76:	3248      	adds	r2, #72	; 0x48
    1a78:	5a8b      	ldrh	r3, [r1, r2]
    1a7a:	3b01      	subs	r3, #1
    1a7c:	528b      	strh	r3, [r1, r2]
    1a7e:	4770      	bx	lr
    1a80:	20000afc 	.word	0x20000afc
    1a84:	20000c60 	.word	0x20000c60

00001a88 <nwkTxTaskHandler>:
    1a88:	b570      	push	{r4, r5, r6, lr}
    1a8a:	2400      	movs	r4, #0
    1a8c:	4d38      	ldr	r5, [pc, #224]	; (1b70 <nwkTxTaskHandler+0xe8>)
    1a8e:	4e39      	ldr	r6, [pc, #228]	; (1b74 <nwkTxTaskHandler+0xec>)
    1a90:	e068      	b.n	1b64 <nwkTxTaskHandler+0xdc>
    1a92:	7823      	ldrb	r3, [r4, #0]
    1a94:	2b13      	cmp	r3, #19
    1a96:	d01a      	beq.n	1ace <nwkTxTaskHandler+0x46>
    1a98:	b2da      	uxtb	r2, r3
    1a9a:	2a13      	cmp	r2, #19
    1a9c:	d802      	bhi.n	1aa4 <nwkTxTaskHandler+0x1c>
    1a9e:	2b12      	cmp	r3, #18
    1aa0:	d005      	beq.n	1aae <nwkTxTaskHandler+0x26>
    1aa2:	e05f      	b.n	1b64 <nwkTxTaskHandler+0xdc>
    1aa4:	2b15      	cmp	r3, #21
    1aa6:	d022      	beq.n	1aee <nwkTxTaskHandler+0x66>
    1aa8:	2b17      	cmp	r3, #23
    1aaa:	d042      	beq.n	1b32 <nwkTxTaskHandler+0xaa>
    1aac:	e05a      	b.n	1b64 <nwkTxTaskHandler+0xdc>
    1aae:	2386      	movs	r3, #134	; 0x86
    1ab0:	5ce2      	ldrb	r2, [r4, r3]
    1ab2:	3301      	adds	r3, #1
    1ab4:	5ce3      	ldrb	r3, [r4, r3]
    1ab6:	021b      	lsls	r3, r3, #8
    1ab8:	4313      	orrs	r3, r2
    1aba:	d005      	beq.n	1ac8 <nwkTxTaskHandler+0x40>
    1abc:	2311      	movs	r3, #17
    1abe:	7023      	strb	r3, [r4, #0]
    1ac0:	482d      	ldr	r0, [pc, #180]	; (1b78 <nwkTxTaskHandler+0xf0>)
    1ac2:	4b2e      	ldr	r3, [pc, #184]	; (1b7c <nwkTxTaskHandler+0xf4>)
    1ac4:	4798      	blx	r3
    1ac6:	e04d      	b.n	1b64 <nwkTxTaskHandler+0xdc>
    1ac8:	2313      	movs	r3, #19
    1aca:	7023      	strb	r3, [r4, #0]
    1acc:	e04a      	b.n	1b64 <nwkTxTaskHandler+0xdc>
    1ace:	6833      	ldr	r3, [r6, #0]
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d147      	bne.n	1b64 <nwkTxTaskHandler+0xdc>
    1ad4:	4b27      	ldr	r3, [pc, #156]	; (1b74 <nwkTxTaskHandler+0xec>)
    1ad6:	601c      	str	r4, [r3, #0]
    1ad8:	2314      	movs	r3, #20
    1ada:	7023      	strb	r3, [r4, #0]
    1adc:	1c60      	adds	r0, r4, #1
    1ade:	4b28      	ldr	r3, [pc, #160]	; (1b80 <nwkTxTaskHandler+0xf8>)
    1ae0:	4798      	blx	r3
    1ae2:	4928      	ldr	r1, [pc, #160]	; (1b84 <nwkTxTaskHandler+0xfc>)
    1ae4:	2248      	movs	r2, #72	; 0x48
    1ae6:	5a8b      	ldrh	r3, [r1, r2]
    1ae8:	3301      	adds	r3, #1
    1aea:	528b      	strh	r3, [r1, r2]
    1aec:	e03a      	b.n	1b64 <nwkTxTaskHandler+0xdc>
    1aee:	2385      	movs	r3, #133	; 0x85
    1af0:	5ce3      	ldrb	r3, [r4, r3]
    1af2:	2b00      	cmp	r3, #0
    1af4:	d11a      	bne.n	1b2c <nwkTxTaskHandler+0xa4>
    1af6:	7b62      	ldrb	r2, [r4, #13]
    1af8:	7ba3      	ldrb	r3, [r4, #14]
    1afa:	021b      	lsls	r3, r3, #8
    1afc:	4921      	ldr	r1, [pc, #132]	; (1b84 <nwkTxTaskHandler+0xfc>)
    1afe:	8809      	ldrh	r1, [r1, #0]
    1b00:	4313      	orrs	r3, r2
    1b02:	4299      	cmp	r1, r3
    1b04:	d10f      	bne.n	1b26 <nwkTxTaskHandler+0x9e>
    1b06:	7ae3      	ldrb	r3, [r4, #11]
    1b08:	07db      	lsls	r3, r3, #31
    1b0a:	d50c      	bpl.n	1b26 <nwkTxTaskHandler+0x9e>
    1b0c:	2316      	movs	r3, #22
    1b0e:	7023      	strb	r3, [r4, #0]
    1b10:	2215      	movs	r2, #21
    1b12:	3370      	adds	r3, #112	; 0x70
    1b14:	54e2      	strb	r2, [r4, r3]
    1b16:	2200      	movs	r2, #0
    1b18:	1c23      	adds	r3, r4, #0
    1b1a:	3386      	adds	r3, #134	; 0x86
    1b1c:	705a      	strb	r2, [r3, #1]
    1b1e:	481a      	ldr	r0, [pc, #104]	; (1b88 <nwkTxTaskHandler+0x100>)
    1b20:	4b16      	ldr	r3, [pc, #88]	; (1b7c <nwkTxTaskHandler+0xf4>)
    1b22:	4798      	blx	r3
    1b24:	e01e      	b.n	1b64 <nwkTxTaskHandler+0xdc>
    1b26:	2317      	movs	r3, #23
    1b28:	7023      	strb	r3, [r4, #0]
    1b2a:	e01b      	b.n	1b64 <nwkTxTaskHandler+0xdc>
    1b2c:	2317      	movs	r3, #23
    1b2e:	7023      	strb	r3, [r4, #0]
    1b30:	e018      	b.n	1b64 <nwkTxTaskHandler+0xdc>
    1b32:	1c20      	adds	r0, r4, #0
    1b34:	4b15      	ldr	r3, [pc, #84]	; (1b8c <nwkTxTaskHandler+0x104>)
    1b36:	4798      	blx	r3
    1b38:	2389      	movs	r3, #137	; 0x89
    1b3a:	5ce0      	ldrb	r0, [r4, r3]
    1b3c:	3301      	adds	r3, #1
    1b3e:	5ce2      	ldrb	r2, [r4, r3]
    1b40:	0212      	lsls	r2, r2, #8
    1b42:	4302      	orrs	r2, r0
    1b44:	3301      	adds	r3, #1
    1b46:	5ce3      	ldrb	r3, [r4, r3]
    1b48:	041b      	lsls	r3, r3, #16
    1b4a:	4313      	orrs	r3, r2
    1b4c:	1c1a      	adds	r2, r3, #0
    1b4e:	238c      	movs	r3, #140	; 0x8c
    1b50:	5ce3      	ldrb	r3, [r4, r3]
    1b52:	061b      	lsls	r3, r3, #24
    1b54:	4313      	orrs	r3, r2
    1b56:	d103      	bne.n	1b60 <nwkTxTaskHandler+0xd8>
    1b58:	1c20      	adds	r0, r4, #0
    1b5a:	4b0d      	ldr	r3, [pc, #52]	; (1b90 <nwkTxTaskHandler+0x108>)
    1b5c:	4798      	blx	r3
    1b5e:	e001      	b.n	1b64 <nwkTxTaskHandler+0xdc>
    1b60:	1c20      	adds	r0, r4, #0
    1b62:	4798      	blx	r3
    1b64:	1c20      	adds	r0, r4, #0
    1b66:	47a8      	blx	r5
    1b68:	1e04      	subs	r4, r0, #0
    1b6a:	d192      	bne.n	1a92 <nwkTxTaskHandler+0xa>
    1b6c:	bd70      	pop	{r4, r5, r6, pc}
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	00000ad5 	.word	0x00000ad5
    1b74:	20000afc 	.word	0x20000afc
    1b78:	20000b00 	.word	0x20000b00
    1b7c:	00001fb5 	.word	0x00001fb5
    1b80:	00001d61 	.word	0x00001d61
    1b84:	20000c60 	.word	0x20000c60
    1b88:	20000ae8 	.word	0x20000ae8
    1b8c:	00000c7d 	.word	0x00000c7d
    1b90:	00000ac1 	.word	0x00000ac1

00001b94 <phySetChannel>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    1b94:	b538      	push	{r3, r4, r5, lr}
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1b96:	200c      	movs	r0, #12
    1b98:	4b13      	ldr	r3, [pc, #76]	; (1be8 <phySetChannel+0x54>)
    1b9a:	4798      	blx	r3
*****************************************************************************/
static void phySetChannel(void)
{
	uint8_t reg;

	reg = phyReadRegister(TRX_CTRL_2_REG) & ~0x3f;
    1b9c:	233f      	movs	r3, #63	; 0x3f
    1b9e:	1c01      	adds	r1, r0, #0
    1ba0:	4399      	bics	r1, r3
	phyWriteRegister(TRX_CTRL_2_REG, reg | phyModulation);
    1ba2:	4b12      	ldr	r3, [pc, #72]	; (1bec <phySetChannel+0x58>)
    1ba4:	781b      	ldrb	r3, [r3, #0]
    1ba6:	4319      	orrs	r1, r3

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1ba8:	b2c9      	uxtb	r1, r1
    1baa:	200c      	movs	r0, #12
    1bac:	4d10      	ldr	r5, [pc, #64]	; (1bf0 <phySetChannel+0x5c>)
    1bae:	47a8      	blx	r5
	uint8_t reg;

	reg = phyReadRegister(TRX_CTRL_2_REG) & ~0x3f;
	phyWriteRegister(TRX_CTRL_2_REG, reg | phyModulation);

	phyWriteRegister(CC_CTRL_1_REG, phyBand);
    1bb0:	4c10      	ldr	r4, [pc, #64]	; (1bf4 <phySetChannel+0x60>)

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1bb2:	7821      	ldrb	r1, [r4, #0]
    1bb4:	2014      	movs	r0, #20
    1bb6:	47a8      	blx	r5
	reg = phyReadRegister(TRX_CTRL_2_REG) & ~0x3f;
	phyWriteRegister(TRX_CTRL_2_REG, reg | phyModulation);

	phyWriteRegister(CC_CTRL_1_REG, phyBand);

	if (0 == phyBand) {
    1bb8:	7823      	ldrb	r3, [r4, #0]
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d10d      	bne.n	1bda <phySetChannel+0x46>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1bbe:	2008      	movs	r0, #8
    1bc0:	4b09      	ldr	r3, [pc, #36]	; (1be8 <phySetChannel+0x54>)
    1bc2:	4798      	blx	r3
	phyWriteRegister(TRX_CTRL_2_REG, reg | phyModulation);

	phyWriteRegister(CC_CTRL_1_REG, phyBand);

	if (0 == phyBand) {
		reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    1bc4:	231f      	movs	r3, #31
    1bc6:	1c01      	adds	r1, r0, #0
    1bc8:	4399      	bics	r1, r3
		phyWriteRegister(PHY_CC_CCA_REG, reg | phyChannel);
    1bca:	4b0b      	ldr	r3, [pc, #44]	; (1bf8 <phySetChannel+0x64>)
    1bcc:	781b      	ldrb	r3, [r3, #0]
    1bce:	4319      	orrs	r1, r3

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1bd0:	b2c9      	uxtb	r1, r1
    1bd2:	2008      	movs	r0, #8
    1bd4:	4b06      	ldr	r3, [pc, #24]	; (1bf0 <phySetChannel+0x5c>)
    1bd6:	4798      	blx	r3
    1bd8:	e004      	b.n	1be4 <phySetChannel+0x50>

	if (0 == phyBand) {
		reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
		phyWriteRegister(PHY_CC_CCA_REG, reg | phyChannel);
	} else {
		phyWriteRegister(CC_CTRL_0_REG, phyChannel);
    1bda:	4b07      	ldr	r3, [pc, #28]	; (1bf8 <phySetChannel+0x64>)

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1bdc:	7819      	ldrb	r1, [r3, #0]
    1bde:	2013      	movs	r0, #19
    1be0:	4b03      	ldr	r3, [pc, #12]	; (1bf0 <phySetChannel+0x5c>)
    1be2:	4798      	blx	r3
		reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
		phyWriteRegister(PHY_CC_CCA_REG, reg | phyChannel);
	} else {
		phyWriteRegister(CC_CTRL_0_REG, phyChannel);
	}
}
    1be4:	bd38      	pop	{r3, r4, r5, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	00002351 	.word	0x00002351
    1bec:	20000b14 	.word	0x20000b14
    1bf0:	00002449 	.word	0x00002449
    1bf4:	20000b9a 	.word	0x20000b9a
    1bf8:	20000b9b 	.word	0x20000b9b

00001bfc <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    1bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bfe:	1c04      	adds	r4, r0, #0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1c00:	4f0b      	ldr	r7, [pc, #44]	; (1c30 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c02:	4e0c      	ldr	r6, [pc, #48]	; (1c34 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do {  phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1c04:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1c06:	2002      	movs	r0, #2
    1c08:	2103      	movs	r1, #3
    1c0a:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c0c:	2001      	movs	r0, #1
    1c0e:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do {  phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1c10:	4028      	ands	r0, r5
    1c12:	2808      	cmp	r0, #8
    1c14:	d1f7      	bne.n	1c06 <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1c16:	4f06      	ldr	r7, [pc, #24]	; (1c30 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c18:	4e06      	ldr	r6, [pc, #24]	; (1c34 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do {phyWriteRegister(TRX_STATE_REG,
			    state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1c1a:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1c1c:	2002      	movs	r0, #2
    1c1e:	1c21      	adds	r1, r4, #0
    1c20:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c22:	2001      	movs	r0, #1
    1c24:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do {phyWriteRegister(TRX_STATE_REG,
			    state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1c26:	4028      	ands	r0, r5
    1c28:	4284      	cmp	r4, r0
    1c2a:	d1f7      	bne.n	1c1c <phyTrxSetState+0x20>
}
    1c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	00002449 	.word	0x00002449
    1c34:	00002351 	.word	0x00002351

00001c38 <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    1c38:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    1c3a:	2008      	movs	r0, #8
    1c3c:	4b06      	ldr	r3, [pc, #24]	; (1c58 <phySetRxState+0x20>)
    1c3e:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c40:	200f      	movs	r0, #15
    1c42:	4b06      	ldr	r3, [pc, #24]	; (1c5c <phySetRxState+0x24>)
    1c44:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    1c46:	4b06      	ldr	r3, [pc, #24]	; (1c60 <phySetRxState+0x28>)
    1c48:	781b      	ldrb	r3, [r3, #0]
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d002      	beq.n	1c54 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    1c4e:	2016      	movs	r0, #22
    1c50:	4b01      	ldr	r3, [pc, #4]	; (1c58 <phySetRxState+0x20>)
    1c52:	4798      	blx	r3
	}
}
    1c54:	bd08      	pop	{r3, pc}
    1c56:	46c0      	nop			; (mov r8, r8)
    1c58:	00001bfd 	.word	0x00001bfd
    1c5c:	00002351 	.word	0x00002351
    1c60:	20000b99 	.word	0x20000b99

00001c64 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    1c64:	b570      	push	{r4, r5, r6, lr}
	uint8_t reg;
	trx_spi_init();
    1c66:	4b19      	ldr	r3, [pc, #100]	; (1ccc <PHY_Init+0x68>)
    1c68:	4798      	blx	r3
	PhyReset();
    1c6a:	4b19      	ldr	r3, [pc, #100]	; (1cd0 <PHY_Init+0x6c>)
    1c6c:	4798      	blx	r3

	phyRxState = false;
    1c6e:	2300      	movs	r3, #0
    1c70:	4a18      	ldr	r2, [pc, #96]	; (1cd4 <PHY_Init+0x70>)
    1c72:	7013      	strb	r3, [r2, #0]
	phyBand = 0;
    1c74:	4a18      	ldr	r2, [pc, #96]	; (1cd8 <PHY_Init+0x74>)
    1c76:	7013      	strb	r3, [r2, #0]
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c78:	200c      	movs	r0, #12
    1c7a:	4b18      	ldr	r3, [pc, #96]	; (1cdc <PHY_Init+0x78>)
    1c7c:	4798      	blx	r3
	trx_spi_init();
	PhyReset();

	phyRxState = false;
	phyBand = 0;
	phyModulation = phyReadRegister(TRX_CTRL_2_REG) & 0x3f;
    1c7e:	233f      	movs	r3, #63	; 0x3f
    1c80:	4018      	ands	r0, r3
    1c82:	4b17      	ldr	r3, [pc, #92]	; (1ce0 <PHY_Init+0x7c>)
    1c84:	7018      	strb	r0, [r3, #0]
	phyState = PHY_STATE_IDLE;
    1c86:	2201      	movs	r2, #1
    1c88:	4b16      	ldr	r3, [pc, #88]	; (1ce4 <PHY_Init+0x80>)
    1c8a:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1c8c:	4e16      	ldr	r6, [pc, #88]	; (1ce8 <PHY_Init+0x84>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c8e:	4d13      	ldr	r5, [pc, #76]	; (1cdc <PHY_Init+0x78>)
	phyModulation = phyReadRegister(TRX_CTRL_2_REG) & 0x3f;
	phyState = PHY_STATE_IDLE;

	do {  phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1c90:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1c92:	2002      	movs	r0, #2
    1c94:	2108      	movs	r1, #8
    1c96:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c98:	2001      	movs	r0, #1
    1c9a:	47a8      	blx	r5
	phyModulation = phyReadRegister(TRX_CTRL_2_REG) & 0x3f;
	phyState = PHY_STATE_IDLE;

	do {  phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1c9c:	4020      	ands	r0, r4
    1c9e:	2808      	cmp	r0, #8
    1ca0:	d1f7      	bne.n	1c92 <PHY_Init+0x2e>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1ca2:	300e      	adds	r0, #14
    1ca4:	4b0d      	ldr	r3, [pc, #52]	; (1cdc <PHY_Init+0x78>)
    1ca6:	4798      	blx	r3

	do {  phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	reg = phyReadRegister(RF_CTRL_0_REG) & ~0x03;
    1ca8:	2303      	movs	r3, #3
    1caa:	1c01      	adds	r1, r0, #0
    1cac:	4399      	bics	r1, r3
	phyWriteRegister(RF_CTRL_0_REG, reg | 0X03); /* GC_TX_OFFS =3 for BPSK */
    1cae:	4319      	orrs	r1, r3

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1cb0:	b2c9      	uxtb	r1, r1
    1cb2:	2016      	movs	r0, #22
    1cb4:	4c0c      	ldr	r4, [pc, #48]	; (1ce8 <PHY_Init+0x84>)
    1cb6:	47a0      	blx	r4
    1cb8:	2005      	movs	r0, #5
    1cba:	2100      	movs	r1, #0
    1cbc:	47a0      	blx	r4
    1cbe:	2004      	movs	r0, #4
    1cc0:	212e      	movs	r1, #46	; 0x2e
    1cc2:	47a0      	blx	r4
    1cc4:	200c      	movs	r0, #12
    1cc6:	2180      	movs	r1, #128	; 0x80
    1cc8:	47a0      	blx	r4
	phyWriteRegister(TRX_CTRL_1_REG,
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG, (1 << RX_SAFE_MODE));
}
    1cca:	bd70      	pop	{r4, r5, r6, pc}
    1ccc:	00002201 	.word	0x00002201
    1cd0:	00002325 	.word	0x00002325
    1cd4:	20000b99 	.word	0x20000b99
    1cd8:	20000b9a 	.word	0x20000b9a
    1cdc:	00002351 	.word	0x00002351
    1ce0:	20000b14 	.word	0x20000b14
    1ce4:	20000b98 	.word	0x20000b98
    1ce8:	00002449 	.word	0x00002449

00001cec <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    1cec:	b508      	push	{r3, lr}
	phyRxState = rx;
    1cee:	4b02      	ldr	r3, [pc, #8]	; (1cf8 <PHY_SetRxState+0xc>)
    1cf0:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    1cf2:	4b02      	ldr	r3, [pc, #8]	; (1cfc <PHY_SetRxState+0x10>)
    1cf4:	4798      	blx	r3
}
    1cf6:	bd08      	pop	{r3, pc}
    1cf8:	20000b99 	.word	0x20000b99
    1cfc:	00001c39 	.word	0x00001c39

00001d00 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    1d00:	b508      	push	{r3, lr}
	phyChannel = channel;
    1d02:	4b02      	ldr	r3, [pc, #8]	; (1d0c <PHY_SetChannel+0xc>)
    1d04:	7018      	strb	r0, [r3, #0]
	phySetChannel();
    1d06:	4b02      	ldr	r3, [pc, #8]	; (1d10 <PHY_SetChannel+0x10>)
    1d08:	4798      	blx	r3
}
    1d0a:	bd08      	pop	{r3, pc}
    1d0c:	20000b9b 	.word	0x20000b9b
    1d10:	00001b95 	.word	0x00001b95

00001d14 <PHY_SetPanId>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    1d14:	b530      	push	{r4, r5, lr}
    1d16:	b083      	sub	sp, #12
    1d18:	466b      	mov	r3, sp
    1d1a:	1d9d      	adds	r5, r3, #6
    1d1c:	80d8      	strh	r0, [r3, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1d1e:	b2c1      	uxtb	r1, r0
    1d20:	2022      	movs	r0, #34	; 0x22
    1d22:	4c03      	ldr	r4, [pc, #12]	; (1d30 <PHY_SetPanId+0x1c>)
    1d24:	47a0      	blx	r4
    1d26:	7869      	ldrb	r1, [r5, #1]
    1d28:	2023      	movs	r0, #35	; 0x23
    1d2a:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    1d2c:	b003      	add	sp, #12
    1d2e:	bd30      	pop	{r4, r5, pc}
    1d30:	00002449 	.word	0x00002449

00001d34 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    1d34:	b570      	push	{r4, r5, r6, lr}
    1d36:	b082      	sub	sp, #8
    1d38:	466b      	mov	r3, sp
    1d3a:	1d9e      	adds	r6, r3, #6
    1d3c:	80d8      	strh	r0, [r3, #6]
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    1d3e:	b2c4      	uxtb	r4, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1d40:	2020      	movs	r0, #32
    1d42:	1c21      	adds	r1, r4, #0
    1d44:	4d05      	ldr	r5, [pc, #20]	; (1d5c <PHY_SetShortAddr+0x28>)
    1d46:	47a8      	blx	r5
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    1d48:	7876      	ldrb	r6, [r6, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1d4a:	2021      	movs	r0, #33	; 0x21
    1d4c:	1c31      	adds	r1, r6, #0
    1d4e:	47a8      	blx	r5
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    1d50:	1931      	adds	r1, r6, r4

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1d52:	b2c9      	uxtb	r1, r1
    1d54:	202d      	movs	r0, #45	; 0x2d
    1d56:	47a8      	blx	r5
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    1d58:	b002      	add	sp, #8
    1d5a:	bd70      	pop	{r4, r5, r6, pc}
    1d5c:	00002449 	.word	0x00002449

00001d60 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    1d60:	b510      	push	{r4, lr}
    1d62:	1c04      	adds	r4, r0, #0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    1d64:	2019      	movs	r0, #25
    1d66:	4b0c      	ldr	r3, [pc, #48]	; (1d98 <PHY_DataReq+0x38>)
    1d68:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1d6a:	200f      	movs	r0, #15
    1d6c:	4b0b      	ldr	r3, [pc, #44]	; (1d9c <PHY_DataReq+0x3c>)
    1d6e:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    1d70:	7821      	ldrb	r1, [r4, #0]
    1d72:	1c8b      	adds	r3, r1, #2
    1d74:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    1d76:	3101      	adds	r1, #1
    1d78:	b2c9      	uxtb	r1, r1
    1d7a:	1c20      	adds	r0, r4, #0
    1d7c:	4b08      	ldr	r3, [pc, #32]	; (1da0 <PHY_DataReq+0x40>)
    1d7e:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    1d80:	2203      	movs	r2, #3
    1d82:	4b08      	ldr	r3, [pc, #32]	; (1da4 <PHY_DataReq+0x44>)
    1d84:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1d86:	4b08      	ldr	r3, [pc, #32]	; (1da8 <PHY_DataReq+0x48>)
    1d88:	2280      	movs	r2, #128	; 0x80
    1d8a:	0212      	lsls	r2, r2, #8
    1d8c:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1d92:	615a      	str	r2, [r3, #20]
	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    1d94:	bd10      	pop	{r4, pc}
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	00001bfd 	.word	0x00001bfd
    1d9c:	00002351 	.word	0x00002351
    1da0:	00002681 	.word	0x00002681
    1da4:	20000b98 	.word	0x20000b98
    1da8:	41000080 	.word	0x41000080

00001dac <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dae:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    1db0:	4b31      	ldr	r3, [pc, #196]	; (1e78 <PHY_TaskHandler+0xcc>)
    1db2:	781b      	ldrb	r3, [r3, #0]
    1db4:	2b02      	cmp	r3, #2
    1db6:	d05c      	beq.n	1e72 <PHY_TaskHandler+0xc6>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1db8:	200f      	movs	r0, #15
    1dba:	4b30      	ldr	r3, [pc, #192]	; (1e7c <PHY_TaskHandler+0xd0>)
    1dbc:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    1dbe:	0703      	lsls	r3, r0, #28
    1dc0:	d557      	bpl.n	1e72 <PHY_TaskHandler+0xc6>
		if (PHY_STATE_IDLE == phyState) {
    1dc2:	4b2d      	ldr	r3, [pc, #180]	; (1e78 <PHY_TaskHandler+0xcc>)
    1dc4:	781b      	ldrb	r3, [r3, #0]
    1dc6:	2b01      	cmp	r3, #1
    1dc8:	d139      	bne.n	1e3e <PHY_TaskHandler+0x92>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1dca:	2007      	movs	r0, #7
    1dcc:	4b2b      	ldr	r3, [pc, #172]	; (1e7c <PHY_TaskHandler+0xd0>)
    1dce:	4798      	blx	r3
    1dd0:	1c05      	adds	r5, r0, #0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    1dd2:	466b      	mov	r3, sp
    1dd4:	1ddc      	adds	r4, r3, #7
    1dd6:	1c20      	adds	r0, r4, #0
    1dd8:	2101      	movs	r1, #1
    1dda:	4f29      	ldr	r7, [pc, #164]	; (1e80 <PHY_TaskHandler+0xd4>)
    1ddc:	47b8      	blx	r7

			trx_frame_read(phyRxBuffer, size + 2);
    1dde:	4e29      	ldr	r6, [pc, #164]	; (1e84 <PHY_TaskHandler+0xd8>)
    1de0:	7821      	ldrb	r1, [r4, #0]
    1de2:	3102      	adds	r1, #2
    1de4:	b2c9      	uxtb	r1, r1
    1de6:	1c30      	adds	r0, r6, #0
    1de8:	47b8      	blx	r7

			ind.data = phyRxBuffer + 1;
    1dea:	aa02      	add	r2, sp, #8
    1dec:	1c73      	adds	r3, r6, #1
    1dee:	9302      	str	r3, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    1df0:	7823      	ldrb	r3, [r4, #0]
    1df2:	1e99      	subs	r1, r3, #2
    1df4:	7111      	strb	r1, [r2, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    1df6:	18f3      	adds	r3, r6, r3
    1df8:	785b      	ldrb	r3, [r3, #1]
    1dfa:	7153      	strb	r3, [r2, #5]

/*************************************************************************//**
*****************************************************************************/
static int8_t phyRssiBaseVal(void)
{
	bool oqpsk = (phyModulation & (1 << BPSK_OQPSK));
    1dfc:	4b22      	ldr	r3, [pc, #136]	; (1e88 <PHY_TaskHandler+0xdc>)
    1dfe:	7819      	ldrb	r1, [r3, #0]
	bool sub   = (phyModulation & (1 << SUB_MODE));
    1e00:	074b      	lsls	r3, r1, #29
    1e02:	0fda      	lsrs	r2, r3, #31
	bool rc    = (phyModulation & (1 << 4 /*ALT_SPEC*/));

	if (0 == oqpsk) {
    1e04:	070b      	lsls	r3, r1, #28
    1e06:	d404      	bmi.n	1e12 <PHY_TaskHandler+0x66>
		if (0 == sub) {
			return PHY_RSSI_BASE_VAL_BPSK_20;
		} else {
			return PHY_RSSI_BASE_VAL_BPSK_40;
    1e08:	4253      	negs	r3, r2
    1e0a:	415a      	adcs	r2, r3
    1e0c:	239d      	movs	r3, #157	; 0x9d
    1e0e:	1a9b      	subs	r3, r3, r2
    1e10:	e008      	b.n	1e24 <PHY_TaskHandler+0x78>
		}
	} else {
		if (0 == sub) {
			return PHY_RSSI_BASE_VAL_OQPSK_SIN_RC_100;
    1e12:	239e      	movs	r3, #158	; 0x9e
			return PHY_RSSI_BASE_VAL_BPSK_20;
		} else {
			return PHY_RSSI_BASE_VAL_BPSK_40;
		}
	} else {
		if (0 == sub) {
    1e14:	2a00      	cmp	r2, #0
    1e16:	d005      	beq.n	1e24 <PHY_TaskHandler+0x78>
			return PHY_RSSI_BASE_VAL_OQPSK_SIN_RC_100;
		} else {
			if (0 == rc) {
    1e18:	2210      	movs	r2, #16
    1e1a:	4011      	ands	r1, r2
				return PHY_RSSI_BASE_VAL_OQPSK_SIN_250;
			} else {
				return PHY_RSSI_BASE_VAL_OQPSK_RC_250;
    1e1c:	424a      	negs	r2, r1
    1e1e:	414a      	adcs	r2, r1
    1e20:	3301      	adds	r3, #1
    1e22:	1a9b      	subs	r3, r3, r2

			ind.data = phyRxBuffer + 1;

			ind.size = size - PHY_CRC_SIZE;
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + phyRssiBaseVal();
    1e24:	a802      	add	r0, sp, #8
    1e26:	18eb      	adds	r3, r5, r3
    1e28:	7183      	strb	r3, [r0, #6]
			PHY_DataInd(&ind);
    1e2a:	4b18      	ldr	r3, [pc, #96]	; (1e8c <PHY_TaskHandler+0xe0>)
    1e2c:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1e2e:	4d13      	ldr	r5, [pc, #76]	; (1e7c <PHY_TaskHandler+0xd0>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    1e30:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1e32:	2001      	movs	r0, #1
    1e34:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    1e36:	4020      	ands	r0, r4
    1e38:	2816      	cmp	r0, #22
    1e3a:	d1fa      	bne.n	1e32 <PHY_TaskHandler+0x86>
    1e3c:	e019      	b.n	1e72 <PHY_TaskHandler+0xc6>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + phyRssiBaseVal();
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    1e3e:	2b03      	cmp	r3, #3
    1e40:	d117      	bne.n	1e72 <PHY_TaskHandler+0xc6>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1e42:	2002      	movs	r0, #2
    1e44:	4b0d      	ldr	r3, [pc, #52]	; (1e7c <PHY_TaskHandler+0xd0>)
    1e46:	4798      	blx	r3
			ind.rssi = rssi + phyRssiBaseVal();
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    1e48:	0940      	lsrs	r0, r0, #5
    1e4a:	b2c4      	uxtb	r4, r0
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    1e4c:	2c00      	cmp	r4, #0
    1e4e:	d008      	beq.n	1e62 <PHY_TaskHandler+0xb6>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    1e50:	2c03      	cmp	r4, #3
    1e52:	d005      	beq.n	1e60 <PHY_TaskHandler+0xb4>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
    1e54:	3c05      	subs	r4, #5
    1e56:	4263      	negs	r3, r4
    1e58:	4163      	adcs	r3, r4
    1e5a:	2403      	movs	r4, #3
    1e5c:	1ae4      	subs	r4, r4, r3
    1e5e:	e000      	b.n	1e62 <PHY_TaskHandler+0xb6>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1e60:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    1e62:	4b0b      	ldr	r3, [pc, #44]	; (1e90 <PHY_TaskHandler+0xe4>)
    1e64:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    1e66:	2201      	movs	r2, #1
    1e68:	4b03      	ldr	r3, [pc, #12]	; (1e78 <PHY_TaskHandler+0xcc>)
    1e6a:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    1e6c:	1c20      	adds	r0, r4, #0
    1e6e:	4b09      	ldr	r3, [pc, #36]	; (1e94 <PHY_TaskHandler+0xe8>)
    1e70:	4798      	blx	r3
		}
	}
}
    1e72:	b005      	add	sp, #20
    1e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	20000b98 	.word	0x20000b98
    1e7c:	00002351 	.word	0x00002351
    1e80:	00002545 	.word	0x00002545
    1e84:	20000b18 	.word	0x20000b18
    1e88:	20000b14 	.word	0x20000b14
    1e8c:	000013dd 	.word	0x000013dd
    1e90:	00001c39 	.word	0x00001c39
    1e94:	00001a49 	.word	0x00001a49

00001e98 <SYS_Init>:
    1e98:	b508      	push	{r3, lr}
    1e9a:	4b03      	ldr	r3, [pc, #12]	; (1ea8 <SYS_Init+0x10>)
    1e9c:	4798      	blx	r3
    1e9e:	4b03      	ldr	r3, [pc, #12]	; (1eac <SYS_Init+0x14>)
    1ea0:	4798      	blx	r3
    1ea2:	4b03      	ldr	r3, [pc, #12]	; (1eb0 <SYS_Init+0x18>)
    1ea4:	4798      	blx	r3
    1ea6:	bd08      	pop	{r3, pc}
    1ea8:	00001f4d 	.word	0x00001f4d
    1eac:	00001c65 	.word	0x00001c65
    1eb0:	0000080d 	.word	0x0000080d

00001eb4 <SYS_TaskHandler>:
    1eb4:	b508      	push	{r3, lr}
    1eb6:	4b03      	ldr	r3, [pc, #12]	; (1ec4 <SYS_TaskHandler+0x10>)
    1eb8:	4798      	blx	r3
    1eba:	4b03      	ldr	r3, [pc, #12]	; (1ec8 <SYS_TaskHandler+0x14>)
    1ebc:	4798      	blx	r3
    1ebe:	4b03      	ldr	r3, [pc, #12]	; (1ecc <SYS_TaskHandler+0x18>)
    1ec0:	4798      	blx	r3
    1ec2:	bd08      	pop	{r3, pc}
    1ec4:	00001dad 	.word	0x00001dad
    1ec8:	00000899 	.word	0x00000899
    1ecc:	00001fd1 	.word	0x00001fd1

00001ed0 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1ed0:	b530      	push	{r4, r5, lr}
	if (timers) {
    1ed2:	4b15      	ldr	r3, [pc, #84]	; (1f28 <placeTimer+0x58>)
    1ed4:	681d      	ldr	r5, [r3, #0]
    1ed6:	2d00      	cmp	r5, #0
    1ed8:	d01e      	beq.n	1f18 <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    1eda:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    1edc:	6869      	ldr	r1, [r5, #4]
    1ede:	428a      	cmp	r2, r1
    1ee0:	d305      	bcc.n	1eee <placeTimer+0x1e>
    1ee2:	1c2c      	adds	r4, r5, #0
    1ee4:	e009      	b.n	1efa <placeTimer+0x2a>
    1ee6:	6859      	ldr	r1, [r3, #4]
    1ee8:	4291      	cmp	r1, r2
    1eea:	d905      	bls.n	1ef8 <placeTimer+0x28>
    1eec:	e001      	b.n	1ef2 <placeTimer+0x22>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1eee:	1c2b      	adds	r3, r5, #0
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    1ef0:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    1ef2:	1a89      	subs	r1, r1, r2
    1ef4:	6059      	str	r1, [r3, #4]
				break;
    1ef6:	e004      	b.n	1f02 <placeTimer+0x32>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1ef8:	1c1c      	adds	r4, r3, #0
			if (timeout < t->timeout) {
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    1efa:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1efc:	6823      	ldr	r3, [r4, #0]
    1efe:	2b00      	cmp	r3, #0
    1f00:	d1f1      	bne.n	1ee6 <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    1f02:	6042      	str	r2, [r0, #4]

		if (prev) {
    1f04:	2c00      	cmp	r4, #0
    1f06:	d003      	beq.n	1f10 <placeTimer+0x40>
			timer->next = prev->next;
    1f08:	6823      	ldr	r3, [r4, #0]
    1f0a:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    1f0c:	6020      	str	r0, [r4, #0]
    1f0e:	e009      	b.n	1f24 <placeTimer+0x54>
		} else {
			timer->next = timers;
    1f10:	6005      	str	r5, [r0, #0]
			timers = timer;
    1f12:	4b05      	ldr	r3, [pc, #20]	; (1f28 <placeTimer+0x58>)
    1f14:	6018      	str	r0, [r3, #0]
    1f16:	e005      	b.n	1f24 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    1f18:	2300      	movs	r3, #0
    1f1a:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    1f1c:	6883      	ldr	r3, [r0, #8]
    1f1e:	6043      	str	r3, [r0, #4]
		timers = timer;
    1f20:	4b01      	ldr	r3, [pc, #4]	; (1f28 <placeTimer+0x58>)
    1f22:	6018      	str	r0, [r3, #0]
	}
}
    1f24:	bd30      	pop	{r4, r5, pc}
    1f26:	46c0      	nop			; (mov r8, r8)
    1f28:	20000b9c 	.word	0x20000b9c

00001f2c <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    1f2c:	b508      	push	{r3, lr}
	SysTimerIrqCount++;
    1f2e:	4a04      	ldr	r2, [pc, #16]	; (1f40 <SYS_HwExpiry_Cb+0x14>)
    1f30:	7813      	ldrb	r3, [r2, #0]
    1f32:	3301      	adds	r3, #1
    1f34:	b2db      	uxtb	r3, r3
    1f36:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1f38:	4802      	ldr	r0, [pc, #8]	; (1f44 <SYS_HwExpiry_Cb+0x18>)
    1f3a:	4b03      	ldr	r3, [pc, #12]	; (1f48 <SYS_HwExpiry_Cb+0x1c>)
    1f3c:	4798      	blx	r3
}
    1f3e:	bd08      	pop	{r3, pc}
    1f40:	20000cac 	.word	0x20000cac
    1f44:	00002710 	.word	0x00002710
    1f48:	00004bbd 	.word	0x00004bbd

00001f4c <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    1f4c:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    1f4e:	2400      	movs	r4, #0
    1f50:	4b06      	ldr	r3, [pc, #24]	; (1f6c <SYS_TimerInit+0x20>)
    1f52:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    1f54:	4806      	ldr	r0, [pc, #24]	; (1f70 <SYS_TimerInit+0x24>)
    1f56:	4b07      	ldr	r3, [pc, #28]	; (1f74 <SYS_TimerInit+0x28>)
    1f58:	4798      	blx	r3
	common_tc_init();
    1f5a:	4b07      	ldr	r3, [pc, #28]	; (1f78 <SYS_TimerInit+0x2c>)
    1f5c:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1f5e:	4807      	ldr	r0, [pc, #28]	; (1f7c <SYS_TimerInit+0x30>)
    1f60:	4b07      	ldr	r3, [pc, #28]	; (1f80 <SYS_TimerInit+0x34>)
    1f62:	4798      	blx	r3
	timers = NULL;
    1f64:	4b07      	ldr	r3, [pc, #28]	; (1f84 <SYS_TimerInit+0x38>)
    1f66:	601c      	str	r4, [r3, #0]
}
    1f68:	bd10      	pop	{r4, pc}
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	20000cac 	.word	0x20000cac
    1f70:	00001f2d 	.word	0x00001f2d
    1f74:	00004cad 	.word	0x00004cad
    1f78:	00004c29 	.word	0x00004c29
    1f7c:	00002710 	.word	0x00002710
    1f80:	00004bbd 	.word	0x00004bbd
    1f84:	20000b9c 	.word	0x20000b9c

00001f88 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1f88:	4b09      	ldr	r3, [pc, #36]	; (1fb0 <SYS_TimerStarted+0x28>)
    1f8a:	681b      	ldr	r3, [r3, #0]
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d009      	beq.n	1fa4 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    1f90:	4283      	cmp	r3, r0
    1f92:	d102      	bne.n	1f9a <SYS_TimerStarted+0x12>
    1f94:	e008      	b.n	1fa8 <SYS_TimerStarted+0x20>
    1f96:	4298      	cmp	r0, r3
    1f98:	d008      	beq.n	1fac <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1f9a:	681b      	ldr	r3, [r3, #0]
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d1fa      	bne.n	1f96 <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    1fa0:	2000      	movs	r0, #0
    1fa2:	e004      	b.n	1fae <SYS_TimerStarted+0x26>
    1fa4:	2000      	movs	r0, #0
    1fa6:	e002      	b.n	1fae <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    1fa8:	2001      	movs	r0, #1
    1faa:	e000      	b.n	1fae <SYS_TimerStarted+0x26>
    1fac:	2001      	movs	r0, #1
		}
	}
	return false;
}
    1fae:	4770      	bx	lr
    1fb0:	20000b9c 	.word	0x20000b9c

00001fb4 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1fb4:	b510      	push	{r4, lr}
    1fb6:	1c04      	adds	r4, r0, #0
	if (!SYS_TimerStarted(timer)) {
    1fb8:	4b03      	ldr	r3, [pc, #12]	; (1fc8 <SYS_TimerStart+0x14>)
    1fba:	4798      	blx	r3
    1fbc:	2800      	cmp	r0, #0
    1fbe:	d102      	bne.n	1fc6 <SYS_TimerStart+0x12>
		placeTimer(timer);
    1fc0:	1c20      	adds	r0, r4, #0
    1fc2:	4b02      	ldr	r3, [pc, #8]	; (1fcc <SYS_TimerStart+0x18>)
    1fc4:	4798      	blx	r3
	}
}
    1fc6:	bd10      	pop	{r4, pc}
    1fc8:	00001f89 	.word	0x00001f89
    1fcc:	00001ed1 	.word	0x00001ed1

00001fd0 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    1fd2:	4b1a      	ldr	r3, [pc, #104]	; (203c <STACK_SIZE+0x3c>)
    1fd4:	781b      	ldrb	r3, [r3, #0]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d02f      	beq.n	203a <STACK_SIZE+0x3a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1fda:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1fde:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1fe0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1fe4:	2000      	movs	r0, #0
    1fe6:	4b16      	ldr	r3, [pc, #88]	; (2040 <STACK_SIZE+0x40>)
    1fe8:	7018      	strb	r0, [r3, #0]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    1fea:	4914      	ldr	r1, [pc, #80]	; (203c <STACK_SIZE+0x3c>)
    1fec:	780b      	ldrb	r3, [r1, #0]
    1fee:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    1ff0:	7008      	strb	r0, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1ff2:	2a00      	cmp	r2, #0
    1ff4:	d105      	bne.n	2002 <STACK_SIZE+0x2>
		cpu_irq_enable();
    1ff6:	2101      	movs	r1, #1
    1ff8:	4a11      	ldr	r2, [pc, #68]	; (2040 <STACK_SIZE+0x40>)
    1ffa:	7011      	strb	r1, [r2, #0]
    1ffc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2000:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    2002:	009d      	lsls	r5, r3, #2
    2004:	18ed      	adds	r5, r5, r3
    2006:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    2008:	4e0e      	ldr	r6, [pc, #56]	; (2044 <STACK_SIZE+0x44>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    200a:	1c37      	adds	r7, r6, #0
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    200c:	e00d      	b.n	202a <STACK_SIZE+0x2a>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    200e:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    2010:	6823      	ldr	r3, [r4, #0]
    2012:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    2014:	7b23      	ldrb	r3, [r4, #12]
    2016:	2b01      	cmp	r3, #1
    2018:	d102      	bne.n	2020 <STACK_SIZE+0x20>
			placeTimer(timer);
    201a:	1c20      	adds	r0, r4, #0
    201c:	4b0a      	ldr	r3, [pc, #40]	; (2048 <STACK_SIZE+0x48>)
    201e:	4798      	blx	r3
		}

		if (timer->handler) {
    2020:	6923      	ldr	r3, [r4, #16]
    2022:	2b00      	cmp	r3, #0
    2024:	d001      	beq.n	202a <STACK_SIZE+0x2a>
			timer->handler(timer);
    2026:	1c20      	adds	r0, r4, #0
    2028:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    202a:	6834      	ldr	r4, [r6, #0]
    202c:	2c00      	cmp	r4, #0
    202e:	d004      	beq.n	203a <STACK_SIZE+0x3a>
    2030:	6863      	ldr	r3, [r4, #4]
    2032:	429d      	cmp	r5, r3
    2034:	d2eb      	bcs.n	200e <STACK_SIZE+0xe>
			timer->handler(timer);
		}
	}

	if (timers) {
		timers->timeout -= elapsed;
    2036:	1b5d      	subs	r5, r3, r5
    2038:	6065      	str	r5, [r4, #4]
	}
}
    203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    203c:	20000cac 	.word	0x20000cac
    2040:	20000008 	.word	0x20000008
    2044:	20000b9c 	.word	0x20000b9c
    2048:	00001ed1 	.word	0x00001ed1

0000204c <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    204c:	b508      	push	{r3, lr}
	tmr_cca_callback();
    204e:	4b01      	ldr	r3, [pc, #4]	; (2054 <tc_cca_callback+0x8>)
    2050:	4798      	blx	r3
}
    2052:	bd08      	pop	{r3, pc}
    2054:	00004c91 	.word	0x00004c91

00002058 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    2058:	b508      	push	{r3, lr}
	tmr_ovf_callback();
    205a:	4b01      	ldr	r3, [pc, #4]	; (2060 <tc_ovf_callback+0x8>)
    205c:	4798      	blx	r3
}
    205e:	bd08      	pop	{r3, pc}
    2060:	00004c49 	.word	0x00004c49

00002064 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    2064:	b508      	push	{r3, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2066:	4802      	ldr	r0, [pc, #8]	; (2070 <tmr_read_count+0xc>)
    2068:	4b02      	ldr	r3, [pc, #8]	; (2074 <tmr_read_count+0x10>)
    206a:	4798      	blx	r3
    206c:	b280      	uxth	r0, r0
}
    206e:	bd08      	pop	{r3, pc}
    2070:	20000ce8 	.word	0x20000ce8
    2074:	00004849 	.word	0x00004849

00002078 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2078:	4b03      	ldr	r3, [pc, #12]	; (2088 <tmr_disable_cc_interrupt+0x10>)
    207a:	2110      	movs	r1, #16
    207c:	681a      	ldr	r2, [r3, #0]
    207e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2080:	7e5a      	ldrb	r2, [r3, #25]
    2082:	438a      	bics	r2, r1
    2084:	765a      	strb	r2, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    2086:	4770      	bx	lr
    2088:	20000ce8 	.word	0x20000ce8

0000208c <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    208c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    208e:	4c0a      	ldr	r4, [pc, #40]	; (20b8 <tmr_enable_cc_interrupt+0x2c>)
    2090:	6820      	ldr	r0, [r4, #0]
    2092:	4b0a      	ldr	r3, [pc, #40]	; (20bc <tmr_enable_cc_interrupt+0x30>)
    2094:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2096:	4b0a      	ldr	r3, [pc, #40]	; (20c0 <tmr_enable_cc_interrupt+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2098:	5c1b      	ldrb	r3, [r3, r0]
    209a:	221f      	movs	r2, #31
    209c:	4013      	ands	r3, r2
    209e:	3a1e      	subs	r2, #30
    20a0:	409a      	lsls	r2, r3
    20a2:	1c13      	adds	r3, r2, #0
    20a4:	4a07      	ldr	r2, [pc, #28]	; (20c4 <tmr_enable_cc_interrupt+0x38>)
    20a6:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    20a8:	7e62      	ldrb	r2, [r4, #25]
    20aa:	2310      	movs	r3, #16
    20ac:	4313      	orrs	r3, r2
    20ae:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    20b0:	6823      	ldr	r3, [r4, #0]
    20b2:	2210      	movs	r2, #16
    20b4:	725a      	strb	r2, [r3, #9]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    20b6:	bd10      	pop	{r4, pc}
    20b8:	20000ce8 	.word	0x20000ce8
    20bc:	00004555 	.word	0x00004555
    20c0:	00005f9c 	.word	0x00005f9c
    20c4:	e000e100 	.word	0xe000e100

000020c8 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    20c8:	b508      	push	{r3, lr}
    20ca:	1c02      	adds	r2, r0, #0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    20cc:	4802      	ldr	r0, [pc, #8]	; (20d8 <tmr_write_cmpreg+0x10>)
    20ce:	2100      	movs	r1, #0
    20d0:	4b02      	ldr	r3, [pc, #8]	; (20dc <tmr_write_cmpreg+0x14>)
    20d2:	4798      	blx	r3
			(uint32_t)compare_value);
}
    20d4:	bd08      	pop	{r3, pc}
    20d6:	46c0      	nop			; (mov r8, r8)
    20d8:	20000ce8 	.word	0x20000ce8
    20dc:	00004889 	.word	0x00004889

000020e0 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    20e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20e2:	464f      	mov	r7, r9
    20e4:	4646      	mov	r6, r8
    20e6:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    20e8:	4a30      	ldr	r2, [pc, #192]	; (21ac <tmr_init+0xcc>)
    20ea:	2100      	movs	r1, #0
    20ec:	2300      	movs	r3, #0
    20ee:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    20f0:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    20f2:	2000      	movs	r0, #0
    20f4:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    20f6:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    20f8:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    20fa:	7053      	strb	r3, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
    20fc:	7093      	strb	r3, [r2, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    20fe:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2100:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2102:	7293      	strb	r3, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2104:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2106:	7313      	strb	r3, [r2, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2108:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    210a:	7353      	strb	r3, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    210c:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    210e:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2110:	6191      	str	r1, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2112:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2114:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2116:	6251      	str	r1, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2118:	8511      	strh	r1, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    211a:	8591      	strh	r1, [r2, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    211c:	2334      	movs	r3, #52	; 0x34
    211e:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2120:	3b35      	subs	r3, #53	; 0x35
    2122:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2124:	4c22      	ldr	r4, [pc, #136]	; (21b0 <tmr_init+0xd0>)
    2126:	1c20      	adds	r0, r4, #0
    2128:	4922      	ldr	r1, [pc, #136]	; (21b4 <tmr_init+0xd4>)
    212a:	4b23      	ldr	r3, [pc, #140]	; (21b8 <tmr_init+0xd8>)
    212c:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    212e:	1c20      	adds	r0, r4, #0
    2130:	4922      	ldr	r1, [pc, #136]	; (21bc <tmr_init+0xdc>)
    2132:	2200      	movs	r2, #0
    2134:	4d22      	ldr	r5, [pc, #136]	; (21c0 <tmr_init+0xe0>)
    2136:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2138:	1c20      	adds	r0, r4, #0
    213a:	4922      	ldr	r1, [pc, #136]	; (21c4 <tmr_init+0xe4>)
    213c:	2202      	movs	r2, #2
    213e:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2140:	6820      	ldr	r0, [r4, #0]
    2142:	4b21      	ldr	r3, [pc, #132]	; (21c8 <tmr_init+0xe8>)
    2144:	4698      	mov	r8, r3
    2146:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2148:	4f20      	ldr	r7, [pc, #128]	; (21cc <tmr_init+0xec>)
    214a:	5c3b      	ldrb	r3, [r7, r0]
    214c:	261f      	movs	r6, #31
    214e:	4033      	ands	r3, r6
    2150:	2501      	movs	r5, #1
    2152:	1c2a      	adds	r2, r5, #0
    2154:	409a      	lsls	r2, r3
    2156:	1c13      	adds	r3, r2, #0
    2158:	4a1d      	ldr	r2, [pc, #116]	; (21d0 <tmr_init+0xf0>)
    215a:	4691      	mov	r9, r2
    215c:	6013      	str	r3, [r2, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    215e:	7e62      	ldrb	r2, [r4, #25]
    2160:	2301      	movs	r3, #1
    2162:	4313      	orrs	r3, r2
    2164:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2166:	6823      	ldr	r3, [r4, #0]
    2168:	725d      	strb	r5, [r3, #9]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    216a:	1c18      	adds	r0, r3, #0
    216c:	47c0      	blx	r8
    216e:	5c3b      	ldrb	r3, [r7, r0]
    2170:	401e      	ands	r6, r3
    2172:	40b5      	lsls	r5, r6
    2174:	464b      	mov	r3, r9
    2176:	601d      	str	r5, [r3, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2178:	7e62      	ldrb	r2, [r4, #25]
    217a:	2310      	movs	r3, #16
    217c:	4313      	orrs	r3, r2
    217e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2180:	6822      	ldr	r2, [r4, #0]
    2182:	2310      	movs	r3, #16
    2184:	7253      	strb	r3, [r2, #9]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    2186:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    2188:	2b00      	cmp	r3, #0
    218a:	d1fc      	bne.n	2186 <tmr_init+0xa6>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    218c:	6811      	ldr	r1, [r2, #0]
    218e:	3302      	adds	r3, #2
    2190:	430b      	orrs	r3, r1
    2192:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    2194:	2000      	movs	r0, #0
    2196:	4b0f      	ldr	r3, [pc, #60]	; (21d4 <tmr_init+0xf4>)
    2198:	4798      	blx	r3
    219a:	490f      	ldr	r1, [pc, #60]	; (21d8 <tmr_init+0xf8>)
    219c:	4b0f      	ldr	r3, [pc, #60]	; (21dc <tmr_init+0xfc>)
    219e:	4798      	blx	r3
	#endif
	return timer_multiplier;
    21a0:	b2c0      	uxtb	r0, r0
}
    21a2:	bc0c      	pop	{r2, r3}
    21a4:	4690      	mov	r8, r2
    21a6:	4699      	mov	r9, r3
    21a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21aa:	46c0      	nop			; (mov r8, r8)
    21ac:	20000cb0 	.word	0x20000cb0
    21b0:	20000ce8 	.word	0x20000ce8
    21b4:	42003c00 	.word	0x42003c00
    21b8:	00004591 	.word	0x00004591
    21bc:	00002059 	.word	0x00002059
    21c0:	00004475 	.word	0x00004475
    21c4:	0000204d 	.word	0x0000204d
    21c8:	00004555 	.word	0x00004555
    21cc:	00005f9c 	.word	0x00005f9c
    21d0:	e000e100 	.word	0xe000e100
    21d4:	00004249 	.word	0x00004249
    21d8:	000f4240 	.word	0x000f4240
    21dc:	00004cb9 	.word	0x00004cb9

000021e0 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    21e0:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    21e2:	2280      	movs	r2, #128	; 0x80
    21e4:	01d2      	lsls	r2, r2, #7
    21e6:	4b04      	ldr	r3, [pc, #16]	; (21f8 <AT86RFX_ISR+0x18>)
    21e8:	615a      	str	r2, [r3, #20]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    21ea:	4b04      	ldr	r3, [pc, #16]	; (21fc <AT86RFX_ISR+0x1c>)
    21ec:	681b      	ldr	r3, [r3, #0]
    21ee:	2b00      	cmp	r3, #0
    21f0:	d000      	beq.n	21f4 <AT86RFX_ISR+0x14>
		irq_hdl_trx();
    21f2:	4798      	blx	r3
	}
}
    21f4:	bd08      	pop	{r3, pc}
    21f6:	46c0      	nop			; (mov r8, r8)
    21f8:	40002800 	.word	0x40002800
    21fc:	20000ba0 	.word	0x20000ba0

00002200 <trx_spi_init>:

void trx_spi_init(void)
{
    2200:	b5f0      	push	{r4, r5, r6, r7, lr}
    2202:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    2204:	4a36      	ldr	r2, [pc, #216]	; (22e0 <trx_spi_init+0xe0>)
    2206:	2300      	movs	r3, #0
    2208:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    220a:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMC21 || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    220c:	2111      	movs	r1, #17
    220e:	7011      	strb	r1, [r2, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2210:	4c34      	ldr	r4, [pc, #208]	; (22e4 <trx_spi_init+0xe4>)
    2212:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    2214:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    2216:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2218:	2201      	movs	r2, #1
    221a:	4669      	mov	r1, sp
    221c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    221e:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2220:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2222:	2011      	movs	r0, #17
    2224:	4b30      	ldr	r3, [pc, #192]	; (22e8 <trx_spi_init+0xe8>)
    2226:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2228:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    222a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    222c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    222e:	2900      	cmp	r1, #0
    2230:	d105      	bne.n	223e <trx_spi_init+0x3e>
		return &(ports[port_index]->Group[group_index]);
    2232:	095a      	lsrs	r2, r3, #5
    2234:	01d2      	lsls	r2, r2, #7
    2236:	2182      	movs	r1, #130	; 0x82
    2238:	05c9      	lsls	r1, r1, #23
    223a:	468c      	mov	ip, r1
    223c:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    223e:	251f      	movs	r5, #31
    2240:	402b      	ands	r3, r5
    2242:	2401      	movs	r4, #1
    2244:	1c21      	adds	r1, r4, #0
    2246:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2248:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    224a:	4a28      	ldr	r2, [pc, #160]	; (22ec <trx_spi_init+0xec>)
    224c:	7014      	strb	r4, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    224e:	2300      	movs	r3, #0
    2250:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2252:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2254:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    2256:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    2258:	7494      	strb	r4, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    225a:	74d4      	strb	r4, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    225c:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    225e:	2124      	movs	r1, #36	; 0x24
    2260:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2262:	61d3      	str	r3, [r2, #28]
    2264:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    2266:	2380      	movs	r3, #128	; 0x80
    2268:	025b      	lsls	r3, r3, #9
    226a:	60d3      	str	r3, [r2, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    226c:	4b20      	ldr	r3, [pc, #128]	; (22f0 <trx_spi_init+0xf0>)
    226e:	6193      	str	r3, [r2, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    2270:	4b20      	ldr	r3, [pc, #128]	; (22f4 <trx_spi_init+0xf4>)
    2272:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    2274:	2301      	movs	r3, #1
    2276:	425b      	negs	r3, r3
    2278:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    227a:	4b1f      	ldr	r3, [pc, #124]	; (22f8 <trx_spi_init+0xf8>)
    227c:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    227e:	4b1f      	ldr	r3, [pc, #124]	; (22fc <trx_spi_init+0xfc>)
    2280:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    2282:	4f1f      	ldr	r7, [pc, #124]	; (2300 <trx_spi_init+0x100>)
    2284:	1c38      	adds	r0, r7, #0
    2286:	491f      	ldr	r1, [pc, #124]	; (2304 <trx_spi_init+0x104>)
    2288:	4b1f      	ldr	r3, [pc, #124]	; (2308 <trx_spi_init+0x108>)
    228a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    228c:	683e      	ldr	r6, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    228e:	1c30      	adds	r0, r6, #0
    2290:	4b1e      	ldr	r3, [pc, #120]	; (230c <trx_spi_init+0x10c>)
    2292:	4798      	blx	r3
    2294:	4005      	ands	r5, r0
    2296:	40ac      	lsls	r4, r5
    2298:	4b1d      	ldr	r3, [pc, #116]	; (2310 <trx_spi_init+0x110>)
    229a:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    229c:	683a      	ldr	r2, [r7, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    229e:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    22a0:	2b00      	cmp	r3, #0
    22a2:	d1fc      	bne.n	229e <trx_spi_init+0x9e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    22a4:	6833      	ldr	r3, [r6, #0]
    22a6:	2502      	movs	r5, #2
    22a8:	432b      	orrs	r3, r5
    22aa:	6033      	str	r3, [r6, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    22ac:	ac01      	add	r4, sp, #4
    22ae:	1c20      	adds	r0, r4, #0
    22b0:	4b18      	ldr	r3, [pc, #96]	; (2314 <trx_spi_init+0x114>)
    22b2:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    22b4:	232e      	movs	r3, #46	; 0x2e
    22b6:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    22b8:	23b8      	movs	r3, #184	; 0xb8
    22ba:	039b      	lsls	r3, r3, #14
    22bc:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    22be:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMC21)
	eint_chan_conf.enable_async_edge_detection = false;
    22c0:	2300      	movs	r3, #0
    22c2:	7263      	strb	r3, [r4, #9]
	#else
	eint_chan_conf.wake_if_sleeping    = true;
	#endif
	eint_chan_conf.filter_input_signal = false;
    22c4:	72a3      	strb	r3, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    22c6:	3301      	adds	r3, #1
    22c8:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    22ca:	200e      	movs	r0, #14
    22cc:	1c21      	adds	r1, r4, #0
    22ce:	4b12      	ldr	r3, [pc, #72]	; (2318 <trx_spi_init+0x118>)
    22d0:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    22d2:	4812      	ldr	r0, [pc, #72]	; (231c <trx_spi_init+0x11c>)
    22d4:	210e      	movs	r1, #14
    22d6:	2200      	movs	r2, #0
    22d8:	4b11      	ldr	r3, [pc, #68]	; (2320 <trx_spi_init+0x120>)
    22da:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    22dc:	b005      	add	sp, #20
    22de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22e0:	20000d08 	.word	0x20000d08
    22e4:	20000d0c 	.word	0x20000d0c
    22e8:	00003581 	.word	0x00003581
    22ec:	20000d10 	.word	0x20000d10
    22f0:	003d0900 	.word	0x003d0900
    22f4:	00100002 	.word	0x00100002
    22f8:	00120002 	.word	0x00120002
    22fc:	00130002 	.word	0x00130002
    2300:	20000d48 	.word	0x20000d48
    2304:	42000800 	.word	0x42000800
    2308:	0000011d 	.word	0x0000011d
    230c:	000039e9 	.word	0x000039e9
    2310:	e000e100 	.word	0xe000e100
    2314:	000034e1 	.word	0x000034e1
    2318:	000034f5 	.word	0x000034f5
    231c:	000021e1 	.word	0x000021e1
    2320:	00003389 	.word	0x00003389

00002324 <PhyReset>:

void PhyReset(void)
{
    2324:	b570      	push	{r4, r5, r6, lr}
    2326:	4c08      	ldr	r4, [pc, #32]	; (2348 <PhyReset+0x24>)
    2328:	2580      	movs	r5, #128	; 0x80
    232a:	016d      	lsls	r5, r5, #5
    232c:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    232e:	2380      	movs	r3, #128	; 0x80
    2330:	021b      	lsls	r3, r3, #8
    2332:	6163      	str	r3, [r4, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    2334:	20a5      	movs	r0, #165	; 0xa5
    2336:	0040      	lsls	r0, r0, #1
    2338:	4e04      	ldr	r6, [pc, #16]	; (234c <PhyReset+0x28>)
    233a:	47b0      	blx	r6
    233c:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    233e:	200a      	movs	r0, #10
    2340:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2342:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    2344:	bd70      	pop	{r4, r5, r6, pc}
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	41000080 	.word	0x41000080
    234c:	000027e1 	.word	0x000027e1

00002350 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    2350:	b570      	push	{r4, r5, r6, lr}
    2352:	1c05      	adds	r5, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2354:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    2358:	4263      	negs	r3, r4
    235a:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    235c:	b672      	cpsid	i
    235e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2362:	2200      	movs	r2, #0
    2364:	4b33      	ldr	r3, [pc, #204]	; (2434 <trx_reg_read+0xe4>)
    2366:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMC21 || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2368:	4e33      	ldr	r6, [pc, #204]	; (2438 <trx_reg_read+0xe8>)
    236a:	1c30      	adds	r0, r6, #0
    236c:	4933      	ldr	r1, [pc, #204]	; (243c <trx_reg_read+0xec>)
    236e:	3201      	adds	r2, #1
    2370:	4b33      	ldr	r3, [pc, #204]	; (2440 <trx_reg_read+0xf0>)
    2372:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2374:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2376:	2101      	movs	r1, #1
    2378:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    237a:	420a      	tst	r2, r1
    237c:	d0fc      	beq.n	2378 <trx_reg_read+0x28>
    237e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2380:	07d2      	lsls	r2, r2, #31
    2382:	d502      	bpl.n	238a <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2384:	2280      	movs	r2, #128	; 0x80
    2386:	4315      	orrs	r5, r2
    2388:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    238a:	2102      	movs	r1, #2
    238c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    238e:	420a      	tst	r2, r1
    2390:	d0fc      	beq.n	238c <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2392:	2104      	movs	r1, #4
    2394:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2396:	420a      	tst	r2, r1
    2398:	d0fc      	beq.n	2394 <trx_reg_read+0x44>
    239a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    239c:	0752      	lsls	r2, r2, #29
    239e:	d514      	bpl.n	23ca <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    23a0:	8b5a      	ldrh	r2, [r3, #26]
    23a2:	0752      	lsls	r2, r2, #29
    23a4:	d503      	bpl.n	23ae <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    23a6:	8b59      	ldrh	r1, [r3, #26]
    23a8:	2204      	movs	r2, #4
    23aa:	430a      	orrs	r2, r1
    23ac:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    23ae:	4a22      	ldr	r2, [pc, #136]	; (2438 <trx_reg_read+0xe8>)
    23b0:	7992      	ldrb	r2, [r2, #6]
    23b2:	2a01      	cmp	r2, #1
    23b4:	d105      	bne.n	23c2 <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    23b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    23b8:	05d2      	lsls	r2, r2, #23
    23ba:	0dd2      	lsrs	r2, r2, #23
    23bc:	4921      	ldr	r1, [pc, #132]	; (2444 <trx_reg_read+0xf4>)
    23be:	800a      	strh	r2, [r1, #0]
    23c0:	e003      	b.n	23ca <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    23c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    23c4:	b2d2      	uxtb	r2, r2
    23c6:	491f      	ldr	r1, [pc, #124]	; (2444 <trx_reg_read+0xf4>)
    23c8:	800a      	strh	r2, [r1, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    23ca:	2101      	movs	r1, #1
    23cc:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    23ce:	420a      	tst	r2, r1
    23d0:	d0fc      	beq.n	23cc <trx_reg_read+0x7c>
    23d2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    23d4:	07d2      	lsls	r2, r2, #31
    23d6:	d501      	bpl.n	23dc <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    23d8:	2200      	movs	r2, #0
    23da:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    23dc:	2102      	movs	r1, #2
    23de:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    23e0:	420a      	tst	r2, r1
    23e2:	d0fc      	beq.n	23de <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    23e4:	2104      	movs	r1, #4
    23e6:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    23e8:	420a      	tst	r2, r1
    23ea:	d0fc      	beq.n	23e6 <trx_reg_read+0x96>
    23ec:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMC21 || SAMR21 || SAML21
	uint16_t register_value = 0;
    23ee:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    23f0:	0752      	lsls	r2, r2, #29
    23f2:	d510      	bpl.n	2416 <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    23f4:	8b5a      	ldrh	r2, [r3, #26]
    23f6:	0752      	lsls	r2, r2, #29
    23f8:	d503      	bpl.n	2402 <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    23fa:	8b59      	ldrh	r1, [r3, #26]
    23fc:	2204      	movs	r2, #4
    23fe:	430a      	orrs	r2, r1
    2400:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2402:	4a0d      	ldr	r2, [pc, #52]	; (2438 <trx_reg_read+0xe8>)
    2404:	7992      	ldrb	r2, [r2, #6]
    2406:	2a01      	cmp	r2, #1
    2408:	d103      	bne.n	2412 <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    240a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    240c:	05ed      	lsls	r5, r5, #23
    240e:	0ded      	lsrs	r5, r5, #23
    2410:	e001      	b.n	2416 <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2412:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    2414:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    2416:	4808      	ldr	r0, [pc, #32]	; (2438 <trx_reg_read+0xe8>)
    2418:	4908      	ldr	r1, [pc, #32]	; (243c <trx_reg_read+0xec>)
    241a:	2200      	movs	r2, #0
    241c:	4b08      	ldr	r3, [pc, #32]	; (2440 <trx_reg_read+0xf0>)
    241e:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2420:	2c00      	cmp	r4, #0
    2422:	d005      	beq.n	2430 <trx_reg_read+0xe0>
		cpu_irq_enable();
    2424:	2201      	movs	r2, #1
    2426:	4b03      	ldr	r3, [pc, #12]	; (2434 <trx_reg_read+0xe4>)
    2428:	701a      	strb	r2, [r3, #0]
    242a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    242e:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    2430:	b2e8      	uxtb	r0, r5
}
    2432:	bd70      	pop	{r4, r5, r6, pc}
    2434:	20000008 	.word	0x20000008
    2438:	20000d48 	.word	0x20000d48
    243c:	20000d0c 	.word	0x20000d0c
    2440:	00000339 	.word	0x00000339
    2444:	20000d04 	.word	0x20000d04

00002448 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    2448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    244a:	1c06      	adds	r6, r0, #0
    244c:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    244e:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    2452:	426b      	negs	r3, r5
    2454:	415d      	adcs	r5, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2456:	b672      	cpsid	i
    2458:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    245c:	2200      	movs	r2, #0
    245e:	4b34      	ldr	r3, [pc, #208]	; (2530 <trx_reg_write+0xe8>)
    2460:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMC21 || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2462:	4f34      	ldr	r7, [pc, #208]	; (2534 <trx_reg_write+0xec>)
    2464:	1c38      	adds	r0, r7, #0
    2466:	4934      	ldr	r1, [pc, #208]	; (2538 <trx_reg_write+0xf0>)
    2468:	3201      	adds	r2, #1
    246a:	4b34      	ldr	r3, [pc, #208]	; (253c <trx_reg_write+0xf4>)
    246c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    246e:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2470:	2101      	movs	r1, #1
    2472:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    2474:	420a      	tst	r2, r1
    2476:	d0fc      	beq.n	2472 <trx_reg_write+0x2a>
    2478:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    247a:	07d2      	lsls	r2, r2, #31
    247c:	d502      	bpl.n	2484 <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    247e:	22c0      	movs	r2, #192	; 0xc0
    2480:	4316      	orrs	r6, r2
    2482:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2484:	2102      	movs	r1, #2
    2486:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    2488:	420a      	tst	r2, r1
    248a:	d0fc      	beq.n	2486 <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    248c:	2104      	movs	r1, #4
    248e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2490:	420a      	tst	r2, r1
    2492:	d0fc      	beq.n	248e <trx_reg_write+0x46>
    2494:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2496:	0752      	lsls	r2, r2, #29
    2498:	d514      	bpl.n	24c4 <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    249a:	8b5a      	ldrh	r2, [r3, #26]
    249c:	0752      	lsls	r2, r2, #29
    249e:	d503      	bpl.n	24a8 <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    24a0:	8b59      	ldrh	r1, [r3, #26]
    24a2:	2204      	movs	r2, #4
    24a4:	430a      	orrs	r2, r1
    24a6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    24a8:	4a22      	ldr	r2, [pc, #136]	; (2534 <trx_reg_write+0xec>)
    24aa:	7992      	ldrb	r2, [r2, #6]
    24ac:	2a01      	cmp	r2, #1
    24ae:	d105      	bne.n	24bc <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    24b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24b2:	05d2      	lsls	r2, r2, #23
    24b4:	0dd2      	lsrs	r2, r2, #23
    24b6:	4922      	ldr	r1, [pc, #136]	; (2540 <trx_reg_write+0xf8>)
    24b8:	800a      	strh	r2, [r1, #0]
    24ba:	e003      	b.n	24c4 <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    24bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24be:	b2d2      	uxtb	r2, r2
    24c0:	491f      	ldr	r1, [pc, #124]	; (2540 <trx_reg_write+0xf8>)
    24c2:	800a      	strh	r2, [r1, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    24c4:	2101      	movs	r1, #1
    24c6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    24c8:	420a      	tst	r2, r1
    24ca:	d0fc      	beq.n	24c6 <trx_reg_write+0x7e>
    24cc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    24ce:	07d2      	lsls	r2, r2, #31
    24d0:	d500      	bpl.n	24d4 <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    24d2:	629c      	str	r4, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    24d4:	2102      	movs	r1, #2
    24d6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    24d8:	420a      	tst	r2, r1
    24da:	d0fc      	beq.n	24d6 <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    24dc:	2104      	movs	r1, #4
    24de:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    24e0:	420a      	tst	r2, r1
    24e2:	d0fc      	beq.n	24de <trx_reg_write+0x96>
    24e4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    24e6:	0752      	lsls	r2, r2, #29
    24e8:	d514      	bpl.n	2514 <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    24ea:	8b5a      	ldrh	r2, [r3, #26]
    24ec:	0752      	lsls	r2, r2, #29
    24ee:	d503      	bpl.n	24f8 <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    24f0:	8b59      	ldrh	r1, [r3, #26]
    24f2:	2204      	movs	r2, #4
    24f4:	430a      	orrs	r2, r1
    24f6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    24f8:	4a0e      	ldr	r2, [pc, #56]	; (2534 <trx_reg_write+0xec>)
    24fa:	7992      	ldrb	r2, [r2, #6]
    24fc:	2a01      	cmp	r2, #1
    24fe:	d105      	bne.n	250c <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2502:	05db      	lsls	r3, r3, #23
    2504:	0ddb      	lsrs	r3, r3, #23
    2506:	4a0e      	ldr	r2, [pc, #56]	; (2540 <trx_reg_write+0xf8>)
    2508:	8013      	strh	r3, [r2, #0]
    250a:	e003      	b.n	2514 <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    250e:	b2db      	uxtb	r3, r3
    2510:	4a0b      	ldr	r2, [pc, #44]	; (2540 <trx_reg_write+0xf8>)
    2512:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    2514:	4807      	ldr	r0, [pc, #28]	; (2534 <trx_reg_write+0xec>)
    2516:	4908      	ldr	r1, [pc, #32]	; (2538 <trx_reg_write+0xf0>)
    2518:	2200      	movs	r2, #0
    251a:	4b08      	ldr	r3, [pc, #32]	; (253c <trx_reg_write+0xf4>)
    251c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    251e:	2d00      	cmp	r5, #0
    2520:	d005      	beq.n	252e <trx_reg_write+0xe6>
		cpu_irq_enable();
    2522:	2201      	movs	r2, #1
    2524:	4b02      	ldr	r3, [pc, #8]	; (2530 <trx_reg_write+0xe8>)
    2526:	701a      	strb	r2, [r3, #0]
    2528:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    252c:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    252e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2530:	20000008 	.word	0x20000008
    2534:	20000d48 	.word	0x20000d48
    2538:	20000d0c 	.word	0x20000d0c
    253c:	00000339 	.word	0x00000339
    2540:	20000d04 	.word	0x20000d04

00002544 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    2544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2546:	465f      	mov	r7, fp
    2548:	4656      	mov	r6, sl
    254a:	464d      	mov	r5, r9
    254c:	4644      	mov	r4, r8
    254e:	b4f0      	push	{r4, r5, r6, r7}
    2550:	1c05      	adds	r5, r0, #0
    2552:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2554:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    2558:	427a      	negs	r2, r7
    255a:	417a      	adcs	r2, r7
    255c:	4690      	mov	r8, r2
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    255e:	b672      	cpsid	i
    2560:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2564:	2200      	movs	r2, #0
    2566:	4b41      	ldr	r3, [pc, #260]	; (266c <trx_frame_read+0x128>)
    2568:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMC21 || SAMR21 || SAML21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    256a:	4e41      	ldr	r6, [pc, #260]	; (2670 <trx_frame_read+0x12c>)
    256c:	1c30      	adds	r0, r6, #0
    256e:	4941      	ldr	r1, [pc, #260]	; (2674 <trx_frame_read+0x130>)
    2570:	3201      	adds	r2, #1
    2572:	4b41      	ldr	r3, [pc, #260]	; (2678 <trx_frame_read+0x134>)
    2574:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2576:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2578:	2101      	movs	r1, #1
    257a:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    257c:	420a      	tst	r2, r1
    257e:	d0fc      	beq.n	257a <trx_frame_read+0x36>
    2580:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2582:	07d2      	lsls	r2, r2, #31
    2584:	d501      	bpl.n	258a <trx_frame_read+0x46>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2586:	2220      	movs	r2, #32
    2588:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    258a:	2102      	movs	r1, #2
    258c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    258e:	420a      	tst	r2, r1
    2590:	d0fc      	beq.n	258c <trx_frame_read+0x48>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2592:	2104      	movs	r1, #4
    2594:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2596:	420a      	tst	r2, r1
    2598:	d0fc      	beq.n	2594 <trx_frame_read+0x50>
    259a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    259c:	0752      	lsls	r2, r2, #29
    259e:	d50f      	bpl.n	25c0 <trx_frame_read+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    25a0:	8b5a      	ldrh	r2, [r3, #26]
    25a2:	0752      	lsls	r2, r2, #29
    25a4:	d503      	bpl.n	25ae <trx_frame_read+0x6a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    25a6:	8b59      	ldrh	r1, [r3, #26]
    25a8:	2204      	movs	r2, #4
    25aa:	430a      	orrs	r2, r1
    25ac:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    25ae:	4a30      	ldr	r2, [pc, #192]	; (2670 <trx_frame_read+0x12c>)
    25b0:	7992      	ldrb	r2, [r2, #6]
    25b2:	2a01      	cmp	r2, #1
    25b4:	d109      	bne.n	25ca <trx_frame_read+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    25b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25b8:	05db      	lsls	r3, r3, #23
    25ba:	0ddb      	lsrs	r3, r3, #23
    25bc:	4a2f      	ldr	r2, [pc, #188]	; (267c <trx_frame_read+0x138>)
    25be:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    25c0:	1e63      	subs	r3, r4, #1
    25c2:	b2db      	uxtb	r3, r3
    25c4:	2c00      	cmp	r4, #0
    25c6:	d105      	bne.n	25d4 <trx_frame_read+0x90>
    25c8:	e03c      	b.n	2644 <trx_frame_read+0x100>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    25ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25cc:	b2db      	uxtb	r3, r3
    25ce:	4a2b      	ldr	r2, [pc, #172]	; (267c <trx_frame_read+0x138>)
    25d0:	8013      	strh	r3, [r2, #0]
    25d2:	e7f5      	b.n	25c0 <trx_frame_read+0x7c>
    25d4:	3301      	adds	r3, #1
    25d6:	469c      	mov	ip, r3
    25d8:	44ac      	add	ip, r5
    25da:	2620      	movs	r6, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    25dc:	4b24      	ldr	r3, [pc, #144]	; (2670 <trx_frame_read+0x12c>)
    25de:	4699      	mov	r9, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    25e0:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    25e2:	2300      	movs	r3, #0
    25e4:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    25e6:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    25e8:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    25ea:	464f      	mov	r7, r9

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    25ec:	2304      	movs	r3, #4
    25ee:	469b      	mov	fp, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    25f0:	464b      	mov	r3, r9
    25f2:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    25f4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    25f6:	4202      	tst	r2, r0
    25f8:	d0fc      	beq.n	25f4 <trx_frame_read+0xb0>
    25fa:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    25fc:	4202      	tst	r2, r0
    25fe:	d001      	beq.n	2604 <trx_frame_read+0xc0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2600:	4652      	mov	r2, sl
    2602:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2604:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    2606:	4222      	tst	r2, r4
    2608:	d0fc      	beq.n	2604 <trx_frame_read+0xc0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    260a:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    260c:	420a      	tst	r2, r1
    260e:	d0fc      	beq.n	260a <trx_frame_read+0xc6>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2610:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2612:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2614:	420a      	tst	r2, r1
    2616:	d011      	beq.n	263c <trx_frame_read+0xf8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2618:	8b5a      	ldrh	r2, [r3, #26]
    261a:	420a      	tst	r2, r1
    261c:	d004      	beq.n	2628 <trx_frame_read+0xe4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    261e:	8b5a      	ldrh	r2, [r3, #26]
    2620:	465e      	mov	r6, fp
    2622:	4332      	orrs	r2, r6
    2624:	b292      	uxth	r2, r2
    2626:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2628:	4a11      	ldr	r2, [pc, #68]	; (2670 <trx_frame_read+0x12c>)
    262a:	7992      	ldrb	r2, [r2, #6]
    262c:	2a01      	cmp	r2, #1
    262e:	d103      	bne.n	2638 <trx_frame_read+0xf4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2630:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    2632:	05f6      	lsls	r6, r6, #23
    2634:	0df6      	lsrs	r6, r6, #23
    2636:	e001      	b.n	263c <trx_frame_read+0xf8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2638:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    263a:	b2f6      	uxtb	r6, r6
		}
		spi_read(&master, &temp);
		*data = temp;
    263c:	702e      	strb	r6, [r5, #0]
		data++;
    263e:	3501      	adds	r5, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    2640:	4565      	cmp	r5, ip
    2642:	d1d5      	bne.n	25f0 <trx_frame_read+0xac>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    2644:	480a      	ldr	r0, [pc, #40]	; (2670 <trx_frame_read+0x12c>)
    2646:	490b      	ldr	r1, [pc, #44]	; (2674 <trx_frame_read+0x130>)
    2648:	2200      	movs	r2, #0
    264a:	4b0b      	ldr	r3, [pc, #44]	; (2678 <trx_frame_read+0x134>)
    264c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    264e:	4643      	mov	r3, r8
    2650:	2b00      	cmp	r3, #0
    2652:	d005      	beq.n	2660 <trx_frame_read+0x11c>
		cpu_irq_enable();
    2654:	2201      	movs	r2, #1
    2656:	4b05      	ldr	r3, [pc, #20]	; (266c <trx_frame_read+0x128>)
    2658:	701a      	strb	r2, [r3, #0]
    265a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    265e:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    2660:	bc3c      	pop	{r2, r3, r4, r5}
    2662:	4690      	mov	r8, r2
    2664:	4699      	mov	r9, r3
    2666:	46a2      	mov	sl, r4
    2668:	46ab      	mov	fp, r5
    266a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    266c:	20000008 	.word	0x20000008
    2670:	20000d48 	.word	0x20000d48
    2674:	20000d0c 	.word	0x20000d0c
    2678:	00000339 	.word	0x00000339
    267c:	20000d04 	.word	0x20000d04

00002680 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    2680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2682:	464f      	mov	r7, r9
    2684:	4646      	mov	r6, r8
    2686:	b4c0      	push	{r6, r7}
    2688:	1c04      	adds	r4, r0, #0
    268a:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    268c:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    2690:	4272      	negs	r2, r6
    2692:	4172      	adcs	r2, r6
    2694:	4691      	mov	r9, r2
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2696:	b672      	cpsid	i
    2698:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    269c:	2200      	movs	r2, #0
    269e:	4b3c      	ldr	r3, [pc, #240]	; (2790 <trx_frame_write+0x110>)
    26a0:	701a      	strb	r2, [r3, #0]
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMC21 || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    26a2:	4f3c      	ldr	r7, [pc, #240]	; (2794 <trx_frame_write+0x114>)
    26a4:	1c38      	adds	r0, r7, #0
    26a6:	493c      	ldr	r1, [pc, #240]	; (2798 <trx_frame_write+0x118>)
    26a8:	3201      	adds	r2, #1
    26aa:	4b3c      	ldr	r3, [pc, #240]	; (279c <trx_frame_write+0x11c>)
    26ac:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    26ae:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    26b0:	2101      	movs	r1, #1
    26b2:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    26b4:	420a      	tst	r2, r1
    26b6:	d0fc      	beq.n	26b2 <trx_frame_write+0x32>
    26b8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    26ba:	07d2      	lsls	r2, r2, #31
    26bc:	d501      	bpl.n	26c2 <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    26be:	2260      	movs	r2, #96	; 0x60
    26c0:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    26c2:	2102      	movs	r1, #2
    26c4:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    26c6:	420a      	tst	r2, r1
    26c8:	d0fc      	beq.n	26c4 <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    26ca:	2104      	movs	r1, #4
    26cc:	7e1a      	ldrb	r2, [r3, #24]
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    26ce:	420a      	tst	r2, r1
    26d0:	d0fc      	beq.n	26cc <trx_frame_write+0x4c>
    26d2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    26d4:	0752      	lsls	r2, r2, #29
    26d6:	d50f      	bpl.n	26f8 <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    26d8:	8b5a      	ldrh	r2, [r3, #26]
    26da:	0752      	lsls	r2, r2, #29
    26dc:	d503      	bpl.n	26e6 <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    26de:	8b59      	ldrh	r1, [r3, #26]
    26e0:	2204      	movs	r2, #4
    26e2:	430a      	orrs	r2, r1
    26e4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    26e6:	4a2b      	ldr	r2, [pc, #172]	; (2794 <trx_frame_write+0x114>)
    26e8:	7992      	ldrb	r2, [r2, #6]
    26ea:	2a01      	cmp	r2, #1
    26ec:	d10e      	bne.n	270c <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    26ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    26f0:	05d2      	lsls	r2, r2, #23
    26f2:	0dd2      	lsrs	r2, r2, #23
    26f4:	492a      	ldr	r1, [pc, #168]	; (27a0 <trx_frame_write+0x120>)
    26f6:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    26f8:	4a26      	ldr	r2, [pc, #152]	; (2794 <trx_frame_write+0x114>)
    26fa:	7992      	ldrb	r2, [r2, #6]
    26fc:	4690      	mov	r8, r2
    26fe:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2700:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2702:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2704:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2706:	2204      	movs	r2, #4
    2708:	4694      	mov	ip, r2
    270a:	e02b      	b.n	2764 <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    270c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    270e:	b2d2      	uxtb	r2, r2
    2710:	4923      	ldr	r1, [pc, #140]	; (27a0 <trx_frame_write+0x120>)
    2712:	800a      	strh	r2, [r1, #0]
    2714:	e7f0      	b.n	26f8 <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2716:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    2718:	423a      	tst	r2, r7
    271a:	d0fc      	beq.n	2716 <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    271c:	7832      	ldrb	r2, [r6, #0]
    271e:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2720:	4239      	tst	r1, r7
    2722:	d000      	beq.n	2726 <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2724:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2726:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    2728:	4202      	tst	r2, r0
    272a:	d0fc      	beq.n	2726 <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    272c:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    272e:	4222      	tst	r2, r4
    2730:	d0fc      	beq.n	272c <trx_frame_write+0xac>
    2732:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2734:	4222      	tst	r2, r4
    2736:	d014      	beq.n	2762 <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2738:	8b5a      	ldrh	r2, [r3, #26]
    273a:	4222      	tst	r2, r4
    273c:	d004      	beq.n	2748 <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    273e:	8b5a      	ldrh	r2, [r3, #26]
    2740:	4661      	mov	r1, ip
    2742:	430a      	orrs	r2, r1
    2744:	b292      	uxth	r2, r2
    2746:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2748:	4642      	mov	r2, r8
    274a:	2a01      	cmp	r2, #1
    274c:	d105      	bne.n	275a <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    274e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2750:	05d2      	lsls	r2, r2, #23
    2752:	0dd2      	lsrs	r2, r2, #23
    2754:	4912      	ldr	r1, [pc, #72]	; (27a0 <trx_frame_write+0x120>)
    2756:	800a      	strh	r2, [r1, #0]
    2758:	e003      	b.n	2762 <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    275a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    275c:	b2d2      	uxtb	r2, r2
    275e:	4910      	ldr	r1, [pc, #64]	; (27a0 <trx_frame_write+0x120>)
    2760:	800a      	strh	r2, [r1, #0]
    2762:	3601      	adds	r6, #1
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    2764:	3d01      	subs	r5, #1
    2766:	b2ed      	uxtb	r5, r5
    2768:	2dff      	cmp	r5, #255	; 0xff
    276a:	d1d4      	bne.n	2716 <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    276c:	4809      	ldr	r0, [pc, #36]	; (2794 <trx_frame_write+0x114>)
    276e:	490a      	ldr	r1, [pc, #40]	; (2798 <trx_frame_write+0x118>)
    2770:	2200      	movs	r2, #0
    2772:	4b0a      	ldr	r3, [pc, #40]	; (279c <trx_frame_write+0x11c>)
    2774:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2776:	464b      	mov	r3, r9
    2778:	2b00      	cmp	r3, #0
    277a:	d005      	beq.n	2788 <trx_frame_write+0x108>
		cpu_irq_enable();
    277c:	2201      	movs	r2, #1
    277e:	4b04      	ldr	r3, [pc, #16]	; (2790 <trx_frame_write+0x110>)
    2780:	701a      	strb	r2, [r3, #0]
    2782:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2786:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    2788:	bc0c      	pop	{r2, r3}
    278a:	4690      	mov	r8, r2
    278c:	4699      	mov	r9, r3
    278e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2790:	20000008 	.word	0x20000008
    2794:	20000d48 	.word	0x20000d48
    2798:	20000d0c 	.word	0x20000d0c
    279c:	00000339 	.word	0x00000339
    27a0:	20000d04 	.word	0x20000d04

000027a4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    27a4:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    27a6:	2000      	movs	r0, #0
    27a8:	4b08      	ldr	r3, [pc, #32]	; (27cc <delay_init+0x28>)
    27aa:	4798      	blx	r3
	cycles_per_ms /= 1000;
    27ac:	4c08      	ldr	r4, [pc, #32]	; (27d0 <delay_init+0x2c>)
    27ae:	21fa      	movs	r1, #250	; 0xfa
    27b0:	0089      	lsls	r1, r1, #2
    27b2:	47a0      	blx	r4
    27b4:	4b07      	ldr	r3, [pc, #28]	; (27d4 <delay_init+0x30>)
    27b6:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    27b8:	21fa      	movs	r1, #250	; 0xfa
    27ba:	0089      	lsls	r1, r1, #2
    27bc:	47a0      	blx	r4
    27be:	4b06      	ldr	r3, [pc, #24]	; (27d8 <delay_init+0x34>)
    27c0:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    27c2:	2205      	movs	r2, #5
    27c4:	4b05      	ldr	r3, [pc, #20]	; (27dc <delay_init+0x38>)
    27c6:	601a      	str	r2, [r3, #0]
}
    27c8:	bd10      	pop	{r4, pc}
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	00004249 	.word	0x00004249
    27d0:	00004cb9 	.word	0x00004cb9
    27d4:	20000004 	.word	0x20000004
    27d8:	20000000 	.word	0x20000000
    27dc:	e000e010 	.word	0xe000e010

000027e0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    27e0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    27e2:	4b08      	ldr	r3, [pc, #32]	; (2804 <delay_cycles_us+0x24>)
    27e4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    27e6:	4a08      	ldr	r2, [pc, #32]	; (2808 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    27e8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    27ea:	2180      	movs	r1, #128	; 0x80
    27ec:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
    27ee:	e006      	b.n	27fe <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    27f0:	2c00      	cmp	r4, #0
    27f2:	d004      	beq.n	27fe <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
    27f4:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    27f6:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    27f8:	6813      	ldr	r3, [r2, #0]
    27fa:	420b      	tst	r3, r1
    27fc:	d0fc      	beq.n	27f8 <delay_cycles_us+0x18>
    27fe:	3801      	subs	r0, #1
    2800:	d2f6      	bcs.n	27f0 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
    2802:	bd30      	pop	{r4, r5, pc}
    2804:	20000000 	.word	0x20000000
    2808:	e000e010 	.word	0xe000e010

0000280c <_adc_get_inst_index>:
 *
 * \return Index of the given ADC module instance.
 */
uint8_t _adc_get_inst_index(
		Adc *const hw)
{
    280c:	b510      	push	{r4, lr}
    280e:	b082      	sub	sp, #8
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;
    2810:	466a      	mov	r2, sp
    2812:	4b08      	ldr	r3, [pc, #32]	; (2834 <_adc_get_inst_index+0x28>)
    2814:	cb12      	ldmia	r3!, {r1, r4}
    2816:	c212      	stmia	r2!, {r1, r4}

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
		if (hw == adc_modules[i]) {
    2818:	9b00      	ldr	r3, [sp, #0]
    281a:	4283      	cmp	r3, r0
    281c:	d005      	beq.n	282a <_adc_get_inst_index+0x1e>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    281e:	2300      	movs	r3, #0
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
		if (hw == adc_modules[i]) {
    2820:	9a01      	ldr	r2, [sp, #4]
    2822:	4282      	cmp	r2, r0
    2824:	d103      	bne.n	282e <_adc_get_inst_index+0x22>
    2826:	3301      	adds	r3, #1
    2828:	e000      	b.n	282c <_adc_get_inst_index+0x20>
{
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
    282a:	2300      	movs	r3, #0
		if (hw == adc_modules[i]) {
			return i;
    282c:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    282e:	1c18      	adds	r0, r3, #0
    2830:	b002      	add	sp, #8
    2832:	bd10      	pop	{r4, pc}
    2834:	0000607c 	.word	0x0000607c

00002838 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    2838:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    283a:	2300      	movs	r3, #0
    283c:	2200      	movs	r2, #0
    283e:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
    2840:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
    2842:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2844:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2846:	2100      	movs	r1, #0
    2848:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    284a:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
    284c:	61c3      	str	r3, [r0, #28]
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
    284e:	2401      	movs	r4, #1
    2850:	7104      	strb	r4, [r0, #4]
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
    2852:	24c0      	movs	r4, #192	; 0xc0
    2854:	0164      	lsls	r4, r4, #5
    2856:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    2858:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    285a:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
    285c:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
    285e:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
    2860:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    2862:	242a      	movs	r4, #42	; 0x2a
    2864:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
    2866:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
    2868:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
    286a:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
    286c:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
    286e:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
    2870:	3c06      	subs	r4, #6
    2872:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2874:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    2876:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    2878:	7541      	strb	r1, [r0, #21]
}
    287a:	bd10      	pop	{r4, pc}

0000287c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    287c:	b5f0      	push	{r4, r5, r6, r7, lr}
    287e:	465f      	mov	r7, fp
    2880:	4656      	mov	r6, sl
    2882:	464d      	mov	r5, r9
    2884:	4644      	mov	r4, r8
    2886:	b4f0      	push	{r4, r5, r6, r7}
    2888:	b09d      	sub	sp, #116	; 0x74
    288a:	1c05      	adds	r5, r0, #0
    288c:	1c0e      	adds	r6, r1, #0
    288e:	1c17      	adds	r7, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
    2890:	1c08      	adds	r0, r1, #0
    2892:	4bcc      	ldr	r3, [pc, #816]	; (2bc4 <adc_init+0x348>)
    2894:	4798      	blx	r3
    2896:	1c04      	adds	r4, r0, #0
    2898:	9000      	str	r0, [sp, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    289a:	602e      	str	r6, [r5, #0]
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    289c:	4aca      	ldr	r2, [pc, #808]	; (2bc8 <adc_init+0x34c>)
    289e:	69d1      	ldr	r1, [r2, #28]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
    28a0:	0080      	lsls	r0, r0, #2
    28a2:	4bca      	ldr	r3, [pc, #808]	; (2bcc <adc_init+0x350>)
    28a4:	58c3      	ldr	r3, [r0, r3]
    28a6:	430b      	orrs	r3, r1
    28a8:	61d3      	str	r3, [r2, #28]
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    28aa:	7833      	ldrb	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    28ac:	2005      	movs	r0, #5
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    28ae:	07db      	lsls	r3, r3, #31
    28b0:	d500      	bpl.n	28b4 <adc_init+0x38>
    28b2:	e258      	b.n	2d66 <adc_init+0x4ea>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    28b4:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    28b6:	8c13      	ldrh	r3, [r2, #32]
    28b8:	b29b      	uxth	r3, r3
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	while (adc_is_syncing(module_inst)) {
    28ba:	2b00      	cmp	r3, #0
    28bc:	d1fb      	bne.n	28b6 <adc_init+0x3a>
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    28be:	7833      	ldrb	r3, [r6, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    28c0:	201c      	movs	r0, #28

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    28c2:	079b      	lsls	r3, r3, #30
    28c4:	d500      	bpl.n	28c8 <adc_init+0x4c>
    28c6:	e24e      	b.n	2d66 <adc_init+0x4ea>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    28c8:	787b      	ldrb	r3, [r7, #1]
    28ca:	712b      	strb	r3, [r5, #4]

	/* Make sure the voltage reference is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
    28cc:	2b00      	cmp	r3, #0
    28ce:	d000      	beq.n	28d2 <adc_init+0x56>
    28d0:	e22f      	b.n	2d32 <adc_init+0x4b6>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
    28d2:	4abf      	ldr	r2, [pc, #764]	; (2bd0 <adc_init+0x354>)
    28d4:	69d1      	ldr	r1, [r2, #28]
    28d6:	3304      	adds	r3, #4
    28d8:	430b      	orrs	r3, r1
    28da:	61d3      	str	r3, [r2, #28]
    28dc:	e229      	b.n	2d32 <adc_init+0x4b6>
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[instance] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    28de:	7b3b      	ldrb	r3, [r7, #12]
    28e0:	2b00      	cmp	r3, #0
    28e2:	d102      	bne.n	28ea <adc_init+0x6e>
			!config->freerunning) {
		module_inst->software_trigger = true;
    28e4:	3301      	adds	r3, #1
    28e6:	776b      	strb	r3, [r5, #29]
    28e8:	e001      	b.n	28ee <adc_init+0x72>
	} else {
		module_inst->software_trigger = false;
    28ea:	2300      	movs	r3, #0
    28ec:	776b      	strb	r3, [r5, #29]
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    28ee:	682b      	ldr	r3, [r5, #0]
    28f0:	469a      	mov	sl, r3

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    28f2:	783b      	ldrb	r3, [r7, #0]
    28f4:	aa02      	add	r2, sp, #8
    28f6:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
    28f8:	4bb6      	ldr	r3, [pc, #728]	; (2bd4 <adc_init+0x358>)
    28fa:	5d1e      	ldrb	r6, [r3, r4]
    28fc:	1c30      	adds	r0, r6, #0
    28fe:	1c11      	adds	r1, r2, #0
    2900:	4bb5      	ldr	r3, [pc, #724]	; (2bd8 <adc_init+0x35c>)
    2902:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
    2904:	1c30      	adds	r0, r6, #0
    2906:	4bb5      	ldr	r3, [pc, #724]	; (2bdc <adc_init+0x360>)
    2908:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
    290a:	793b      	ldrb	r3, [r7, #4]
    290c:	4698      	mov	r8, r3
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
	const uint32_t pinmapping0[] = {
    290e:	ae04      	add	r6, sp, #16
    2910:	4bb3      	ldr	r3, [pc, #716]	; (2be0 <adc_init+0x364>)
    2912:	469c      	mov	ip, r3
    2914:	1c1a      	adds	r2, r3, #0
    2916:	3208      	adds	r2, #8
    2918:	1c31      	adds	r1, r6, #0
    291a:	ca49      	ldmia	r2!, {r0, r3, r6}
    291c:	c149      	stmia	r1!, {r0, r3, r6}
    291e:	ca49      	ldmia	r2!, {r0, r3, r6}
    2920:	c149      	stmia	r1!, {r0, r3, r6}
    2922:	ca49      	ldmia	r2!, {r0, r3, r6}
    2924:	c149      	stmia	r1!, {r0, r3, r6}
    2926:	ca49      	ldmia	r2!, {r0, r3, r6}
    2928:	c149      	stmia	r1!, {r0, r3, r6}
			PIN_PA10B_ADC0_AIN10, PIN_PA11B_ADC0_AIN11,
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
		};
	const uint32_t pinmapping1[] = {
    292a:	a910      	add	r1, sp, #64	; 0x40
    292c:	4663      	mov	r3, ip
    292e:	3338      	adds	r3, #56	; 0x38
    2930:	1c0a      	adds	r2, r1, #0
    2932:	cb43      	ldmia	r3!, {r0, r1, r6}
    2934:	c243      	stmia	r2!, {r0, r1, r6}
    2936:	cb43      	ldmia	r3!, {r0, r1, r6}
    2938:	c243      	stmia	r2!, {r0, r1, r6}
    293a:	cb43      	ldmia	r3!, {r0, r1, r6}
    293c:	c243      	stmia	r2!, {r0, r1, r6}
    293e:	cb43      	ldmia	r3!, {r0, r1, r6}
    2940:	c243      	stmia	r2!, {r0, r1, r6}
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};

	switch(index) {
    2942:	9b00      	ldr	r3, [sp, #0]
    2944:	2b00      	cmp	r3, #0
    2946:	d006      	beq.n	2956 <adc_init+0xda>
	case 0:
		pinmapping = pinmapping0;
		break;
	case 1:
		pinmapping = pinmapping1;
    2948:	aa10      	add	r2, sp, #64	; 0x40
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
    294a:	3b01      	subs	r3, #1
    294c:	4258      	negs	r0, r3
    294e:	4158      	adcs	r0, r3
    2950:	4243      	negs	r3, r0
    2952:	401a      	ands	r2, r3
    2954:	e000      	b.n	2958 <adc_init+0xdc>
#   endif
	};

	switch(index) {
	case 0:
		pinmapping = pinmapping0;
    2956:	aa04      	add	r2, sp, #16
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
    2958:	00a3      	lsls	r3, r4, #2
    295a:	49a2      	ldr	r1, [pc, #648]	; (2be4 <adc_init+0x368>)
    295c:	585b      	ldr	r3, [r3, r1]
    295e:	4699      	mov	r9, r3
    2960:	4598      	cmp	r8, r3
    2962:	d80c      	bhi.n	297e <adc_init+0x102>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2964:	4643      	mov	r3, r8
    2966:	0098      	lsls	r0, r3, #2
    2968:	5880      	ldr	r0, [r0, r2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    296a:	a903      	add	r1, sp, #12
    296c:	2300      	movs	r3, #0
    296e:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2970:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2972:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2974:	3301      	adds	r3, #1
    2976:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    2978:	b2c0      	uxtb	r0, r0
    297a:	4b9b      	ldr	r3, [pc, #620]	; (2be8 <adc_init+0x36c>)
    297c:	4798      	blx	r3
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
	system_gclk_chan_enable(_adc_gclk_ids[index]);

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);
    297e:	88fb      	ldrh	r3, [r7, #6]
    2980:	4698      	mov	r8, r3
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
	const uint32_t pinmapping0[] = {
    2982:	ae04      	add	r6, sp, #16
    2984:	4b96      	ldr	r3, [pc, #600]	; (2be0 <adc_init+0x364>)
    2986:	469c      	mov	ip, r3
    2988:	1c1a      	adds	r2, r3, #0
    298a:	3208      	adds	r2, #8
    298c:	1c31      	adds	r1, r6, #0
    298e:	ca49      	ldmia	r2!, {r0, r3, r6}
    2990:	c149      	stmia	r1!, {r0, r3, r6}
    2992:	ca49      	ldmia	r2!, {r0, r3, r6}
    2994:	c149      	stmia	r1!, {r0, r3, r6}
    2996:	ca49      	ldmia	r2!, {r0, r3, r6}
    2998:	c149      	stmia	r1!, {r0, r3, r6}
    299a:	ca49      	ldmia	r2!, {r0, r3, r6}
    299c:	c149      	stmia	r1!, {r0, r3, r6}
			PIN_PA10B_ADC0_AIN10, PIN_PA11B_ADC0_AIN11,
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
		};
	const uint32_t pinmapping1[] = {
    299e:	a910      	add	r1, sp, #64	; 0x40
    29a0:	4663      	mov	r3, ip
    29a2:	3338      	adds	r3, #56	; 0x38
    29a4:	1c0a      	adds	r2, r1, #0
    29a6:	cb43      	ldmia	r3!, {r0, r1, r6}
    29a8:	c243      	stmia	r2!, {r0, r1, r6}
    29aa:	cb43      	ldmia	r3!, {r0, r1, r6}
    29ac:	c243      	stmia	r2!, {r0, r1, r6}
    29ae:	cb43      	ldmia	r3!, {r0, r1, r6}
    29b0:	c243      	stmia	r2!, {r0, r1, r6}
    29b2:	cb43      	ldmia	r3!, {r0, r1, r6}
    29b4:	c243      	stmia	r2!, {r0, r1, r6}
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};

	switch(index) {
    29b6:	9b00      	ldr	r3, [sp, #0]
    29b8:	2b00      	cmp	r3, #0
    29ba:	d006      	beq.n	29ca <adc_init+0x14e>
	case 0:
		pinmapping = pinmapping0;
		break;
	case 1:
		pinmapping = pinmapping1;
    29bc:	aa10      	add	r2, sp, #64	; 0x40
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
    29be:	3b01      	subs	r3, #1
    29c0:	4258      	negs	r0, r3
    29c2:	4158      	adcs	r0, r3
    29c4:	4243      	negs	r3, r0
    29c6:	401a      	ands	r2, r3
    29c8:	e000      	b.n	29cc <adc_init+0x150>
#   endif
	};

	switch(index) {
	case 0:
		pinmapping = pinmapping0;
    29ca:	aa04      	add	r2, sp, #16
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
    29cc:	45c8      	cmp	r8, r9
    29ce:	d900      	bls.n	29d2 <adc_init+0x156>
    29d0:	e1c0      	b.n	2d54 <adc_init+0x4d8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    29d2:	4643      	mov	r3, r8
    29d4:	0098      	lsls	r0, r3, #2
    29d6:	5880      	ldr	r0, [r0, r2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    29d8:	a903      	add	r1, sp, #12
    29da:	2300      	movs	r3, #0
    29dc:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    29de:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    29e0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    29e2:	3301      	adds	r3, #1
    29e4:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    29e6:	b2c0      	uxtb	r0, r0
    29e8:	4b7f      	ldr	r3, [pc, #508]	; (2be8 <adc_init+0x36c>)
    29ea:	4798      	blx	r3
    29ec:	e1b2      	b.n	2d54 <adc_init+0x4d8>
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
		if(config->positive_input_sequence_mask_enable & (1 << i)){
    29ee:	2301      	movs	r3, #1
    29f0:	4642      	mov	r2, r8
    29f2:	4093      	lsls	r3, r2
    29f4:	693a      	ldr	r2, [r7, #16]
    29f6:	421a      	tst	r2, r3
    29f8:	d030      	beq.n	2a5c <adc_init+0x1e0>
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
	const uint32_t pinmapping0[] = {
    29fa:	a804      	add	r0, sp, #16
    29fc:	1c03      	adds	r3, r0, #0
    29fe:	465a      	mov	r2, fp
    2a00:	ca43      	ldmia	r2!, {r0, r1, r6}
    2a02:	c343      	stmia	r3!, {r0, r1, r6}
    2a04:	ca43      	ldmia	r2!, {r0, r1, r6}
    2a06:	c343      	stmia	r3!, {r0, r1, r6}
    2a08:	ca43      	ldmia	r2!, {r0, r1, r6}
    2a0a:	c343      	stmia	r3!, {r0, r1, r6}
    2a0c:	ca43      	ldmia	r2!, {r0, r1, r6}
    2a0e:	c343      	stmia	r3!, {r0, r1, r6}
			PIN_PA10B_ADC0_AIN10, PIN_PA11B_ADC0_AIN11,
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
		};
	const uint32_t pinmapping1[] = {
    2a10:	a810      	add	r0, sp, #64	; 0x40
    2a12:	4b73      	ldr	r3, [pc, #460]	; (2be0 <adc_init+0x364>)
    2a14:	3338      	adds	r3, #56	; 0x38
    2a16:	1c02      	adds	r2, r0, #0
    2a18:	cb43      	ldmia	r3!, {r0, r1, r6}
    2a1a:	c243      	stmia	r2!, {r0, r1, r6}
    2a1c:	cb43      	ldmia	r3!, {r0, r1, r6}
    2a1e:	c243      	stmia	r2!, {r0, r1, r6}
    2a20:	cb43      	ldmia	r3!, {r0, r1, r6}
    2a22:	c243      	stmia	r2!, {r0, r1, r6}
    2a24:	cb43      	ldmia	r3!, {r0, r1, r6}
    2a26:	c243      	stmia	r2!, {r0, r1, r6}
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};

	switch(index) {
    2a28:	9b00      	ldr	r3, [sp, #0]
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d006      	beq.n	2a3c <adc_init+0x1c0>
	case 0:
		pinmapping = pinmapping0;
		break;
	case 1:
		pinmapping = pinmapping1;
    2a2e:	aa10      	add	r2, sp, #64	; 0x40
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
    2a30:	3b01      	subs	r3, #1
    2a32:	4259      	negs	r1, r3
    2a34:	4159      	adcs	r1, r3
    2a36:	424b      	negs	r3, r1
    2a38:	401a      	ands	r2, r3
    2a3a:	e000      	b.n	2a3e <adc_init+0x1c2>
#   endif
	};

	switch(index) {
	case 0:
		pinmapping = pinmapping0;
    2a3c:	aa04      	add	r2, sp, #16
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
    2a3e:	9b01      	ldr	r3, [sp, #4]
    2a40:	4599      	cmp	r9, r3
    2a42:	d30b      	bcc.n	2a5c <adc_init+0x1e0>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2a44:	0099      	lsls	r1, r3, #2
    2a46:	5888      	ldr	r0, [r1, r2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2a48:	a903      	add	r1, sp, #12
    2a4a:	2300      	movs	r3, #0
    2a4c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2a4e:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2a50:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2a52:	3301      	adds	r3, #1
    2a54:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    2a56:	b2c0      	uxtb	r0, r0
    2a58:	4b63      	ldr	r3, [pc, #396]	; (2be8 <adc_init+0x36c>)
    2a5a:	4798      	blx	r3
	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
    2a5c:	4646      	mov	r6, r8
    2a5e:	3601      	adds	r6, #1
    2a60:	b2f3      	uxtb	r3, r6
    2a62:	4698      	mov	r8, r3
    2a64:	9301      	str	r3, [sp, #4]
    2a66:	454b      	cmp	r3, r9
    2a68:	d9c1      	bls.n	29ee <adc_init+0x172>
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
    2a6a:	7bbb      	ldrb	r3, [r7, #14]
    2a6c:	01da      	lsls	r2, r3, #7
			_adc_configure_ain_pin(index, i);
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
    2a6e:	7b7b      	ldrb	r3, [r7, #13]
    2a70:	019b      	lsls	r3, r3, #6
    2a72:	4313      	orrs	r3, r2
    2a74:	b2db      	uxtb	r3, r3
    2a76:	4652      	mov	r2, sl
    2a78:	7013      	strb	r3, [r2, #0]
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
    2a7a:	7d3b      	ldrb	r3, [r7, #20]
    2a7c:	01db      	lsls	r3, r3, #7
	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;

	/* Configure reference */
	adc_module->REFCTRL.reg =
    2a7e:	787a      	ldrb	r2, [r7, #1]
    2a80:	4313      	orrs	r3, r2
    2a82:	b2db      	uxtb	r3, r3
    2a84:	4652      	mov	r2, sl
    2a86:	7093      	strb	r3, [r2, #2]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
			| (config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    2a88:	78fb      	ldrb	r3, [r7, #3]
    2a8a:	2b34      	cmp	r3, #52	; 0x34
    2a8c:	d900      	bls.n	2a90 <adc_init+0x214>
    2a8e:	e14e      	b.n	2d2e <adc_init+0x4b2>
    2a90:	009b      	lsls	r3, r3, #2
    2a92:	4a56      	ldr	r2, [pc, #344]	; (2bec <adc_init+0x370>)
    2a94:	58d3      	ldr	r3, [r2, r3]
    2a96:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2a98:	2004      	movs	r0, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2a9a:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    2a9c:	2202      	movs	r2, #2
    2a9e:	e01a      	b.n	2ad6 <adc_init+0x25a>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    2aa0:	7a7a      	ldrb	r2, [r7, #9]
		accumulate = config->accumulate_samples;
    2aa2:	7a38      	ldrb	r0, [r7, #8]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2aa4:	2110      	movs	r1, #16
    2aa6:	e016      	b.n	2ad6 <adc_init+0x25a>
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    2aa8:	2006      	movs	r0, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2aaa:	2110      	movs	r1, #16
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2aac:	2201      	movs	r2, #1
    2aae:	e012      	b.n	2ad6 <adc_init+0x25a>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    2ab0:	2008      	movs	r0, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2ab2:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    2ab4:	2200      	movs	r2, #0
    2ab6:	e00e      	b.n	2ad6 <adc_init+0x25a>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2ab8:	2000      	movs	r0, #0
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    2aba:	2130      	movs	r1, #48	; 0x30
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    2abc:	2200      	movs	r2, #0
    2abe:	e00a      	b.n	2ad6 <adc_init+0x25a>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2ac0:	2000      	movs	r0, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    2ac2:	2120      	movs	r1, #32
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    2ac4:	2200      	movs	r2, #0
    2ac6:	e006      	b.n	2ad6 <adc_init+0x25a>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2ac8:	2000      	movs	r0, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    2aca:	2100      	movs	r1, #0
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    2acc:	2200      	movs	r2, #0
    2ace:	e002      	b.n	2ad6 <adc_init+0x25a>
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    2ad0:	2002      	movs	r0, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2ad2:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2ad4:	2201      	movs	r2, #1
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    2ad6:	0112      	lsls	r2, r2, #4
    2ad8:	2370      	movs	r3, #112	; 0x70
    2ada:	4013      	ands	r3, r2
    2adc:	4303      	orrs	r3, r0
    2ade:	4652      	mov	r2, sl
    2ae0:	7313      	strb	r3, [r2, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2ae2:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2ae4:	8c13      	ldrh	r3, [r2, #32]
    2ae6:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2ae8:	2b00      	cmp	r3, #0
    2aea:	d1fb      	bne.n	2ae4 <adc_init+0x268>
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    2aec:	7d7b      	ldrb	r3, [r7, #21]
		return STATUS_ERR_INVALID_ARG;
    2aee:	2017      	movs	r0, #23
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    2af0:	2b3f      	cmp	r3, #63	; 0x3f
    2af2:	d900      	bls.n	2af6 <adc_init+0x27a>
    2af4:	e137      	b.n	2d66 <adc_init+0x4ea>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
    2af6:	7bfa      	ldrb	r2, [r7, #15]
    2af8:	01d2      	lsls	r2, r2, #7
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    2afa:	4313      	orrs	r3, r2
    2afc:	b2db      	uxtb	r3, r3
    2afe:	4652      	mov	r2, sl
    2b00:	7353      	strb	r3, [r2, #13]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2b02:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2b04:	8c13      	ldrh	r3, [r2, #32]
    2b06:	b29b      	uxth	r3, r3
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d1fb      	bne.n	2b04 <adc_init+0x288>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
    2b0c:	78bb      	ldrb	r3, [r7, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    2b0e:	4652      	mov	r2, sl
    2b10:	7053      	strb	r3, [r2, #1]
			config->clock_prescaler;
	adc_module->CTRLC.reg =
			resolution |
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
    2b12:	2324      	movs	r3, #36	; 0x24
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
	adc_module->CTRLC.reg =
    2b14:	5cfa      	ldrb	r2, [r7, r3]
    2b16:	00d2      	lsls	r2, r2, #3
    2b18:	7b3b      	ldrb	r3, [r7, #12]
    2b1a:	009b      	lsls	r3, r3, #2
    2b1c:	4313      	orrs	r3, r2
    2b1e:	7afa      	ldrb	r2, [r7, #11]
    2b20:	431a      	orrs	r2, r3
    2b22:	7abb      	ldrb	r3, [r7, #10]
    2b24:	005b      	lsls	r3, r3, #1
    2b26:	4313      	orrs	r3, r2
    2b28:	430b      	orrs	r3, r1
    2b2a:	4652      	mov	r2, sl
    2b2c:	8153      	strh	r3, [r2, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2b2e:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2b30:	8c13      	ldrh	r3, [r2, #32]
    2b32:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);

	while (adc_is_syncing(module_inst)) {
    2b34:	2b00      	cmp	r3, #0
    2b36:	d1fb      	bne.n	2b30 <adc_init+0x2b4>
		/* Wait for synchronization */
	}

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    2b38:	8b3b      	ldrh	r3, [r7, #24]
    2b3a:	2b00      	cmp	r3, #0
    2b3c:	d100      	bne.n	2b40 <adc_init+0x2c4>
    2b3e:	e094      	b.n	2c6a <adc_init+0x3ee>
		switch (resolution) {
    2b40:	2910      	cmp	r1, #16
    2b42:	d075      	beq.n	2c30 <adc_init+0x3b4>
    2b44:	d802      	bhi.n	2b4c <adc_init+0x2d0>
    2b46:	2900      	cmp	r1, #0
    2b48:	d054      	beq.n	2bf4 <adc_init+0x378>
    2b4a:	e08e      	b.n	2c6a <adc_init+0x3ee>
    2b4c:	2920      	cmp	r1, #32
    2b4e:	d01a      	beq.n	2b86 <adc_init+0x30a>
    2b50:	2930      	cmp	r1, #48	; 0x30
    2b52:	d000      	beq.n	2b56 <adc_init+0x2da>
    2b54:	e089      	b.n	2c6a <adc_init+0x3ee>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    2b56:	7afa      	ldrb	r2, [r7, #11]
    2b58:	2a00      	cmp	r2, #0
    2b5a:	d00a      	beq.n	2b72 <adc_init+0x2f6>
					(config->window.window_lower_value > 127 ||
    2b5c:	69fa      	ldr	r2, [r7, #28]
    2b5e:	3280      	adds	r2, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2b60:	2017      	movs	r0, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    2b62:	2aff      	cmp	r2, #255	; 0xff
    2b64:	d900      	bls.n	2b68 <adc_init+0x2ec>
    2b66:	e0fe      	b.n	2d66 <adc_init+0x4ea>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    2b68:	6a3a      	ldr	r2, [r7, #32]
    2b6a:	3280      	adds	r2, #128	; 0x80
    2b6c:	2aff      	cmp	r2, #255	; 0xff
    2b6e:	d900      	bls.n	2b72 <adc_init+0x2f6>
    2b70:	e0f9      	b.n	2d66 <adc_init+0x4ea>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2b72:	2017      	movs	r0, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    2b74:	69fa      	ldr	r2, [r7, #28]
    2b76:	2aff      	cmp	r2, #255	; 0xff
    2b78:	dd00      	ble.n	2b7c <adc_init+0x300>
    2b7a:	e0f4      	b.n	2d66 <adc_init+0x4ea>
    2b7c:	6a3a      	ldr	r2, [r7, #32]
    2b7e:	2aff      	cmp	r2, #255	; 0xff
    2b80:	dd00      	ble.n	2b84 <adc_init+0x308>
    2b82:	e0f0      	b.n	2d66 <adc_init+0x4ea>
    2b84:	e071      	b.n	2c6a <adc_init+0x3ee>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    2b86:	7afa      	ldrb	r2, [r7, #11]
    2b88:	2a00      	cmp	r2, #0
    2b8a:	d00f      	beq.n	2bac <adc_init+0x330>
					(config->window.window_lower_value > 511 ||
    2b8c:	69fa      	ldr	r2, [r7, #28]
    2b8e:	2180      	movs	r1, #128	; 0x80
    2b90:	0089      	lsls	r1, r1, #2
    2b92:	468c      	mov	ip, r1
    2b94:	4462      	add	r2, ip
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2b96:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    2b98:	4915      	ldr	r1, [pc, #84]	; (2bf0 <adc_init+0x374>)
    2b9a:	428a      	cmp	r2, r1
    2b9c:	d900      	bls.n	2ba0 <adc_init+0x324>
    2b9e:	e0e2      	b.n	2d66 <adc_init+0x4ea>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    2ba0:	6a3a      	ldr	r2, [r7, #32]
    2ba2:	4462      	add	r2, ip
    2ba4:	4912      	ldr	r1, [pc, #72]	; (2bf0 <adc_init+0x374>)
    2ba6:	428a      	cmp	r2, r1
    2ba8:	d900      	bls.n	2bac <adc_init+0x330>
    2baa:	e0dc      	b.n	2d66 <adc_init+0x4ea>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2bac:	2017      	movs	r0, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    2bae:	4a10      	ldr	r2, [pc, #64]	; (2bf0 <adc_init+0x374>)
    2bb0:	69f9      	ldr	r1, [r7, #28]
    2bb2:	4291      	cmp	r1, r2
    2bb4:	dd00      	ble.n	2bb8 <adc_init+0x33c>
    2bb6:	e0d6      	b.n	2d66 <adc_init+0x4ea>
    2bb8:	6a39      	ldr	r1, [r7, #32]
    2bba:	4291      	cmp	r1, r2
    2bbc:	dd00      	ble.n	2bc0 <adc_init+0x344>
    2bbe:	e0d2      	b.n	2d66 <adc_init+0x4ea>
    2bc0:	e053      	b.n	2c6a <adc_init+0x3ee>
    2bc2:	46c0      	nop			; (mov r8, r8)
    2bc4:	0000280d 	.word	0x0000280d
    2bc8:	40000800 	.word	0x40000800
    2bcc:	000060e8 	.word	0x000060e8
    2bd0:	40001800 	.word	0x40001800
    2bd4:	00006078 	.word	0x00006078
    2bd8:	0000431d 	.word	0x0000431d
    2bdc:	000042b5 	.word	0x000042b5
    2be0:	0000607c 	.word	0x0000607c
    2be4:	000060f4 	.word	0x000060f4
    2be8:	00004419 	.word	0x00004419
    2bec:	00005fa4 	.word	0x00005fa4
    2bf0:	000003ff 	.word	0x000003ff
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    2bf4:	7afa      	ldrb	r2, [r7, #11]
    2bf6:	2a00      	cmp	r2, #0
    2bf8:	d00f      	beq.n	2c1a <adc_init+0x39e>
					(config->window.window_lower_value > 2047 ||
    2bfa:	69fa      	ldr	r2, [r7, #28]
    2bfc:	2180      	movs	r1, #128	; 0x80
    2bfe:	0109      	lsls	r1, r1, #4
    2c00:	468c      	mov	ip, r1
    2c02:	4462      	add	r2, ip
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2c04:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    2c06:	495b      	ldr	r1, [pc, #364]	; (2d74 <adc_init+0x4f8>)
    2c08:	428a      	cmp	r2, r1
    2c0a:	d900      	bls.n	2c0e <adc_init+0x392>
    2c0c:	e0ab      	b.n	2d66 <adc_init+0x4ea>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    2c0e:	6a3a      	ldr	r2, [r7, #32]
    2c10:	4462      	add	r2, ip
    2c12:	4958      	ldr	r1, [pc, #352]	; (2d74 <adc_init+0x4f8>)
    2c14:	428a      	cmp	r2, r1
    2c16:	d900      	bls.n	2c1a <adc_init+0x39e>
    2c18:	e0a5      	b.n	2d66 <adc_init+0x4ea>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2c1a:	2017      	movs	r0, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    2c1c:	4a55      	ldr	r2, [pc, #340]	; (2d74 <adc_init+0x4f8>)
    2c1e:	69f9      	ldr	r1, [r7, #28]
    2c20:	4291      	cmp	r1, r2
    2c22:	dd00      	ble.n	2c26 <adc_init+0x3aa>
    2c24:	e09f      	b.n	2d66 <adc_init+0x4ea>
    2c26:	6a39      	ldr	r1, [r7, #32]
    2c28:	4291      	cmp	r1, r2
    2c2a:	dd00      	ble.n	2c2e <adc_init+0x3b2>
    2c2c:	e09b      	b.n	2d66 <adc_init+0x4ea>
    2c2e:	e01c      	b.n	2c6a <adc_init+0x3ee>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    2c30:	7afa      	ldrb	r2, [r7, #11]
    2c32:	2a00      	cmp	r2, #0
    2c34:	d00f      	beq.n	2c56 <adc_init+0x3da>
					(config->window.window_lower_value > 32767 ||
    2c36:	69fa      	ldr	r2, [r7, #28]
    2c38:	2180      	movs	r1, #128	; 0x80
    2c3a:	0209      	lsls	r1, r1, #8
    2c3c:	468c      	mov	ip, r1
    2c3e:	4462      	add	r2, ip
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2c40:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    2c42:	494d      	ldr	r1, [pc, #308]	; (2d78 <adc_init+0x4fc>)
    2c44:	428a      	cmp	r2, r1
    2c46:	d900      	bls.n	2c4a <adc_init+0x3ce>
    2c48:	e08d      	b.n	2d66 <adc_init+0x4ea>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    2c4a:	6a3a      	ldr	r2, [r7, #32]
    2c4c:	4462      	add	r2, ip
    2c4e:	494a      	ldr	r1, [pc, #296]	; (2d78 <adc_init+0x4fc>)
    2c50:	428a      	cmp	r2, r1
    2c52:	d900      	bls.n	2c56 <adc_init+0x3da>
    2c54:	e087      	b.n	2d66 <adc_init+0x4ea>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2c56:	2017      	movs	r0, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    2c58:	4a47      	ldr	r2, [pc, #284]	; (2d78 <adc_init+0x4fc>)
    2c5a:	69f9      	ldr	r1, [r7, #28]
    2c5c:	4291      	cmp	r1, r2
    2c5e:	dd00      	ble.n	2c62 <adc_init+0x3e6>
    2c60:	e081      	b.n	2d66 <adc_init+0x4ea>
    2c62:	6a39      	ldr	r1, [r7, #32]
    2c64:	4291      	cmp	r1, r2
    2c66:	dd00      	ble.n	2c6a <adc_init+0x3ee>
    2c68:	e07d      	b.n	2d66 <adc_init+0x4ea>
			break;
		}
	}

	/* Configure window mode */
	adc_module->CTRLC.reg |= config->window.window_mode;
    2c6a:	4652      	mov	r2, sl
    2c6c:	8952      	ldrh	r2, [r2, #10]
    2c6e:	4313      	orrs	r3, r2
    2c70:	4652      	mov	r2, sl
    2c72:	8153      	strh	r3, [r2, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2c74:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2c76:	8c13      	ldrh	r3, [r2, #32]
    2c78:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2c7a:	2b00      	cmp	r3, #0
    2c7c:	d1fb      	bne.n	2c76 <adc_init+0x3fa>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    2c7e:	8bbb      	ldrh	r3, [r7, #28]
    2c80:	4652      	mov	r2, sl
    2c82:	81d3      	strh	r3, [r2, #14]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2c84:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2c86:	8c13      	ldrh	r3, [r2, #32]
    2c88:	b29b      	uxth	r3, r3
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	d1fb      	bne.n	2c86 <adc_init+0x40a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    2c8e:	8c3b      	ldrh	r3, [r7, #32]
    2c90:	4652      	mov	r2, sl
    2c92:	8213      	strh	r3, [r2, #16]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2c94:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2c96:	8c13      	ldrh	r3, [r2, #32]
    2c98:	b29b      	uxth	r3, r3
			ADC_WINUT_WINUT_Pos;

	while (adc_is_syncing(module_inst)) {
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d1fb      	bne.n	2c96 <adc_init+0x41a>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    2c9e:	793a      	ldrb	r2, [r7, #4]
    2ca0:	88fb      	ldrh	r3, [r7, #6]
    2ca2:	4313      	orrs	r3, r2
    2ca4:	4652      	mov	r2, sl
    2ca6:	8113      	strh	r3, [r2, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2ca8:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2caa:	8c13      	ldrh	r3, [r2, #32]
    2cac:	b29b      	uxth	r3, r3
			config->negative_input |
			config->positive_input;

	while (adc_is_syncing(module_inst)) {
    2cae:	2b00      	cmp	r3, #0
    2cb0:	d1fb      	bne.n	2caa <adc_init+0x42e>
		/* Wait for synchronization */
	}

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    2cb2:	332a      	adds	r3, #42	; 0x2a
    2cb4:	5cfb      	ldrb	r3, [r7, r3]
    2cb6:	4652      	mov	r2, sl
    2cb8:	70d3      	strb	r3, [r2, #3]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    2cba:	2307      	movs	r3, #7
    2cbc:	7113      	strb	r3, [r2, #4]
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    2cbe:	331d      	adds	r3, #29
    2cc0:	5cfb      	ldrb	r3, [r7, r3]
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	d01b      	beq.n	2cfe <adc_init+0x482>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2cc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
    2cc8:	2017      	movs	r0, #23
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2cca:	4a2a      	ldr	r2, [pc, #168]	; (2d74 <adc_init+0x4f8>)
    2ccc:	4293      	cmp	r3, r2
    2cce:	d84a      	bhi.n	2d66 <adc_init+0x4ea>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    2cd0:	4652      	mov	r2, sl
    2cd2:	8253      	strh	r3, [r2, #18]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2cd4:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2cd6:	8c13      	ldrh	r3, [r2, #32]
    2cd8:	b29b      	uxth	r3, r3
					ADC_GAINCORR_GAINCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d1fb      	bne.n	2cd6 <adc_init+0x45a>
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    2cde:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    2ce0:	2380      	movs	r3, #128	; 0x80
    2ce2:	011b      	lsls	r3, r3, #4
    2ce4:	18d3      	adds	r3, r2, r3
    2ce6:	b29b      	uxth	r3, r3
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    2ce8:	2017      	movs	r0, #23
		while (adc_is_syncing(module_inst)) {
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    2cea:	4922      	ldr	r1, [pc, #136]	; (2d74 <adc_init+0x4f8>)
    2cec:	428b      	cmp	r3, r1
    2cee:	d83a      	bhi.n	2d66 <adc_init+0x4ea>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2cf0:	4653      	mov	r3, sl
    2cf2:	829a      	strh	r2, [r3, #20]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2cf4:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2cf6:	8c13      	ldrh	r3, [r2, #32]
    2cf8:	b29b      	uxth	r3, r3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d1fb      	bne.n	2cf6 <adc_init+0x47a>
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIASREFBUF(
    2cfe:	00a2      	lsls	r2, r4, #2
    2d00:	4b1e      	ldr	r3, [pc, #120]	; (2d7c <adc_init+0x500>)
    2d02:	58d3      	ldr	r3, [r2, r3]
    2d04:	491e      	ldr	r1, [pc, #120]	; (2d80 <adc_init+0x504>)
    2d06:	5d09      	ldrb	r1, [r1, r4]
    2d08:	681b      	ldr	r3, [r3, #0]
    2d0a:	40cb      	lsrs	r3, r1
			/* Wait for synchronization */
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    2d0c:	021b      	lsls	r3, r3, #8
    2d0e:	21e0      	movs	r1, #224	; 0xe0
    2d10:	00c9      	lsls	r1, r1, #3
    2d12:	4019      	ands	r1, r3
			ADC_CALIB_BIASREFBUF(
				(*(uint32_t *)_adc_biasrefbuf_addr[index] >> _adc_biasrefbuf_pos[index])
			) |
			ADC_CALIB_BIASCOMP(
    2d14:	4b1b      	ldr	r3, [pc, #108]	; (2d84 <adc_init+0x508>)
    2d16:	58d3      	ldr	r3, [r2, r3]
    2d18:	4a1b      	ldr	r2, [pc, #108]	; (2d88 <adc_init+0x50c>)
    2d1a:	5d12      	ldrb	r2, [r2, r4]
    2d1c:	681b      	ldr	r3, [r3, #0]
    2d1e:	40d3      	lsrs	r3, r2
			/* Wait for synchronization */
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    2d20:	2207      	movs	r2, #7
    2d22:	4013      	ands	r3, r2
    2d24:	430b      	orrs	r3, r1
    2d26:	4652      	mov	r2, sl
    2d28:	8593      	strh	r3, [r2, #44]	; 0x2c
			) |
			ADC_CALIB_BIASCOMP(
				(*(uint32_t *)_adc_biascomp_addr[index] >> _adc_biascomp_pos[index])
			);

	return STATUS_OK;
    2d2a:	2000      	movs	r0, #0
    2d2c:	e01b      	b.n	2d66 <adc_init+0x4ea>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    2d2e:	2017      	movs	r0, #23
    2d30:	e019      	b.n	2d66 <adc_init+0x4ea>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
    2d32:	2300      	movs	r3, #0
    2d34:	60ab      	str	r3, [r5, #8]
    2d36:	60eb      	str	r3, [r5, #12]
    2d38:	612b      	str	r3, [r5, #16]
	};

	module_inst->registered_callback_mask = 0;
    2d3a:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
    2d3c:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
    2d3e:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
    2d40:	772b      	strb	r3, [r5, #28]

	_adc_instances[instance] = module_inst;
    2d42:	00a3      	lsls	r3, r4, #2
    2d44:	4a11      	ldr	r2, [pc, #68]	; (2d8c <adc_init+0x510>)
    2d46:	509d      	str	r5, [r3, r2]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    2d48:	232a      	movs	r3, #42	; 0x2a
    2d4a:	5cfb      	ldrb	r3, [r7, r3]
    2d4c:	2b00      	cmp	r3, #0
    2d4e:	d100      	bne.n	2d52 <adc_init+0x4d6>
    2d50:	e5c5      	b.n	28de <adc_init+0x62>
    2d52:	e5ca      	b.n	28ea <adc_init+0x6e>
    2d54:	2300      	movs	r3, #0
    2d56:	9301      	str	r3, [sp, #4]
    2d58:	4698      	mov	r8, r3
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
	const uint32_t pinmapping0[] = {
    2d5a:	4b0d      	ldr	r3, [pc, #52]	; (2d90 <adc_init+0x514>)
    2d5c:	2208      	movs	r2, #8
    2d5e:	4694      	mov	ip, r2
    2d60:	4463      	add	r3, ip
    2d62:	469b      	mov	fp, r3
    2d64:	e643      	b.n	29ee <adc_init+0x172>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
    2d66:	b01d      	add	sp, #116	; 0x74
    2d68:	bc3c      	pop	{r2, r3, r4, r5}
    2d6a:	4690      	mov	r8, r2
    2d6c:	4699      	mov	r9, r3
    2d6e:	46a2      	mov	sl, r4
    2d70:	46ab      	mov	fp, r5
    2d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d74:	00000fff 	.word	0x00000fff
    2d78:	0000ffff 	.word	0x0000ffff
    2d7c:	00006104 	.word	0x00006104
    2d80:	000060e4 	.word	0x000060e4
    2d84:	000060fc 	.word	0x000060fc
    2d88:	000060f0 	.word	0x000060f0
    2d8c:	20000d84 	.word	0x20000d84
    2d90:	0000607c 	.word	0x0000607c

00002d94 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    2d94:	b538      	push	{r3, r4, r5, lr}
	struct adc_module *module = _adc_instances[instance];
    2d96:	0080      	lsls	r0, r0, #2
    2d98:	4b2c      	ldr	r3, [pc, #176]	; (2e4c <_adc_interrupt_handler+0xb8>)
    2d9a:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    2d9c:	6823      	ldr	r3, [r4, #0]
    2d9e:	799d      	ldrb	r5, [r3, #6]
    2da0:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
    2da2:	07ea      	lsls	r2, r5, #31
    2da4:	d535      	bpl.n	2e12 <_adc_interrupt_handler+0x7e>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    2da6:	7ee2      	ldrb	r2, [r4, #27]
    2da8:	07d2      	lsls	r2, r2, #31
    2daa:	d532      	bpl.n	2e12 <_adc_interrupt_handler+0x7e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    2dac:	7ea2      	ldrb	r2, [r4, #26]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    2dae:	07d2      	lsls	r2, r2, #31
    2db0:	d52f      	bpl.n	2e12 <_adc_interrupt_handler+0x7e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    2db2:	2201      	movs	r2, #1
    2db4:	719a      	strb	r2, [r3, #6]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    2db6:	6962      	ldr	r2, [r4, #20]
    2db8:	1c93      	adds	r3, r2, #2
    2dba:	6163      	str	r3, [r4, #20]
    2dbc:	6823      	ldr	r3, [r4, #0]
    2dbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2dc0:	b29b      	uxth	r3, r3
    2dc2:	8013      	strh	r3, [r2, #0]

			if (--module->remaining_conversions > 0) {
    2dc4:	8b23      	ldrh	r3, [r4, #24]
    2dc6:	3b01      	subs	r3, #1
    2dc8:	b29b      	uxth	r3, r3
    2dca:	8323      	strh	r3, [r4, #24]
    2dcc:	2b00      	cmp	r3, #0
    2dce:	d015      	beq.n	2dfc <_adc_interrupt_handler+0x68>
				if (module->software_trigger == true
    2dd0:	7f63      	ldrb	r3, [r4, #29]
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d01d      	beq.n	2e12 <_adc_interrupt_handler+0x7e>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    2dd6:	6822      	ldr	r2, [r4, #0]
    2dd8:	79d3      	ldrb	r3, [r2, #7]
    2dda:	b25b      	sxtb	r3, r3
    2ddc:	2b00      	cmp	r3, #0
    2dde:	db18      	blt.n	2e12 <_adc_interrupt_handler+0x7e>
    2de0:	8c13      	ldrh	r3, [r2, #32]
    2de2:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    2de4:	2b00      	cmp	r3, #0
    2de6:	d1fb      	bne.n	2de0 <_adc_interrupt_handler+0x4c>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2de8:	7e11      	ldrb	r1, [r2, #24]
    2dea:	3302      	adds	r3, #2
    2dec:	430b      	orrs	r3, r1
    2dee:	7613      	strb	r3, [r2, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2df0:	6822      	ldr	r2, [r4, #0]

	if (adc_module->SYNCBUSY.reg) {
    2df2:	8c13      	ldrh	r3, [r2, #32]
    2df4:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2df6:	2b00      	cmp	r3, #0
    2df8:	d1fb      	bne.n	2df2 <_adc_interrupt_handler+0x5e>
    2dfa:	e00a      	b.n	2e12 <_adc_interrupt_handler+0x7e>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    2dfc:	7f23      	ldrb	r3, [r4, #28]
    2dfe:	2b05      	cmp	r3, #5
    2e00:	d107      	bne.n	2e12 <_adc_interrupt_handler+0x7e>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    2e02:	2300      	movs	r3, #0
    2e04:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    2e06:	3301      	adds	r3, #1
    2e08:	6822      	ldr	r2, [r4, #0]
    2e0a:	7113      	strb	r3, [r2, #4]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    2e0c:	1c20      	adds	r0, r4, #0
    2e0e:	68a3      	ldr	r3, [r4, #8]
    2e10:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    2e12:	076b      	lsls	r3, r5, #29
    2e14:	d50b      	bpl.n	2e2e <_adc_interrupt_handler+0x9a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2e16:	2304      	movs	r3, #4
    2e18:	6822      	ldr	r2, [r4, #0]
    2e1a:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    2e1c:	7ee3      	ldrb	r3, [r4, #27]
    2e1e:	079b      	lsls	r3, r3, #30
    2e20:	d505      	bpl.n	2e2e <_adc_interrupt_handler+0x9a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    2e22:	7ea3      	ldrb	r3, [r4, #26]
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    2e24:	079b      	lsls	r3, r3, #30
    2e26:	d502      	bpl.n	2e2e <_adc_interrupt_handler+0x9a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    2e28:	1c20      	adds	r0, r4, #0
    2e2a:	68e3      	ldr	r3, [r4, #12]
    2e2c:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    2e2e:	07ab      	lsls	r3, r5, #30
    2e30:	d50b      	bpl.n	2e4a <_adc_interrupt_handler+0xb6>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2e32:	2302      	movs	r3, #2
    2e34:	6822      	ldr	r2, [r4, #0]
    2e36:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    2e38:	7ee3      	ldrb	r3, [r4, #27]
    2e3a:	075b      	lsls	r3, r3, #29
    2e3c:	d505      	bpl.n	2e4a <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    2e3e:	7ea3      	ldrb	r3, [r4, #26]

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    2e40:	075b      	lsls	r3, r3, #29
    2e42:	d502      	bpl.n	2e4a <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    2e44:	6923      	ldr	r3, [r4, #16]
    2e46:	1c20      	adds	r0, r4, #0
    2e48:	4798      	blx	r3
		}
	}
}
    2e4a:	bd38      	pop	{r3, r4, r5, pc}
    2e4c:	20000d84 	.word	0x20000d84

00002e50 <ADC0_Handler>:
		void ADC##n##_Handler(void) \
		{ \
			_adc_interrupt_handler(n); \
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
    2e50:	b508      	push	{r3, lr}
    2e52:	2000      	movs	r0, #0
    2e54:	4b01      	ldr	r3, [pc, #4]	; (2e5c <ADC0_Handler+0xc>)
    2e56:	4798      	blx	r3
    2e58:	bd08      	pop	{r3, pc}
    2e5a:	46c0      	nop			; (mov r8, r8)
    2e5c:	00002d95 	.word	0x00002d95

00002e60 <ADC1_Handler>:
    2e60:	b508      	push	{r3, lr}
    2e62:	2001      	movs	r0, #1
    2e64:	4b01      	ldr	r3, [pc, #4]	; (2e6c <ADC1_Handler+0xc>)
    2e66:	4798      	blx	r3
    2e68:	bd08      	pop	{r3, pc}
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	00002d95 	.word	0x00002d95

00002e70 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2e70:	b570      	push	{r4, r5, r6, lr}
    2e72:	b082      	sub	sp, #8
    2e74:	1c05      	adds	r5, r0, #0
    2e76:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    2e78:	2200      	movs	r2, #0
    2e7a:	466b      	mov	r3, sp
    2e7c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2e7e:	4c06      	ldr	r4, [pc, #24]	; (2e98 <usart_serial_getchar+0x28>)
    2e80:	1c28      	adds	r0, r5, #0
    2e82:	466b      	mov	r3, sp
    2e84:	1d99      	adds	r1, r3, #6
    2e86:	47a0      	blx	r4
    2e88:	2800      	cmp	r0, #0
    2e8a:	d1f9      	bne.n	2e80 <usart_serial_getchar+0x10>

	*c = temp;
    2e8c:	466b      	mov	r3, sp
    2e8e:	3306      	adds	r3, #6
    2e90:	881b      	ldrh	r3, [r3, #0]
    2e92:	7033      	strb	r3, [r6, #0]
}
    2e94:	b002      	add	sp, #8
    2e96:	bd70      	pop	{r4, r5, r6, pc}
    2e98:	00003e31 	.word	0x00003e31

00002e9c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    2e9c:	b570      	push	{r4, r5, r6, lr}
    2e9e:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    2ea0:	b28c      	uxth	r4, r1
    2ea2:	4e03      	ldr	r6, [pc, #12]	; (2eb0 <usart_serial_putchar+0x14>)
    2ea4:	1c28      	adds	r0, r5, #0
    2ea6:	1c21      	adds	r1, r4, #0
    2ea8:	47b0      	blx	r6
    2eaa:	2800      	cmp	r0, #0
    2eac:	d1fa      	bne.n	2ea4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    2eae:	bd70      	pop	{r4, r5, r6, pc}
    2eb0:	00003e05 	.word	0x00003e05

00002eb4 <configure_console>:
#include <asf.h>

static struct usart_module cdc_uart_module;

void configure_console(void)
{
    2eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eb6:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2eb8:	2380      	movs	r3, #128	; 0x80
    2eba:	05db      	lsls	r3, r3, #23
    2ebc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2ebe:	2300      	movs	r3, #0
    2ec0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2ec2:	22ff      	movs	r2, #255	; 0xff
    2ec4:	4669      	mov	r1, sp
    2ec6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2ec8:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2eca:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2ecc:	2401      	movs	r4, #1
    2ece:	222c      	movs	r2, #44	; 0x2c
    2ed0:	548c      	strb	r4, [r1, r2]
	config->transmitter_enable = true;
    2ed2:	3201      	adds	r2, #1
    2ed4:	548c      	strb	r4, [r1, r2]
	config->clock_polarity_inverted = false;
    2ed6:	3201      	adds	r2, #1
    2ed8:	548b      	strb	r3, [r1, r2]
	config->use_external_clock = false;
    2eda:	3201      	adds	r2, #1
    2edc:	548b      	strb	r3, [r1, r2]
	config->ext_clock_freq   = 0;
    2ede:	930c      	str	r3, [sp, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2ee0:	3205      	adds	r2, #5
    2ee2:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
    2ee4:	3201      	adds	r2, #1
    2ee6:	548b      	strb	r3, [r1, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2ee8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2eea:	2200      	movs	r2, #0
    2eec:	820b      	strh	r3, [r1, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2eee:	76ca      	strb	r2, [r1, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    2ef0:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    2ef2:	840b      	strh	r3, [r1, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    2ef4:	844b      	strh	r3, [r1, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2ef6:	760a      	strb	r2, [r1, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2ef8:	2324      	movs	r3, #36	; 0x24
    2efa:	54ca      	strb	r2, [r1, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2efc:	764a      	strb	r2, [r1, #25]
	config->receive_pulse_length                    = 19;
    2efe:	2313      	movs	r3, #19
    2f00:	768b      	strb	r3, [r1, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2f02:	3313      	adds	r3, #19
    2f04:	54ca      	strb	r2, [r1, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    2f06:	3b01      	subs	r3, #1
    2f08:	54ca      	strb	r2, [r1, r3]
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2f0a:	23c4      	movs	r3, #196	; 0xc4
    2f0c:	039b      	lsls	r3, r3, #14
    2f0e:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2f10:	2301      	movs	r3, #1
    2f12:	425b      	negs	r3, r3
    2f14:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2f16:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2f18:	4b18      	ldr	r3, [pc, #96]	; (2f7c <configure_console+0xc8>)
    2f1a:	9310      	str	r3, [sp, #64]	; 0x40
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2f1c:	4b18      	ldr	r3, [pc, #96]	; (2f80 <configure_console+0xcc>)
    2f1e:	9311      	str	r3, [sp, #68]	; 0x44
	usart_conf.baudrate    = EDBG_CDC_SERCOM_BAUDRATE;
    2f20:	2396      	movs	r3, #150	; 0x96
    2f22:	021b      	lsls	r3, r3, #8
    2f24:	930a      	str	r3, [sp, #40]	; 0x28
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2f26:	4d17      	ldr	r5, [pc, #92]	; (2f84 <configure_console+0xd0>)
    2f28:	4b17      	ldr	r3, [pc, #92]	; (2f88 <configure_console+0xd4>)
    2f2a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2f2c:	4a17      	ldr	r2, [pc, #92]	; (2f8c <configure_console+0xd8>)
    2f2e:	4b18      	ldr	r3, [pc, #96]	; (2f90 <configure_console+0xdc>)
    2f30:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2f32:	4a18      	ldr	r2, [pc, #96]	; (2f94 <configure_console+0xe0>)
    2f34:	4b18      	ldr	r3, [pc, #96]	; (2f98 <configure_console+0xe4>)
    2f36:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    2f38:	1c28      	adds	r0, r5, #0
    2f3a:	4918      	ldr	r1, [pc, #96]	; (2f9c <configure_console+0xe8>)
    2f3c:	466a      	mov	r2, sp
    2f3e:	4b18      	ldr	r3, [pc, #96]	; (2fa0 <configure_console+0xec>)
    2f40:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2f42:	4f18      	ldr	r7, [pc, #96]	; (2fa4 <configure_console+0xf0>)
    2f44:	683b      	ldr	r3, [r7, #0]
    2f46:	6898      	ldr	r0, [r3, #8]
    2f48:	2100      	movs	r1, #0
    2f4a:	4e17      	ldr	r6, [pc, #92]	; (2fa8 <configure_console+0xf4>)
    2f4c:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2f4e:	683b      	ldr	r3, [r7, #0]
    2f50:	6858      	ldr	r0, [r3, #4]
    2f52:	2100      	movs	r1, #0
    2f54:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2f56:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2f58:	1c30      	adds	r0, r6, #0
    2f5a:	4b14      	ldr	r3, [pc, #80]	; (2fac <configure_console+0xf8>)
    2f5c:	4798      	blx	r3
    2f5e:	231f      	movs	r3, #31
    2f60:	4018      	ands	r0, r3
    2f62:	4084      	lsls	r4, r0
    2f64:	4b12      	ldr	r3, [pc, #72]	; (2fb0 <configure_console+0xfc>)
    2f66:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2f68:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2f6a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d1fc      	bne.n	2f6a <configure_console+0xb6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2f70:	6832      	ldr	r2, [r6, #0]
    2f72:	3302      	adds	r3, #2
    2f74:	4313      	orrs	r3, r2
    2f76:	6033      	str	r3, [r6, #0]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
	usart_enable(&cdc_uart_module);
}
    2f78:	b013      	add	sp, #76	; 0x4c
    2f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f7c:	002a0003 	.word	0x002a0003
    2f80:	002b0003 	.word	0x002b0003
    2f84:	20000ba4 	.word	0x20000ba4
    2f88:	20000e40 	.word	0x20000e40
    2f8c:	00002e9d 	.word	0x00002e9d
    2f90:	20000e3c 	.word	0x20000e3c
    2f94:	00002e71 	.word	0x00002e71
    2f98:	20000e38 	.word	0x20000e38
    2f9c:	42001400 	.word	0x42001400
    2fa0:	00003a75 	.word	0x00003a75
    2fa4:	2000006c 	.word	0x2000006c
    2fa8:	00005025 	.word	0x00005025
    2fac:	000039e9 	.word	0x000039e9
    2fb0:	e000e100 	.word	0xe000e100

00002fb4 <createJoystick>:
   static struct Joystick JoystickPool[MAX_JOYSTICKS];
   static uint8_t numberOfJoysticks = 0;
  
  JoystickPtr createJoystick(enum adc_positive_input channel){
	  JoystickPtr joystick = NULL;
	  if(numberOfJoysticks < MAX_JOYSTICKS){
    2fb4:	4b0a      	ldr	r3, [pc, #40]	; (2fe0 <createJoystick+0x2c>)
    2fb6:	781b      	ldrb	r3, [r3, #0]
    2fb8:	2b03      	cmp	r3, #3
    2fba:	d80d      	bhi.n	2fd8 <createJoystick+0x24>
		  joystick = &JoystickPool[numberOfJoysticks++];
    2fbc:	1c59      	adds	r1, r3, #1
    2fbe:	4a08      	ldr	r2, [pc, #32]	; (2fe0 <createJoystick+0x2c>)
    2fc0:	7011      	strb	r1, [r2, #0]
    2fc2:	4908      	ldr	r1, [pc, #32]	; (2fe4 <createJoystick+0x30>)
    2fc4:	009b      	lsls	r3, r3, #2
    2fc6:	18ca      	adds	r2, r1, r3
		  //initialize the object
		  joystick->channel = channel;
    2fc8:	5458      	strb	r0, [r3, r1]
		  joystick->direction = FORWARD;
    2fca:	2301      	movs	r3, #1
    2fcc:	70d3      	strb	r3, [r2, #3]
		  joystick->filtered = 0;
    2fce:	2300      	movs	r3, #0
    2fd0:	7093      	strb	r3, [r2, #2]
		  joystick->raw = CENTER_VAL;
    2fd2:	3380      	adds	r3, #128	; 0x80
    2fd4:	7053      	strb	r3, [r2, #1]
    2fd6:	e000      	b.n	2fda <createJoystick+0x26>
   #define MAX_JOYSTICKS 4 //arbitrary limit -- I have seen game controllers with 4 joysticks
   static struct Joystick JoystickPool[MAX_JOYSTICKS];
   static uint8_t numberOfJoysticks = 0;
  
  JoystickPtr createJoystick(enum adc_positive_input channel){
	  JoystickPtr joystick = NULL;
    2fd8:	2200      	movs	r2, #0
		  joystick->filtered = 0;
		  joystick->raw = CENTER_VAL;
	  }
	  
	  return joystick;
  }
    2fda:	1c10      	adds	r0, r2, #0
    2fdc:	4770      	bx	lr
    2fde:	46c0      	nop			; (mov r8, r8)
    2fe0:	20000bd8 	.word	0x20000bd8
    2fe4:	20000bdc 	.word	0x20000bdc

00002fe8 <getJoystickValue>:
  void deleteJoystick(JoystickPtr joystickInstance){
	  //to do -- shouldn't really ever need to delete a joystick...
  }
  
   uint8_t getJoystickValue( JoystickPtr joystickInstance){
	   return joystickInstance->filtered;
    2fe8:	7880      	ldrb	r0, [r0, #2]
   }
    2fea:	4770      	bx	lr

00002fec <getJoystickDirection>:
   
   bool getJoystickDirection(JoystickPtr joystickInstance){
	   return joystickInstance->direction;
    2fec:	78c0      	ldrb	r0, [r0, #3]
   }
    2fee:	4770      	bx	lr

00002ff0 <initAdc>:
   
   void initAdc(void)
    {
    2ff0:	b530      	push	{r4, r5, lr}
    2ff2:	b08d      	sub	sp, #52	; 0x34
	    struct adc_config config_adc;
	    adc_get_config_defaults(&config_adc);
    2ff4:	ac01      	add	r4, sp, #4
    2ff6:	1c20      	adds	r0, r4, #0
    2ff8:	4b15      	ldr	r3, [pc, #84]	; (3050 <initAdc+0x60>)
    2ffa:	4798      	blx	r3
	    
	    config_adc.reference = ADC_REFERENCE_INTVCC2; //ref = VDDANA
    2ffc:	2305      	movs	r3, #5
    2ffe:	7063      	strb	r3, [r4, #1]
	    config_adc.resolution = ADC_RESOLUTION_8BIT;
    3000:	332b      	adds	r3, #43	; 0x2b
    3002:	70e3      	strb	r3, [r4, #3]
	    config_adc.positive_input = ADC_POSITIVE_INPUT_PIN10;
    3004:	3b26      	subs	r3, #38	; 0x26
    3006:	7123      	strb	r3, [r4, #4]

	    adc_init(&adc_instance, ADC0, &config_adc);
    3008:	4d12      	ldr	r5, [pc, #72]	; (3054 <initAdc+0x64>)
    300a:	1c28      	adds	r0, r5, #0
    300c:	4912      	ldr	r1, [pc, #72]	; (3058 <initAdc+0x68>)
    300e:	1c22      	adds	r2, r4, #0
    3010:	4b12      	ldr	r3, [pc, #72]	; (305c <initAdc+0x6c>)
    3012:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3014:	682c      	ldr	r4, [r5, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
    3016:	8c23      	ldrh	r3, [r4, #32]
    3018:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    301a:	2b00      	cmp	r3, #0
    301c:	d1fb      	bne.n	3016 <initAdc+0x26>
	}

#if ADC_CALLBACK_MODE == true
#   if (ADC_INST_NUM > 1)
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
    301e:	1c20      	adds	r0, r4, #0
    3020:	4b0f      	ldr	r3, [pc, #60]	; (3060 <initAdc+0x70>)
    3022:	4798      	blx	r3
{
	static uint8_t adc_interrupt_vectors[ADC_INST_NUM] = {
		MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)adc_interrupt_vectors[inst_num];
    3024:	4b0f      	ldr	r3, [pc, #60]	; (3064 <initAdc+0x74>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3026:	5c1b      	ldrb	r3, [r3, r0]
    3028:	221f      	movs	r2, #31
    302a:	4013      	ands	r3, r2
    302c:	3a1e      	subs	r2, #30
    302e:	409a      	lsls	r2, r3
    3030:	1c13      	adds	r3, r2, #0
    3032:	4a0d      	ldr	r2, [pc, #52]	; (3068 <initAdc+0x78>)
    3034:	6013      	str	r3, [r2, #0]
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3036:	7822      	ldrb	r2, [r4, #0]
    3038:	2302      	movs	r3, #2
    303a:	4313      	orrs	r3, r2
    303c:	7023      	strb	r3, [r4, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    303e:	4b05      	ldr	r3, [pc, #20]	; (3054 <initAdc+0x64>)
    3040:	681a      	ldr	r2, [r3, #0]

	if (adc_module->SYNCBUSY.reg) {
    3042:	8c13      	ldrh	r3, [r2, #32]
    3044:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    3046:	2b00      	cmp	r3, #0
    3048:	d1fb      	bne.n	3042 <initAdc+0x52>
	    adc_enable(&adc_instance);
    }
    304a:	b00d      	add	sp, #52	; 0x34
    304c:	bd30      	pop	{r4, r5, pc}
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	00002839 	.word	0x00002839
    3054:	20000d8c 	.word	0x20000d8c
    3058:	42004400 	.word	0x42004400
    305c:	0000287d 	.word	0x0000287d
    3060:	0000280d 	.word	0x0000280d
    3064:	0000610c 	.word	0x0000610c
    3068:	e000e100 	.word	0xe000e100

0000306c <joystick_filter>:
/************************************************************************/
/*			Private Functions                                           */
/************************************************************************/

  void joystick_filter(JoystickPtr joystickInstance){
	  if (joystickInstance->raw > FORWARD_VAL){
    306c:	7843      	ldrb	r3, [r0, #1]
    306e:	2b8a      	cmp	r3, #138	; 0x8a
    3070:	d904      	bls.n	307c <joystick_filter+0x10>
		  joystickInstance->filtered = joystickInstance->raw - FORWARD_VAL; 
    3072:	3b76      	subs	r3, #118	; 0x76
    3074:	7083      	strb	r3, [r0, #2]
		  joystickInstance->direction = FORWARD;
    3076:	2301      	movs	r3, #1
    3078:	70c3      	strb	r3, [r0, #3]
    307a:	e00b      	b.n	3094 <joystick_filter+0x28>
	  }
	  else if (joystickInstance->raw < BACKWARD_VAL){
    307c:	2b75      	cmp	r3, #117	; 0x75
    307e:	d805      	bhi.n	308c <joystick_filter+0x20>
		  joystickInstance->filtered = BACKWARD_VAL - joystickInstance->raw;
    3080:	2276      	movs	r2, #118	; 0x76
    3082:	1ad3      	subs	r3, r2, r3
    3084:	7083      	strb	r3, [r0, #2]
		  joystickInstance->direction = BACKWARD;
    3086:	2300      	movs	r3, #0
    3088:	70c3      	strb	r3, [r0, #3]
    308a:	e003      	b.n	3094 <joystick_filter+0x28>
	  }
	  else{
		  joystickInstance->filtered = 0;
    308c:	2300      	movs	r3, #0
    308e:	7083      	strb	r3, [r0, #2]
		  joystickInstance->direction = FORWARD;
    3090:	3301      	adds	r3, #1
    3092:	70c3      	strb	r3, [r0, #3]
	  }
	  
	  //make sure it doesn't overflow...
	  if(joystickInstance->filtered > MAX_VAL){
    3094:	7883      	ldrb	r3, [r0, #2]
    3096:	2b7f      	cmp	r3, #127	; 0x7f
    3098:	d901      	bls.n	309e <joystick_filter+0x32>
		  joystickInstance->filtered = MAX_VAL;
    309a:	237f      	movs	r3, #127	; 0x7f
    309c:	7083      	strb	r3, [r0, #2]
	  }
	  
	  joystickInstance->filtered = 2*joystickInstance->filtered; //multiply by 2 since we only get half the resolution
    309e:	7883      	ldrb	r3, [r0, #2]
    30a0:	005b      	lsls	r3, r3, #1
    30a2:	7083      	strb	r3, [r0, #2]
  }
    30a4:	4770      	bx	lr
    30a6:	46c0      	nop			; (mov r8, r8)

000030a8 <joystick_read>:

	    adc_init(&adc_instance, ADC0, &config_adc);
	    adc_enable(&adc_instance);
    }
	
	 void joystick_read(JoystickPtr joystickInstance){
    30a8:	b570      	push	{r4, r5, r6, lr}
		 uint16_t result;
		 adc_set_positive_input(&adc_instance, joystickInstance->channel);
    30aa:	7802      	ldrb	r2, [r0, #0]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    30ac:	4b20      	ldr	r3, [pc, #128]	; (3130 <joystick_read+0x88>)
    30ae:	6819      	ldr	r1, [r3, #0]
    30b0:	8c0b      	ldrh	r3, [r1, #32]
    30b2:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    30b4:	2b00      	cmp	r3, #0
    30b6:	d1fb      	bne.n	30b0 <joystick_read+0x8>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    30b8:	890b      	ldrh	r3, [r1, #8]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    30ba:	241f      	movs	r4, #31
    30bc:	43a3      	bics	r3, r4
    30be:	4313      	orrs	r3, r2
    30c0:	810b      	strh	r3, [r1, #8]
    30c2:	8c0b      	ldrh	r3, [r1, #32]
    30c4:	b29b      	uxth	r3, r3
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    30c6:	2b00      	cmp	r3, #0
    30c8:	d1fb      	bne.n	30c2 <joystick_read+0x1a>
    30ca:	8c0b      	ldrh	r3, [r1, #32]
    30cc:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    30ce:	2b00      	cmp	r3, #0
    30d0:	d1fb      	bne.n	30ca <joystick_read+0x22>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    30d2:	7e0a      	ldrb	r2, [r1, #24]
    30d4:	3302      	adds	r3, #2
    30d6:	4313      	orrs	r3, r2
    30d8:	760b      	strb	r3, [r1, #24]
    30da:	8c0b      	ldrh	r3, [r1, #32]
    30dc:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    30de:	2b00      	cmp	r3, #0
    30e0:	d1fb      	bne.n	30da <joystick_read+0x32>
	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    30e2:	2401      	movs	r4, #1
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    30e4:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    30e6:	2502      	movs	r5, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    30e8:	798b      	ldrb	r3, [r1, #6]
    30ea:	b2db      	uxtb	r3, r3

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    30ec:	1c22      	adds	r2, r4, #0
    30ee:	401a      	ands	r2, r3
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    30f0:	421e      	tst	r6, r3
    30f2:	d000      	beq.n	30f6 <joystick_read+0x4e>
		status_flags |= ADC_STATUS_WINDOW;
    30f4:	432a      	orrs	r2, r5
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    30f6:	421d      	tst	r5, r3
    30f8:	d000      	beq.n	30fc <joystick_read+0x54>
		status_flags |= ADC_STATUS_OVERRUN;
    30fa:	4332      	orrs	r2, r6
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    30fc:	4214      	tst	r4, r2
    30fe:	d0f3      	beq.n	30e8 <joystick_read+0x40>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    3100:	8c8c      	ldrh	r4, [r1, #36]	; 0x24
    3102:	b2a4      	uxth	r4, r4
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    3104:	2301      	movs	r3, #1
    3106:	718b      	strb	r3, [r1, #6]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    3108:	798a      	ldrb	r2, [r1, #6]
    310a:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    310c:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    310e:	0755      	lsls	r5, r2, #29
    3110:	d501      	bpl.n	3116 <joystick_read+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    3112:	2502      	movs	r5, #2
    3114:	432b      	orrs	r3, r5
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3116:	0792      	lsls	r2, r2, #30
    3118:	d501      	bpl.n	311e <joystick_read+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    311a:	2204      	movs	r2, #4
    311c:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    311e:	075b      	lsls	r3, r3, #29
    3120:	d501      	bpl.n	3126 <joystick_read+0x7e>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    3122:	2302      	movs	r3, #2
    3124:	718b      	strb	r3, [r1, #6]
		 adc_start_conversion(&adc_instance);
		 do {
			 /* Wait for conversion to be done and read out result */
		 } while (adc_read(&adc_instance, &result) == STATUS_BUSY);
		 joystickInstance->raw = (uint8_t) result;
    3126:	7044      	strb	r4, [r0, #1]
		 
		 joystick_filter(joystickInstance);
    3128:	4b02      	ldr	r3, [pc, #8]	; (3134 <joystick_read+0x8c>)
    312a:	4798      	blx	r3
		 
	 }
    312c:	bd70      	pop	{r4, r5, r6, pc}
    312e:	46c0      	nop			; (mov r8, r8)
    3130:	20000d8c 	.word	0x20000d8c
    3134:	0000306d 	.word	0x0000306d

00003138 <remoteControl_init>:
 
 extern bool timer_flag;  //placeholder -- this should be set in the timer callback
 uint8_t val = 0;
 bool dir = 0;

 void remoteControl_init(void){
    3138:	b508      	push	{r3, lr}
	delay_init();           //phy.c requires this...
    313a:	4b09      	ldr	r3, [pc, #36]	; (3160 <remoteControl_init+0x28>)
    313c:	4798      	blx	r3
	SYS_Init(); //LWMesh network stack initialization
    313e:	4b09      	ldr	r3, [pc, #36]	; (3164 <remoteControl_init+0x2c>)
    3140:	4798      	blx	r3
	initAdc();
    3142:	4b09      	ldr	r3, [pc, #36]	; (3168 <remoteControl_init+0x30>)
    3144:	4798      	blx	r3
	radioInit();  //radio initialization
    3146:	4b09      	ldr	r3, [pc, #36]	; (316c <remoteControl_init+0x34>)
    3148:	4798      	blx	r3
	configure_tc();
    314a:	4b09      	ldr	r3, [pc, #36]	; (3170 <remoteControl_init+0x38>)
    314c:	4798      	blx	r3
	configure_tc_callbacks();
    314e:	4b09      	ldr	r3, [pc, #36]	; (3174 <remoteControl_init+0x3c>)
    3150:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    3152:	2201      	movs	r2, #1
    3154:	4b08      	ldr	r3, [pc, #32]	; (3178 <remoteControl_init+0x40>)
    3156:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3158:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    315c:	b662      	cpsie	i

	system_interrupt_enable_global();

 }
    315e:	bd08      	pop	{r3, pc}
    3160:	000027a5 	.word	0x000027a5
    3164:	00001e99 	.word	0x00001e99
    3168:	00002ff1 	.word	0x00002ff1
    316c:	000007b5 	.word	0x000007b5
    3170:	0000318d 	.word	0x0000318d
    3174:	00003201 	.word	0x00003201
    3178:	20000008 	.word	0x20000008

0000317c <remoteControl_TaskHandler>:

 void remoteControl_TaskHandler(void){
	 
	
 }
    317c:	4770      	bx	lr
    317e:	46c0      	nop			; (mov r8, r8)

00003180 <tc_callback_overflow>:
struct tc_module tc_instance;
bool timer_flag = false;

static void tc_callback_overflow(struct tc_module *const module_inst)
{
	timer_flag = true;
    3180:	2201      	movs	r2, #1
    3182:	4b01      	ldr	r3, [pc, #4]	; (3188 <tc_callback_overflow+0x8>)
    3184:	701a      	strb	r2, [r3, #0]
	//port_pin_toggle_output_level(LED_0_PIN);
}
    3186:	4770      	bx	lr
    3188:	20000bec 	.word	0x20000bec

0000318c <configure_tc>:

void configure_tc(void)
{
    318c:	b510      	push	{r4, lr}
    318e:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3190:	2300      	movs	r3, #0
    3192:	466a      	mov	r2, sp
    3194:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3196:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    3198:	7053      	strb	r3, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
    319a:	7093      	strb	r3, [r2, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    319c:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    319e:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    31a0:	7293      	strb	r3, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    31a2:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    31a4:	7313      	strb	r3, [r2, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    31a6:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    31a8:	7353      	strb	r3, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    31aa:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    31ac:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    31ae:	9306      	str	r3, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    31b0:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    31b2:	9308      	str	r3, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    31b4:	9309      	str	r3, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    31b6:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    31b8:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    31ba:	8593      	strh	r3, [r2, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    31bc:	3334      	adds	r3, #52	; 0x34
    31be:	2200      	movs	r2, #0
    31c0:	4669      	mov	r1, sp
    31c2:	54ca      	strb	r2, [r1, r3]
	struct tc_config config_tc;
	
	tc_get_config_defaults(&config_tc);
	config_tc.clock_source    = GCLK_GENERATOR_3;
    31c4:	3b31      	subs	r3, #49	; 0x31
    31c6:	466a      	mov	r2, sp
    31c8:	700b      	strb	r3, [r1, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
    31ca:	23e0      	movs	r3, #224	; 0xe0
    31cc:	00db      	lsls	r3, r3, #3
    31ce:	808b      	strh	r3, [r1, #4]
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
    31d0:	2304      	movs	r3, #4
    31d2:	70cb      	strb	r3, [r1, #3]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_FREQ;
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;
	
	tc_init(&tc_instance, TC4, &config_tc);
    31d4:	4c07      	ldr	r4, [pc, #28]	; (31f4 <configure_tc+0x68>)
    31d6:	1c20      	adds	r0, r4, #0
    31d8:	4907      	ldr	r1, [pc, #28]	; (31f8 <configure_tc+0x6c>)
    31da:	4b08      	ldr	r3, [pc, #32]	; (31fc <configure_tc+0x70>)
    31dc:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    31de:	6822      	ldr	r2, [r4, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    31e0:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    31e2:	2b00      	cmp	r3, #0
    31e4:	d1fc      	bne.n	31e0 <configure_tc+0x54>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    31e6:	6811      	ldr	r1, [r2, #0]
    31e8:	3302      	adds	r3, #2
    31ea:	430b      	orrs	r3, r1
    31ec:	6013      	str	r3, [r2, #0]
	tc_enable(&tc_instance);

}
    31ee:	b00e      	add	sp, #56	; 0x38
    31f0:	bd10      	pop	{r4, pc}
    31f2:	46c0      	nop			; (mov r8, r8)
    31f4:	20000dac 	.word	0x20000dac
    31f8:	42004000 	.word	0x42004000
    31fc:	00004591 	.word	0x00004591

00003200 <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
    3200:	b510      	push	{r4, lr}

	tc_register_callback(&tc_instance, tc_callback_overflow, TC_CALLBACK_OVERFLOW);
    3202:	4c0d      	ldr	r4, [pc, #52]	; (3238 <configure_tc_callbacks+0x38>)
    3204:	1c20      	adds	r0, r4, #0
    3206:	490d      	ldr	r1, [pc, #52]	; (323c <configure_tc_callbacks+0x3c>)
    3208:	2200      	movs	r2, #0
    320a:	4b0d      	ldr	r3, [pc, #52]	; (3240 <configure_tc_callbacks+0x40>)
    320c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    320e:	6820      	ldr	r0, [r4, #0]
    3210:	4b0c      	ldr	r3, [pc, #48]	; (3244 <configure_tc_callbacks+0x44>)
    3212:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3214:	4b0c      	ldr	r3, [pc, #48]	; (3248 <configure_tc_callbacks+0x48>)
    3216:	5c1b      	ldrb	r3, [r3, r0]
    3218:	221f      	movs	r2, #31
    321a:	4013      	ands	r3, r2
    321c:	3a1e      	subs	r2, #30
    321e:	1c11      	adds	r1, r2, #0
    3220:	4099      	lsls	r1, r3
    3222:	1c0b      	adds	r3, r1, #0
    3224:	4909      	ldr	r1, [pc, #36]	; (324c <configure_tc_callbacks+0x4c>)
    3226:	600b      	str	r3, [r1, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    3228:	7e61      	ldrb	r1, [r4, #25]
    322a:	2301      	movs	r3, #1
    322c:	430b      	orrs	r3, r1
    322e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3230:	6823      	ldr	r3, [r4, #0]
    3232:	725a      	strb	r2, [r3, #9]

	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);

}
    3234:	bd10      	pop	{r4, pc}
    3236:	46c0      	nop			; (mov r8, r8)
    3238:	20000dac 	.word	0x20000dac
    323c:	00003181 	.word	0x00003181
    3240:	00004475 	.word	0x00004475
    3244:	00004555 	.word	0x00004555
    3248:	00006110 	.word	0x00006110
    324c:	e000e100 	.word	0xe000e100

00003250 <configure_pins>:
#include "UserIO.h"

/*Configures PORT for LED0*/
struct port_config pin;

void configure_pins(void){
    3250:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3252:	4c0a      	ldr	r4, [pc, #40]	; (327c <configure_pins+0x2c>)
    3254:	2301      	movs	r3, #1
    3256:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    3258:	2600      	movs	r6, #0
    325a:	70a6      	strb	r6, [r4, #2]
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
    325c:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin);
    325e:	200f      	movs	r0, #15
    3260:	1c21      	adds	r1, r4, #0
    3262:	4d07      	ldr	r5, [pc, #28]	; (3280 <configure_pins+0x30>)
    3264:	47a8      	blx	r5
	
	pin.direction = PORT_PIN_DIR_INPUT;
    3266:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(BUTTON_0_PIN, &pin);
    3268:	201c      	movs	r0, #28
    326a:	1c21      	adds	r1, r4, #0
    326c:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    326e:	2280      	movs	r2, #128	; 0x80
    3270:	0212      	lsls	r2, r2, #8
    3272:	2382      	movs	r3, #130	; 0x82
    3274:	05db      	lsls	r3, r3, #23
    3276:	619a      	str	r2, [r3, #24]

	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
}
    3278:	bd70      	pop	{r4, r5, r6, pc}
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	20000dc8 	.word	0x20000dc8
    3280:	00003581 	.word	0x00003581

00003284 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3284:	b5f0      	push	{r4, r5, r6, r7, lr}
    3286:	464f      	mov	r7, r9
    3288:	4646      	mov	r6, r8
    328a:	b4c0      	push	{r6, r7}
    328c:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    328e:	ac01      	add	r4, sp, #4
    3290:	2701      	movs	r7, #1
    3292:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    3294:	2300      	movs	r3, #0
    3296:	4698      	mov	r8, r3
    3298:	70a3      	strb	r3, [r4, #2]
	 */
		struct port_config pin_conf;
		port_get_config_defaults(&pin_conf);

		/* Configure LEDs as outputs, turn them off */
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    329a:	7027      	strb	r7, [r4, #0]
		port_pin_set_config(LED_0_PIN, &pin_conf);
    329c:	200f      	movs	r0, #15
    329e:	1c21      	adds	r1, r4, #0
    32a0:	4d1c      	ldr	r5, [pc, #112]	; (3314 <system_board_init+0x90>)
    32a2:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    32a4:	2682      	movs	r6, #130	; 0x82
    32a6:	05f6      	lsls	r6, r6, #23
    32a8:	2380      	movs	r3, #128	; 0x80
    32aa:	021b      	lsls	r3, r3, #8
    32ac:	4699      	mov	r9, r3
    32ae:	61b3      	str	r3, [r6, #24]
		port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

		/* Set buttons as inputs */
		pin_conf.direction  = PORT_PIN_DIR_INPUT;
    32b0:	4643      	mov	r3, r8
    32b2:	7023      	strb	r3, [r4, #0]
		pin_conf.input_pull = PORT_PIN_PULL_UP;
    32b4:	7067      	strb	r7, [r4, #1]
		port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    32b6:	201c      	movs	r0, #28
    32b8:	1c21      	adds	r1, r4, #0
    32ba:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    32bc:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    32be:	4643      	mov	r3, r8
    32c0:	70a3      	strb	r3, [r4, #2]
		
		#ifdef CONF_BOARD_AT86RFX
		port_get_config_defaults(&pin_conf);
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    32c2:	7027      	strb	r7, [r4, #0]
		port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    32c4:	2013      	movs	r0, #19
    32c6:	1c21      	adds	r1, r4, #0
    32c8:	47a8      	blx	r5
		port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    32ca:	2012      	movs	r0, #18
    32cc:	1c21      	adds	r1, r4, #0
    32ce:	47a8      	blx	r5
		port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    32d0:	2011      	movs	r0, #17
    32d2:	1c21      	adds	r1, r4, #0
    32d4:	47a8      	blx	r5
		port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    32d6:	202c      	movs	r0, #44	; 0x2c
    32d8:	1c21      	adds	r1, r4, #0
    32da:	47a8      	blx	r5
		port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    32dc:	202f      	movs	r0, #47	; 0x2f
    32de:	1c21      	adds	r1, r4, #0
    32e0:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    32e2:	2380      	movs	r3, #128	; 0x80
    32e4:	031b      	lsls	r3, r3, #12
    32e6:	61b3      	str	r3, [r6, #24]
    32e8:	2380      	movs	r3, #128	; 0x80
    32ea:	02db      	lsls	r3, r3, #11
    32ec:	61b3      	str	r3, [r6, #24]
    32ee:	2380      	movs	r3, #128	; 0x80
    32f0:	029b      	lsls	r3, r3, #10
    32f2:	61b3      	str	r3, [r6, #24]
    32f4:	3680      	adds	r6, #128	; 0x80
    32f6:	2380      	movs	r3, #128	; 0x80
    32f8:	015b      	lsls	r3, r3, #5
    32fa:	61b3      	str	r3, [r6, #24]
    32fc:	464b      	mov	r3, r9
    32fe:	61b3      	str	r3, [r6, #24]
		port_pin_set_output_level(AT86RFX_SPI_SCK, true);
		port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
		port_pin_set_output_level(AT86RFX_SPI_CS, true);
		port_pin_set_output_level(AT86RFX_RST_PIN, true);
		port_pin_set_output_level(AT86RFX_SLP_PIN, true);
		pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3300:	4643      	mov	r3, r8
    3302:	7023      	strb	r3, [r4, #0]
		port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    3304:	2010      	movs	r0, #16
    3306:	1c21      	adds	r1, r4, #0
    3308:	47a8      	blx	r5
		#endif
    330a:	b003      	add	sp, #12
    330c:	bc0c      	pop	{r2, r3}
    330e:	4690      	mov	r8, r2
    3310:	4699      	mov	r9, r3
    3312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3314:	00003581 	.word	0x00003581

00003318 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3318:	4b0c      	ldr	r3, [pc, #48]	; (334c <cpu_irq_enter_critical+0x34>)
    331a:	681b      	ldr	r3, [r3, #0]
    331c:	2b00      	cmp	r3, #0
    331e:	d110      	bne.n	3342 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3320:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3324:	2b00      	cmp	r3, #0
    3326:	d109      	bne.n	333c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3328:	b672      	cpsid	i
    332a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    332e:	2200      	movs	r2, #0
    3330:	4b07      	ldr	r3, [pc, #28]	; (3350 <cpu_irq_enter_critical+0x38>)
    3332:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3334:	3201      	adds	r2, #1
    3336:	4b07      	ldr	r3, [pc, #28]	; (3354 <cpu_irq_enter_critical+0x3c>)
    3338:	701a      	strb	r2, [r3, #0]
    333a:	e002      	b.n	3342 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    333c:	2200      	movs	r2, #0
    333e:	4b05      	ldr	r3, [pc, #20]	; (3354 <cpu_irq_enter_critical+0x3c>)
    3340:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3342:	4a02      	ldr	r2, [pc, #8]	; (334c <cpu_irq_enter_critical+0x34>)
    3344:	6813      	ldr	r3, [r2, #0]
    3346:	3301      	adds	r3, #1
    3348:	6013      	str	r3, [r2, #0]
}
    334a:	4770      	bx	lr
    334c:	20000bf0 	.word	0x20000bf0
    3350:	20000008 	.word	0x20000008
    3354:	20000bf4 	.word	0x20000bf4

00003358 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3358:	4b08      	ldr	r3, [pc, #32]	; (337c <cpu_irq_leave_critical+0x24>)
    335a:	681a      	ldr	r2, [r3, #0]
    335c:	3a01      	subs	r2, #1
    335e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3360:	681b      	ldr	r3, [r3, #0]
    3362:	2b00      	cmp	r3, #0
    3364:	d109      	bne.n	337a <cpu_irq_leave_critical+0x22>
    3366:	4b06      	ldr	r3, [pc, #24]	; (3380 <cpu_irq_leave_critical+0x28>)
    3368:	781b      	ldrb	r3, [r3, #0]
    336a:	2b00      	cmp	r3, #0
    336c:	d005      	beq.n	337a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    336e:	2201      	movs	r2, #1
    3370:	4b04      	ldr	r3, [pc, #16]	; (3384 <cpu_irq_leave_critical+0x2c>)
    3372:	701a      	strb	r2, [r3, #0]
    3374:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3378:	b662      	cpsie	i
	}
}
    337a:	4770      	bx	lr
    337c:	20000bf0 	.word	0x20000bf0
    3380:	20000bf4 	.word	0x20000bf4
    3384:	20000008 	.word	0x20000008

00003388 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3388:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    338a:	2a00      	cmp	r2, #0
    338c:	d10d      	bne.n	33aa <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    338e:	008b      	lsls	r3, r1, #2
    3390:	4a07      	ldr	r2, [pc, #28]	; (33b0 <extint_register_callback+0x28>)
    3392:	589b      	ldr	r3, [r3, r2]
    3394:	2b00      	cmp	r3, #0
    3396:	d103      	bne.n	33a0 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    3398:	0089      	lsls	r1, r1, #2
    339a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    339c:	2300      	movs	r3, #0
    339e:	e004      	b.n	33aa <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    33a0:	4283      	cmp	r3, r0
    33a2:	d001      	beq.n	33a8 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    33a4:	231d      	movs	r3, #29
    33a6:	e000      	b.n	33aa <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    33a8:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    33aa:	1c18      	adds	r0, r3, #0
    33ac:	4770      	bx	lr
    33ae:	46c0      	nop			; (mov r8, r8)
    33b0:	20000dcc 	.word	0x20000dcc

000033b4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    33b4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    33b6:	2200      	movs	r2, #0
    33b8:	4b15      	ldr	r3, [pc, #84]	; (3410 <EIC_Handler+0x5c>)
    33ba:	701a      	strb	r2, [r3, #0]
    33bc:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    33be:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    33c0:	4e14      	ldr	r6, [pc, #80]	; (3414 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    33c2:	4c13      	ldr	r4, [pc, #76]	; (3410 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    33c4:	2b1f      	cmp	r3, #31
    33c6:	d919      	bls.n	33fc <EIC_Handler+0x48>
    33c8:	e00f      	b.n	33ea <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    33ca:	2100      	movs	r1, #0
    33cc:	e000      	b.n	33d0 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    33ce:	4912      	ldr	r1, [pc, #72]	; (3418 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    33d0:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    33d2:	009b      	lsls	r3, r3, #2
    33d4:	599b      	ldr	r3, [r3, r6]
    33d6:	2b00      	cmp	r3, #0
    33d8:	d000      	beq.n	33dc <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    33da:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    33dc:	7823      	ldrb	r3, [r4, #0]
    33de:	3301      	adds	r3, #1
    33e0:	b2db      	uxtb	r3, r3
    33e2:	7023      	strb	r3, [r4, #0]
    33e4:	2b0f      	cmp	r3, #15
    33e6:	d9ed      	bls.n	33c4 <EIC_Handler+0x10>
    33e8:	e011      	b.n	340e <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    33ea:	1c29      	adds	r1, r5, #0
    33ec:	4019      	ands	r1, r3
    33ee:	2201      	movs	r2, #1
    33f0:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    33f2:	2100      	movs	r1, #0
    33f4:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    33f6:	4211      	tst	r1, r2
    33f8:	d1e7      	bne.n	33ca <EIC_Handler+0x16>
    33fa:	e7ef      	b.n	33dc <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    33fc:	1c29      	adds	r1, r5, #0
    33fe:	4019      	ands	r1, r3
    3400:	2201      	movs	r2, #1
    3402:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    3404:	4904      	ldr	r1, [pc, #16]	; (3418 <EIC_Handler+0x64>)
    3406:	6949      	ldr	r1, [r1, #20]
    3408:	4211      	tst	r1, r2
    340a:	d1e0      	bne.n	33ce <EIC_Handler+0x1a>
    340c:	e7e6      	b.n	33dc <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    340e:	bd70      	pop	{r4, r5, r6, pc}
    3410:	20000dcb 	.word	0x20000dcb
    3414:	20000dcc 	.word	0x20000dcc
    3418:	40002800 	.word	0x40002800

0000341c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    341c:	4a06      	ldr	r2, [pc, #24]	; (3438 <_extint_enable+0x1c>)
    341e:	7811      	ldrb	r1, [r2, #0]
    3420:	2302      	movs	r3, #2
    3422:	430b      	orrs	r3, r1
    3424:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    3426:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    3428:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    342a:	6853      	ldr	r3, [r2, #4]
    342c:	4219      	tst	r1, r3
    342e:	d1fc      	bne.n	342a <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    3430:	6853      	ldr	r3, [r2, #4]
    3432:	4218      	tst	r0, r3
    3434:	d1f9      	bne.n	342a <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3436:	4770      	bx	lr
    3438:	40002800 	.word	0x40002800

0000343c <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    343c:	4a06      	ldr	r2, [pc, #24]	; (3458 <_extint_disable+0x1c>)
    343e:	7813      	ldrb	r3, [r2, #0]
    3440:	2102      	movs	r1, #2
    3442:	438b      	bics	r3, r1
    3444:	7013      	strb	r3, [r2, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    3446:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    3448:	6853      	ldr	r3, [r2, #4]
    344a:	4219      	tst	r1, r3
    344c:	d1fc      	bne.n	3448 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    344e:	6853      	ldr	r3, [r2, #4]
    3450:	4218      	tst	r0, r3
    3452:	d1f9      	bne.n	3448 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3454:	4770      	bx	lr
    3456:	46c0      	nop			; (mov r8, r8)
    3458:	40002800 	.word	0x40002800

0000345c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    345c:	b500      	push	{lr}
    345e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    3460:	4a18      	ldr	r2, [pc, #96]	; (34c4 <_system_extint_init+0x68>)
    3462:	6953      	ldr	r3, [r2, #20]
    3464:	2180      	movs	r1, #128	; 0x80
    3466:	00c9      	lsls	r1, r1, #3
    3468:	430b      	orrs	r3, r1
    346a:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    346c:	a901      	add	r1, sp, #4
    346e:	2300      	movs	r3, #0
    3470:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3472:	2002      	movs	r0, #2
    3474:	4b14      	ldr	r3, [pc, #80]	; (34c8 <_system_extint_init+0x6c>)
    3476:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    3478:	2002      	movs	r0, #2
    347a:	4b14      	ldr	r3, [pc, #80]	; (34cc <_system_extint_init+0x70>)
    347c:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    347e:	4a14      	ldr	r2, [pc, #80]	; (34d0 <_system_extint_init+0x74>)
    3480:	7811      	ldrb	r1, [r2, #0]
    3482:	2301      	movs	r3, #1
    3484:	430b      	orrs	r3, r1
    3486:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    3488:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    348a:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    348c:	6853      	ldr	r3, [r2, #4]
    348e:	4219      	tst	r1, r3
    3490:	d1fc      	bne.n	348c <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    3492:	6853      	ldr	r3, [r2, #4]
    3494:	4218      	tst	r0, r3
    3496:	d009      	beq.n	34ac <_system_extint_init+0x50>
    3498:	e7f8      	b.n	348c <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    349a:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    349c:	428b      	cmp	r3, r1
    349e:	d1fc      	bne.n	349a <_system_extint_init+0x3e>
    34a0:	2208      	movs	r2, #8
    34a2:	4b0c      	ldr	r3, [pc, #48]	; (34d4 <_system_extint_init+0x78>)
    34a4:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    34a6:	4b0c      	ldr	r3, [pc, #48]	; (34d8 <_system_extint_init+0x7c>)
    34a8:	4798      	blx	r3
    34aa:	e009      	b.n	34c0 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
    34ac:	4a08      	ldr	r2, [pc, #32]	; (34d0 <_system_extint_init+0x74>)
    34ae:	7813      	ldrb	r3, [r2, #0]
    34b0:	2110      	movs	r1, #16
    34b2:	438b      	bics	r3, r1
    34b4:	7013      	strb	r3, [r2, #0]
    34b6:	4b09      	ldr	r3, [pc, #36]	; (34dc <_system_extint_init+0x80>)
    34b8:	1c19      	adds	r1, r3, #0
    34ba:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    34bc:	2200      	movs	r2, #0
    34be:	e7ec      	b.n	349a <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
    34c0:	b003      	add	sp, #12
    34c2:	bd00      	pop	{pc}
    34c4:	40000800 	.word	0x40000800
    34c8:	0000431d 	.word	0x0000431d
    34cc:	000042b5 	.word	0x000042b5
    34d0:	40002800 	.word	0x40002800
    34d4:	e000e100 	.word	0xe000e100
    34d8:	0000341d 	.word	0x0000341d
    34dc:	20000dcc 	.word	0x20000dcc

000034e0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    34e0:	2300      	movs	r3, #0
    34e2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    34e4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    34e6:	2201      	movs	r2, #1
    34e8:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    34ea:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    34ec:	3201      	adds	r2, #1
    34ee:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    34f0:	7243      	strb	r3, [r0, #9]
}
    34f2:	4770      	bx	lr

000034f4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    34f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34f6:	b083      	sub	sp, #12
    34f8:	1c05      	adds	r5, r0, #0
    34fa:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    34fc:	4b1c      	ldr	r3, [pc, #112]	; (3570 <extint_chan_set_config+0x7c>)
    34fe:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3500:	a901      	add	r1, sp, #4
    3502:	2300      	movs	r3, #0
    3504:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    3506:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    3508:	7923      	ldrb	r3, [r4, #4]
    350a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    350c:	7a23      	ldrb	r3, [r4, #8]
    350e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    3510:	7820      	ldrb	r0, [r4, #0]
    3512:	4b18      	ldr	r3, [pc, #96]	; (3574 <extint_chan_set_config+0x80>)
    3514:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    3516:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    3518:	2d1f      	cmp	r5, #31
    351a:	d800      	bhi.n	351e <extint_chan_set_config+0x2a>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    351c:	4e16      	ldr	r6, [pc, #88]	; (3578 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    351e:	2207      	movs	r2, #7
    3520:	402a      	ands	r2, r5
    3522:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    3524:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    3526:	7aa3      	ldrb	r3, [r4, #10]
    3528:	2b00      	cmp	r3, #0
    352a:	d001      	beq.n	3530 <extint_chan_set_config+0x3c>
		new_config |= EIC_CONFIG_FILTEN0;
    352c:	2308      	movs	r3, #8
    352e:	4318      	orrs	r0, r3
    3530:	08eb      	lsrs	r3, r5, #3
    3532:	009b      	lsls	r3, r3, #2
    3534:	18f3      	adds	r3, r6, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    3536:	69d9      	ldr	r1, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    3538:	4090      	lsls	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    353a:	270f      	movs	r7, #15
    353c:	4097      	lsls	r7, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    353e:	43b9      	bics	r1, r7
    3540:	1c0a      	adds	r2, r1, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3542:	4302      	orrs	r2, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    3544:	61da      	str	r2, [r3, #28]
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
#if (SAMC21)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    3546:	7a63      	ldrb	r3, [r4, #9]
    3548:	2b00      	cmp	r3, #0
    354a:	d006      	beq.n	355a <extint_chan_set_config+0x66>
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
    354c:	69b3      	ldr	r3, [r6, #24]
    354e:	2201      	movs	r2, #1
    3550:	40aa      	lsls	r2, r5
    3552:	1c15      	adds	r5, r2, #0
    3554:	431d      	orrs	r5, r3
    3556:	61b5      	str	r5, [r6, #24]
    3558:	e006      	b.n	3568 <extint_chan_set_config+0x74>
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
    355a:	69b3      	ldr	r3, [r6, #24]
    355c:	041b      	lsls	r3, r3, #16
    355e:	0c1b      	lsrs	r3, r3, #16
    3560:	2201      	movs	r2, #1
    3562:	40aa      	lsls	r2, r5
    3564:	4393      	bics	r3, r2
    3566:	61b3      	str	r3, [r6, #24]
	}
#endif
	_extint_enable();
    3568:	4b04      	ldr	r3, [pc, #16]	; (357c <extint_chan_set_config+0x88>)
    356a:	4798      	blx	r3
}
    356c:	b003      	add	sp, #12
    356e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3570:	0000343d 	.word	0x0000343d
    3574:	00004419 	.word	0x00004419
    3578:	40002800 	.word	0x40002800
    357c:	0000341d 	.word	0x0000341d

00003580 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3580:	b500      	push	{lr}
    3582:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3584:	ab01      	add	r3, sp, #4
    3586:	2280      	movs	r2, #128	; 0x80
    3588:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    358a:	780a      	ldrb	r2, [r1, #0]
    358c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    358e:	784a      	ldrb	r2, [r1, #1]
    3590:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3592:	788a      	ldrb	r2, [r1, #2]
    3594:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3596:	1c19      	adds	r1, r3, #0
    3598:	4b01      	ldr	r3, [pc, #4]	; (35a0 <port_pin_set_config+0x20>)
    359a:	4798      	blx	r3
}
    359c:	b003      	add	sp, #12
    359e:	bd00      	pop	{pc}
    35a0:	00004419 	.word	0x00004419

000035a4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    35a4:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    35a6:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    35a8:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    35aa:	4281      	cmp	r1, r0
    35ac:	d30c      	bcc.n	35c8 <_sercom_get_sync_baud_val+0x24>
    35ae:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    35b0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    35b2:	3301      	adds	r3, #1
    35b4:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    35b6:	4288      	cmp	r0, r1
    35b8:	d9fa      	bls.n	35b0 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    35ba:	3b01      	subs	r3, #1
    35bc:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    35be:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    35c0:	2bff      	cmp	r3, #255	; 0xff
    35c2:	d801      	bhi.n	35c8 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    35c4:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    35c6:	2400      	movs	r4, #0
	}
}
    35c8:	1c20      	adds	r0, r4, #0
    35ca:	bd10      	pop	{r4, pc}

000035cc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    35cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ce:	465f      	mov	r7, fp
    35d0:	4656      	mov	r6, sl
    35d2:	464d      	mov	r5, r9
    35d4:	4644      	mov	r4, r8
    35d6:	b4f0      	push	{r4, r5, r6, r7}
    35d8:	b089      	sub	sp, #36	; 0x24
    35da:	1c1c      	adds	r4, r3, #0
    35dc:	ab12      	add	r3, sp, #72	; 0x48
    35de:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    35e0:	1c06      	adds	r6, r0, #0
    35e2:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    35e4:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    35e6:	428e      	cmp	r6, r1
    35e8:	d900      	bls.n	35ec <_sercom_get_async_baud_val+0x20>
    35ea:	e0c7      	b.n	377c <_sercom_get_async_baud_val+0x1b0>
    35ec:	1c25      	adds	r5, r4, #0
    35ee:	9207      	str	r2, [sp, #28]
    35f0:	1c0c      	adds	r4, r1, #0
    35f2:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    35f4:	2d00      	cmp	r5, #0
    35f6:	d151      	bne.n	369c <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    35f8:	1c18      	adds	r0, r3, #0
    35fa:	2100      	movs	r1, #0
    35fc:	2300      	movs	r3, #0
    35fe:	4d63      	ldr	r5, [pc, #396]	; (378c <_sercom_get_async_baud_val+0x1c0>)
    3600:	47a8      	blx	r5
    3602:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    3604:	1c26      	adds	r6, r4, #0
    3606:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3608:	2300      	movs	r3, #0
    360a:	2400      	movs	r4, #0
    360c:	9302      	str	r3, [sp, #8]
    360e:	9403      	str	r4, [sp, #12]
    3610:	2200      	movs	r2, #0
    3612:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    3614:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    3616:	2120      	movs	r1, #32
    3618:	468c      	mov	ip, r1
    361a:	391f      	subs	r1, #31
    361c:	9600      	str	r6, [sp, #0]
    361e:	9701      	str	r7, [sp, #4]
    3620:	2420      	movs	r4, #32
    3622:	4264      	negs	r4, r4
    3624:	1904      	adds	r4, r0, r4
    3626:	d403      	bmi.n	3630 <_sercom_get_async_baud_val+0x64>
    3628:	1c0d      	adds	r5, r1, #0
    362a:	40a5      	lsls	r5, r4
    362c:	46a8      	mov	r8, r5
    362e:	e004      	b.n	363a <_sercom_get_async_baud_val+0x6e>
    3630:	4664      	mov	r4, ip
    3632:	1a24      	subs	r4, r4, r0
    3634:	1c0d      	adds	r5, r1, #0
    3636:	40e5      	lsrs	r5, r4
    3638:	46a8      	mov	r8, r5
    363a:	1c0c      	adds	r4, r1, #0
    363c:	4084      	lsls	r4, r0
    363e:	46a1      	mov	r9, r4

		r = r << 1;
    3640:	1c14      	adds	r4, r2, #0
    3642:	1c1d      	adds	r5, r3, #0
    3644:	18a4      	adds	r4, r4, r2
    3646:	415d      	adcs	r5, r3
    3648:	1c22      	adds	r2, r4, #0
    364a:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
    364c:	465e      	mov	r6, fp
    364e:	4647      	mov	r7, r8
    3650:	423e      	tst	r6, r7
    3652:	d003      	beq.n	365c <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
    3654:	1c0e      	adds	r6, r1, #0
    3656:	4326      	orrs	r6, r4
    3658:	1c32      	adds	r2, r6, #0
    365a:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
    365c:	9c01      	ldr	r4, [sp, #4]
    365e:	429c      	cmp	r4, r3
    3660:	d810      	bhi.n	3684 <_sercom_get_async_baud_val+0xb8>
    3662:	d102      	bne.n	366a <_sercom_get_async_baud_val+0x9e>
    3664:	9c00      	ldr	r4, [sp, #0]
    3666:	4294      	cmp	r4, r2
    3668:	d80c      	bhi.n	3684 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
    366a:	9c00      	ldr	r4, [sp, #0]
    366c:	9d01      	ldr	r5, [sp, #4]
    366e:	1b12      	subs	r2, r2, r4
    3670:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    3672:	464d      	mov	r5, r9
    3674:	9e02      	ldr	r6, [sp, #8]
    3676:	9f03      	ldr	r7, [sp, #12]
    3678:	4335      	orrs	r5, r6
    367a:	1c3c      	adds	r4, r7, #0
    367c:	4646      	mov	r6, r8
    367e:	4334      	orrs	r4, r6
    3680:	9502      	str	r5, [sp, #8]
    3682:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    3684:	3801      	subs	r0, #1
    3686:	d2cb      	bcs.n	3620 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3688:	2200      	movs	r2, #0
    368a:	2301      	movs	r3, #1
    368c:	9802      	ldr	r0, [sp, #8]
    368e:	9903      	ldr	r1, [sp, #12]
    3690:	1a12      	subs	r2, r2, r0
    3692:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    3694:	0c11      	lsrs	r1, r2, #16
    3696:	041b      	lsls	r3, r3, #16
    3698:	4319      	orrs	r1, r3
    369a:	e06c      	b.n	3776 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    369c:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    369e:	2d01      	cmp	r5, #1
    36a0:	d169      	bne.n	3776 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    36a2:	0f61      	lsrs	r1, r4, #29
    36a4:	1c0f      	adds	r7, r1, #0
    36a6:	00e1      	lsls	r1, r4, #3
    36a8:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
    36aa:	1c18      	adds	r0, r3, #0
    36ac:	2100      	movs	r1, #0
    36ae:	2300      	movs	r3, #0
    36b0:	4c36      	ldr	r4, [pc, #216]	; (378c <_sercom_get_async_baud_val+0x1c0>)
    36b2:	47a0      	blx	r4
    36b4:	1c04      	adds	r4, r0, #0
    36b6:	1c0d      	adds	r5, r1, #0
    36b8:	2300      	movs	r3, #0
    36ba:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    36bc:	3320      	adds	r3, #32
    36be:	469b      	mov	fp, r3
    36c0:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    36c2:	4663      	mov	r3, ip
    36c4:	9305      	str	r3, [sp, #20]
    36c6:	46b9      	mov	r9, r7
    36c8:	466b      	mov	r3, sp
    36ca:	7d1b      	ldrb	r3, [r3, #20]
    36cc:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    36ce:	2300      	movs	r3, #0
    36d0:	469c      	mov	ip, r3
    36d2:	2000      	movs	r0, #0
    36d4:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
    36d6:	223f      	movs	r2, #63	; 0x3f
    36d8:	9400      	str	r4, [sp, #0]
    36da:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
    36dc:	2320      	movs	r3, #32
    36de:	425b      	negs	r3, r3
    36e0:	18d3      	adds	r3, r2, r3
    36e2:	d403      	bmi.n	36ec <_sercom_get_async_baud_val+0x120>
    36e4:	1c34      	adds	r4, r6, #0
    36e6:	409c      	lsls	r4, r3
    36e8:	1c23      	adds	r3, r4, #0
    36ea:	e004      	b.n	36f6 <_sercom_get_async_baud_val+0x12a>
    36ec:	465b      	mov	r3, fp
    36ee:	1a9b      	subs	r3, r3, r2
    36f0:	1c34      	adds	r4, r6, #0
    36f2:	40dc      	lsrs	r4, r3
    36f4:	1c23      	adds	r3, r4, #0
    36f6:	1c37      	adds	r7, r6, #0
    36f8:	4097      	lsls	r7, r2

		r = r << 1;
    36fa:	1c04      	adds	r4, r0, #0
    36fc:	1c0d      	adds	r5, r1, #0
    36fe:	1824      	adds	r4, r4, r0
    3700:	414d      	adcs	r5, r1
    3702:	1c20      	adds	r0, r4, #0
    3704:	1c29      	adds	r1, r5, #0
    3706:	9002      	str	r0, [sp, #8]
    3708:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
    370a:	4644      	mov	r4, r8
    370c:	403c      	ands	r4, r7
    370e:	46a2      	mov	sl, r4
    3710:	464c      	mov	r4, r9
    3712:	4023      	ands	r3, r4
    3714:	4654      	mov	r4, sl
    3716:	4323      	orrs	r3, r4
    3718:	d005      	beq.n	3726 <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
    371a:	9b02      	ldr	r3, [sp, #8]
    371c:	9c03      	ldr	r4, [sp, #12]
    371e:	1c1d      	adds	r5, r3, #0
    3720:	4335      	orrs	r5, r6
    3722:	1c28      	adds	r0, r5, #0
    3724:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
    3726:	9b01      	ldr	r3, [sp, #4]
    3728:	428b      	cmp	r3, r1
    372a:	d80a      	bhi.n	3742 <_sercom_get_async_baud_val+0x176>
    372c:	d102      	bne.n	3734 <_sercom_get_async_baud_val+0x168>
    372e:	9b00      	ldr	r3, [sp, #0]
    3730:	4283      	cmp	r3, r0
    3732:	d806      	bhi.n	3742 <_sercom_get_async_baud_val+0x176>
			r = r - d;
    3734:	9b00      	ldr	r3, [sp, #0]
    3736:	9c01      	ldr	r4, [sp, #4]
    3738:	1ac0      	subs	r0, r0, r3
    373a:	41a1      	sbcs	r1, r4
			q |= bit_shift;
    373c:	4663      	mov	r3, ip
    373e:	433b      	orrs	r3, r7
    3740:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    3742:	3a01      	subs	r2, #1
    3744:	d2ca      	bcs.n	36dc <_sercom_get_async_baud_val+0x110>
    3746:	9c00      	ldr	r4, [sp, #0]
    3748:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    374a:	4662      	mov	r2, ip
    374c:	9905      	ldr	r1, [sp, #20]
    374e:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
    3750:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    3752:	4a0f      	ldr	r2, [pc, #60]	; (3790 <_sercom_get_async_baud_val+0x1c4>)
    3754:	4293      	cmp	r3, r2
    3756:	d908      	bls.n	376a <_sercom_get_async_baud_val+0x19e>
    3758:	9a06      	ldr	r2, [sp, #24]
    375a:	3201      	adds	r2, #1
    375c:	b2d2      	uxtb	r2, r2
    375e:	9206      	str	r2, [sp, #24]
    3760:	1c0a      	adds	r2, r1, #0
    3762:	3201      	adds	r2, #1
    3764:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    3766:	2a08      	cmp	r2, #8
    3768:	d1ae      	bne.n	36c8 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    376a:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    376c:	9a06      	ldr	r2, [sp, #24]
    376e:	2a08      	cmp	r2, #8
    3770:	d004      	beq.n	377c <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    3772:	0351      	lsls	r1, r2, #13
    3774:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
    3776:	9b07      	ldr	r3, [sp, #28]
    3778:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
    377a:	2500      	movs	r5, #0
}
    377c:	1c28      	adds	r0, r5, #0
    377e:	b009      	add	sp, #36	; 0x24
    3780:	bc3c      	pop	{r2, r3, r4, r5}
    3782:	4690      	mov	r8, r2
    3784:	4699      	mov	r9, r3
    3786:	46a2      	mov	sl, r4
    3788:	46ab      	mov	fp, r5
    378a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    378c:	00004ddd 	.word	0x00004ddd
    3790:	00001fff 	.word	0x00001fff

00003794 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3794:	b510      	push	{r4, lr}
    3796:	b082      	sub	sp, #8
    3798:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    379a:	4b0e      	ldr	r3, [pc, #56]	; (37d4 <sercom_set_gclk_generator+0x40>)
    379c:	781b      	ldrb	r3, [r3, #0]
    379e:	2b00      	cmp	r3, #0
    37a0:	d001      	beq.n	37a6 <sercom_set_gclk_generator+0x12>
    37a2:	2900      	cmp	r1, #0
    37a4:	d00d      	beq.n	37c2 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    37a6:	a901      	add	r1, sp, #4
    37a8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    37aa:	2012      	movs	r0, #18
    37ac:	4b0a      	ldr	r3, [pc, #40]	; (37d8 <sercom_set_gclk_generator+0x44>)
    37ae:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    37b0:	2012      	movs	r0, #18
    37b2:	4b0a      	ldr	r3, [pc, #40]	; (37dc <sercom_set_gclk_generator+0x48>)
    37b4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    37b6:	4b07      	ldr	r3, [pc, #28]	; (37d4 <sercom_set_gclk_generator+0x40>)
    37b8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    37ba:	2201      	movs	r2, #1
    37bc:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    37be:	2000      	movs	r0, #0
    37c0:	e006      	b.n	37d0 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    37c2:	4b04      	ldr	r3, [pc, #16]	; (37d4 <sercom_set_gclk_generator+0x40>)
    37c4:	785b      	ldrb	r3, [r3, #1]
    37c6:	4283      	cmp	r3, r0
    37c8:	d001      	beq.n	37ce <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    37ca:	201d      	movs	r0, #29
    37cc:	e000      	b.n	37d0 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    37ce:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    37d0:	b002      	add	sp, #8
    37d2:	bd10      	pop	{r4, pc}
    37d4:	20000bf8 	.word	0x20000bf8
    37d8:	0000431d 	.word	0x0000431d
    37dc:	000042b5 	.word	0x000042b5

000037e0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    37e0:	4b44      	ldr	r3, [pc, #272]	; (38f4 <_sercom_get_default_pad+0x114>)
    37e2:	4298      	cmp	r0, r3
    37e4:	d033      	beq.n	384e <_sercom_get_default_pad+0x6e>
    37e6:	d806      	bhi.n	37f6 <_sercom_get_default_pad+0x16>
    37e8:	4b43      	ldr	r3, [pc, #268]	; (38f8 <_sercom_get_default_pad+0x118>)
    37ea:	4298      	cmp	r0, r3
    37ec:	d00d      	beq.n	380a <_sercom_get_default_pad+0x2a>
    37ee:	4b43      	ldr	r3, [pc, #268]	; (38fc <_sercom_get_default_pad+0x11c>)
    37f0:	4298      	cmp	r0, r3
    37f2:	d01b      	beq.n	382c <_sercom_get_default_pad+0x4c>
    37f4:	e06f      	b.n	38d6 <_sercom_get_default_pad+0xf6>
    37f6:	4b42      	ldr	r3, [pc, #264]	; (3900 <_sercom_get_default_pad+0x120>)
    37f8:	4298      	cmp	r0, r3
    37fa:	d04a      	beq.n	3892 <_sercom_get_default_pad+0xb2>
    37fc:	4b41      	ldr	r3, [pc, #260]	; (3904 <_sercom_get_default_pad+0x124>)
    37fe:	4298      	cmp	r0, r3
    3800:	d058      	beq.n	38b4 <_sercom_get_default_pad+0xd4>
    3802:	4b41      	ldr	r3, [pc, #260]	; (3908 <_sercom_get_default_pad+0x128>)
    3804:	4298      	cmp	r0, r3
    3806:	d166      	bne.n	38d6 <_sercom_get_default_pad+0xf6>
    3808:	e032      	b.n	3870 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    380a:	2901      	cmp	r1, #1
    380c:	d006      	beq.n	381c <_sercom_get_default_pad+0x3c>
    380e:	2900      	cmp	r1, #0
    3810:	d063      	beq.n	38da <_sercom_get_default_pad+0xfa>
    3812:	2902      	cmp	r1, #2
    3814:	d006      	beq.n	3824 <_sercom_get_default_pad+0x44>
    3816:	2903      	cmp	r1, #3
    3818:	d006      	beq.n	3828 <_sercom_get_default_pad+0x48>
    381a:	e001      	b.n	3820 <_sercom_get_default_pad+0x40>
    381c:	483b      	ldr	r0, [pc, #236]	; (390c <_sercom_get_default_pad+0x12c>)
    381e:	e067      	b.n	38f0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3820:	2000      	movs	r0, #0
    3822:	e065      	b.n	38f0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3824:	483a      	ldr	r0, [pc, #232]	; (3910 <_sercom_get_default_pad+0x130>)
    3826:	e063      	b.n	38f0 <_sercom_get_default_pad+0x110>
    3828:	483a      	ldr	r0, [pc, #232]	; (3914 <_sercom_get_default_pad+0x134>)
    382a:	e061      	b.n	38f0 <_sercom_get_default_pad+0x110>
    382c:	2901      	cmp	r1, #1
    382e:	d006      	beq.n	383e <_sercom_get_default_pad+0x5e>
    3830:	2900      	cmp	r1, #0
    3832:	d054      	beq.n	38de <_sercom_get_default_pad+0xfe>
    3834:	2902      	cmp	r1, #2
    3836:	d006      	beq.n	3846 <_sercom_get_default_pad+0x66>
    3838:	2903      	cmp	r1, #3
    383a:	d006      	beq.n	384a <_sercom_get_default_pad+0x6a>
    383c:	e001      	b.n	3842 <_sercom_get_default_pad+0x62>
    383e:	4836      	ldr	r0, [pc, #216]	; (3918 <_sercom_get_default_pad+0x138>)
    3840:	e056      	b.n	38f0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3842:	2000      	movs	r0, #0
    3844:	e054      	b.n	38f0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3846:	4835      	ldr	r0, [pc, #212]	; (391c <_sercom_get_default_pad+0x13c>)
    3848:	e052      	b.n	38f0 <_sercom_get_default_pad+0x110>
    384a:	4835      	ldr	r0, [pc, #212]	; (3920 <_sercom_get_default_pad+0x140>)
    384c:	e050      	b.n	38f0 <_sercom_get_default_pad+0x110>
    384e:	2901      	cmp	r1, #1
    3850:	d006      	beq.n	3860 <_sercom_get_default_pad+0x80>
    3852:	2900      	cmp	r1, #0
    3854:	d045      	beq.n	38e2 <_sercom_get_default_pad+0x102>
    3856:	2902      	cmp	r1, #2
    3858:	d006      	beq.n	3868 <_sercom_get_default_pad+0x88>
    385a:	2903      	cmp	r1, #3
    385c:	d006      	beq.n	386c <_sercom_get_default_pad+0x8c>
    385e:	e001      	b.n	3864 <_sercom_get_default_pad+0x84>
    3860:	4830      	ldr	r0, [pc, #192]	; (3924 <_sercom_get_default_pad+0x144>)
    3862:	e045      	b.n	38f0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3864:	2000      	movs	r0, #0
    3866:	e043      	b.n	38f0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3868:	482f      	ldr	r0, [pc, #188]	; (3928 <_sercom_get_default_pad+0x148>)
    386a:	e041      	b.n	38f0 <_sercom_get_default_pad+0x110>
    386c:	482f      	ldr	r0, [pc, #188]	; (392c <_sercom_get_default_pad+0x14c>)
    386e:	e03f      	b.n	38f0 <_sercom_get_default_pad+0x110>
    3870:	2901      	cmp	r1, #1
    3872:	d006      	beq.n	3882 <_sercom_get_default_pad+0xa2>
    3874:	2900      	cmp	r1, #0
    3876:	d036      	beq.n	38e6 <_sercom_get_default_pad+0x106>
    3878:	2902      	cmp	r1, #2
    387a:	d006      	beq.n	388a <_sercom_get_default_pad+0xaa>
    387c:	2903      	cmp	r1, #3
    387e:	d006      	beq.n	388e <_sercom_get_default_pad+0xae>
    3880:	e001      	b.n	3886 <_sercom_get_default_pad+0xa6>
    3882:	482b      	ldr	r0, [pc, #172]	; (3930 <_sercom_get_default_pad+0x150>)
    3884:	e034      	b.n	38f0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    3886:	2000      	movs	r0, #0
    3888:	e032      	b.n	38f0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    388a:	482a      	ldr	r0, [pc, #168]	; (3934 <_sercom_get_default_pad+0x154>)
    388c:	e030      	b.n	38f0 <_sercom_get_default_pad+0x110>
    388e:	482a      	ldr	r0, [pc, #168]	; (3938 <_sercom_get_default_pad+0x158>)
    3890:	e02e      	b.n	38f0 <_sercom_get_default_pad+0x110>
    3892:	2901      	cmp	r1, #1
    3894:	d006      	beq.n	38a4 <_sercom_get_default_pad+0xc4>
    3896:	2900      	cmp	r1, #0
    3898:	d027      	beq.n	38ea <_sercom_get_default_pad+0x10a>
    389a:	2902      	cmp	r1, #2
    389c:	d006      	beq.n	38ac <_sercom_get_default_pad+0xcc>
    389e:	2903      	cmp	r1, #3
    38a0:	d006      	beq.n	38b0 <_sercom_get_default_pad+0xd0>
    38a2:	e001      	b.n	38a8 <_sercom_get_default_pad+0xc8>
    38a4:	4825      	ldr	r0, [pc, #148]	; (393c <_sercom_get_default_pad+0x15c>)
    38a6:	e023      	b.n	38f0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    38a8:	2000      	movs	r0, #0
    38aa:	e021      	b.n	38f0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38ac:	4824      	ldr	r0, [pc, #144]	; (3940 <_sercom_get_default_pad+0x160>)
    38ae:	e01f      	b.n	38f0 <_sercom_get_default_pad+0x110>
    38b0:	4824      	ldr	r0, [pc, #144]	; (3944 <_sercom_get_default_pad+0x164>)
    38b2:	e01d      	b.n	38f0 <_sercom_get_default_pad+0x110>
    38b4:	2901      	cmp	r1, #1
    38b6:	d006      	beq.n	38c6 <_sercom_get_default_pad+0xe6>
    38b8:	2900      	cmp	r1, #0
    38ba:	d018      	beq.n	38ee <_sercom_get_default_pad+0x10e>
    38bc:	2902      	cmp	r1, #2
    38be:	d006      	beq.n	38ce <_sercom_get_default_pad+0xee>
    38c0:	2903      	cmp	r1, #3
    38c2:	d006      	beq.n	38d2 <_sercom_get_default_pad+0xf2>
    38c4:	e001      	b.n	38ca <_sercom_get_default_pad+0xea>
    38c6:	4820      	ldr	r0, [pc, #128]	; (3948 <_sercom_get_default_pad+0x168>)
    38c8:	e012      	b.n	38f0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    38ca:	2000      	movs	r0, #0
    38cc:	e010      	b.n	38f0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38ce:	481f      	ldr	r0, [pc, #124]	; (394c <_sercom_get_default_pad+0x16c>)
    38d0:	e00e      	b.n	38f0 <_sercom_get_default_pad+0x110>
    38d2:	481f      	ldr	r0, [pc, #124]	; (3950 <_sercom_get_default_pad+0x170>)
    38d4:	e00c      	b.n	38f0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    38d6:	2000      	movs	r0, #0
    38d8:	e00a      	b.n	38f0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38da:	481e      	ldr	r0, [pc, #120]	; (3954 <_sercom_get_default_pad+0x174>)
    38dc:	e008      	b.n	38f0 <_sercom_get_default_pad+0x110>
    38de:	481e      	ldr	r0, [pc, #120]	; (3958 <_sercom_get_default_pad+0x178>)
    38e0:	e006      	b.n	38f0 <_sercom_get_default_pad+0x110>
    38e2:	481e      	ldr	r0, [pc, #120]	; (395c <_sercom_get_default_pad+0x17c>)
    38e4:	e004      	b.n	38f0 <_sercom_get_default_pad+0x110>
    38e6:	481e      	ldr	r0, [pc, #120]	; (3960 <_sercom_get_default_pad+0x180>)
    38e8:	e002      	b.n	38f0 <_sercom_get_default_pad+0x110>
    38ea:	481e      	ldr	r0, [pc, #120]	; (3964 <_sercom_get_default_pad+0x184>)
    38ec:	e000      	b.n	38f0 <_sercom_get_default_pad+0x110>
    38ee:	481e      	ldr	r0, [pc, #120]	; (3968 <_sercom_get_default_pad+0x188>)
	}

	Assert(false);
	return 0;
}
    38f0:	4770      	bx	lr
    38f2:	46c0      	nop			; (mov r8, r8)
    38f4:	42000c00 	.word	0x42000c00
    38f8:	42000400 	.word	0x42000400
    38fc:	42000800 	.word	0x42000800
    3900:	42001400 	.word	0x42001400
    3904:	42001800 	.word	0x42001800
    3908:	42001000 	.word	0x42001000
    390c:	00050003 	.word	0x00050003
    3910:	00060003 	.word	0x00060003
    3914:	00070003 	.word	0x00070003
    3918:	00110002 	.word	0x00110002
    391c:	00120002 	.word	0x00120002
    3920:	00130002 	.word	0x00130002
    3924:	000d0002 	.word	0x000d0002
    3928:	000e0002 	.word	0x000e0002
    392c:	000f0002 	.word	0x000f0002
    3930:	00170002 	.word	0x00170002
    3934:	00180002 	.word	0x00180002
    3938:	00190002 	.word	0x00190002
    393c:	00290003 	.word	0x00290003
    3940:	002a0003 	.word	0x002a0003
    3944:	002b0003 	.word	0x002b0003
    3948:	00230003 	.word	0x00230003
    394c:	00200003 	.word	0x00200003
    3950:	00210003 	.word	0x00210003
    3954:	00040003 	.word	0x00040003
    3958:	00100002 	.word	0x00100002
    395c:	000c0002 	.word	0x000c0002
    3960:	00160002 	.word	0x00160002
    3964:	00280003 	.word	0x00280003
    3968:	00220003 	.word	0x00220003

0000396c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    396c:	b530      	push	{r4, r5, lr}
    396e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3970:	4b0c      	ldr	r3, [pc, #48]	; (39a4 <_sercom_get_sercom_inst_index+0x38>)
    3972:	466a      	mov	r2, sp
    3974:	cb32      	ldmia	r3!, {r1, r4, r5}
    3976:	c232      	stmia	r2!, {r1, r4, r5}
    3978:	cb32      	ldmia	r3!, {r1, r4, r5}
    397a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    397c:	9b00      	ldr	r3, [sp, #0]
    397e:	4283      	cmp	r3, r0
    3980:	d006      	beq.n	3990 <_sercom_get_sercom_inst_index+0x24>
    3982:	2301      	movs	r3, #1
    3984:	009a      	lsls	r2, r3, #2
    3986:	4669      	mov	r1, sp
    3988:	5852      	ldr	r2, [r2, r1]
    398a:	4282      	cmp	r2, r0
    398c:	d103      	bne.n	3996 <_sercom_get_sercom_inst_index+0x2a>
    398e:	e000      	b.n	3992 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3990:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    3992:	b2d8      	uxtb	r0, r3
    3994:	e003      	b.n	399e <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3996:	3301      	adds	r3, #1
    3998:	2b06      	cmp	r3, #6
    399a:	d1f3      	bne.n	3984 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    399c:	2000      	movs	r0, #0
}
    399e:	b007      	add	sp, #28
    39a0:	bd30      	pop	{r4, r5, pc}
    39a2:	46c0      	nop			; (mov r8, r8)
    39a4:	00006118 	.word	0x00006118

000039a8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    39a8:	4770      	bx	lr
    39aa:	46c0      	nop			; (mov r8, r8)

000039ac <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    39ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    39ae:	4b0a      	ldr	r3, [pc, #40]	; (39d8 <_sercom_set_handler+0x2c>)
    39b0:	781b      	ldrb	r3, [r3, #0]
    39b2:	2b00      	cmp	r3, #0
    39b4:	d10c      	bne.n	39d0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    39b6:	4f09      	ldr	r7, [pc, #36]	; (39dc <_sercom_set_handler+0x30>)
    39b8:	4e09      	ldr	r6, [pc, #36]	; (39e0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    39ba:	4d0a      	ldr	r5, [pc, #40]	; (39e4 <_sercom_set_handler+0x38>)
    39bc:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    39be:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    39c0:	195a      	adds	r2, r3, r5
    39c2:	6014      	str	r4, [r2, #0]
    39c4:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    39c6:	2b18      	cmp	r3, #24
    39c8:	d1f9      	bne.n	39be <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    39ca:	2201      	movs	r2, #1
    39cc:	4b02      	ldr	r3, [pc, #8]	; (39d8 <_sercom_set_handler+0x2c>)
    39ce:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    39d0:	0080      	lsls	r0, r0, #2
    39d2:	4b02      	ldr	r3, [pc, #8]	; (39dc <_sercom_set_handler+0x30>)
    39d4:	50c1      	str	r1, [r0, r3]
}
    39d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39d8:	20000bfa 	.word	0x20000bfa
    39dc:	20000bfc 	.word	0x20000bfc
    39e0:	000039a9 	.word	0x000039a9
    39e4:	20000e0c 	.word	0x20000e0c

000039e8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    39e8:	b510      	push	{r4, lr}
    39ea:	b082      	sub	sp, #8
    39ec:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    39ee:	4668      	mov	r0, sp
    39f0:	4905      	ldr	r1, [pc, #20]	; (3a08 <_sercom_get_interrupt_vector+0x20>)
    39f2:	2206      	movs	r2, #6
    39f4:	4b05      	ldr	r3, [pc, #20]	; (3a0c <_sercom_get_interrupt_vector+0x24>)
    39f6:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    39f8:	1c20      	adds	r0, r4, #0
    39fa:	4b05      	ldr	r3, [pc, #20]	; (3a10 <_sercom_get_interrupt_vector+0x28>)
    39fc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    39fe:	466b      	mov	r3, sp
    3a00:	5618      	ldrsb	r0, [r3, r0]
}
    3a02:	b002      	add	sp, #8
    3a04:	bd10      	pop	{r4, pc}
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	00006130 	.word	0x00006130
    3a0c:	00004e7d 	.word	0x00004e7d
    3a10:	0000396d 	.word	0x0000396d

00003a14 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3a14:	b508      	push	{r3, lr}
    3a16:	4b02      	ldr	r3, [pc, #8]	; (3a20 <SERCOM0_Handler+0xc>)
    3a18:	681b      	ldr	r3, [r3, #0]
    3a1a:	2000      	movs	r0, #0
    3a1c:	4798      	blx	r3
    3a1e:	bd08      	pop	{r3, pc}
    3a20:	20000bfc 	.word	0x20000bfc

00003a24 <SERCOM1_Handler>:
    3a24:	b508      	push	{r3, lr}
    3a26:	4b02      	ldr	r3, [pc, #8]	; (3a30 <SERCOM1_Handler+0xc>)
    3a28:	685b      	ldr	r3, [r3, #4]
    3a2a:	2001      	movs	r0, #1
    3a2c:	4798      	blx	r3
    3a2e:	bd08      	pop	{r3, pc}
    3a30:	20000bfc 	.word	0x20000bfc

00003a34 <SERCOM2_Handler>:
    3a34:	b508      	push	{r3, lr}
    3a36:	4b02      	ldr	r3, [pc, #8]	; (3a40 <SERCOM2_Handler+0xc>)
    3a38:	689b      	ldr	r3, [r3, #8]
    3a3a:	2002      	movs	r0, #2
    3a3c:	4798      	blx	r3
    3a3e:	bd08      	pop	{r3, pc}
    3a40:	20000bfc 	.word	0x20000bfc

00003a44 <SERCOM3_Handler>:
    3a44:	b508      	push	{r3, lr}
    3a46:	4b02      	ldr	r3, [pc, #8]	; (3a50 <SERCOM3_Handler+0xc>)
    3a48:	68db      	ldr	r3, [r3, #12]
    3a4a:	2003      	movs	r0, #3
    3a4c:	4798      	blx	r3
    3a4e:	bd08      	pop	{r3, pc}
    3a50:	20000bfc 	.word	0x20000bfc

00003a54 <SERCOM4_Handler>:
    3a54:	b508      	push	{r3, lr}
    3a56:	4b02      	ldr	r3, [pc, #8]	; (3a60 <SERCOM4_Handler+0xc>)
    3a58:	691b      	ldr	r3, [r3, #16]
    3a5a:	2004      	movs	r0, #4
    3a5c:	4798      	blx	r3
    3a5e:	bd08      	pop	{r3, pc}
    3a60:	20000bfc 	.word	0x20000bfc

00003a64 <SERCOM5_Handler>:
    3a64:	b508      	push	{r3, lr}
    3a66:	4b02      	ldr	r3, [pc, #8]	; (3a70 <SERCOM5_Handler+0xc>)
    3a68:	695b      	ldr	r3, [r3, #20]
    3a6a:	2005      	movs	r0, #5
    3a6c:	4798      	blx	r3
    3a6e:	bd08      	pop	{r3, pc}
    3a70:	20000bfc 	.word	0x20000bfc

00003a74 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a76:	465f      	mov	r7, fp
    3a78:	4656      	mov	r6, sl
    3a7a:	464d      	mov	r5, r9
    3a7c:	4644      	mov	r4, r8
    3a7e:	b4f0      	push	{r4, r5, r6, r7}
    3a80:	b091      	sub	sp, #68	; 0x44
    3a82:	1c05      	adds	r5, r0, #0
    3a84:	1c0c      	adds	r4, r1, #0
    3a86:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3a88:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3a8a:	1c08      	adds	r0, r1, #0
    3a8c:	4bce      	ldr	r3, [pc, #824]	; (3dc8 <usart_init+0x354>)
    3a8e:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3a90:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3a92:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3a94:	07d2      	lsls	r2, r2, #31
    3a96:	d500      	bpl.n	3a9a <usart_init+0x26>
    3a98:	e18e      	b.n	3db8 <usart_init+0x344>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3a9a:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    3a9c:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3a9e:	0792      	lsls	r2, r2, #30
    3aa0:	d500      	bpl.n	3aa4 <usart_init+0x30>
    3aa2:	e189      	b.n	3db8 <usart_init+0x344>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    3aa4:	49c9      	ldr	r1, [pc, #804]	; (3dcc <usart_init+0x358>)
    3aa6:	69ca      	ldr	r2, [r1, #28]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    3aa8:	1c47      	adds	r7, r0, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3aaa:	3b1b      	subs	r3, #27
    3aac:	40bb      	lsls	r3, r7
    3aae:	4313      	orrs	r3, r2
    3ab0:	61cb      	str	r3, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3ab2:	a90f      	add	r1, sp, #60	; 0x3c
    3ab4:	2735      	movs	r7, #53	; 0x35
    3ab6:	5df3      	ldrb	r3, [r6, r7]
    3ab8:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3aba:	3013      	adds	r0, #19

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3abc:	b2c3      	uxtb	r3, r0
    3abe:	9302      	str	r3, [sp, #8]
    3ac0:	1c18      	adds	r0, r3, #0
    3ac2:	4bc3      	ldr	r3, [pc, #780]	; (3dd0 <usart_init+0x35c>)
    3ac4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3ac6:	9802      	ldr	r0, [sp, #8]
    3ac8:	4bc2      	ldr	r3, [pc, #776]	; (3dd4 <usart_init+0x360>)
    3aca:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3acc:	5df0      	ldrb	r0, [r6, r7]
    3ace:	2100      	movs	r1, #0
    3ad0:	4bc1      	ldr	r3, [pc, #772]	; (3dd8 <usart_init+0x364>)
    3ad2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    3ad4:	7af3      	ldrb	r3, [r6, #11]
    3ad6:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    3ad8:	232c      	movs	r3, #44	; 0x2c
    3ada:	5cf3      	ldrb	r3, [r6, r3]
    3adc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3ade:	232d      	movs	r3, #45	; 0x2d
    3ae0:	5cf3      	ldrb	r3, [r6, r3]
    3ae2:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    3ae4:	7ef3      	ldrb	r3, [r6, #27]
    3ae6:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3ae8:	2324      	movs	r3, #36	; 0x24
    3aea:	5cf3      	ldrb	r3, [r6, r3]
    3aec:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3aee:	682b      	ldr	r3, [r5, #0]
    3af0:	4698      	mov	r8, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3af2:	1c18      	adds	r0, r3, #0
    3af4:	4bb4      	ldr	r3, [pc, #720]	; (3dc8 <usart_init+0x354>)
    3af6:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3af8:	3013      	adds	r0, #19
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    3afa:	2200      	movs	r2, #0
    3afc:	230e      	movs	r3, #14
    3afe:	a906      	add	r1, sp, #24
    3b00:	468c      	mov	ip, r1
    3b02:	4463      	add	r3, ip
    3b04:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    3b06:	8a33      	ldrh	r3, [r6, #16]
    3b08:	469a      	mov	sl, r3
    3b0a:	2380      	movs	r3, #128	; 0x80
    3b0c:	01db      	lsls	r3, r3, #7
    3b0e:	459a      	cmp	sl, r3
    3b10:	d019      	beq.n	3b46 <usart_init+0xd2>
    3b12:	d804      	bhi.n	3b1e <usart_init+0xaa>
    3b14:	2380      	movs	r3, #128	; 0x80
    3b16:	019b      	lsls	r3, r3, #6
    3b18:	459a      	cmp	sl, r3
    3b1a:	d00a      	beq.n	3b32 <usart_init+0xbe>
    3b1c:	e12d      	b.n	3d7a <usart_init+0x306>
    3b1e:	23c0      	movs	r3, #192	; 0xc0
    3b20:	01db      	lsls	r3, r3, #7
    3b22:	459a      	cmp	sl, r3
    3b24:	d00a      	beq.n	3b3c <usart_init+0xc8>
    3b26:	2380      	movs	r3, #128	; 0x80
    3b28:	021b      	lsls	r3, r3, #8
    3b2a:	459a      	cmp	sl, r3
    3b2c:	d100      	bne.n	3b30 <usart_init+0xbc>
    3b2e:	e129      	b.n	3d84 <usart_init+0x310>
    3b30:	e123      	b.n	3d7a <usart_init+0x306>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3b32:	2310      	movs	r3, #16
    3b34:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3b36:	3b0f      	subs	r3, #15
    3b38:	9307      	str	r3, [sp, #28]
    3b3a:	e127      	b.n	3d8c <usart_init+0x318>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3b3c:	2308      	movs	r3, #8
    3b3e:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3b40:	3b07      	subs	r3, #7
    3b42:	9307      	str	r3, [sp, #28]
    3b44:	e122      	b.n	3d8c <usart_init+0x318>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3b46:	6833      	ldr	r3, [r6, #0]
    3b48:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    3b4a:	68f3      	ldr	r3, [r6, #12]
    3b4c:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3b4e:	6973      	ldr	r3, [r6, #20]
    3b50:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3b52:	7e33      	ldrb	r3, [r6, #24]
    3b54:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3b56:	232e      	movs	r3, #46	; 0x2e
    3b58:	5cf3      	ldrb	r3, [r6, r3]
    3b5a:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    3b5c:	6872      	ldr	r2, [r6, #4]
    3b5e:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    3b60:	2a00      	cmp	r2, #0
    3b62:	d015      	beq.n	3b90 <usart_init+0x11c>
    3b64:	2380      	movs	r3, #128	; 0x80
    3b66:	055b      	lsls	r3, r3, #21
    3b68:	429a      	cmp	r2, r3
    3b6a:	d136      	bne.n	3bda <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    3b6c:	232f      	movs	r3, #47	; 0x2f
    3b6e:	5cf3      	ldrb	r3, [r6, r3]
    3b70:	2b00      	cmp	r3, #0
    3b72:	d136      	bne.n	3be2 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3b74:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3b76:	4699      	mov	r9, r3
    3b78:	b2c0      	uxtb	r0, r0
    3b7a:	4b98      	ldr	r3, [pc, #608]	; (3ddc <usart_init+0x368>)
    3b7c:	4798      	blx	r3
    3b7e:	1c01      	adds	r1, r0, #0
    3b80:	4648      	mov	r0, r9
    3b82:	220e      	movs	r2, #14
    3b84:	ab06      	add	r3, sp, #24
    3b86:	469c      	mov	ip, r3
    3b88:	4462      	add	r2, ip
    3b8a:	4b95      	ldr	r3, [pc, #596]	; (3de0 <usart_init+0x36c>)
    3b8c:	4798      	blx	r3
    3b8e:	e025      	b.n	3bdc <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3b90:	2308      	movs	r3, #8
    3b92:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3b94:	2300      	movs	r3, #0
    3b96:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    3b98:	232f      	movs	r3, #47	; 0x2f
    3b9a:	5cf3      	ldrb	r3, [r6, r3]
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d00b      	beq.n	3bb8 <usart_init+0x144>
				status_code =
    3ba0:	464b      	mov	r3, r9
    3ba2:	9300      	str	r3, [sp, #0]
    3ba4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    3ba6:	6b31      	ldr	r1, [r6, #48]	; 0x30
    3ba8:	220e      	movs	r2, #14
    3baa:	ab06      	add	r3, sp, #24
    3bac:	469c      	mov	ip, r3
    3bae:	4462      	add	r2, ip
    3bb0:	9b07      	ldr	r3, [sp, #28]
    3bb2:	4f8c      	ldr	r7, [pc, #560]	; (3de4 <usart_init+0x370>)
    3bb4:	47b8      	blx	r7
    3bb6:	e011      	b.n	3bdc <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    3bb8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3bba:	1c1f      	adds	r7, r3, #0
    3bbc:	b2c0      	uxtb	r0, r0
    3bbe:	4b87      	ldr	r3, [pc, #540]	; (3ddc <usart_init+0x368>)
    3bc0:	4798      	blx	r3
    3bc2:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    3bc4:	464b      	mov	r3, r9
    3bc6:	9300      	str	r3, [sp, #0]
    3bc8:	1c38      	adds	r0, r7, #0
    3bca:	220e      	movs	r2, #14
    3bcc:	ab06      	add	r3, sp, #24
    3bce:	469c      	mov	ip, r3
    3bd0:	4462      	add	r2, ip
    3bd2:	9b07      	ldr	r3, [sp, #28]
    3bd4:	4f83      	ldr	r7, [pc, #524]	; (3de4 <usart_init+0x370>)
    3bd6:	47b8      	blx	r7
    3bd8:	e000      	b.n	3bdc <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    3bda:	2000      	movs	r0, #0
    3bdc:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    3bde:	d000      	beq.n	3be2 <usart_init+0x16e>
    3be0:	e0ea      	b.n	3db8 <usart_init+0x344>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    3be2:	7e73      	ldrb	r3, [r6, #25]
    3be4:	2b00      	cmp	r3, #0
    3be6:	d002      	beq.n	3bee <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3be8:	7eb3      	ldrb	r3, [r6, #26]
    3bea:	4642      	mov	r2, r8
    3bec:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3bee:	682a      	ldr	r2, [r5, #0]
    3bf0:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3bf2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d1fc      	bne.n	3bf2 <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    3bf8:	330e      	adds	r3, #14
    3bfa:	aa06      	add	r2, sp, #24
    3bfc:	4694      	mov	ip, r2
    3bfe:	4463      	add	r3, ip
    3c00:	881b      	ldrh	r3, [r3, #0]
    3c02:	4642      	mov	r2, r8
    3c04:	8193      	strh	r3, [r2, #12]
    3c06:	9b02      	ldr	r3, [sp, #8]
    3c08:	465a      	mov	r2, fp
    3c0a:	4313      	orrs	r3, r2
    3c0c:	9a03      	ldr	r2, [sp, #12]
    3c0e:	4313      	orrs	r3, r2
    3c10:	433b      	orrs	r3, r7
    3c12:	4652      	mov	r2, sl
    3c14:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3c16:	9a04      	ldr	r2, [sp, #16]
    3c18:	0212      	lsls	r2, r2, #8
    3c1a:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3c1c:	9a05      	ldr	r2, [sp, #20]
    3c1e:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    3c20:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    3c22:	232f      	movs	r3, #47	; 0x2f
    3c24:	5cf3      	ldrb	r3, [r6, r3]
    3c26:	2b00      	cmp	r3, #0
    3c28:	d101      	bne.n	3c2e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3c2a:	3304      	adds	r3, #4
    3c2c:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3c2e:	2324      	movs	r3, #36	; 0x24
    3c30:	5cf3      	ldrb	r3, [r6, r3]
    3c32:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3c34:	7e72      	ldrb	r2, [r6, #25]
    3c36:	0293      	lsls	r3, r2, #10
    3c38:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3c3a:	2226      	movs	r2, #38	; 0x26
    3c3c:	5cb2      	ldrb	r2, [r6, r2]
    3c3e:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3c40:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3c42:	222c      	movs	r2, #44	; 0x2c
    3c44:	5cb2      	ldrb	r2, [r6, r2]
    3c46:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3c48:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3c4a:	222d      	movs	r2, #45	; 0x2d
    3c4c:	5cb2      	ldrb	r2, [r6, r2]
    3c4e:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3c50:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    3c52:	7af1      	ldrb	r1, [r6, #11]
    3c54:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    3c56:	8933      	ldrh	r3, [r6, #8]
    3c58:	2bff      	cmp	r3, #255	; 0xff
    3c5a:	d004      	beq.n	3c66 <usart_init+0x1f2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    3c5c:	2280      	movs	r2, #128	; 0x80
    3c5e:	0452      	lsls	r2, r2, #17
    3c60:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    3c62:	4319      	orrs	r1, r3
    3c64:	e005      	b.n	3c72 <usart_init+0x1fe>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    3c66:	7ef3      	ldrb	r3, [r6, #27]
    3c68:	2b00      	cmp	r3, #0
    3c6a:	d002      	beq.n	3c72 <usart_init+0x1fe>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    3c6c:	2380      	movs	r3, #128	; 0x80
    3c6e:	04db      	lsls	r3, r3, #19
    3c70:	431f      	orrs	r7, r3
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    3c72:	4643      	mov	r3, r8
    3c74:	689a      	ldr	r2, [r3, #8]
						| config->lin_header_delay
    3c76:	8c30      	ldrh	r0, [r6, #32]
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    3c78:	2307      	movs	r3, #7
    3c7a:	4013      	ands	r3, r2
						| config->lin_header_delay
    3c7c:	4303      	orrs	r3, r0
						| config->lin_break_length;
    3c7e:	8c72      	ldrh	r2, [r6, #34]	; 0x22
    3c80:	4313      	orrs	r3, r2
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    3c82:	4642      	mov	r2, r8
    3c84:	6093      	str	r3, [r2, #8]
						| config->lin_header_delay
						| config->lin_break_length;

	if (config->lin_node != LIN_INVALID_MODE) {
    3c86:	69f3      	ldr	r3, [r6, #28]
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d002      	beq.n	3c92 <usart_init+0x21e>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    3c8c:	4a56      	ldr	r2, [pc, #344]	; (3de8 <usart_init+0x374>)
    3c8e:	4017      	ands	r7, r2
		ctrla |= config->lin_node;
    3c90:	431f      	orrs	r7, r3
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3c92:	2334      	movs	r3, #52	; 0x34
    3c94:	5cf3      	ldrb	r3, [r6, r3]
    3c96:	2b00      	cmp	r3, #0
    3c98:	d103      	bne.n	3ca2 <usart_init+0x22e>
    3c9a:	4b54      	ldr	r3, [pc, #336]	; (3dec <usart_init+0x378>)
    3c9c:	789b      	ldrb	r3, [r3, #2]
    3c9e:	079b      	lsls	r3, r3, #30
    3ca0:	d501      	bpl.n	3ca6 <usart_init+0x232>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    3ca2:	2380      	movs	r3, #128	; 0x80
    3ca4:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3ca6:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3ca8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3caa:	2b00      	cmp	r3, #0
    3cac:	d1fc      	bne.n	3ca8 <usart_init+0x234>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    3cae:	4643      	mov	r3, r8
    3cb0:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3cb2:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3cb4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	d1fc      	bne.n	3cb4 <usart_init+0x240>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    3cba:	4643      	mov	r3, r8
    3cbc:	601f      	str	r7, [r3, #0]

#ifdef FEATURE_USART_RS485
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    3cbe:	681a      	ldr	r2, [r3, #0]
    3cc0:	23f0      	movs	r3, #240	; 0xf0
    3cc2:	051b      	lsls	r3, r3, #20
    3cc4:	4013      	ands	r3, r2
    3cc6:	22e0      	movs	r2, #224	; 0xe0
    3cc8:	04d2      	lsls	r2, r2, #19
    3cca:	4293      	cmp	r3, r2
    3ccc:	d042      	beq.n	3d54 <usart_init+0x2e0>
		SERCOM_USART_CTRLA_FORM(0x07)) {
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    3cce:	4643      	mov	r3, r8
    3cd0:	689b      	ldr	r3, [r3, #8]
    3cd2:	2207      	movs	r2, #7
    3cd4:	4393      	bics	r3, r2
    3cd6:	4642      	mov	r2, r8
    3cd8:	6093      	str	r3, [r2, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    3cda:	6892      	ldr	r2, [r2, #8]
    3cdc:	2325      	movs	r3, #37	; 0x25
    3cde:	5cf3      	ldrb	r3, [r6, r3]
    3ce0:	2107      	movs	r1, #7
    3ce2:	400b      	ands	r3, r1
    3ce4:	4313      	orrs	r3, r2
    3ce6:	4642      	mov	r2, r8
    3ce8:	6093      	str	r3, [r2, #8]
    3cea:	e033      	b.n	3d54 <usart_init+0x2e0>
    3cec:	b2f9      	uxtb	r1, r7
    3cee:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3cf0:	aa0a      	add	r2, sp, #40	; 0x28
    3cf2:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    3cf4:	2800      	cmp	r0, #0
    3cf6:	d102      	bne.n	3cfe <usart_init+0x28a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3cf8:	1c20      	adds	r0, r4, #0
    3cfa:	4b3d      	ldr	r3, [pc, #244]	; (3df0 <usart_init+0x37c>)
    3cfc:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3cfe:	1c43      	adds	r3, r0, #1
    3d00:	d005      	beq.n	3d0e <usart_init+0x29a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3d02:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3d04:	0c00      	lsrs	r0, r0, #16
    3d06:	b2c0      	uxtb	r0, r0
    3d08:	1c31      	adds	r1, r6, #0
    3d0a:	4b3a      	ldr	r3, [pc, #232]	; (3df4 <usart_init+0x380>)
    3d0c:	4798      	blx	r3
    3d0e:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3d10:	2f04      	cmp	r7, #4
    3d12:	d1eb      	bne.n	3cec <usart_init+0x278>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    3d14:	2300      	movs	r3, #0
    3d16:	60eb      	str	r3, [r5, #12]
    3d18:	612b      	str	r3, [r5, #16]
    3d1a:	616b      	str	r3, [r5, #20]
    3d1c:	61ab      	str	r3, [r5, #24]
    3d1e:	61eb      	str	r3, [r5, #28]
    3d20:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    3d22:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    3d24:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    3d26:	2200      	movs	r2, #0
    3d28:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    3d2a:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    3d2c:	3330      	adds	r3, #48	; 0x30
    3d2e:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    3d30:	3301      	adds	r3, #1
    3d32:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    3d34:	3301      	adds	r3, #1
    3d36:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    3d38:	3301      	adds	r3, #1
    3d3a:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3d3c:	6828      	ldr	r0, [r5, #0]
    3d3e:	4b22      	ldr	r3, [pc, #136]	; (3dc8 <usart_init+0x354>)
    3d40:	4798      	blx	r3
    3d42:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    3d44:	492c      	ldr	r1, [pc, #176]	; (3df8 <usart_init+0x384>)
    3d46:	4b2d      	ldr	r3, [pc, #180]	; (3dfc <usart_init+0x388>)
    3d48:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3d4a:	00a4      	lsls	r4, r4, #2
    3d4c:	4b2c      	ldr	r3, [pc, #176]	; (3e00 <usart_init+0x38c>)
    3d4e:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    3d50:	2300      	movs	r3, #0
    3d52:	e031      	b.n	3db8 <usart_init+0x344>
    3d54:	ab0e      	add	r3, sp, #56	; 0x38
    3d56:	2280      	movs	r2, #128	; 0x80
    3d58:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3d5a:	2200      	movs	r2, #0
    3d5c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    3d5e:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3d60:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    3d62:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    3d64:	930a      	str	r3, [sp, #40]	; 0x28
    3d66:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    3d68:	930b      	str	r3, [sp, #44]	; 0x2c
    3d6a:	6c33      	ldr	r3, [r6, #64]	; 0x40
    3d6c:	930c      	str	r3, [sp, #48]	; 0x30
    3d6e:	6c73      	ldr	r3, [r6, #68]	; 0x44
    3d70:	9302      	str	r3, [sp, #8]
    3d72:	930d      	str	r3, [sp, #52]	; 0x34
    3d74:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3d76:	ae0e      	add	r6, sp, #56	; 0x38
    3d78:	e7b8      	b.n	3cec <usart_init+0x278>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3d7a:	2310      	movs	r3, #16
    3d7c:	4699      	mov	r9, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3d7e:	2300      	movs	r3, #0
    3d80:	9307      	str	r3, [sp, #28]
    3d82:	e003      	b.n	3d8c <usart_init+0x318>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3d84:	2303      	movs	r3, #3
    3d86:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3d88:	2300      	movs	r3, #0
    3d8a:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3d8c:	6833      	ldr	r3, [r6, #0]
    3d8e:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    3d90:	68f3      	ldr	r3, [r6, #12]
    3d92:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3d94:	6973      	ldr	r3, [r6, #20]
    3d96:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3d98:	7e33      	ldrb	r3, [r6, #24]
    3d9a:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3d9c:	232e      	movs	r3, #46	; 0x2e
    3d9e:	5cf3      	ldrb	r3, [r6, r3]
    3da0:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    3da2:	6872      	ldr	r2, [r6, #4]
    3da4:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    3da6:	2a00      	cmp	r2, #0
    3da8:	d100      	bne.n	3dac <usart_init+0x338>
    3daa:	e6f5      	b.n	3b98 <usart_init+0x124>
    3dac:	2380      	movs	r3, #128	; 0x80
    3dae:	055b      	lsls	r3, r3, #21
    3db0:	429a      	cmp	r2, r3
    3db2:	d100      	bne.n	3db6 <usart_init+0x342>
    3db4:	e6da      	b.n	3b6c <usart_init+0xf8>
    3db6:	e714      	b.n	3be2 <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3db8:	1c18      	adds	r0, r3, #0
    3dba:	b011      	add	sp, #68	; 0x44
    3dbc:	bc3c      	pop	{r2, r3, r4, r5}
    3dbe:	4690      	mov	r8, r2
    3dc0:	4699      	mov	r9, r3
    3dc2:	46a2      	mov	sl, r4
    3dc4:	46ab      	mov	fp, r5
    3dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dc8:	0000396d 	.word	0x0000396d
    3dcc:	40000800 	.word	0x40000800
    3dd0:	0000431d 	.word	0x0000431d
    3dd4:	000042b5 	.word	0x000042b5
    3dd8:	00003795 	.word	0x00003795
    3ddc:	00004341 	.word	0x00004341
    3de0:	000035a5 	.word	0x000035a5
    3de4:	000035cd 	.word	0x000035cd
    3de8:	f0ffffff 	.word	0xf0ffffff
    3dec:	41002000 	.word	0x41002000
    3df0:	000037e1 	.word	0x000037e1
    3df4:	00004419 	.word	0x00004419
    3df8:	00003ea9 	.word	0x00003ea9
    3dfc:	000039ad 	.word	0x000039ad
    3e00:	20000e0c 	.word	0x20000e0c

00003e04 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    3e04:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e06:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3e08:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    3e0a:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3e0c:	2c00      	cmp	r4, #0
    3e0e:	d00d      	beq.n	3e2c <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    3e10:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
    3e12:	b280      	uxth	r0, r0
		return STATUS_BUSY;
    3e14:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    3e16:	2800      	cmp	r0, #0
    3e18:	d108      	bne.n	3e2c <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3e1a:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3e1c:	2a00      	cmp	r2, #0
    3e1e:	d1fc      	bne.n	3e1a <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    3e20:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    3e22:	2102      	movs	r1, #2
    3e24:	7e1a      	ldrb	r2, [r3, #24]
    3e26:	420a      	tst	r2, r1
    3e28:	d0fc      	beq.n	3e24 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    3e2a:	2200      	movs	r2, #0
}
    3e2c:	1c10      	adds	r0, r2, #0
    3e2e:	bd10      	pop	{r4, pc}

00003e30 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    3e30:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e32:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    3e34:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    3e36:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    3e38:	2a00      	cmp	r2, #0
    3e3a:	d033      	beq.n	3ea4 <usart_read_wait+0x74>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    3e3c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    3e3e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    3e40:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    3e42:	2a00      	cmp	r2, #0
    3e44:	d12e      	bne.n	3ea4 <usart_read_wait+0x74>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    3e46:	7e22      	ldrb	r2, [r4, #24]
    3e48:	0752      	lsls	r2, r2, #29
    3e4a:	d52b      	bpl.n	3ea4 <usart_read_wait+0x74>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3e4c:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d1fc      	bne.n	3e4c <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3e52:	8b63      	ldrh	r3, [r4, #26]
    3e54:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    3e56:	065a      	lsls	r2, r3, #25
    3e58:	d021      	beq.n	3e9e <usart_read_wait+0x6e>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    3e5a:	079a      	lsls	r2, r3, #30
    3e5c:	d503      	bpl.n	3e66 <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    3e5e:	2302      	movs	r3, #2
    3e60:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    3e62:	3318      	adds	r3, #24
    3e64:	e01e      	b.n	3ea4 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3e66:	075a      	lsls	r2, r3, #29
    3e68:	d503      	bpl.n	3e72 <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3e6a:	2304      	movs	r3, #4
    3e6c:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    3e6e:	331a      	adds	r3, #26
    3e70:	e018      	b.n	3ea4 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3e72:	07da      	lsls	r2, r3, #31
    3e74:	d503      	bpl.n	3e7e <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    3e76:	2301      	movs	r3, #1
    3e78:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    3e7a:	3312      	adds	r3, #18
    3e7c:	e012      	b.n	3ea4 <usart_read_wait+0x74>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    3e7e:	06da      	lsls	r2, r3, #27
    3e80:	d505      	bpl.n	3e8e <usart_read_wait+0x5e>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    3e82:	8b62      	ldrh	r2, [r4, #26]
    3e84:	2310      	movs	r3, #16
    3e86:	4313      	orrs	r3, r2
    3e88:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    3e8a:	2342      	movs	r3, #66	; 0x42
    3e8c:	e00a      	b.n	3ea4 <usart_read_wait+0x74>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    3e8e:	069b      	lsls	r3, r3, #26
    3e90:	d505      	bpl.n	3e9e <usart_read_wait+0x6e>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    3e92:	8b62      	ldrh	r2, [r4, #26]
    3e94:	2320      	movs	r3, #32
    3e96:	4313      	orrs	r3, r2
    3e98:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    3e9a:	2341      	movs	r3, #65	; 0x41
    3e9c:	e002      	b.n	3ea4 <usart_read_wait+0x74>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    3e9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3ea0:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    3ea2:	2300      	movs	r3, #0
}
    3ea4:	1c18      	adds	r0, r3, #0
    3ea6:	bd10      	pop	{r4, pc}

00003ea8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    3ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    3eaa:	0080      	lsls	r0, r0, #2
    3eac:	4b66      	ldr	r3, [pc, #408]	; (4048 <_usart_interrupt_handler+0x1a0>)
    3eae:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    3eb0:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3eb2:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	d1fc      	bne.n	3eb2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    3eb8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    3eba:	7da6      	ldrb	r6, [r4, #22]
    3ebc:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    3ebe:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    3ec0:	5ceb      	ldrb	r3, [r5, r3]
    3ec2:	2230      	movs	r2, #48	; 0x30
    3ec4:	5caf      	ldrb	r7, [r5, r2]
    3ec6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    3ec8:	07f3      	lsls	r3, r6, #31
    3eca:	d522      	bpl.n	3f12 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    3ecc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3ece:	b29b      	uxth	r3, r3
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	d01c      	beq.n	3f0e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3ed4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3ed6:	7813      	ldrb	r3, [r2, #0]
    3ed8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    3eda:	1c51      	adds	r1, r2, #1
    3edc:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3ede:	7969      	ldrb	r1, [r5, #5]
    3ee0:	2901      	cmp	r1, #1
    3ee2:	d001      	beq.n	3ee8 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3ee4:	b29b      	uxth	r3, r3
    3ee6:	e004      	b.n	3ef2 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    3ee8:	7851      	ldrb	r1, [r2, #1]
    3eea:	0209      	lsls	r1, r1, #8
    3eec:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    3eee:	3202      	adds	r2, #2
    3ef0:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    3ef2:	05db      	lsls	r3, r3, #23
    3ef4:	0ddb      	lsrs	r3, r3, #23
    3ef6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    3ef8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3efa:	3b01      	subs	r3, #1
    3efc:	b29b      	uxth	r3, r3
    3efe:	85eb      	strh	r3, [r5, #46]	; 0x2e
    3f00:	2b00      	cmp	r3, #0
    3f02:	d106      	bne.n	3f12 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3f04:	3301      	adds	r3, #1
    3f06:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    3f08:	3301      	adds	r3, #1
    3f0a:	75a3      	strb	r3, [r4, #22]
    3f0c:	e001      	b.n	3f12 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3f0e:	2301      	movs	r3, #1
    3f10:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    3f12:	07b3      	lsls	r3, r6, #30
    3f14:	d509      	bpl.n	3f2a <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    3f16:	2302      	movs	r3, #2
    3f18:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    3f1a:	2200      	movs	r2, #0
    3f1c:	3331      	adds	r3, #49	; 0x31
    3f1e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    3f20:	07fb      	lsls	r3, r7, #31
    3f22:	d502      	bpl.n	3f2a <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    3f24:	1c28      	adds	r0, r5, #0
    3f26:	68eb      	ldr	r3, [r5, #12]
    3f28:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3f2a:	0773      	lsls	r3, r6, #29
    3f2c:	d56d      	bpl.n	400a <_usart_interrupt_handler+0x162>

		if (module->remaining_rx_buffer_length) {
    3f2e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3f30:	b29b      	uxth	r3, r3
    3f32:	2b00      	cmp	r3, #0
    3f34:	d067      	beq.n	4006 <_usart_interrupt_handler+0x15e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3f36:	8b63      	ldrh	r3, [r4, #26]
    3f38:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    3f3a:	071a      	lsls	r2, r3, #28
    3f3c:	d402      	bmi.n	3f44 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3f3e:	227f      	movs	r2, #127	; 0x7f
    3f40:	4013      	ands	r3, r2
    3f42:	e001      	b.n	3f48 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    3f44:	2277      	movs	r2, #119	; 0x77
    3f46:	4013      	ands	r3, r2
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    3f48:	065a      	lsls	r2, r3, #25
    3f4a:	d501      	bpl.n	3f50 <_usart_interrupt_handler+0xa8>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    3f4c:	2240      	movs	r2, #64	; 0x40
    3f4e:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    3f50:	2b00      	cmp	r3, #0
    3f52:	d036      	beq.n	3fc2 <_usart_interrupt_handler+0x11a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    3f54:	079a      	lsls	r2, r3, #30
    3f56:	d507      	bpl.n	3f68 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    3f58:	221a      	movs	r2, #26
    3f5a:	2332      	movs	r3, #50	; 0x32
    3f5c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    3f5e:	8b62      	ldrh	r2, [r4, #26]
    3f60:	3b30      	subs	r3, #48	; 0x30
    3f62:	4313      	orrs	r3, r2
    3f64:	8363      	strh	r3, [r4, #26]
    3f66:	e026      	b.n	3fb6 <_usart_interrupt_handler+0x10e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3f68:	075a      	lsls	r2, r3, #29
    3f6a:	d507      	bpl.n	3f7c <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    3f6c:	221e      	movs	r2, #30
    3f6e:	2332      	movs	r3, #50	; 0x32
    3f70:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    3f72:	8b62      	ldrh	r2, [r4, #26]
    3f74:	3b2e      	subs	r3, #46	; 0x2e
    3f76:	4313      	orrs	r3, r2
    3f78:	8363      	strh	r3, [r4, #26]
    3f7a:	e01c      	b.n	3fb6 <_usart_interrupt_handler+0x10e>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3f7c:	07da      	lsls	r2, r3, #31
    3f7e:	d507      	bpl.n	3f90 <_usart_interrupt_handler+0xe8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    3f80:	2213      	movs	r2, #19
    3f82:	2332      	movs	r3, #50	; 0x32
    3f84:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    3f86:	8b62      	ldrh	r2, [r4, #26]
    3f88:	3b31      	subs	r3, #49	; 0x31
    3f8a:	4313      	orrs	r3, r2
    3f8c:	8363      	strh	r3, [r4, #26]
    3f8e:	e012      	b.n	3fb6 <_usart_interrupt_handler+0x10e>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    3f90:	06da      	lsls	r2, r3, #27
    3f92:	d507      	bpl.n	3fa4 <_usart_interrupt_handler+0xfc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    3f94:	2242      	movs	r2, #66	; 0x42
    3f96:	2332      	movs	r3, #50	; 0x32
    3f98:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    3f9a:	8b62      	ldrh	r2, [r4, #26]
    3f9c:	3b22      	subs	r3, #34	; 0x22
    3f9e:	4313      	orrs	r3, r2
    3fa0:	8363      	strh	r3, [r4, #26]
    3fa2:	e008      	b.n	3fb6 <_usart_interrupt_handler+0x10e>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    3fa4:	069b      	lsls	r3, r3, #26
    3fa6:	d506      	bpl.n	3fb6 <_usart_interrupt_handler+0x10e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    3fa8:	2241      	movs	r2, #65	; 0x41
    3faa:	2332      	movs	r3, #50	; 0x32
    3fac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    3fae:	8b62      	ldrh	r2, [r4, #26]
    3fb0:	3b12      	subs	r3, #18
    3fb2:	4313      	orrs	r3, r2
    3fb4:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    3fb6:	077b      	lsls	r3, r7, #29
    3fb8:	d527      	bpl.n	400a <_usart_interrupt_handler+0x162>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3fba:	1c28      	adds	r0, r5, #0
    3fbc:	696b      	ldr	r3, [r5, #20]
    3fbe:	4798      	blx	r3
    3fc0:	e023      	b.n	400a <_usart_interrupt_handler+0x162>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3fc2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3fc4:	05db      	lsls	r3, r3, #23
    3fc6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    3fc8:	b2da      	uxtb	r2, r3
    3fca:	6a69      	ldr	r1, [r5, #36]	; 0x24
    3fcc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    3fce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3fd0:	1c51      	adds	r1, r2, #1
    3fd2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3fd4:	7969      	ldrb	r1, [r5, #5]
    3fd6:	2901      	cmp	r1, #1
    3fd8:	d104      	bne.n	3fe4 <_usart_interrupt_handler+0x13c>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    3fda:	0a1b      	lsrs	r3, r3, #8
    3fdc:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    3fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3fe0:	3301      	adds	r3, #1
    3fe2:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    3fe4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3fe6:	3b01      	subs	r3, #1
    3fe8:	b29b      	uxth	r3, r3
    3fea:	85ab      	strh	r3, [r5, #44]	; 0x2c
    3fec:	2b00      	cmp	r3, #0
    3fee:	d10c      	bne.n	400a <_usart_interrupt_handler+0x162>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3ff0:	3304      	adds	r3, #4
    3ff2:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    3ff4:	2200      	movs	r2, #0
    3ff6:	332e      	adds	r3, #46	; 0x2e
    3ff8:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    3ffa:	07bb      	lsls	r3, r7, #30
    3ffc:	d505      	bpl.n	400a <_usart_interrupt_handler+0x162>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    3ffe:	1c28      	adds	r0, r5, #0
    4000:	692b      	ldr	r3, [r5, #16]
    4002:	4798      	blx	r3
    4004:	e001      	b.n	400a <_usart_interrupt_handler+0x162>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4006:	2304      	movs	r3, #4
    4008:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    400a:	06f3      	lsls	r3, r6, #27
    400c:	d507      	bpl.n	401e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    400e:	2310      	movs	r3, #16
    4010:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4012:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4014:	06fb      	lsls	r3, r7, #27
    4016:	d502      	bpl.n	401e <_usart_interrupt_handler+0x176>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4018:	1c28      	adds	r0, r5, #0
    401a:	69eb      	ldr	r3, [r5, #28]
    401c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    401e:	06b3      	lsls	r3, r6, #26
    4020:	d507      	bpl.n	4032 <_usart_interrupt_handler+0x18a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4022:	2320      	movs	r3, #32
    4024:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4026:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4028:	073b      	lsls	r3, r7, #28
    402a:	d502      	bpl.n	4032 <_usart_interrupt_handler+0x18a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    402c:	1c28      	adds	r0, r5, #0
    402e:	69ab      	ldr	r3, [r5, #24]
    4030:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4032:	0733      	lsls	r3, r6, #28
    4034:	d507      	bpl.n	4046 <_usart_interrupt_handler+0x19e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4036:	2308      	movs	r3, #8
    4038:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    403a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    403c:	06bb      	lsls	r3, r7, #26
    403e:	d502      	bpl.n	4046 <_usart_interrupt_handler+0x19e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4040:	6a2b      	ldr	r3, [r5, #32]
    4042:	1c28      	adds	r0, r5, #0
    4044:	4798      	blx	r3
		}
	}
#endif
}
    4046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4048:	20000e0c 	.word	0x20000e0c

0000404c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    404c:	b508      	push	{r3, lr}
	switch (clock_source) {
    404e:	2807      	cmp	r0, #7
    4050:	d803      	bhi.n	405a <system_clock_source_get_hz+0xe>
    4052:	0080      	lsls	r0, r0, #2
    4054:	4b0f      	ldr	r3, [pc, #60]	; (4094 <system_clock_source_get_hz+0x48>)
    4056:	581b      	ldr	r3, [r3, r0]
    4058:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    405a:	2000      	movs	r0, #0
    405c:	e018      	b.n	4090 <system_clock_source_get_hz+0x44>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    405e:	4b0e      	ldr	r3, [pc, #56]	; (4098 <system_clock_source_get_hz+0x4c>)
    4060:	6858      	ldr	r0, [r3, #4]
    4062:	e015      	b.n	4090 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    4064:	4b0d      	ldr	r3, [pc, #52]	; (409c <system_clock_source_get_hz+0x50>)
    4066:	7d5b      	ldrb	r3, [r3, #21]
    4068:	210f      	movs	r1, #15
    406a:	4019      	ands	r1, r3
    406c:	3101      	adds	r1, #1
    406e:	480c      	ldr	r0, [pc, #48]	; (40a0 <system_clock_source_get_hz+0x54>)
    4070:	4b0c      	ldr	r3, [pc, #48]	; (40a4 <system_clock_source_get_hz+0x58>)
    4072:	4798      	blx	r3
    4074:	e00c      	b.n	4090 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4076:	4b08      	ldr	r3, [pc, #32]	; (4098 <system_clock_source_get_hz+0x4c>)
    4078:	6898      	ldr	r0, [r3, #8]
    407a:	e009      	b.n	4090 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    407c:	4b07      	ldr	r3, [pc, #28]	; (409c <system_clock_source_get_hz+0x50>)
    407e:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    4080:	2000      	movs	r0, #0

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    4082:	079b      	lsls	r3, r3, #30
    4084:	d504      	bpl.n	4090 <system_clock_source_get_hz+0x44>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    4086:	4b04      	ldr	r3, [pc, #16]	; (4098 <system_clock_source_get_hz+0x4c>)
    4088:	6818      	ldr	r0, [r3, #0]
    408a:	e001      	b.n	4090 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    408c:	2080      	movs	r0, #128	; 0x80
    408e:	0200      	lsls	r0, r0, #8
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    4090:	bd08      	pop	{r3, pc}
    4092:	46c0      	nop			; (mov r8, r8)
    4094:	00006138 	.word	0x00006138
    4098:	20000c14 	.word	0x20000c14
    409c:	40001000 	.word	0x40001000
    40a0:	02dc6c00 	.word	0x02dc6c00
    40a4:	00004cb9 	.word	0x00004cb9

000040a8 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    40a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    40aa:	4647      	mov	r7, r8
    40ac:	b480      	push	{r7}
    40ae:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    40b0:	2203      	movs	r2, #3
    40b2:	4b1a      	ldr	r3, [pc, #104]	; (411c <system_clock_init+0x74>)
    40b4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    40b6:	4a1a      	ldr	r2, [pc, #104]	; (4120 <system_clock_init+0x78>)
    40b8:	6853      	ldr	r3, [r2, #4]
    40ba:	211e      	movs	r1, #30
    40bc:	438b      	bics	r3, r1
    40be:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    40c0:	4b18      	ldr	r3, [pc, #96]	; (4124 <system_clock_init+0x7c>)
    40c2:	7d19      	ldrb	r1, [r3, #20]
    40c4:	2280      	movs	r2, #128	; 0x80
    40c6:	430a      	orrs	r2, r1
    40c8:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    40ca:	2205      	movs	r2, #5
    40cc:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    40ce:	1c1a      	adds	r2, r3, #0
    40d0:	6993      	ldr	r3, [r2, #24]
    40d2:	2b00      	cmp	r3, #0
    40d4:	d1fc      	bne.n	40d0 <system_clock_init+0x28>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    40d6:	4b14      	ldr	r3, [pc, #80]	; (4128 <system_clock_init+0x80>)
    40d8:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    40da:	ac01      	add	r4, sp, #4
    40dc:	2500      	movs	r5, #0
    40de:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
    40e0:	2606      	movs	r6, #6
    40e2:	7026      	strb	r6, [r4, #0]
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    40e4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    40e6:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    40e8:	9602      	str	r6, [sp, #8]
    40ea:	2003      	movs	r0, #3
    40ec:	1c21      	adds	r1, r4, #0
    40ee:	4b0f      	ldr	r3, [pc, #60]	; (412c <system_clock_init+0x84>)
    40f0:	4698      	mov	r8, r3
    40f2:	4798      	blx	r3
    40f4:	2003      	movs	r0, #3
    40f6:	4f0e      	ldr	r7, [pc, #56]	; (4130 <system_clock_init+0x88>)
    40f8:	47b8      	blx	r7
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    40fa:	2301      	movs	r3, #1
    40fc:	4a0d      	ldr	r2, [pc, #52]	; (4134 <system_clock_init+0x8c>)
    40fe:	7113      	strb	r3, [r2, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4100:	6063      	str	r3, [r4, #4]
	config->high_when_disabled = false;
    4102:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
    4104:	7026      	strb	r6, [r4, #0]
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    4106:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    4108:	7265      	strb	r5, [r4, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    410a:	2000      	movs	r0, #0
    410c:	1c21      	adds	r1, r4, #0
    410e:	47c0      	blx	r8
    4110:	2000      	movs	r0, #0
    4112:	47b8      	blx	r7
#endif

}
    4114:	b004      	add	sp, #16
    4116:	bc04      	pop	{r2}
    4118:	4690      	mov	r8, r2
    411a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    411c:	40001800 	.word	0x40001800
    4120:	41004000 	.word	0x41004000
    4124:	40001000 	.word	0x40001000
    4128:	00004139 	.word	0x00004139
    412c:	0000415d 	.word	0x0000415d
    4130:	00004209 	.word	0x00004209
    4134:	40000800 	.word	0x40000800

00004138 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    4138:	4a06      	ldr	r2, [pc, #24]	; (4154 <system_gclk_init+0x1c>)
    413a:	6951      	ldr	r1, [r2, #20]
    413c:	2380      	movs	r3, #128	; 0x80
    413e:	430b      	orrs	r3, r1
    4140:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    4142:	2201      	movs	r2, #1
    4144:	4b04      	ldr	r3, [pc, #16]	; (4158 <system_gclk_init+0x20>)
    4146:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    4148:	1c19      	adds	r1, r3, #0
    414a:	780b      	ldrb	r3, [r1, #0]
    414c:	4213      	tst	r3, r2
    414e:	d1fc      	bne.n	414a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4150:	4770      	bx	lr
    4152:	46c0      	nop			; (mov r8, r8)
    4154:	40000800 	.word	0x40000800
    4158:	40001c00 	.word	0x40001c00

0000415c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    415c:	b570      	push	{r4, r5, r6, lr}
    415e:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4160:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4162:	784b      	ldrb	r3, [r1, #1]
    4164:	2b00      	cmp	r3, #0
    4166:	d002      	beq.n	416e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4168:	2380      	movs	r3, #128	; 0x80
    416a:	00db      	lsls	r3, r3, #3
    416c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    416e:	7a4b      	ldrb	r3, [r1, #9]
    4170:	2b00      	cmp	r3, #0
    4172:	d002      	beq.n	417a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4174:	2380      	movs	r3, #128	; 0x80
    4176:	011b      	lsls	r3, r3, #4
    4178:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    417a:	684a      	ldr	r2, [r1, #4]
    417c:	2a01      	cmp	r2, #1
    417e:	d917      	bls.n	41b0 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4180:	1e53      	subs	r3, r2, #1
    4182:	421a      	tst	r2, r3
    4184:	d10f      	bne.n	41a6 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4186:	2a02      	cmp	r2, #2
    4188:	d906      	bls.n	4198 <system_gclk_gen_set_config+0x3c>
    418a:	2302      	movs	r3, #2
    418c:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    418e:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4190:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4192:	429a      	cmp	r2, r3
    4194:	d8fb      	bhi.n	418e <system_gclk_gen_set_config+0x32>
    4196:	e000      	b.n	419a <system_gclk_gen_set_config+0x3e>
    4198:	2000      	movs	r0, #0
    419a:	2380      	movs	r3, #128	; 0x80
    419c:	015b      	lsls	r3, r3, #5
    419e:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    41a0:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    41a2:	4305      	orrs	r5, r0
    41a4:	e004      	b.n	41b0 <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    41a6:	0412      	lsls	r2, r2, #16
    41a8:	2380      	movs	r3, #128	; 0x80
    41aa:	009b      	lsls	r3, r3, #2
    41ac:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    41ae:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    41b0:	7a0b      	ldrb	r3, [r1, #8]
    41b2:	2b00      	cmp	r3, #0
    41b4:	d002      	beq.n	41bc <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    41b6:	2380      	movs	r3, #128	; 0x80
    41b8:	019b      	lsls	r3, r3, #6
    41ba:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    41bc:	2604      	movs	r6, #4
    41be:	40a6      	lsls	r6, r4
    41c0:	490d      	ldr	r1, [pc, #52]	; (41f8 <system_gclk_gen_set_config+0x9c>)
    41c2:	4a0e      	ldr	r2, [pc, #56]	; (41fc <system_gclk_gen_set_config+0xa0>)
    41c4:	684b      	ldr	r3, [r1, #4]
    41c6:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    41c8:	421e      	tst	r6, r3
    41ca:	d1fb      	bne.n	41c4 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    41cc:	4b0c      	ldr	r3, [pc, #48]	; (4200 <system_gclk_gen_set_config+0xa4>)
    41ce:	4798      	blx	r3
    41d0:	00a4      	lsls	r4, r4, #2
    41d2:	4b09      	ldr	r3, [pc, #36]	; (41f8 <system_gclk_gen_set_config+0x9c>)
    41d4:	469c      	mov	ip, r3
    41d6:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    41d8:	6a20      	ldr	r0, [r4, #32]
    41da:	2380      	movs	r3, #128	; 0x80
    41dc:	005b      	lsls	r3, r3, #1
    41de:	4018      	ands	r0, r3
    41e0:	4328      	orrs	r0, r5
    41e2:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    41e4:	4661      	mov	r1, ip
    41e6:	4a05      	ldr	r2, [pc, #20]	; (41fc <system_gclk_gen_set_config+0xa0>)
    41e8:	684b      	ldr	r3, [r1, #4]
    41ea:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    41ec:	421e      	tst	r6, r3
    41ee:	d1fb      	bne.n	41e8 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    41f0:	4b04      	ldr	r3, [pc, #16]	; (4204 <system_gclk_gen_set_config+0xa8>)
    41f2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    41f4:	bd70      	pop	{r4, r5, r6, pc}
    41f6:	46c0      	nop			; (mov r8, r8)
    41f8:	40001c00 	.word	0x40001c00
    41fc:	000007fc 	.word	0x000007fc
    4200:	00003319 	.word	0x00003319
    4204:	00003359 	.word	0x00003359

00004208 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4208:	b510      	push	{r4, lr}
    420a:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    420c:	2204      	movs	r2, #4
    420e:	4082      	lsls	r2, r0
    4210:	4809      	ldr	r0, [pc, #36]	; (4238 <system_gclk_gen_enable+0x30>)
    4212:	490a      	ldr	r1, [pc, #40]	; (423c <system_gclk_gen_enable+0x34>)
    4214:	6843      	ldr	r3, [r0, #4]
    4216:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    4218:	421a      	tst	r2, r3
    421a:	d1fb      	bne.n	4214 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    421c:	4b08      	ldr	r3, [pc, #32]	; (4240 <system_gclk_gen_enable+0x38>)
    421e:	4798      	blx	r3
    4220:	00a4      	lsls	r4, r4, #2
    4222:	4b05      	ldr	r3, [pc, #20]	; (4238 <system_gclk_gen_enable+0x30>)
    4224:	469c      	mov	ip, r3
    4226:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    4228:	6a23      	ldr	r3, [r4, #32]
    422a:	2280      	movs	r2, #128	; 0x80
    422c:	0052      	lsls	r2, r2, #1
    422e:	4313      	orrs	r3, r2
    4230:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4232:	4b04      	ldr	r3, [pc, #16]	; (4244 <system_gclk_gen_enable+0x3c>)
    4234:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4236:	bd10      	pop	{r4, pc}
    4238:	40001c00 	.word	0x40001c00
    423c:	000007fc 	.word	0x000007fc
    4240:	00003319 	.word	0x00003319
    4244:	00003359 	.word	0x00003359

00004248 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    424a:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    424c:	2204      	movs	r2, #4
    424e:	4082      	lsls	r2, r0
    4250:	4812      	ldr	r0, [pc, #72]	; (429c <system_gclk_gen_get_hz+0x54>)
    4252:	4913      	ldr	r1, [pc, #76]	; (42a0 <system_gclk_gen_get_hz+0x58>)
    4254:	6843      	ldr	r3, [r0, #4]
    4256:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    4258:	421a      	tst	r2, r3
    425a:	d1fb      	bne.n	4254 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    425c:	4b11      	ldr	r3, [pc, #68]	; (42a4 <system_gclk_gen_get_hz+0x5c>)
    425e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    4260:	4f0e      	ldr	r7, [pc, #56]	; (429c <system_gclk_gen_get_hz+0x54>)
    4262:	3408      	adds	r4, #8
    4264:	00a4      	lsls	r4, r4, #2
    4266:	59e3      	ldr	r3, [r4, r7]
    4268:	2007      	movs	r0, #7
    426a:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    426c:	4b0e      	ldr	r3, [pc, #56]	; (42a8 <system_gclk_gen_get_hz+0x60>)
    426e:	4798      	blx	r3
    4270:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    4272:	59e5      	ldr	r5, [r4, r7]
    4274:	04ed      	lsls	r5, r5, #19
    4276:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    4278:	59e4      	ldr	r4, [r4, r7]
    427a:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    427c:	4b0b      	ldr	r3, [pc, #44]	; (42ac <system_gclk_gen_get_hz+0x64>)
    427e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4280:	2d00      	cmp	r5, #0
    4282:	d107      	bne.n	4294 <system_gclk_gen_get_hz+0x4c>
    4284:	2c01      	cmp	r4, #1
    4286:	d907      	bls.n	4298 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    4288:	1c30      	adds	r0, r6, #0
    428a:	1c21      	adds	r1, r4, #0
    428c:	4b08      	ldr	r3, [pc, #32]	; (42b0 <system_gclk_gen_get_hz+0x68>)
    428e:	4798      	blx	r3
    4290:	1c06      	adds	r6, r0, #0
    4292:	e001      	b.n	4298 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4294:	3401      	adds	r4, #1
    4296:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    4298:	1c30      	adds	r0, r6, #0
    429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    429c:	40001c00 	.word	0x40001c00
    42a0:	000007fc 	.word	0x000007fc
    42a4:	00003319 	.word	0x00003319
    42a8:	0000404d 	.word	0x0000404d
    42ac:	00003359 	.word	0x00003359
    42b0:	00004cb9 	.word	0x00004cb9

000042b4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    42b4:	b510      	push	{r4, lr}
    42b6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    42b8:	4b08      	ldr	r3, [pc, #32]	; (42dc <system_gclk_chan_enable+0x28>)
    42ba:	4798      	blx	r3
    42bc:	00a4      	lsls	r4, r4, #2
    42be:	4b08      	ldr	r3, [pc, #32]	; (42e0 <system_gclk_chan_enable+0x2c>)
    42c0:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    42c2:	2280      	movs	r2, #128	; 0x80
    42c4:	5881      	ldr	r1, [r0, r2]
    42c6:	2340      	movs	r3, #64	; 0x40
    42c8:	430b      	orrs	r3, r1
    42ca:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    42cc:	2180      	movs	r1, #128	; 0x80
    42ce:	3a40      	subs	r2, #64	; 0x40
    42d0:	5843      	ldr	r3, [r0, r1]
    42d2:	421a      	tst	r2, r3
    42d4:	d0fc      	beq.n	42d0 <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    42d6:	4b03      	ldr	r3, [pc, #12]	; (42e4 <system_gclk_chan_enable+0x30>)
    42d8:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    42da:	bd10      	pop	{r4, pc}
    42dc:	00003319 	.word	0x00003319
    42e0:	40001c00 	.word	0x40001c00
    42e4:	00003359 	.word	0x00003359

000042e8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    42e8:	b510      	push	{r4, lr}
    42ea:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    42ec:	4b08      	ldr	r3, [pc, #32]	; (4310 <system_gclk_chan_disable+0x28>)
    42ee:	4798      	blx	r3
    42f0:	00a4      	lsls	r4, r4, #2
    42f2:	4b08      	ldr	r3, [pc, #32]	; (4314 <system_gclk_chan_disable+0x2c>)
    42f4:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    42f6:	2280      	movs	r2, #128	; 0x80
    42f8:	5883      	ldr	r3, [r0, r2]
    42fa:	2140      	movs	r1, #64	; 0x40
    42fc:	438b      	bics	r3, r1
    42fe:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    4300:	3140      	adds	r1, #64	; 0x40
    4302:	3a40      	subs	r2, #64	; 0x40
    4304:	5843      	ldr	r3, [r0, r1]
    4306:	421a      	tst	r2, r3
    4308:	d1fc      	bne.n	4304 <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    430a:	4b03      	ldr	r3, [pc, #12]	; (4318 <system_gclk_chan_disable+0x30>)
    430c:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    430e:	bd10      	pop	{r4, pc}
    4310:	00003319 	.word	0x00003319
    4314:	40001c00 	.word	0x40001c00
    4318:	00003359 	.word	0x00003359

0000431c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    431c:	b538      	push	{r3, r4, r5, lr}
    431e:	1c04      	adds	r4, r0, #0
    4320:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4322:	4b05      	ldr	r3, [pc, #20]	; (4338 <system_gclk_chan_set_config+0x1c>)
    4324:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    4326:	782b      	ldrb	r3, [r5, #0]
    4328:	220f      	movs	r2, #15
    432a:	4013      	ands	r3, r2
    432c:	3420      	adds	r4, #32
    432e:	00a4      	lsls	r4, r4, #2
    4330:	4a02      	ldr	r2, [pc, #8]	; (433c <system_gclk_chan_set_config+0x20>)
    4332:	50a3      	str	r3, [r4, r2]


}
    4334:	bd38      	pop	{r3, r4, r5, pc}
    4336:	46c0      	nop			; (mov r8, r8)
    4338:	000042e9 	.word	0x000042e9
    433c:	40001c00 	.word	0x40001c00

00004340 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4340:	b510      	push	{r4, lr}
    4342:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4344:	4b06      	ldr	r3, [pc, #24]	; (4360 <system_gclk_chan_get_hz+0x20>)
    4346:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    4348:	3420      	adds	r4, #32
    434a:	00a4      	lsls	r4, r4, #2
    434c:	4b05      	ldr	r3, [pc, #20]	; (4364 <system_gclk_chan_get_hz+0x24>)
    434e:	58e3      	ldr	r3, [r4, r3]
    4350:	240f      	movs	r4, #15
    4352:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4354:	4b04      	ldr	r3, [pc, #16]	; (4368 <system_gclk_chan_get_hz+0x28>)
    4356:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4358:	1c20      	adds	r0, r4, #0
    435a:	4b04      	ldr	r3, [pc, #16]	; (436c <system_gclk_chan_get_hz+0x2c>)
    435c:	4798      	blx	r3
}
    435e:	bd10      	pop	{r4, pc}
    4360:	00003319 	.word	0x00003319
    4364:	40001c00 	.word	0x40001c00
    4368:	00003359 	.word	0x00003359
    436c:	00004249 	.word	0x00004249

00004370 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4370:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4372:	78d3      	ldrb	r3, [r2, #3]
    4374:	2b00      	cmp	r3, #0
    4376:	d11e      	bne.n	43b6 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4378:	7814      	ldrb	r4, [r2, #0]
    437a:	2c80      	cmp	r4, #128	; 0x80
    437c:	d004      	beq.n	4388 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    437e:	0624      	lsls	r4, r4, #24
    4380:	2380      	movs	r3, #128	; 0x80
    4382:	025b      	lsls	r3, r3, #9
    4384:	431c      	orrs	r4, r3
    4386:	e000      	b.n	438a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4388:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    438a:	7853      	ldrb	r3, [r2, #1]
    438c:	2502      	movs	r5, #2
    438e:	43ab      	bics	r3, r5
    4390:	d10a      	bne.n	43a8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4392:	7893      	ldrb	r3, [r2, #2]
    4394:	2b00      	cmp	r3, #0
    4396:	d103      	bne.n	43a0 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4398:	2380      	movs	r3, #128	; 0x80
    439a:	029b      	lsls	r3, r3, #10
    439c:	431c      	orrs	r4, r3
    439e:	e002      	b.n	43a6 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    43a0:	23c0      	movs	r3, #192	; 0xc0
    43a2:	02db      	lsls	r3, r3, #11
    43a4:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    43a6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    43a8:	7853      	ldrb	r3, [r2, #1]
    43aa:	3b01      	subs	r3, #1
    43ac:	2b01      	cmp	r3, #1
    43ae:	d812      	bhi.n	43d6 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    43b0:	4b18      	ldr	r3, [pc, #96]	; (4414 <_system_pinmux_config+0xa4>)
    43b2:	401c      	ands	r4, r3
    43b4:	e00f      	b.n	43d6 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    43b6:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    43b8:	040b      	lsls	r3, r1, #16
    43ba:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    43bc:	24a0      	movs	r4, #160	; 0xa0
    43be:	05e4      	lsls	r4, r4, #23
    43c0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    43c2:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    43c4:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    43c6:	24d0      	movs	r4, #208	; 0xd0
    43c8:	0624      	lsls	r4, r4, #24
    43ca:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    43cc:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    43ce:	78d3      	ldrb	r3, [r2, #3]
    43d0:	2b00      	cmp	r3, #0
    43d2:	d018      	beq.n	4406 <_system_pinmux_config+0x96>
    43d4:	e01c      	b.n	4410 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    43d6:	040b      	lsls	r3, r1, #16
    43d8:	0c1b      	lsrs	r3, r3, #16
    43da:	25a0      	movs	r5, #160	; 0xa0
    43dc:	05ed      	lsls	r5, r5, #23
    43de:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    43e0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    43e2:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    43e4:	0c0b      	lsrs	r3, r1, #16
    43e6:	25d0      	movs	r5, #208	; 0xd0
    43e8:	062d      	lsls	r5, r5, #24
    43ea:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    43ec:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    43ee:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    43f0:	78d3      	ldrb	r3, [r2, #3]
    43f2:	2b00      	cmp	r3, #0
    43f4:	d10c      	bne.n	4410 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    43f6:	0363      	lsls	r3, r4, #13
    43f8:	d505      	bpl.n	4406 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    43fa:	7893      	ldrb	r3, [r2, #2]
    43fc:	2b01      	cmp	r3, #1
    43fe:	d101      	bne.n	4404 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    4400:	6181      	str	r1, [r0, #24]
    4402:	e000      	b.n	4406 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    4404:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4406:	7853      	ldrb	r3, [r2, #1]
    4408:	3b01      	subs	r3, #1
    440a:	2b01      	cmp	r3, #1
    440c:	d800      	bhi.n	4410 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    440e:	6081      	str	r1, [r0, #8]
		}
	}
}
    4410:	bd30      	pop	{r4, r5, pc}
    4412:	46c0      	nop			; (mov r8, r8)
    4414:	fffbffff 	.word	0xfffbffff

00004418 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4418:	b508      	push	{r3, lr}
    441a:	1c03      	adds	r3, r0, #0
    441c:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    441e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4420:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4422:	2900      	cmp	r1, #0
    4424:	d105      	bne.n	4432 <system_pinmux_pin_set_config+0x1a>
		return &(ports[port_index]->Group[group_index]);
    4426:	0958      	lsrs	r0, r3, #5
    4428:	01c0      	lsls	r0, r0, #7
    442a:	2182      	movs	r1, #130	; 0x82
    442c:	05c9      	lsls	r1, r1, #23
    442e:	468c      	mov	ip, r1
    4430:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4432:	211f      	movs	r1, #31
    4434:	400b      	ands	r3, r1
    4436:	391e      	subs	r1, #30
    4438:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    443a:	4b01      	ldr	r3, [pc, #4]	; (4440 <system_pinmux_pin_set_config+0x28>)
    443c:	4798      	blx	r3
}
    443e:	bd08      	pop	{r3, pc}
    4440:	00004371 	.word	0x00004371

00004444 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4444:	4770      	bx	lr
    4446:	46c0      	nop			; (mov r8, r8)

00004448 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4448:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    444a:	4b05      	ldr	r3, [pc, #20]	; (4460 <system_init+0x18>)
    444c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    444e:	4b05      	ldr	r3, [pc, #20]	; (4464 <system_init+0x1c>)
    4450:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4452:	4b05      	ldr	r3, [pc, #20]	; (4468 <system_init+0x20>)
    4454:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4456:	4b05      	ldr	r3, [pc, #20]	; (446c <system_init+0x24>)
    4458:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    445a:	4b05      	ldr	r3, [pc, #20]	; (4470 <system_init+0x28>)
    445c:	4798      	blx	r3
}
    445e:	bd08      	pop	{r3, pc}
    4460:	000040a9 	.word	0x000040a9
    4464:	00003285 	.word	0x00003285
    4468:	00004445 	.word	0x00004445
    446c:	0000345d 	.word	0x0000345d
    4470:	00004445 	.word	0x00004445

00004474 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4474:	1c93      	adds	r3, r2, #2
    4476:	009b      	lsls	r3, r3, #2
    4478:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    447a:	2a02      	cmp	r2, #2
    447c:	d104      	bne.n	4488 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    447e:	7e02      	ldrb	r2, [r0, #24]
    4480:	2310      	movs	r3, #16
    4482:	4313      	orrs	r3, r2
    4484:	7603      	strb	r3, [r0, #24]
    4486:	e00c      	b.n	44a2 <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    4488:	2a03      	cmp	r2, #3
    448a:	d104      	bne.n	4496 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    448c:	7e02      	ldrb	r2, [r0, #24]
    448e:	2320      	movs	r3, #32
    4490:	4313      	orrs	r3, r2
    4492:	7603      	strb	r3, [r0, #24]
    4494:	e005      	b.n	44a2 <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    4496:	2301      	movs	r3, #1
    4498:	4093      	lsls	r3, r2
    449a:	1c1a      	adds	r2, r3, #0
    449c:	7e03      	ldrb	r3, [r0, #24]
    449e:	431a      	orrs	r2, r3
    44a0:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    44a2:	2000      	movs	r0, #0
    44a4:	4770      	bx	lr
    44a6:	46c0      	nop			; (mov r8, r8)

000044a8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    44a8:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    44aa:	0080      	lsls	r0, r0, #2
    44ac:	4b14      	ldr	r3, [pc, #80]	; (4500 <_tc_interrupt_handler+0x58>)
    44ae:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    44b0:	682b      	ldr	r3, [r5, #0]
    44b2:	7a9c      	ldrb	r4, [r3, #10]
    44b4:	7e2b      	ldrb	r3, [r5, #24]
    44b6:	401c      	ands	r4, r3
    44b8:	7e6b      	ldrb	r3, [r5, #25]
    44ba:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    44bc:	07e3      	lsls	r3, r4, #31
    44be:	d505      	bpl.n	44cc <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    44c0:	1c28      	adds	r0, r5, #0
    44c2:	68ab      	ldr	r3, [r5, #8]
    44c4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    44c6:	2301      	movs	r3, #1
    44c8:	682a      	ldr	r2, [r5, #0]
    44ca:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    44cc:	07a3      	lsls	r3, r4, #30
    44ce:	d505      	bpl.n	44dc <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    44d0:	1c28      	adds	r0, r5, #0
    44d2:	68eb      	ldr	r3, [r5, #12]
    44d4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    44d6:	2302      	movs	r3, #2
    44d8:	682a      	ldr	r2, [r5, #0]
    44da:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    44dc:	06e3      	lsls	r3, r4, #27
    44de:	d505      	bpl.n	44ec <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    44e0:	1c28      	adds	r0, r5, #0
    44e2:	692b      	ldr	r3, [r5, #16]
    44e4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    44e6:	2310      	movs	r3, #16
    44e8:	682a      	ldr	r2, [r5, #0]
    44ea:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    44ec:	06a3      	lsls	r3, r4, #26
    44ee:	d505      	bpl.n	44fc <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    44f0:	1c28      	adds	r0, r5, #0
    44f2:	696b      	ldr	r3, [r5, #20]
    44f4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    44f6:	682b      	ldr	r3, [r5, #0]
    44f8:	2220      	movs	r2, #32
    44fa:	729a      	strb	r2, [r3, #10]
	}
}
    44fc:	bd38      	pop	{r3, r4, r5, pc}
    44fe:	46c0      	nop			; (mov r8, r8)
    4500:	20000e24 	.word	0x20000e24

00004504 <TC0_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    4504:	b508      	push	{r3, lr}
    4506:	2000      	movs	r0, #0
    4508:	4b01      	ldr	r3, [pc, #4]	; (4510 <TC0_Handler+0xc>)
    450a:	4798      	blx	r3
    450c:	bd08      	pop	{r3, pc}
    450e:	46c0      	nop			; (mov r8, r8)
    4510:	000044a9 	.word	0x000044a9

00004514 <TC1_Handler>:
    4514:	b508      	push	{r3, lr}
    4516:	2001      	movs	r0, #1
    4518:	4b01      	ldr	r3, [pc, #4]	; (4520 <TC1_Handler+0xc>)
    451a:	4798      	blx	r3
    451c:	bd08      	pop	{r3, pc}
    451e:	46c0      	nop			; (mov r8, r8)
    4520:	000044a9 	.word	0x000044a9

00004524 <TC2_Handler>:
    4524:	b508      	push	{r3, lr}
    4526:	2002      	movs	r0, #2
    4528:	4b01      	ldr	r3, [pc, #4]	; (4530 <TC2_Handler+0xc>)
    452a:	4798      	blx	r3
    452c:	bd08      	pop	{r3, pc}
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	000044a9 	.word	0x000044a9

00004534 <TC3_Handler>:
    4534:	b508      	push	{r3, lr}
    4536:	2003      	movs	r0, #3
    4538:	4b01      	ldr	r3, [pc, #4]	; (4540 <TC3_Handler+0xc>)
    453a:	4798      	blx	r3
    453c:	bd08      	pop	{r3, pc}
    453e:	46c0      	nop			; (mov r8, r8)
    4540:	000044a9 	.word	0x000044a9

00004544 <TC4_Handler>:
    4544:	b508      	push	{r3, lr}
    4546:	2004      	movs	r0, #4
    4548:	4b01      	ldr	r3, [pc, #4]	; (4550 <TC4_Handler+0xc>)
    454a:	4798      	blx	r3
    454c:	bd08      	pop	{r3, pc}
    454e:	46c0      	nop			; (mov r8, r8)
    4550:	000044a9 	.word	0x000044a9

00004554 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    4554:	b530      	push	{r4, r5, lr}
    4556:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    4558:	a901      	add	r1, sp, #4
    455a:	4b0c      	ldr	r3, [pc, #48]	; (458c <_tc_get_inst_index+0x38>)
    455c:	1c0a      	adds	r2, r1, #0
    455e:	cb32      	ldmia	r3!, {r1, r4, r5}
    4560:	c232      	stmia	r2!, {r1, r4, r5}
    4562:	cb12      	ldmia	r3!, {r1, r4}
    4564:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    4566:	9b01      	ldr	r3, [sp, #4]
    4568:	4283      	cmp	r3, r0
    456a:	d006      	beq.n	457a <_tc_get_inst_index+0x26>
    456c:	2301      	movs	r3, #1
    456e:	009a      	lsls	r2, r3, #2
    4570:	a901      	add	r1, sp, #4
    4572:	5852      	ldr	r2, [r2, r1]
    4574:	4282      	cmp	r2, r0
    4576:	d103      	bne.n	4580 <_tc_get_inst_index+0x2c>
    4578:	e000      	b.n	457c <_tc_get_inst_index+0x28>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    457a:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    457c:	b2d8      	uxtb	r0, r3
    457e:	e003      	b.n	4588 <_tc_get_inst_index+0x34>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4580:	3301      	adds	r3, #1
    4582:	2b05      	cmp	r3, #5
    4584:	d1f3      	bne.n	456e <_tc_get_inst_index+0x1a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4586:	2000      	movs	r0, #0
}
    4588:	b007      	add	sp, #28
    458a:	bd30      	pop	{r4, r5, pc}
    458c:	00006158 	.word	0x00006158

00004590 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    4590:	b5f0      	push	{r4, r5, r6, r7, lr}
    4592:	4647      	mov	r7, r8
    4594:	b480      	push	{r7}
    4596:	b08e      	sub	sp, #56	; 0x38
    4598:	1c05      	adds	r5, r0, #0
    459a:	1c0e      	adds	r6, r1, #0
    459c:	1c17      	adds	r7, r2, #0
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    459e:	1c08      	adds	r0, r1, #0
    45a0:	4ba1      	ldr	r3, [pc, #644]	; (4828 <tc_init+0x298>)
    45a2:	4798      	blx	r3
    45a4:	4680      	mov	r8, r0

#if (SAMC20) || (SAMC21)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    45a6:	4ca1      	ldr	r4, [pc, #644]	; (482c <tc_init+0x29c>)
    45a8:	1c21      	adds	r1, r4, #0
    45aa:	3114      	adds	r1, #20
    45ac:	a80c      	add	r0, sp, #48	; 0x30
    45ae:	2205      	movs	r2, #5
    45b0:	4b9f      	ldr	r3, [pc, #636]	; (4830 <tc_init+0x2a0>)
    45b2:	4798      	blx	r3
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    45b4:	a902      	add	r1, sp, #8
    45b6:	1c23      	adds	r3, r4, #0
    45b8:	331c      	adds	r3, #28
    45ba:	1c0a      	adds	r2, r1, #0
    45bc:	cb13      	ldmia	r3!, {r0, r1, r4}
    45be:	c213      	stmia	r2!, {r0, r1, r4}
    45c0:	cb13      	ldmia	r3!, {r0, r1, r4}
    45c2:	c213      	stmia	r2!, {r0, r1, r4}
    45c4:	cb13      	ldmia	r3!, {r0, r1, r4}
    45c6:	c213      	stmia	r2!, {r0, r1, r4}
    45c8:	681b      	ldr	r3, [r3, #0]
    45ca:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    45cc:	2300      	movs	r3, #0
    45ce:	60ab      	str	r3, [r5, #8]
    45d0:	60eb      	str	r3, [r5, #12]
    45d2:	612b      	str	r3, [r5, #16]
    45d4:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    45d6:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    45d8:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    45da:	4643      	mov	r3, r8
    45dc:	009a      	lsls	r2, r3, #2
    45de:	4b95      	ldr	r3, [pc, #596]	; (4834 <tc_init+0x2a4>)
    45e0:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    45e2:	602e      	str	r6, [r5, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    45e4:	2334      	movs	r3, #52	; 0x34
    45e6:	5cfb      	ldrb	r3, [r7, r3]
    45e8:	76ab      	strb	r3, [r5, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    45ea:	78fb      	ldrb	r3, [r7, #3]
    45ec:	2b08      	cmp	r3, #8
    45ee:	d104      	bne.n	45fa <tc_init+0x6a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    45f0:	2017      	movs	r0, #23

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    45f2:	4642      	mov	r2, r8
    45f4:	07d2      	lsls	r2, r2, #31
    45f6:	d500      	bpl.n	45fa <tc_init+0x6a>
    45f8:	e111      	b.n	481e <tc_init+0x28e>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    45fa:	712b      	strb	r3, [r5, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    45fc:	6833      	ldr	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    45fe:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    4600:	07db      	lsls	r3, r3, #31
    4602:	d500      	bpl.n	4606 <tc_init+0x76>
    4604:	e10b      	b.n	481e <tc_init+0x28e>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    4606:	7af3      	ldrb	r3, [r6, #11]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    4608:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    460a:	079b      	lsls	r3, r3, #30
    460c:	d500      	bpl.n	4610 <tc_init+0x80>
    460e:	e106      	b.n	481e <tc_init+0x28e>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    4610:	6833      	ldr	r3, [r6, #0]
    4612:	079b      	lsls	r3, r3, #30
    4614:	d500      	bpl.n	4618 <tc_init+0x88>
    4616:	e102      	b.n	481e <tc_init+0x28e>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    4618:	7c3b      	ldrb	r3, [r7, #16]
    461a:	2b00      	cmp	r3, #0
    461c:	d00a      	beq.n	4634 <tc_init+0xa4>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    461e:	a901      	add	r1, sp, #4
    4620:	2301      	movs	r3, #1
    4622:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    4624:	2200      	movs	r2, #0
    4626:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    4628:	7e3a      	ldrb	r2, [r7, #24]
    462a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    462c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    462e:	7d38      	ldrb	r0, [r7, #20]
    4630:	4b81      	ldr	r3, [pc, #516]	; (4838 <tc_init+0x2a8>)
    4632:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    4634:	7f3b      	ldrb	r3, [r7, #28]
    4636:	2b00      	cmp	r3, #0
    4638:	d00b      	beq.n	4652 <tc_init+0xc2>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    463a:	a901      	add	r1, sp, #4
    463c:	2301      	movs	r3, #1
    463e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    4640:	2200      	movs	r2, #0
    4642:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    4644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4646:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    4648:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    464a:	6a3b      	ldr	r3, [r7, #32]
    464c:	b2d8      	uxtb	r0, r3
    464e:	4b7a      	ldr	r3, [pc, #488]	; (4838 <tc_init+0x2a8>)
    4650:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    4652:	4643      	mov	r3, r8
    4654:	0059      	lsls	r1, r3, #1
    4656:	aa02      	add	r2, sp, #8
    4658:	1c4b      	adds	r3, r1, #1
    465a:	009b      	lsls	r3, r3, #2
    465c:	5898      	ldr	r0, [r3, r2]
    465e:	4643      	mov	r3, r8
    4660:	00db      	lsls	r3, r3, #3
    4662:	589a      	ldr	r2, [r3, r2]
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    4664:	b2d3      	uxtb	r3, r2
    4666:	2b01      	cmp	r3, #1
    4668:	d009      	beq.n	467e <tc_init+0xee>
    466a:	2b00      	cmp	r3, #0
    466c:	d002      	beq.n	4674 <tc_init+0xe4>
    466e:	2b02      	cmp	r3, #2
    4670:	d00a      	beq.n	4688 <tc_init+0xf8>
    4672:	e00d      	b.n	4690 <tc_init+0x100>
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    4674:	4a71      	ldr	r2, [pc, #452]	; (483c <tc_init+0x2ac>)
    4676:	6953      	ldr	r3, [r2, #20]
    4678:	4318      	orrs	r0, r3
    467a:	6150      	str	r0, [r2, #20]
    467c:	e008      	b.n	4690 <tc_init+0x100>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    467e:	4a6f      	ldr	r2, [pc, #444]	; (483c <tc_init+0x2ac>)
    4680:	6993      	ldr	r3, [r2, #24]
    4682:	4318      	orrs	r0, r3
    4684:	6190      	str	r0, [r2, #24]
    4686:	e003      	b.n	4690 <tc_init+0x100>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4688:	4a6c      	ldr	r2, [pc, #432]	; (483c <tc_init+0x2ac>)
    468a:	69d3      	ldr	r3, [r2, #28]
    468c:	4318      	orrs	r0, r3
    468e:	61d0      	str	r0, [r2, #28]
			inst_mclk_apbmask[2*instance+1]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    4690:	78fb      	ldrb	r3, [r7, #3]
    4692:	2b08      	cmp	r3, #8
    4694:	d120      	bne.n	46d8 <tc_init+0x148>
    4696:	4643      	mov	r3, r8
    4698:	3301      	adds	r3, #1
    469a:	2b04      	cmp	r3, #4
    469c:	dc1c      	bgt.n	46d8 <tc_init+0x148>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    469e:	aa02      	add	r2, sp, #8
    46a0:	1ccb      	adds	r3, r1, #3
    46a2:	009b      	lsls	r3, r3, #2
    46a4:	5898      	ldr	r0, [r3, r2]
    46a6:	1c8b      	adds	r3, r1, #2
    46a8:	009b      	lsls	r3, r3, #2
    46aa:	589b      	ldr	r3, [r3, r2]
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    46ac:	b2da      	uxtb	r2, r3
    46ae:	2a01      	cmp	r2, #1
    46b0:	d009      	beq.n	46c6 <tc_init+0x136>
    46b2:	2a00      	cmp	r2, #0
    46b4:	d002      	beq.n	46bc <tc_init+0x12c>
    46b6:	2a02      	cmp	r2, #2
    46b8:	d00a      	beq.n	46d0 <tc_init+0x140>
    46ba:	e00d      	b.n	46d8 <tc_init+0x148>
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    46bc:	4a5f      	ldr	r2, [pc, #380]	; (483c <tc_init+0x2ac>)
    46be:	6953      	ldr	r3, [r2, #20]
    46c0:	4303      	orrs	r3, r0
    46c2:	6153      	str	r3, [r2, #20]
    46c4:	e008      	b.n	46d8 <tc_init+0x148>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    46c6:	4a5d      	ldr	r2, [pc, #372]	; (483c <tc_init+0x2ac>)
    46c8:	6993      	ldr	r3, [r2, #24]
    46ca:	4303      	orrs	r3, r0
    46cc:	6193      	str	r3, [r2, #24]
    46ce:	e003      	b.n	46d8 <tc_init+0x148>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    46d0:	4a5a      	ldr	r2, [pc, #360]	; (483c <tc_init+0x2ac>)
    46d2:	69d3      	ldr	r3, [r2, #28]
    46d4:	4303      	orrs	r3, r0
    46d6:	61d3      	str	r3, [r2, #28]
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    46d8:	783b      	ldrb	r3, [r7, #0]
    46da:	466a      	mov	r2, sp
    46dc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    46de:	ab0c      	add	r3, sp, #48	; 0x30
    46e0:	4642      	mov	r2, r8
    46e2:	5c9c      	ldrb	r4, [r3, r2]
    46e4:	1c20      	adds	r0, r4, #0
    46e6:	4669      	mov	r1, sp
    46e8:	4b55      	ldr	r3, [pc, #340]	; (4840 <tc_init+0x2b0>)
    46ea:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    46ec:	1c20      	adds	r0, r4, #0
    46ee:	4b55      	ldr	r3, [pc, #340]	; (4844 <tc_init+0x2b4>)
    46f0:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    46f2:	79fa      	ldrb	r2, [r7, #7]
    46f4:	78fb      	ldrb	r3, [r7, #3]
    46f6:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    46f8:	88ba      	ldrh	r2, [r7, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    46fa:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    46fc:	7a7a      	ldrb	r2, [r7, #9]
    46fe:	2a00      	cmp	r2, #0
    4700:	d002      	beq.n	4708 <tc_init+0x178>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    4702:	2280      	movs	r2, #128	; 0x80
    4704:	0252      	lsls	r2, r2, #9
    4706:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    4708:	7aba      	ldrb	r2, [r7, #10]
    470a:	2a00      	cmp	r2, #0
    470c:	d002      	beq.n	4714 <tc_init+0x184>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    470e:	2280      	movs	r2, #128	; 0x80
    4710:	0292      	lsls	r2, r2, #10
    4712:	4313      	orrs	r3, r2
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    4714:	7afa      	ldrb	r2, [r7, #11]
    4716:	2a00      	cmp	r2, #0
    4718:	d002      	beq.n	4720 <tc_init+0x190>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    471a:	2280      	movs	r2, #128	; 0x80
    471c:	0352      	lsls	r2, r2, #13
    471e:	4313      	orrs	r3, r2
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    4720:	7b3a      	ldrb	r2, [r7, #12]
    4722:	2a00      	cmp	r2, #0
    4724:	d002      	beq.n	472c <tc_init+0x19c>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    4726:	2280      	movs	r2, #128	; 0x80
    4728:	0392      	lsls	r2, r2, #14
    472a:	4313      	orrs	r3, r2
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    472c:	78b9      	ldrb	r1, [r7, #2]
    472e:	01c9      	lsls	r1, r1, #7
		if (config->enable_capture_on_IO[i] == true) {
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    4730:	787a      	ldrb	r2, [r7, #1]
    4732:	0192      	lsls	r2, r2, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    4734:	4311      	orrs	r1, r2
		if (config->enable_capture_on_IO[i] == true) {
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    4736:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4738:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    473a:	6913      	ldr	r3, [r2, #16]
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    473c:	2b00      	cmp	r3, #0
    473e:	d1fc      	bne.n	473a <tc_init+0x1aa>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    4740:	6031      	str	r1, [r6, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4742:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    4744:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    4746:	2b00      	cmp	r3, #0
    4748:	d1fc      	bne.n	4744 <tc_init+0x1b4>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
    474a:	79bb      	ldrb	r3, [r7, #6]
    474c:	7333      	strb	r3, [r6, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
    474e:	7b79      	ldrb	r1, [r7, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    4750:	1e4b      	subs	r3, r1, #1
    4752:	4199      	sbcs	r1, r3
    4754:	0089      	lsls	r1, r1, #2
	}

	if (config->count_direction) {
    4756:	7bbb      	ldrb	r3, [r7, #14]
    4758:	2b00      	cmp	r3, #0
    475a:	d001      	beq.n	4760 <tc_init+0x1d0>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    475c:	2301      	movs	r3, #1
    475e:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4760:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    4762:	6913      	ldr	r3, [r2, #16]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    4764:	2b00      	cmp	r3, #0
    4766:	d1fc      	bne.n	4762 <tc_init+0x1d2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    4768:	33ff      	adds	r3, #255	; 0xff
    476a:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    476c:	2900      	cmp	r1, #0
    476e:	d004      	beq.n	477a <tc_init+0x1ea>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4770:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    4772:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    4774:	2b00      	cmp	r3, #0
    4776:	d1fc      	bne.n	4772 <tc_init+0x1e2>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    4778:	7171      	strb	r1, [r6, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    477a:	7a3b      	ldrb	r3, [r7, #8]
    477c:	7373      	strb	r3, [r6, #13]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    477e:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    4780:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    4782:	2b00      	cmp	r3, #0
    4784:	d1fc      	bne.n	4780 <tc_init+0x1f0>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    4786:	792b      	ldrb	r3, [r5, #4]
    4788:	2b04      	cmp	r3, #4
    478a:	d005      	beq.n	4798 <tc_init+0x208>
    478c:	2b08      	cmp	r3, #8
    478e:	d033      	beq.n	47f8 <tc_init+0x268>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    4790:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    4792:	2b00      	cmp	r3, #0
    4794:	d143      	bne.n	481e <tc_init+0x28e>
    4796:	e01c      	b.n	47d2 <tc_init+0x242>
    4798:	6913      	ldr	r3, [r2, #16]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    479a:	2b00      	cmp	r3, #0
    479c:	d1fc      	bne.n	4798 <tc_init+0x208>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    479e:	3328      	adds	r3, #40	; 0x28
    47a0:	5cfb      	ldrb	r3, [r7, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    47a2:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    47a4:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    47a6:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    47a8:	2b00      	cmp	r3, #0
    47aa:	d1fc      	bne.n	47a6 <tc_init+0x216>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    47ac:	3329      	adds	r3, #41	; 0x29
    47ae:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    47b0:	76f3      	strb	r3, [r6, #27]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    47b2:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    47b4:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    47b6:	2b00      	cmp	r3, #0
    47b8:	d1fc      	bne.n	47b4 <tc_init+0x224>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    47ba:	332a      	adds	r3, #42	; 0x2a
    47bc:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    47be:	7733      	strb	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    47c0:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    47c2:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    47c4:	2b00      	cmp	r3, #0
    47c6:	d1fc      	bne.n	47c2 <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    47c8:	332b      	adds	r3, #43	; 0x2b
    47ca:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    47cc:	7773      	strb	r3, [r6, #29]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    47ce:	2000      	movs	r0, #0
    47d0:	e025      	b.n	481e <tc_init+0x28e>
    47d2:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    47d4:	2b00      	cmp	r3, #0
    47d6:	d1fc      	bne.n	47d2 <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    47d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    47da:	82b3      	strh	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    47dc:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    47de:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    47e0:	2b00      	cmp	r3, #0
    47e2:	d1fc      	bne.n	47de <tc_init+0x24e>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    47e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    47e6:	83b3      	strh	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    47e8:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    47ea:	6913      	ldr	r3, [r2, #16]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    47ec:	2b00      	cmp	r3, #0
    47ee:	d1fc      	bne.n	47ea <tc_init+0x25a>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    47f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    47f2:	83f3      	strh	r3, [r6, #30]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    47f4:	2000      	movs	r0, #0
    47f6:	e012      	b.n	481e <tc_init+0x28e>
    47f8:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    47fa:	2b00      	cmp	r3, #0
    47fc:	d1fc      	bne.n	47f8 <tc_init+0x268>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    47fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4800:	6173      	str	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4802:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    4804:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    4806:	2b00      	cmp	r3, #0
    4808:	d1fc      	bne.n	4804 <tc_init+0x274>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    480c:	61f3      	str	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    480e:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    4810:	6913      	ldr	r3, [r2, #16]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    4812:	2b00      	cmp	r3, #0
    4814:	d1fc      	bne.n	4810 <tc_init+0x280>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    4816:	6b3b      	ldr	r3, [r7, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    4818:	6233      	str	r3, [r6, #32]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    481a:	2000      	movs	r0, #0
    481c:	e7ff      	b.n	481e <tc_init+0x28e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    481e:	b00e      	add	sp, #56	; 0x38
    4820:	bc04      	pop	{r2}
    4822:	4690      	mov	r8, r2
    4824:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4826:	46c0      	nop			; (mov r8, r8)
    4828:	00004555 	.word	0x00004555
    482c:	00006158 	.word	0x00006158
    4830:	00004e7d 	.word	0x00004e7d
    4834:	20000e24 	.word	0x20000e24
    4838:	00004419 	.word	0x00004419
    483c:	40000800 	.word	0x40000800
    4840:	0000431d 	.word	0x0000431d
    4844:	000042b5 	.word	0x000042b5

00004848 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4848:	6802      	ldr	r2, [r0, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    484a:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    484c:	2b00      	cmp	r3, #0
    484e:	d1fc      	bne.n	484a <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    4850:	7113      	strb	r3, [r2, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4852:	6801      	ldr	r1, [r0, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    4854:	690b      	ldr	r3, [r1, #16]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
    4856:	2b00      	cmp	r3, #0
    4858:	d1fc      	bne.n	4854 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    485a:	3380      	adds	r3, #128	; 0x80
    485c:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    485e:	6802      	ldr	r2, [r0, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    4860:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    4862:	2b00      	cmp	r3, #0
    4864:	d1fc      	bne.n	4860 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    4866:	7901      	ldrb	r1, [r0, #4]
    4868:	2904      	cmp	r1, #4
    486a:	d004      	beq.n	4876 <tc_get_count_value+0x2e>
    486c:	2908      	cmp	r1, #8
    486e:	d008      	beq.n	4882 <tc_get_count_value+0x3a>
    4870:	2900      	cmp	r1, #0
    4872:	d107      	bne.n	4884 <tc_get_count_value+0x3c>
    4874:	e002      	b.n	487c <tc_get_count_value+0x34>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    4876:	7d13      	ldrb	r3, [r2, #20]
    4878:	b2db      	uxtb	r3, r3
    487a:	e003      	b.n	4884 <tc_get_count_value+0x3c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    487c:	8a93      	ldrh	r3, [r2, #20]
    487e:	b29b      	uxth	r3, r3
    4880:	e000      	b.n	4884 <tc_get_count_value+0x3c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    4882:	6953      	ldr	r3, [r2, #20]
	}

	Assert(false);
	return 0;
}
    4884:	1c18      	adds	r0, r3, #0
    4886:	4770      	bx	lr

00004888 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    4888:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    488a:	6804      	ldr	r4, [r0, #0]
    488c:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    488e:	2b00      	cmp	r3, #0
    4890:	d1fc      	bne.n	488c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    4892:	7903      	ldrb	r3, [r0, #4]
    4894:	2b04      	cmp	r3, #4
    4896:	d004      	beq.n	48a2 <tc_set_compare_value+0x1a>
    4898:	2b08      	cmp	r3, #8
    489a:	d026      	beq.n	48ea <tc_set_compare_value+0x62>
    489c:	2b00      	cmp	r3, #0
    489e:	d135      	bne.n	490c <tc_set_compare_value+0x84>
    48a0:	e010      	b.n	48c4 <tc_set_compare_value+0x3c>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    48a2:	2317      	movs	r3, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    48a4:	2901      	cmp	r1, #1
    48a6:	d832      	bhi.n	490e <tc_set_compare_value+0x86>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    48a8:	7e83      	ldrb	r3, [r0, #26]
    48aa:	2b00      	cmp	r3, #0
    48ac:	d005      	beq.n	48ba <tc_set_compare_value+0x32>
					tc_module->COUNT8.CCBUF[channel_index].reg =
							(uint8_t)compare;
    48ae:	b2d2      	uxtb	r2, r2
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT8.CCBUF[channel_index].reg =
    48b0:	1861      	adds	r1, r4, r1
    48b2:	3130      	adds	r1, #48	; 0x30
    48b4:	700a      	strb	r2, [r1, #0]
							(uint8_t)compare;
				} else {
					tc_module->COUNT8.CC[channel_index].reg  =
							(uint8_t)compare;
				}
				return STATUS_OK;
    48b6:	2300      	movs	r3, #0
    48b8:	e029      	b.n	490e <tc_set_compare_value+0x86>
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT8.CCBUF[channel_index].reg =
							(uint8_t)compare;
				} else {
					tc_module->COUNT8.CC[channel_index].reg  =
							(uint8_t)compare;
    48ba:	b2d2      	uxtb	r2, r2
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT8.CCBUF[channel_index].reg =
							(uint8_t)compare;
				} else {
					tc_module->COUNT8.CC[channel_index].reg  =
    48bc:	1864      	adds	r4, r4, r1
    48be:	7722      	strb	r2, [r4, #28]
							(uint8_t)compare;
				}
				return STATUS_OK;
    48c0:	2300      	movs	r3, #0
    48c2:	e024      	b.n	490e <tc_set_compare_value+0x86>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    48c4:	2317      	movs	r3, #23
							(uint8_t)compare;
				}
				return STATUS_OK;
			}
		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    48c6:	2901      	cmp	r1, #1
    48c8:	d821      	bhi.n	490e <tc_set_compare_value+0x86>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    48ca:	7e83      	ldrb	r3, [r0, #26]
    48cc:	2b00      	cmp	r3, #0
    48ce:	d005      	beq.n	48dc <tc_set_compare_value+0x54>
					tc_module->COUNT16.CCBUF[channel_index].reg =
							(uint16_t)compare;
    48d0:	b292      	uxth	r2, r2
			}
		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT16.CCBUF[channel_index].reg =
    48d2:	3118      	adds	r1, #24
    48d4:	0049      	lsls	r1, r1, #1
    48d6:	530a      	strh	r2, [r1, r4]
							(uint16_t)compare;
				} else {
					tc_module->COUNT16.CC[channel_index].reg =
							(uint16_t)compare;
				}
				return STATUS_OK;
    48d8:	2300      	movs	r3, #0
    48da:	e018      	b.n	490e <tc_set_compare_value+0x86>
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT16.CCBUF[channel_index].reg =
							(uint16_t)compare;
				} else {
					tc_module->COUNT16.CC[channel_index].reg =
							(uint16_t)compare;
    48dc:	b292      	uxth	r2, r2
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT16.CCBUF[channel_index].reg =
							(uint16_t)compare;
				} else {
					tc_module->COUNT16.CC[channel_index].reg =
    48de:	310c      	adds	r1, #12
    48e0:	0049      	lsls	r1, r1, #1
    48e2:	1864      	adds	r4, r4, r1
    48e4:	80a2      	strh	r2, [r4, #4]
							(uint16_t)compare;
				}
				return STATUS_OK;
    48e6:	2300      	movs	r3, #0
    48e8:	e011      	b.n	490e <tc_set_compare_value+0x86>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    48ea:	2317      	movs	r3, #23
				}
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    48ec:	2901      	cmp	r1, #1
    48ee:	d80e      	bhi.n	490e <tc_set_compare_value+0x86>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    48f0:	7e83      	ldrb	r3, [r0, #26]
    48f2:	2b00      	cmp	r3, #0
    48f4:	d004      	beq.n	4900 <tc_set_compare_value+0x78>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    48f6:	310c      	adds	r1, #12
    48f8:	0089      	lsls	r1, r1, #2
    48fa:	510a      	str	r2, [r1, r4]
							(uint32_t)compare;
				} else {
					tc_module->COUNT32.CC[channel_index].reg =
						(uint32_t)compare;
				}
				return STATUS_OK;
    48fc:	2300      	movs	r3, #0
    48fe:	e006      	b.n	490e <tc_set_compare_value+0x86>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
					tc_module->COUNT32.CCBUF[channel_index].reg =
							(uint32_t)compare;
				} else {
					tc_module->COUNT32.CC[channel_index].reg =
    4900:	3106      	adds	r1, #6
    4902:	0089      	lsls	r1, r1, #2
    4904:	1864      	adds	r4, r4, r1
    4906:	6062      	str	r2, [r4, #4]
						(uint32_t)compare;
				}
				return STATUS_OK;
    4908:	2300      	movs	r3, #0
    490a:	e000      	b.n	490e <tc_set_compare_value+0x86>
			}
	}

	return STATUS_ERR_INVALID_ARG;
    490c:	2317      	movs	r3, #23
}
    490e:	1c18      	adds	r0, r3, #0
    4910:	bd10      	pop	{r4, pc}
    4912:	46c0      	nop			; (mov r8, r8)

00004914 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    4914:	e7fe      	b.n	4914 <Dummy_Handler>
    4916:	46c0      	nop			; (mov r8, r8)

00004918 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4918:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    491a:	4b1b      	ldr	r3, [pc, #108]	; (4988 <Reset_Handler+0x70>)
    491c:	4a1b      	ldr	r2, [pc, #108]	; (498c <Reset_Handler+0x74>)
    491e:	429a      	cmp	r2, r3
    4920:	d003      	beq.n	492a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    4922:	4b1b      	ldr	r3, [pc, #108]	; (4990 <Reset_Handler+0x78>)
    4924:	4a18      	ldr	r2, [pc, #96]	; (4988 <Reset_Handler+0x70>)
    4926:	429a      	cmp	r2, r3
    4928:	d304      	bcc.n	4934 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    492a:	4b1a      	ldr	r3, [pc, #104]	; (4994 <Reset_Handler+0x7c>)
    492c:	4a1a      	ldr	r2, [pc, #104]	; (4998 <Reset_Handler+0x80>)
    492e:	429a      	cmp	r2, r3
    4930:	d310      	bcc.n	4954 <Reset_Handler+0x3c>
    4932:	e01e      	b.n	4972 <Reset_Handler+0x5a>
    4934:	4a19      	ldr	r2, [pc, #100]	; (499c <Reset_Handler+0x84>)
    4936:	4b16      	ldr	r3, [pc, #88]	; (4990 <Reset_Handler+0x78>)
    4938:	3303      	adds	r3, #3
    493a:	1a9b      	subs	r3, r3, r2
    493c:	089b      	lsrs	r3, r3, #2
    493e:	3301      	adds	r3, #1
    4940:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4942:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4944:	4810      	ldr	r0, [pc, #64]	; (4988 <Reset_Handler+0x70>)
    4946:	4911      	ldr	r1, [pc, #68]	; (498c <Reset_Handler+0x74>)
    4948:	588c      	ldr	r4, [r1, r2]
    494a:	5084      	str	r4, [r0, r2]
    494c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    494e:	429a      	cmp	r2, r3
    4950:	d1fa      	bne.n	4948 <Reset_Handler+0x30>
    4952:	e7ea      	b.n	492a <Reset_Handler+0x12>
    4954:	4a12      	ldr	r2, [pc, #72]	; (49a0 <Reset_Handler+0x88>)
    4956:	4b0f      	ldr	r3, [pc, #60]	; (4994 <Reset_Handler+0x7c>)
    4958:	3303      	adds	r3, #3
    495a:	1a9b      	subs	r3, r3, r2
    495c:	089b      	lsrs	r3, r3, #2
    495e:	3301      	adds	r3, #1
    4960:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4962:	2200      	movs	r2, #0
                *pDest++ = 0;
    4964:	480c      	ldr	r0, [pc, #48]	; (4998 <Reset_Handler+0x80>)
    4966:	2100      	movs	r1, #0
    4968:	1814      	adds	r4, r2, r0
    496a:	6021      	str	r1, [r4, #0]
    496c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    496e:	429a      	cmp	r2, r3
    4970:	d1fa      	bne.n	4968 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4972:	4a0c      	ldr	r2, [pc, #48]	; (49a4 <Reset_Handler+0x8c>)
    4974:	21ff      	movs	r1, #255	; 0xff
    4976:	4b0c      	ldr	r3, [pc, #48]	; (49a8 <Reset_Handler+0x90>)
    4978:	438b      	bics	r3, r1
    497a:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    497c:	4b0b      	ldr	r3, [pc, #44]	; (49ac <Reset_Handler+0x94>)
    497e:	4798      	blx	r3

        /* Branch to main function */
        main();
    4980:	4b0b      	ldr	r3, [pc, #44]	; (49b0 <Reset_Handler+0x98>)
    4982:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    4984:	e7fe      	b.n	4984 <Reset_Handler+0x6c>
    4986:	46c0      	nop			; (mov r8, r8)
    4988:	20000000 	.word	0x20000000
    498c:	00006294 	.word	0x00006294
    4990:	20000070 	.word	0x20000070
    4994:	20000e4c 	.word	0x20000e4c
    4998:	20000070 	.word	0x20000070
    499c:	20000004 	.word	0x20000004
    49a0:	20000074 	.word	0x20000074
    49a4:	e000ed00 	.word	0xe000ed00
    49a8:	00000000 	.word	0x00000000
    49ac:	00004e31 	.word	0x00004e31
    49b0:	00004a89 	.word	0x00004a89

000049b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    49b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49b6:	4647      	mov	r7, r8
    49b8:	b480      	push	{r7}
    49ba:	1c0c      	adds	r4, r1, #0
    49bc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    49be:	2800      	cmp	r0, #0
    49c0:	d110      	bne.n	49e4 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
    49c2:	2a00      	cmp	r2, #0
    49c4:	dd0a      	ble.n	49dc <_read+0x28>
    49c6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    49c8:	4e09      	ldr	r6, [pc, #36]	; (49f0 <_read+0x3c>)
    49ca:	4d0a      	ldr	r5, [pc, #40]	; (49f4 <_read+0x40>)
    49cc:	6830      	ldr	r0, [r6, #0]
    49ce:	1c21      	adds	r1, r4, #0
    49d0:	682b      	ldr	r3, [r5, #0]
    49d2:	4798      	blx	r3
		ptr++;
    49d4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    49d6:	42bc      	cmp	r4, r7
    49d8:	d1f8      	bne.n	49cc <_read+0x18>
    49da:	e001      	b.n	49e0 <_read+0x2c>
    49dc:	2300      	movs	r3, #0
    49de:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    49e0:	4640      	mov	r0, r8
    49e2:	e001      	b.n	49e8 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    49e4:	2001      	movs	r0, #1
    49e6:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    49e8:	bc04      	pop	{r2}
    49ea:	4690      	mov	r8, r2
    49ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49ee:	46c0      	nop			; (mov r8, r8)
    49f0:	20000e40 	.word	0x20000e40
    49f4:	20000e38 	.word	0x20000e38

000049f8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    49f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49fa:	4647      	mov	r7, r8
    49fc:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    49fe:	3801      	subs	r0, #1
    4a00:	2802      	cmp	r0, #2
    4a02:	d815      	bhi.n	4a30 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
    4a04:	2a00      	cmp	r2, #0
    4a06:	d010      	beq.n	4a2a <_write+0x32>
    4a08:	1c15      	adds	r5, r2, #0
    4a0a:	1c0e      	adds	r6, r1, #0
    4a0c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    4a0e:	4b0c      	ldr	r3, [pc, #48]	; (4a40 <_write+0x48>)
    4a10:	4698      	mov	r8, r3
    4a12:	4f0c      	ldr	r7, [pc, #48]	; (4a44 <_write+0x4c>)
    4a14:	4643      	mov	r3, r8
    4a16:	6818      	ldr	r0, [r3, #0]
    4a18:	5d31      	ldrb	r1, [r6, r4]
    4a1a:	683b      	ldr	r3, [r7, #0]
    4a1c:	4798      	blx	r3
    4a1e:	2800      	cmp	r0, #0
    4a20:	db09      	blt.n	4a36 <_write+0x3e>
			return -1;
		}
		++nChars;
    4a22:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    4a24:	42a5      	cmp	r5, r4
    4a26:	d1f5      	bne.n	4a14 <_write+0x1c>
    4a28:	e000      	b.n	4a2c <_write+0x34>
    4a2a:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    4a2c:	1c20      	adds	r0, r4, #0
    4a2e:	e004      	b.n	4a3a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    4a30:	2001      	movs	r0, #1
    4a32:	4240      	negs	r0, r0
    4a34:	e001      	b.n	4a3a <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    4a36:	2001      	movs	r0, #1
    4a38:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    4a3a:	bc04      	pop	{r2}
    4a3c:	4690      	mov	r8, r2
    4a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a40:	20000e40 	.word	0x20000e40
    4a44:	20000e3c 	.word	0x20000e3c

00004a48 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4a48:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4a4a:	4a06      	ldr	r2, [pc, #24]	; (4a64 <_sbrk+0x1c>)
    4a4c:	6812      	ldr	r2, [r2, #0]
    4a4e:	2a00      	cmp	r2, #0
    4a50:	d102      	bne.n	4a58 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    4a52:	4905      	ldr	r1, [pc, #20]	; (4a68 <_sbrk+0x20>)
    4a54:	4a03      	ldr	r2, [pc, #12]	; (4a64 <_sbrk+0x1c>)
    4a56:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    4a58:	4a02      	ldr	r2, [pc, #8]	; (4a64 <_sbrk+0x1c>)
    4a5a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    4a5c:	18c3      	adds	r3, r0, r3
    4a5e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    4a60:	4770      	bx	lr
    4a62:	46c0      	nop			; (mov r8, r8)
    4a64:	20000c20 	.word	0x20000c20
    4a68:	20002e50 	.word	0x20002e50

00004a6c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    4a6c:	2001      	movs	r0, #1
    4a6e:	4240      	negs	r0, r0
    4a70:	4770      	bx	lr
    4a72:	46c0      	nop			; (mov r8, r8)

00004a74 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4a74:	2380      	movs	r3, #128	; 0x80
    4a76:	019b      	lsls	r3, r3, #6
    4a78:	604b      	str	r3, [r1, #4]

	return 0;
}
    4a7a:	2000      	movs	r0, #0
    4a7c:	4770      	bx	lr
    4a7e:	46c0      	nop			; (mov r8, r8)

00004a80 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    4a80:	2001      	movs	r0, #1
    4a82:	4770      	bx	lr

00004a84 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    4a84:	2000      	movs	r0, #0
    4a86:	4770      	bx	lr

00004a88 <main>:
#define MOTOR_A_PWM_MODULE TC2
#define MOTOR_A_ENABLE_PIN           PIN_PA22


int main (void)
{
    4a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a8a:	b093      	sub	sp, #76	; 0x4c
	system_init();
    4a8c:	4b36      	ldr	r3, [pc, #216]	; (4b68 <main+0xe0>)
    4a8e:	4798      	blx	r3
	configure_pins();
    4a90:	4b36      	ldr	r3, [pc, #216]	; (4b6c <main+0xe4>)
    4a92:	4798      	blx	r3
	
	configure_console();
    4a94:	4b36      	ldr	r3, [pc, #216]	; (4b70 <main+0xe8>)
    4a96:	4798      	blx	r3
	puts(STRING_HEADER);
    4a98:	4836      	ldr	r0, [pc, #216]	; (4b74 <main+0xec>)
    4a9a:	4b37      	ldr	r3, [pc, #220]	; (4b78 <main+0xf0>)
    4a9c:	4798      	blx	r3
	printf("Address = %u\n\n\r", APP_ADDR);
    4a9e:	4837      	ldr	r0, [pc, #220]	; (4b7c <main+0xf4>)
    4aa0:	2101      	movs	r1, #1
    4aa2:	4b37      	ldr	r3, [pc, #220]	; (4b80 <main+0xf8>)
    4aa4:	4798      	blx	r3
	
	remoteControl_init();
    4aa6:	4b37      	ldr	r3, [pc, #220]	; (4b84 <main+0xfc>)
    4aa8:	4798      	blx	r3

	
	uint8_t val = 0;
	bool dir = 0;
	timer_instance_t timer_a;
	timer_a.forward_pin = MOTOR_A_FORWARD_PIN; 
    4aaa:	2322      	movs	r3, #34	; 0x22
    4aac:	930a      	str	r3, [sp, #40]	; 0x28
	timer_a.forward_pin_mux  = MOTOR_A_FORWARD_PIN_MUX;
    4aae:	3b1e      	subs	r3, #30
    4ab0:	930b      	str	r3, [sp, #44]	; 0x2c
	timer_a.forward_pin_channel = MOTOR_A_FORWARD_PIN_CHANNEL;
    4ab2:	2200      	movs	r2, #0
    4ab4:	920c      	str	r2, [sp, #48]	; 0x30
	timer_a.backward_pin = MOTOR_A_BACKWARD_PIN;
    4ab6:	3223      	adds	r2, #35	; 0x23
    4ab8:	920d      	str	r2, [sp, #52]	; 0x34
	timer_a.backward_pin_mux = MOTOR_A_BACWARD_PIN_MUX;
    4aba:	930e      	str	r3, [sp, #56]	; 0x38
	timer_a.backward_pin_channel = MOTOR_A_BACKWARD_PIN_CHANNEL;
    4abc:	3b03      	subs	r3, #3
    4abe:	930f      	str	r3, [sp, #60]	; 0x3c
	timer_a.timer_module = MOTOR_A_PWM_MODULE;
    4ac0:	4b31      	ldr	r3, [pc, #196]	; (4b88 <main+0x100>)
    4ac2:	9311      	str	r3, [sp, #68]	; 0x44
	timer_a.enable_pin = MOTOR_A_ENABLE_PIN;
    4ac4:	2316      	movs	r3, #22
    4ac6:	9310      	str	r3, [sp, #64]	; 0x40
	
	JoystickPtr LeftJoystick = createJoystick(ADC_POSITIVE_INPUT_PIN10);
    4ac8:	200a      	movs	r0, #10
    4aca:	4b30      	ldr	r3, [pc, #192]	; (4b8c <main+0x104>)
    4acc:	4798      	blx	r3
    4ace:	9007      	str	r0, [sp, #28]
	MotorPtr LeftMotor	= createMotor(timer_a/*timer instance*/);
    4ad0:	ab0e      	add	r3, sp, #56	; 0x38
    4ad2:	466a      	mov	r2, sp
    4ad4:	cb13      	ldmia	r3!, {r0, r1, r4}
    4ad6:	c213      	stmia	r2!, {r0, r1, r4}
    4ad8:	681b      	ldr	r3, [r3, #0]
    4ada:	6013      	str	r3, [r2, #0]
    4adc:	980a      	ldr	r0, [sp, #40]	; 0x28
    4ade:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4ae4:	4c2a      	ldr	r4, [pc, #168]	; (4b90 <main+0x108>)
    4ae6:	47a0      	blx	r4
    4ae8:	9008      	str	r0, [sp, #32]
	
	while(1)
	{
		SYS_TaskHandler();
    4aea:	4e2a      	ldr	r6, [pc, #168]	; (4b94 <main+0x10c>)
		remoteControl_TaskHandler();
    4aec:	4c2a      	ldr	r4, [pc, #168]	; (4b98 <main+0x110>)
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
			/* Yes, so turn LED on. */
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);

			//read joystick
			joystick_read(LeftJoystick);
    4aee:	4d2b      	ldr	r5, [pc, #172]	; (4b9c <main+0x114>)
	JoystickPtr LeftJoystick = createJoystick(ADC_POSITIVE_INPUT_PIN10);
	MotorPtr LeftMotor	= createMotor(timer_a/*timer instance*/);
	
	while(1)
	{
		SYS_TaskHandler();
    4af0:	47b0      	blx	r6
		remoteControl_TaskHandler();
    4af2:	47a0      	blx	r4
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    4af4:	2382      	movs	r3, #130	; 0x82
    4af6:	05db      	lsls	r3, r3, #23
    4af8:	6a1b      	ldr	r3, [r3, #32]

		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    4afa:	00db      	lsls	r3, r3, #3
    4afc:	d42e      	bmi.n	4b5c <main+0xd4>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4afe:	2280      	movs	r2, #128	; 0x80
    4b00:	0212      	lsls	r2, r2, #8
    4b02:	2382      	movs	r3, #130	; 0x82
    4b04:	05db      	lsls	r3, r3, #23
    4b06:	615a      	str	r2, [r3, #20]
			/* Yes, so turn LED on. */
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);

			//read joystick
			joystick_read(LeftJoystick);
    4b08:	9f07      	ldr	r7, [sp, #28]
    4b0a:	1c38      	adds	r0, r7, #0
    4b0c:	47a8      	blx	r5
			val = getJoystickValue(LeftJoystick);
    4b0e:	9707      	str	r7, [sp, #28]
    4b10:	1c38      	adds	r0, r7, #0
    4b12:	4b23      	ldr	r3, [pc, #140]	; (4ba0 <main+0x118>)
    4b14:	4798      	blx	r3
    4b16:	1c03      	adds	r3, r0, #0
			printf("val = %u\n\r", val);
    4b18:	4822      	ldr	r0, [pc, #136]	; (4ba4 <main+0x11c>)
    4b1a:	9309      	str	r3, [sp, #36]	; 0x24
    4b1c:	1c19      	adds	r1, r3, #0
    4b1e:	4f18      	ldr	r7, [pc, #96]	; (4b80 <main+0xf8>)
    4b20:	47b8      	blx	r7
			setMotorSpeed(LeftMotor, val);
    4b22:	9808      	ldr	r0, [sp, #32]
    4b24:	9909      	ldr	r1, [sp, #36]	; 0x24
    4b26:	4b20      	ldr	r3, [pc, #128]	; (4ba8 <main+0x120>)
    4b28:	4798      	blx	r3
			dir = getJoystickDirection(LeftJoystick);
    4b2a:	9807      	ldr	r0, [sp, #28]
    4b2c:	4b1f      	ldr	r3, [pc, #124]	; (4bac <main+0x124>)
    4b2e:	4798      	blx	r3
    4b30:	1c03      	adds	r3, r0, #0
			setMotorDirection(LeftMotor, dir);
    4b32:	9808      	ldr	r0, [sp, #32]
    4b34:	9309      	str	r3, [sp, #36]	; 0x24
    4b36:	1c19      	adds	r1, r3, #0
    4b38:	4b1d      	ldr	r3, [pc, #116]	; (4bb0 <main+0x128>)
    4b3a:	4798      	blx	r3
			printf("dir = %d\n\r", dir);
    4b3c:	481d      	ldr	r0, [pc, #116]	; (4bb4 <main+0x12c>)
    4b3e:	9909      	ldr	r1, [sp, #36]	; 0x24
    4b40:	47b8      	blx	r7
//			spinMotor(LeftMotor);
			spinMotor(LeftMotor, timer_a);
    4b42:	ab0d      	add	r3, sp, #52	; 0x34
    4b44:	466a      	mov	r2, sp
    4b46:	cb83      	ldmia	r3!, {r0, r1, r7}
    4b48:	c283      	stmia	r2!, {r0, r1, r7}
    4b4a:	cb82      	ldmia	r3!, {r1, r7}
    4b4c:	c282      	stmia	r2!, {r1, r7}
    4b4e:	990a      	ldr	r1, [sp, #40]	; 0x28
    4b50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b54:	9808      	ldr	r0, [sp, #32]
    4b56:	4f18      	ldr	r7, [pc, #96]	; (4bb8 <main+0x130>)
    4b58:	47b8      	blx	r7
    4b5a:	e7c9      	b.n	4af0 <main+0x68>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4b5c:	2280      	movs	r2, #128	; 0x80
    4b5e:	0212      	lsls	r2, r2, #8
    4b60:	2382      	movs	r3, #130	; 0x82
    4b62:	05db      	lsls	r3, r3, #23
    4b64:	619a      	str	r2, [r3, #24]
    4b66:	e7c3      	b.n	4af0 <main+0x68>
    4b68:	00004449 	.word	0x00004449
    4b6c:	00003251 	.word	0x00003251
    4b70:	00002eb5 	.word	0x00002eb5
    4b74:	0000619c 	.word	0x0000619c
    4b78:	00004f99 	.word	0x00004f99
    4b7c:	000061b0 	.word	0x000061b0
    4b80:	00004ea1 	.word	0x00004ea1
    4b84:	00003139 	.word	0x00003139
    4b88:	42003800 	.word	0x42003800
    4b8c:	00002fb5 	.word	0x00002fb5
    4b90:	000006c1 	.word	0x000006c1
    4b94:	00001eb5 	.word	0x00001eb5
    4b98:	0000317d 	.word	0x0000317d
    4b9c:	000030a9 	.word	0x000030a9
    4ba0:	00002fe9 	.word	0x00002fe9
    4ba4:	000061c0 	.word	0x000061c0
    4ba8:	00000731 	.word	0x00000731
    4bac:	00002fed 	.word	0x00002fed
    4bb0:	00000735 	.word	0x00000735
    4bb4:	000061cc 	.word	0x000061cc
    4bb8:	00000739 	.word	0x00000739

00004bbc <common_tc_delay>:
    4bbc:	b510      	push	{r4, lr}
    4bbe:	1c04      	adds	r4, r0, #0
    4bc0:	4b13      	ldr	r3, [pc, #76]	; (4c10 <common_tc_delay+0x54>)
    4bc2:	4798      	blx	r3
    4bc4:	4b13      	ldr	r3, [pc, #76]	; (4c14 <common_tc_delay+0x58>)
    4bc6:	781a      	ldrb	r2, [r3, #0]
    4bc8:	4362      	muls	r2, r4
    4bca:	1881      	adds	r1, r0, r2
    4bcc:	4b12      	ldr	r3, [pc, #72]	; (4c18 <common_tc_delay+0x5c>)
    4bce:	6059      	str	r1, [r3, #4]
    4bd0:	6859      	ldr	r1, [r3, #4]
    4bd2:	0c09      	lsrs	r1, r1, #16
    4bd4:	6059      	str	r1, [r3, #4]
    4bd6:	685b      	ldr	r3, [r3, #4]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d007      	beq.n	4bec <common_tc_delay+0x30>
    4bdc:	4b0e      	ldr	r3, [pc, #56]	; (4c18 <common_tc_delay+0x5c>)
    4bde:	6859      	ldr	r1, [r3, #4]
    4be0:	3201      	adds	r2, #1
    4be2:	1880      	adds	r0, r0, r2
    4be4:	8118      	strh	r0, [r3, #8]
    4be6:	4b0d      	ldr	r3, [pc, #52]	; (4c1c <common_tc_delay+0x60>)
    4be8:	4798      	blx	r3
    4bea:	e004      	b.n	4bf6 <common_tc_delay+0x3a>
    4bec:	1882      	adds	r2, r0, r2
    4bee:	4b0a      	ldr	r3, [pc, #40]	; (4c18 <common_tc_delay+0x5c>)
    4bf0:	811a      	strh	r2, [r3, #8]
    4bf2:	4b0b      	ldr	r3, [pc, #44]	; (4c20 <common_tc_delay+0x64>)
    4bf4:	4798      	blx	r3
    4bf6:	4b08      	ldr	r3, [pc, #32]	; (4c18 <common_tc_delay+0x5c>)
    4bf8:	891b      	ldrh	r3, [r3, #8]
    4bfa:	2b63      	cmp	r3, #99	; 0x63
    4bfc:	d802      	bhi.n	4c04 <common_tc_delay+0x48>
    4bfe:	3364      	adds	r3, #100	; 0x64
    4c00:	4a05      	ldr	r2, [pc, #20]	; (4c18 <common_tc_delay+0x5c>)
    4c02:	8113      	strh	r3, [r2, #8]
    4c04:	4b04      	ldr	r3, [pc, #16]	; (4c18 <common_tc_delay+0x5c>)
    4c06:	8918      	ldrh	r0, [r3, #8]
    4c08:	4b06      	ldr	r3, [pc, #24]	; (4c24 <common_tc_delay+0x68>)
    4c0a:	4798      	blx	r3
    4c0c:	bd10      	pop	{r4, pc}
    4c0e:	46c0      	nop			; (mov r8, r8)
    4c10:	00002065 	.word	0x00002065
    4c14:	20000e44 	.word	0x20000e44
    4c18:	20000c24 	.word	0x20000c24
    4c1c:	00002079 	.word	0x00002079
    4c20:	0000208d 	.word	0x0000208d
    4c24:	000020c9 	.word	0x000020c9

00004c28 <common_tc_init>:
    4c28:	b508      	push	{r3, lr}
    4c2a:	2200      	movs	r2, #0
    4c2c:	4b03      	ldr	r3, [pc, #12]	; (4c3c <common_tc_init+0x14>)
    4c2e:	701a      	strb	r2, [r3, #0]
    4c30:	4b03      	ldr	r3, [pc, #12]	; (4c40 <common_tc_init+0x18>)
    4c32:	4798      	blx	r3
    4c34:	4b03      	ldr	r3, [pc, #12]	; (4c44 <common_tc_init+0x1c>)
    4c36:	7018      	strb	r0, [r3, #0]
    4c38:	bd08      	pop	{r3, pc}
    4c3a:	46c0      	nop			; (mov r8, r8)
    4c3c:	20000c24 	.word	0x20000c24
    4c40:	000020e1 	.word	0x000020e1
    4c44:	20000e44 	.word	0x20000e44

00004c48 <tmr_ovf_callback>:
    4c48:	b508      	push	{r3, lr}
    4c4a:	4b0e      	ldr	r3, [pc, #56]	; (4c84 <tmr_ovf_callback+0x3c>)
    4c4c:	685b      	ldr	r3, [r3, #4]
    4c4e:	2b00      	cmp	r3, #0
    4c50:	d007      	beq.n	4c62 <tmr_ovf_callback+0x1a>
    4c52:	4a0c      	ldr	r2, [pc, #48]	; (4c84 <tmr_ovf_callback+0x3c>)
    4c54:	6853      	ldr	r3, [r2, #4]
    4c56:	3b01      	subs	r3, #1
    4c58:	6053      	str	r3, [r2, #4]
    4c5a:	2b00      	cmp	r3, #0
    4c5c:	d101      	bne.n	4c62 <tmr_ovf_callback+0x1a>
    4c5e:	4b0a      	ldr	r3, [pc, #40]	; (4c88 <tmr_ovf_callback+0x40>)
    4c60:	4798      	blx	r3
    4c62:	4a08      	ldr	r2, [pc, #32]	; (4c84 <tmr_ovf_callback+0x3c>)
    4c64:	7813      	ldrb	r3, [r2, #0]
    4c66:	3301      	adds	r3, #1
    4c68:	b2db      	uxtb	r3, r3
    4c6a:	7013      	strb	r3, [r2, #0]
    4c6c:	4a07      	ldr	r2, [pc, #28]	; (4c8c <tmr_ovf_callback+0x44>)
    4c6e:	7812      	ldrb	r2, [r2, #0]
    4c70:	429a      	cmp	r2, r3
    4c72:	d806      	bhi.n	4c82 <tmr_ovf_callback+0x3a>
    4c74:	4b03      	ldr	r3, [pc, #12]	; (4c84 <tmr_ovf_callback+0x3c>)
    4c76:	2200      	movs	r2, #0
    4c78:	701a      	strb	r2, [r3, #0]
    4c7a:	68db      	ldr	r3, [r3, #12]
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d000      	beq.n	4c82 <tmr_ovf_callback+0x3a>
    4c80:	4798      	blx	r3
    4c82:	bd08      	pop	{r3, pc}
    4c84:	20000c24 	.word	0x20000c24
    4c88:	0000208d 	.word	0x0000208d
    4c8c:	20000e44 	.word	0x20000e44

00004c90 <tmr_cca_callback>:
    4c90:	b508      	push	{r3, lr}
    4c92:	4b04      	ldr	r3, [pc, #16]	; (4ca4 <tmr_cca_callback+0x14>)
    4c94:	4798      	blx	r3
    4c96:	4b04      	ldr	r3, [pc, #16]	; (4ca8 <tmr_cca_callback+0x18>)
    4c98:	691b      	ldr	r3, [r3, #16]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d000      	beq.n	4ca0 <tmr_cca_callback+0x10>
    4c9e:	4798      	blx	r3
    4ca0:	bd08      	pop	{r3, pc}
    4ca2:	46c0      	nop			; (mov r8, r8)
    4ca4:	00002079 	.word	0x00002079
    4ca8:	20000c24 	.word	0x20000c24

00004cac <set_common_tc_expiry_callback>:
    4cac:	4b01      	ldr	r3, [pc, #4]	; (4cb4 <set_common_tc_expiry_callback+0x8>)
    4cae:	6118      	str	r0, [r3, #16]
    4cb0:	4770      	bx	lr
    4cb2:	46c0      	nop			; (mov r8, r8)
    4cb4:	20000c24 	.word	0x20000c24

00004cb8 <__aeabi_uidiv>:
    4cb8:	2200      	movs	r2, #0
    4cba:	0843      	lsrs	r3, r0, #1
    4cbc:	428b      	cmp	r3, r1
    4cbe:	d374      	bcc.n	4daa <__aeabi_uidiv+0xf2>
    4cc0:	0903      	lsrs	r3, r0, #4
    4cc2:	428b      	cmp	r3, r1
    4cc4:	d35f      	bcc.n	4d86 <__aeabi_uidiv+0xce>
    4cc6:	0a03      	lsrs	r3, r0, #8
    4cc8:	428b      	cmp	r3, r1
    4cca:	d344      	bcc.n	4d56 <__aeabi_uidiv+0x9e>
    4ccc:	0b03      	lsrs	r3, r0, #12
    4cce:	428b      	cmp	r3, r1
    4cd0:	d328      	bcc.n	4d24 <__aeabi_uidiv+0x6c>
    4cd2:	0c03      	lsrs	r3, r0, #16
    4cd4:	428b      	cmp	r3, r1
    4cd6:	d30d      	bcc.n	4cf4 <__aeabi_uidiv+0x3c>
    4cd8:	22ff      	movs	r2, #255	; 0xff
    4cda:	0209      	lsls	r1, r1, #8
    4cdc:	ba12      	rev	r2, r2
    4cde:	0c03      	lsrs	r3, r0, #16
    4ce0:	428b      	cmp	r3, r1
    4ce2:	d302      	bcc.n	4cea <__aeabi_uidiv+0x32>
    4ce4:	1212      	asrs	r2, r2, #8
    4ce6:	0209      	lsls	r1, r1, #8
    4ce8:	d065      	beq.n	4db6 <__aeabi_uidiv+0xfe>
    4cea:	0b03      	lsrs	r3, r0, #12
    4cec:	428b      	cmp	r3, r1
    4cee:	d319      	bcc.n	4d24 <__aeabi_uidiv+0x6c>
    4cf0:	e000      	b.n	4cf4 <__aeabi_uidiv+0x3c>
    4cf2:	0a09      	lsrs	r1, r1, #8
    4cf4:	0bc3      	lsrs	r3, r0, #15
    4cf6:	428b      	cmp	r3, r1
    4cf8:	d301      	bcc.n	4cfe <__aeabi_uidiv+0x46>
    4cfa:	03cb      	lsls	r3, r1, #15
    4cfc:	1ac0      	subs	r0, r0, r3
    4cfe:	4152      	adcs	r2, r2
    4d00:	0b83      	lsrs	r3, r0, #14
    4d02:	428b      	cmp	r3, r1
    4d04:	d301      	bcc.n	4d0a <__aeabi_uidiv+0x52>
    4d06:	038b      	lsls	r3, r1, #14
    4d08:	1ac0      	subs	r0, r0, r3
    4d0a:	4152      	adcs	r2, r2
    4d0c:	0b43      	lsrs	r3, r0, #13
    4d0e:	428b      	cmp	r3, r1
    4d10:	d301      	bcc.n	4d16 <__aeabi_uidiv+0x5e>
    4d12:	034b      	lsls	r3, r1, #13
    4d14:	1ac0      	subs	r0, r0, r3
    4d16:	4152      	adcs	r2, r2
    4d18:	0b03      	lsrs	r3, r0, #12
    4d1a:	428b      	cmp	r3, r1
    4d1c:	d301      	bcc.n	4d22 <__aeabi_uidiv+0x6a>
    4d1e:	030b      	lsls	r3, r1, #12
    4d20:	1ac0      	subs	r0, r0, r3
    4d22:	4152      	adcs	r2, r2
    4d24:	0ac3      	lsrs	r3, r0, #11
    4d26:	428b      	cmp	r3, r1
    4d28:	d301      	bcc.n	4d2e <__aeabi_uidiv+0x76>
    4d2a:	02cb      	lsls	r3, r1, #11
    4d2c:	1ac0      	subs	r0, r0, r3
    4d2e:	4152      	adcs	r2, r2
    4d30:	0a83      	lsrs	r3, r0, #10
    4d32:	428b      	cmp	r3, r1
    4d34:	d301      	bcc.n	4d3a <__aeabi_uidiv+0x82>
    4d36:	028b      	lsls	r3, r1, #10
    4d38:	1ac0      	subs	r0, r0, r3
    4d3a:	4152      	adcs	r2, r2
    4d3c:	0a43      	lsrs	r3, r0, #9
    4d3e:	428b      	cmp	r3, r1
    4d40:	d301      	bcc.n	4d46 <__aeabi_uidiv+0x8e>
    4d42:	024b      	lsls	r3, r1, #9
    4d44:	1ac0      	subs	r0, r0, r3
    4d46:	4152      	adcs	r2, r2
    4d48:	0a03      	lsrs	r3, r0, #8
    4d4a:	428b      	cmp	r3, r1
    4d4c:	d301      	bcc.n	4d52 <__aeabi_uidiv+0x9a>
    4d4e:	020b      	lsls	r3, r1, #8
    4d50:	1ac0      	subs	r0, r0, r3
    4d52:	4152      	adcs	r2, r2
    4d54:	d2cd      	bcs.n	4cf2 <__aeabi_uidiv+0x3a>
    4d56:	09c3      	lsrs	r3, r0, #7
    4d58:	428b      	cmp	r3, r1
    4d5a:	d301      	bcc.n	4d60 <__aeabi_uidiv+0xa8>
    4d5c:	01cb      	lsls	r3, r1, #7
    4d5e:	1ac0      	subs	r0, r0, r3
    4d60:	4152      	adcs	r2, r2
    4d62:	0983      	lsrs	r3, r0, #6
    4d64:	428b      	cmp	r3, r1
    4d66:	d301      	bcc.n	4d6c <__aeabi_uidiv+0xb4>
    4d68:	018b      	lsls	r3, r1, #6
    4d6a:	1ac0      	subs	r0, r0, r3
    4d6c:	4152      	adcs	r2, r2
    4d6e:	0943      	lsrs	r3, r0, #5
    4d70:	428b      	cmp	r3, r1
    4d72:	d301      	bcc.n	4d78 <__aeabi_uidiv+0xc0>
    4d74:	014b      	lsls	r3, r1, #5
    4d76:	1ac0      	subs	r0, r0, r3
    4d78:	4152      	adcs	r2, r2
    4d7a:	0903      	lsrs	r3, r0, #4
    4d7c:	428b      	cmp	r3, r1
    4d7e:	d301      	bcc.n	4d84 <__aeabi_uidiv+0xcc>
    4d80:	010b      	lsls	r3, r1, #4
    4d82:	1ac0      	subs	r0, r0, r3
    4d84:	4152      	adcs	r2, r2
    4d86:	08c3      	lsrs	r3, r0, #3
    4d88:	428b      	cmp	r3, r1
    4d8a:	d301      	bcc.n	4d90 <__aeabi_uidiv+0xd8>
    4d8c:	00cb      	lsls	r3, r1, #3
    4d8e:	1ac0      	subs	r0, r0, r3
    4d90:	4152      	adcs	r2, r2
    4d92:	0883      	lsrs	r3, r0, #2
    4d94:	428b      	cmp	r3, r1
    4d96:	d301      	bcc.n	4d9c <__aeabi_uidiv+0xe4>
    4d98:	008b      	lsls	r3, r1, #2
    4d9a:	1ac0      	subs	r0, r0, r3
    4d9c:	4152      	adcs	r2, r2
    4d9e:	0843      	lsrs	r3, r0, #1
    4da0:	428b      	cmp	r3, r1
    4da2:	d301      	bcc.n	4da8 <__aeabi_uidiv+0xf0>
    4da4:	004b      	lsls	r3, r1, #1
    4da6:	1ac0      	subs	r0, r0, r3
    4da8:	4152      	adcs	r2, r2
    4daa:	1a41      	subs	r1, r0, r1
    4dac:	d200      	bcs.n	4db0 <__aeabi_uidiv+0xf8>
    4dae:	4601      	mov	r1, r0
    4db0:	4152      	adcs	r2, r2
    4db2:	4610      	mov	r0, r2
    4db4:	4770      	bx	lr
    4db6:	e7ff      	b.n	4db8 <__aeabi_uidiv+0x100>
    4db8:	b501      	push	{r0, lr}
    4dba:	2000      	movs	r0, #0
    4dbc:	f000 f80c 	bl	4dd8 <__aeabi_idiv0>
    4dc0:	bd02      	pop	{r1, pc}
    4dc2:	46c0      	nop			; (mov r8, r8)

00004dc4 <__aeabi_uidivmod>:
    4dc4:	2900      	cmp	r1, #0
    4dc6:	d0f7      	beq.n	4db8 <__aeabi_uidiv+0x100>
    4dc8:	b503      	push	{r0, r1, lr}
    4dca:	f7ff ff75 	bl	4cb8 <__aeabi_uidiv>
    4dce:	bc0e      	pop	{r1, r2, r3}
    4dd0:	4342      	muls	r2, r0
    4dd2:	1a89      	subs	r1, r1, r2
    4dd4:	4718      	bx	r3
    4dd6:	46c0      	nop			; (mov r8, r8)

00004dd8 <__aeabi_idiv0>:
    4dd8:	4770      	bx	lr
    4dda:	46c0      	nop			; (mov r8, r8)

00004ddc <__aeabi_lmul>:
    4ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dde:	464f      	mov	r7, r9
    4de0:	4646      	mov	r6, r8
    4de2:	0405      	lsls	r5, r0, #16
    4de4:	0c2d      	lsrs	r5, r5, #16
    4de6:	1c2c      	adds	r4, r5, #0
    4de8:	b4c0      	push	{r6, r7}
    4dea:	0417      	lsls	r7, r2, #16
    4dec:	0c16      	lsrs	r6, r2, #16
    4dee:	0c3f      	lsrs	r7, r7, #16
    4df0:	4699      	mov	r9, r3
    4df2:	0c03      	lsrs	r3, r0, #16
    4df4:	437c      	muls	r4, r7
    4df6:	4375      	muls	r5, r6
    4df8:	435f      	muls	r7, r3
    4dfa:	4373      	muls	r3, r6
    4dfc:	197d      	adds	r5, r7, r5
    4dfe:	0c26      	lsrs	r6, r4, #16
    4e00:	19ad      	adds	r5, r5, r6
    4e02:	469c      	mov	ip, r3
    4e04:	42af      	cmp	r7, r5
    4e06:	d903      	bls.n	4e10 <__aeabi_lmul+0x34>
    4e08:	2380      	movs	r3, #128	; 0x80
    4e0a:	025b      	lsls	r3, r3, #9
    4e0c:	4698      	mov	r8, r3
    4e0e:	44c4      	add	ip, r8
    4e10:	464b      	mov	r3, r9
    4e12:	4351      	muls	r1, r2
    4e14:	4343      	muls	r3, r0
    4e16:	0424      	lsls	r4, r4, #16
    4e18:	0c2e      	lsrs	r6, r5, #16
    4e1a:	0c24      	lsrs	r4, r4, #16
    4e1c:	042d      	lsls	r5, r5, #16
    4e1e:	4466      	add	r6, ip
    4e20:	192c      	adds	r4, r5, r4
    4e22:	1859      	adds	r1, r3, r1
    4e24:	1989      	adds	r1, r1, r6
    4e26:	1c20      	adds	r0, r4, #0
    4e28:	bc0c      	pop	{r2, r3}
    4e2a:	4690      	mov	r8, r2
    4e2c:	4699      	mov	r9, r3
    4e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004e30 <__libc_init_array>:
    4e30:	4b0e      	ldr	r3, [pc, #56]	; (4e6c <__libc_init_array+0x3c>)
    4e32:	b570      	push	{r4, r5, r6, lr}
    4e34:	2500      	movs	r5, #0
    4e36:	1c1e      	adds	r6, r3, #0
    4e38:	4c0d      	ldr	r4, [pc, #52]	; (4e70 <__libc_init_array+0x40>)
    4e3a:	1ae4      	subs	r4, r4, r3
    4e3c:	10a4      	asrs	r4, r4, #2
    4e3e:	42a5      	cmp	r5, r4
    4e40:	d004      	beq.n	4e4c <__libc_init_array+0x1c>
    4e42:	00ab      	lsls	r3, r5, #2
    4e44:	58f3      	ldr	r3, [r6, r3]
    4e46:	4798      	blx	r3
    4e48:	3501      	adds	r5, #1
    4e4a:	e7f8      	b.n	4e3e <__libc_init_array+0xe>
    4e4c:	f001 fa12 	bl	6274 <_init>
    4e50:	4b08      	ldr	r3, [pc, #32]	; (4e74 <__libc_init_array+0x44>)
    4e52:	2500      	movs	r5, #0
    4e54:	1c1e      	adds	r6, r3, #0
    4e56:	4c08      	ldr	r4, [pc, #32]	; (4e78 <__libc_init_array+0x48>)
    4e58:	1ae4      	subs	r4, r4, r3
    4e5a:	10a4      	asrs	r4, r4, #2
    4e5c:	42a5      	cmp	r5, r4
    4e5e:	d004      	beq.n	4e6a <__libc_init_array+0x3a>
    4e60:	00ab      	lsls	r3, r5, #2
    4e62:	58f3      	ldr	r3, [r6, r3]
    4e64:	4798      	blx	r3
    4e66:	3501      	adds	r5, #1
    4e68:	e7f8      	b.n	4e5c <__libc_init_array+0x2c>
    4e6a:	bd70      	pop	{r4, r5, r6, pc}
    4e6c:	00006280 	.word	0x00006280
    4e70:	00006280 	.word	0x00006280
    4e74:	00006280 	.word	0x00006280
    4e78:	00006284 	.word	0x00006284

00004e7c <memcpy>:
    4e7c:	2300      	movs	r3, #0
    4e7e:	b510      	push	{r4, lr}
    4e80:	4293      	cmp	r3, r2
    4e82:	d003      	beq.n	4e8c <memcpy+0x10>
    4e84:	5ccc      	ldrb	r4, [r1, r3]
    4e86:	54c4      	strb	r4, [r0, r3]
    4e88:	3301      	adds	r3, #1
    4e8a:	e7f9      	b.n	4e80 <memcpy+0x4>
    4e8c:	bd10      	pop	{r4, pc}

00004e8e <memset>:
    4e8e:	1c03      	adds	r3, r0, #0
    4e90:	1882      	adds	r2, r0, r2
    4e92:	4293      	cmp	r3, r2
    4e94:	d002      	beq.n	4e9c <memset+0xe>
    4e96:	7019      	strb	r1, [r3, #0]
    4e98:	3301      	adds	r3, #1
    4e9a:	e7fa      	b.n	4e92 <memset+0x4>
    4e9c:	4770      	bx	lr
	...

00004ea0 <iprintf>:
    4ea0:	b40f      	push	{r0, r1, r2, r3}
    4ea2:	4b0b      	ldr	r3, [pc, #44]	; (4ed0 <iprintf+0x30>)
    4ea4:	b513      	push	{r0, r1, r4, lr}
    4ea6:	681c      	ldr	r4, [r3, #0]
    4ea8:	2c00      	cmp	r4, #0
    4eaa:	d005      	beq.n	4eb8 <iprintf+0x18>
    4eac:	69a3      	ldr	r3, [r4, #24]
    4eae:	2b00      	cmp	r3, #0
    4eb0:	d102      	bne.n	4eb8 <iprintf+0x18>
    4eb2:	1c20      	adds	r0, r4, #0
    4eb4:	f000 fb0a 	bl	54cc <__sinit>
    4eb8:	ab05      	add	r3, sp, #20
    4eba:	1c20      	adds	r0, r4, #0
    4ebc:	68a1      	ldr	r1, [r4, #8]
    4ebe:	9a04      	ldr	r2, [sp, #16]
    4ec0:	9301      	str	r3, [sp, #4]
    4ec2:	f000 fcbd 	bl	5840 <_vfiprintf_r>
    4ec6:	bc16      	pop	{r1, r2, r4}
    4ec8:	bc08      	pop	{r3}
    4eca:	b004      	add	sp, #16
    4ecc:	4718      	bx	r3
    4ece:	46c0      	nop			; (mov r8, r8)
    4ed0:	2000006c 	.word	0x2000006c

00004ed4 <_puts_r>:
    4ed4:	b570      	push	{r4, r5, r6, lr}
    4ed6:	1c05      	adds	r5, r0, #0
    4ed8:	1c0e      	adds	r6, r1, #0
    4eda:	2800      	cmp	r0, #0
    4edc:	d004      	beq.n	4ee8 <_puts_r+0x14>
    4ede:	6983      	ldr	r3, [r0, #24]
    4ee0:	2b00      	cmp	r3, #0
    4ee2:	d101      	bne.n	4ee8 <_puts_r+0x14>
    4ee4:	f000 faf2 	bl	54cc <__sinit>
    4ee8:	68ac      	ldr	r4, [r5, #8]
    4eea:	89a3      	ldrh	r3, [r4, #12]
    4eec:	071b      	lsls	r3, r3, #28
    4eee:	d502      	bpl.n	4ef6 <_puts_r+0x22>
    4ef0:	6923      	ldr	r3, [r4, #16]
    4ef2:	2b00      	cmp	r3, #0
    4ef4:	d119      	bne.n	4f2a <_puts_r+0x56>
    4ef6:	1c28      	adds	r0, r5, #0
    4ef8:	1c21      	adds	r1, r4, #0
    4efa:	f000 f97b 	bl	51f4 <__swsetup_r>
    4efe:	2800      	cmp	r0, #0
    4f00:	d013      	beq.n	4f2a <_puts_r+0x56>
    4f02:	2001      	movs	r0, #1
    4f04:	4240      	negs	r0, r0
    4f06:	e045      	b.n	4f94 <_puts_r+0xc0>
    4f08:	7831      	ldrb	r1, [r6, #0]
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	da1b      	bge.n	4f46 <_puts_r+0x72>
    4f0e:	69a2      	ldr	r2, [r4, #24]
    4f10:	4293      	cmp	r3, r2
    4f12:	da11      	bge.n	4f38 <_puts_r+0x64>
    4f14:	1c22      	adds	r2, r4, #0
    4f16:	1c28      	adds	r0, r5, #0
    4f18:	f000 f914 	bl	5144 <__swbuf_r>
    4f1c:	3001      	adds	r0, #1
    4f1e:	4242      	negs	r2, r0
    4f20:	4142      	adcs	r2, r0
    4f22:	b2d0      	uxtb	r0, r2
    4f24:	2800      	cmp	r0, #0
    4f26:	d1ec      	bne.n	4f02 <_puts_r+0x2e>
    4f28:	3601      	adds	r6, #1
    4f2a:	68a3      	ldr	r3, [r4, #8]
    4f2c:	7832      	ldrb	r2, [r6, #0]
    4f2e:	3b01      	subs	r3, #1
    4f30:	60a3      	str	r3, [r4, #8]
    4f32:	2a00      	cmp	r2, #0
    4f34:	d1e8      	bne.n	4f08 <_puts_r+0x34>
    4f36:	e00c      	b.n	4f52 <_puts_r+0x7e>
    4f38:	6823      	ldr	r3, [r4, #0]
    4f3a:	7019      	strb	r1, [r3, #0]
    4f3c:	6823      	ldr	r3, [r4, #0]
    4f3e:	7819      	ldrb	r1, [r3, #0]
    4f40:	290a      	cmp	r1, #10
    4f42:	d103      	bne.n	4f4c <_puts_r+0x78>
    4f44:	e7e6      	b.n	4f14 <_puts_r+0x40>
    4f46:	6823      	ldr	r3, [r4, #0]
    4f48:	7019      	strb	r1, [r3, #0]
    4f4a:	6823      	ldr	r3, [r4, #0]
    4f4c:	3301      	adds	r3, #1
    4f4e:	6023      	str	r3, [r4, #0]
    4f50:	e7ea      	b.n	4f28 <_puts_r+0x54>
    4f52:	2b00      	cmp	r3, #0
    4f54:	da17      	bge.n	4f86 <_puts_r+0xb2>
    4f56:	69a2      	ldr	r2, [r4, #24]
    4f58:	4293      	cmp	r3, r2
    4f5a:	db08      	blt.n	4f6e <_puts_r+0x9a>
    4f5c:	230a      	movs	r3, #10
    4f5e:	6822      	ldr	r2, [r4, #0]
    4f60:	7013      	strb	r3, [r2, #0]
    4f62:	6823      	ldr	r3, [r4, #0]
    4f64:	7819      	ldrb	r1, [r3, #0]
    4f66:	290a      	cmp	r1, #10
    4f68:	d111      	bne.n	4f8e <_puts_r+0xba>
    4f6a:	1c28      	adds	r0, r5, #0
    4f6c:	e001      	b.n	4f72 <_puts_r+0x9e>
    4f6e:	1c28      	adds	r0, r5, #0
    4f70:	210a      	movs	r1, #10
    4f72:	1c22      	adds	r2, r4, #0
    4f74:	f000 f8e6 	bl	5144 <__swbuf_r>
    4f78:	3001      	adds	r0, #1
    4f7a:	4242      	negs	r2, r0
    4f7c:	4142      	adcs	r2, r0
    4f7e:	b2d0      	uxtb	r0, r2
    4f80:	2800      	cmp	r0, #0
    4f82:	d006      	beq.n	4f92 <_puts_r+0xbe>
    4f84:	e7bd      	b.n	4f02 <_puts_r+0x2e>
    4f86:	230a      	movs	r3, #10
    4f88:	6822      	ldr	r2, [r4, #0]
    4f8a:	7013      	strb	r3, [r2, #0]
    4f8c:	6823      	ldr	r3, [r4, #0]
    4f8e:	3301      	adds	r3, #1
    4f90:	6023      	str	r3, [r4, #0]
    4f92:	200a      	movs	r0, #10
    4f94:	bd70      	pop	{r4, r5, r6, pc}
	...

00004f98 <puts>:
    4f98:	b508      	push	{r3, lr}
    4f9a:	4b03      	ldr	r3, [pc, #12]	; (4fa8 <puts+0x10>)
    4f9c:	1c01      	adds	r1, r0, #0
    4f9e:	6818      	ldr	r0, [r3, #0]
    4fa0:	f7ff ff98 	bl	4ed4 <_puts_r>
    4fa4:	bd08      	pop	{r3, pc}
    4fa6:	46c0      	nop			; (mov r8, r8)
    4fa8:	2000006c 	.word	0x2000006c

00004fac <rand>:
    4fac:	4b15      	ldr	r3, [pc, #84]	; (5004 <rand+0x58>)
    4fae:	b510      	push	{r4, lr}
    4fb0:	681c      	ldr	r4, [r3, #0]
    4fb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4fb4:	2b00      	cmp	r3, #0
    4fb6:	d115      	bne.n	4fe4 <rand+0x38>
    4fb8:	2018      	movs	r0, #24
    4fba:	f000 fb71 	bl	56a0 <malloc>
    4fbe:	4b12      	ldr	r3, [pc, #72]	; (5008 <rand+0x5c>)
    4fc0:	63a0      	str	r0, [r4, #56]	; 0x38
    4fc2:	8003      	strh	r3, [r0, #0]
    4fc4:	4b11      	ldr	r3, [pc, #68]	; (500c <rand+0x60>)
    4fc6:	2201      	movs	r2, #1
    4fc8:	8043      	strh	r3, [r0, #2]
    4fca:	4b11      	ldr	r3, [pc, #68]	; (5010 <rand+0x64>)
    4fcc:	8083      	strh	r3, [r0, #4]
    4fce:	4b11      	ldr	r3, [pc, #68]	; (5014 <rand+0x68>)
    4fd0:	80c3      	strh	r3, [r0, #6]
    4fd2:	4b11      	ldr	r3, [pc, #68]	; (5018 <rand+0x6c>)
    4fd4:	8103      	strh	r3, [r0, #8]
    4fd6:	2305      	movs	r3, #5
    4fd8:	8143      	strh	r3, [r0, #10]
    4fda:	3306      	adds	r3, #6
    4fdc:	8183      	strh	r3, [r0, #12]
    4fde:	2300      	movs	r3, #0
    4fe0:	6102      	str	r2, [r0, #16]
    4fe2:	6143      	str	r3, [r0, #20]
    4fe4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    4fe6:	4a0d      	ldr	r2, [pc, #52]	; (501c <rand+0x70>)
    4fe8:	6920      	ldr	r0, [r4, #16]
    4fea:	6961      	ldr	r1, [r4, #20]
    4fec:	4b0c      	ldr	r3, [pc, #48]	; (5020 <rand+0x74>)
    4fee:	f7ff fef5 	bl	4ddc <__aeabi_lmul>
    4ff2:	2201      	movs	r2, #1
    4ff4:	2300      	movs	r3, #0
    4ff6:	1880      	adds	r0, r0, r2
    4ff8:	4159      	adcs	r1, r3
    4ffa:	6120      	str	r0, [r4, #16]
    4ffc:	6161      	str	r1, [r4, #20]
    4ffe:	0048      	lsls	r0, r1, #1
    5000:	0840      	lsrs	r0, r0, #1
    5002:	bd10      	pop	{r4, pc}
    5004:	2000006c 	.word	0x2000006c
    5008:	0000330e 	.word	0x0000330e
    500c:	ffffabcd 	.word	0xffffabcd
    5010:	00001234 	.word	0x00001234
    5014:	ffffe66d 	.word	0xffffe66d
    5018:	ffffdeec 	.word	0xffffdeec
    501c:	4c957f2d 	.word	0x4c957f2d
    5020:	5851f42d 	.word	0x5851f42d

00005024 <setbuf>:
    5024:	b508      	push	{r3, lr}
    5026:	424a      	negs	r2, r1
    5028:	414a      	adcs	r2, r1
    502a:	2380      	movs	r3, #128	; 0x80
    502c:	0052      	lsls	r2, r2, #1
    502e:	00db      	lsls	r3, r3, #3
    5030:	f000 f802 	bl	5038 <setvbuf>
    5034:	bd08      	pop	{r3, pc}
	...

00005038 <setvbuf>:
    5038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    503a:	1c1e      	adds	r6, r3, #0
    503c:	4b3c      	ldr	r3, [pc, #240]	; (5130 <setvbuf+0xf8>)
    503e:	1c04      	adds	r4, r0, #0
    5040:	681d      	ldr	r5, [r3, #0]
    5042:	1c0f      	adds	r7, r1, #0
    5044:	9201      	str	r2, [sp, #4]
    5046:	2d00      	cmp	r5, #0
    5048:	d005      	beq.n	5056 <setvbuf+0x1e>
    504a:	69ab      	ldr	r3, [r5, #24]
    504c:	2b00      	cmp	r3, #0
    504e:	d102      	bne.n	5056 <setvbuf+0x1e>
    5050:	1c28      	adds	r0, r5, #0
    5052:	f000 fa3b 	bl	54cc <__sinit>
    5056:	4b37      	ldr	r3, [pc, #220]	; (5134 <setvbuf+0xfc>)
    5058:	429c      	cmp	r4, r3
    505a:	d101      	bne.n	5060 <setvbuf+0x28>
    505c:	686c      	ldr	r4, [r5, #4]
    505e:	e008      	b.n	5072 <setvbuf+0x3a>
    5060:	4b35      	ldr	r3, [pc, #212]	; (5138 <setvbuf+0x100>)
    5062:	429c      	cmp	r4, r3
    5064:	d101      	bne.n	506a <setvbuf+0x32>
    5066:	68ac      	ldr	r4, [r5, #8]
    5068:	e003      	b.n	5072 <setvbuf+0x3a>
    506a:	4b34      	ldr	r3, [pc, #208]	; (513c <setvbuf+0x104>)
    506c:	429c      	cmp	r4, r3
    506e:	d100      	bne.n	5072 <setvbuf+0x3a>
    5070:	68ec      	ldr	r4, [r5, #12]
    5072:	9b01      	ldr	r3, [sp, #4]
    5074:	2b02      	cmp	r3, #2
    5076:	d858      	bhi.n	512a <setvbuf+0xf2>
    5078:	2e00      	cmp	r6, #0
    507a:	db56      	blt.n	512a <setvbuf+0xf2>
    507c:	1c28      	adds	r0, r5, #0
    507e:	1c21      	adds	r1, r4, #0
    5080:	f000 f9b6 	bl	53f0 <_fflush_r>
    5084:	2300      	movs	r3, #0
    5086:	6063      	str	r3, [r4, #4]
    5088:	61a3      	str	r3, [r4, #24]
    508a:	89a3      	ldrh	r3, [r4, #12]
    508c:	061b      	lsls	r3, r3, #24
    508e:	d503      	bpl.n	5098 <setvbuf+0x60>
    5090:	1c28      	adds	r0, r5, #0
    5092:	6921      	ldr	r1, [r4, #16]
    5094:	f000 fb0e 	bl	56b4 <_free_r>
    5098:	2283      	movs	r2, #131	; 0x83
    509a:	89a3      	ldrh	r3, [r4, #12]
    509c:	4393      	bics	r3, r2
    509e:	81a3      	strh	r3, [r4, #12]
    50a0:	9b01      	ldr	r3, [sp, #4]
    50a2:	2b02      	cmp	r3, #2
    50a4:	d013      	beq.n	50ce <setvbuf+0x96>
    50a6:	2f00      	cmp	r7, #0
    50a8:	d125      	bne.n	50f6 <setvbuf+0xbe>
    50aa:	2e00      	cmp	r6, #0
    50ac:	d101      	bne.n	50b2 <setvbuf+0x7a>
    50ae:	2680      	movs	r6, #128	; 0x80
    50b0:	00f6      	lsls	r6, r6, #3
    50b2:	1c30      	adds	r0, r6, #0
    50b4:	f000 faf4 	bl	56a0 <malloc>
    50b8:	1e07      	subs	r7, r0, #0
    50ba:	d118      	bne.n	50ee <setvbuf+0xb6>
    50bc:	2080      	movs	r0, #128	; 0x80
    50be:	00c0      	lsls	r0, r0, #3
    50c0:	f000 faee 	bl	56a0 <malloc>
    50c4:	1e07      	subs	r7, r0, #0
    50c6:	d110      	bne.n	50ea <setvbuf+0xb2>
    50c8:	2001      	movs	r0, #1
    50ca:	4240      	negs	r0, r0
    50cc:	e000      	b.n	50d0 <setvbuf+0x98>
    50ce:	2000      	movs	r0, #0
    50d0:	2202      	movs	r2, #2
    50d2:	89a3      	ldrh	r3, [r4, #12]
    50d4:	4313      	orrs	r3, r2
    50d6:	81a3      	strh	r3, [r4, #12]
    50d8:	2300      	movs	r3, #0
    50da:	60a3      	str	r3, [r4, #8]
    50dc:	1c23      	adds	r3, r4, #0
    50de:	3347      	adds	r3, #71	; 0x47
    50e0:	6023      	str	r3, [r4, #0]
    50e2:	6123      	str	r3, [r4, #16]
    50e4:	2301      	movs	r3, #1
    50e6:	6163      	str	r3, [r4, #20]
    50e8:	e021      	b.n	512e <setvbuf+0xf6>
    50ea:	2680      	movs	r6, #128	; 0x80
    50ec:	00f6      	lsls	r6, r6, #3
    50ee:	2280      	movs	r2, #128	; 0x80
    50f0:	89a3      	ldrh	r3, [r4, #12]
    50f2:	4313      	orrs	r3, r2
    50f4:	81a3      	strh	r3, [r4, #12]
    50f6:	9b01      	ldr	r3, [sp, #4]
    50f8:	2b01      	cmp	r3, #1
    50fa:	d105      	bne.n	5108 <setvbuf+0xd0>
    50fc:	89a3      	ldrh	r3, [r4, #12]
    50fe:	9a01      	ldr	r2, [sp, #4]
    5100:	431a      	orrs	r2, r3
    5102:	4273      	negs	r3, r6
    5104:	81a2      	strh	r2, [r4, #12]
    5106:	61a3      	str	r3, [r4, #24]
    5108:	4b0d      	ldr	r3, [pc, #52]	; (5140 <setvbuf+0x108>)
    510a:	2000      	movs	r0, #0
    510c:	62ab      	str	r3, [r5, #40]	; 0x28
    510e:	89a2      	ldrh	r2, [r4, #12]
    5110:	6027      	str	r7, [r4, #0]
    5112:	6127      	str	r7, [r4, #16]
    5114:	6166      	str	r6, [r4, #20]
    5116:	0713      	lsls	r3, r2, #28
    5118:	d509      	bpl.n	512e <setvbuf+0xf6>
    511a:	2303      	movs	r3, #3
    511c:	401a      	ands	r2, r3
    511e:	4253      	negs	r3, r2
    5120:	4153      	adcs	r3, r2
    5122:	425b      	negs	r3, r3
    5124:	401e      	ands	r6, r3
    5126:	60a6      	str	r6, [r4, #8]
    5128:	e001      	b.n	512e <setvbuf+0xf6>
    512a:	2001      	movs	r0, #1
    512c:	4240      	negs	r0, r0
    512e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5130:	2000006c 	.word	0x2000006c
    5134:	000061e0 	.word	0x000061e0
    5138:	00006200 	.word	0x00006200
    513c:	00006220 	.word	0x00006220
    5140:	00005449 	.word	0x00005449

00005144 <__swbuf_r>:
    5144:	b570      	push	{r4, r5, r6, lr}
    5146:	1c05      	adds	r5, r0, #0
    5148:	1c0e      	adds	r6, r1, #0
    514a:	1c14      	adds	r4, r2, #0
    514c:	2800      	cmp	r0, #0
    514e:	d004      	beq.n	515a <__swbuf_r+0x16>
    5150:	6983      	ldr	r3, [r0, #24]
    5152:	2b00      	cmp	r3, #0
    5154:	d101      	bne.n	515a <__swbuf_r+0x16>
    5156:	f000 f9b9 	bl	54cc <__sinit>
    515a:	4b23      	ldr	r3, [pc, #140]	; (51e8 <__swbuf_r+0xa4>)
    515c:	429c      	cmp	r4, r3
    515e:	d101      	bne.n	5164 <__swbuf_r+0x20>
    5160:	686c      	ldr	r4, [r5, #4]
    5162:	e008      	b.n	5176 <__swbuf_r+0x32>
    5164:	4b21      	ldr	r3, [pc, #132]	; (51ec <__swbuf_r+0xa8>)
    5166:	429c      	cmp	r4, r3
    5168:	d101      	bne.n	516e <__swbuf_r+0x2a>
    516a:	68ac      	ldr	r4, [r5, #8]
    516c:	e003      	b.n	5176 <__swbuf_r+0x32>
    516e:	4b20      	ldr	r3, [pc, #128]	; (51f0 <__swbuf_r+0xac>)
    5170:	429c      	cmp	r4, r3
    5172:	d100      	bne.n	5176 <__swbuf_r+0x32>
    5174:	68ec      	ldr	r4, [r5, #12]
    5176:	69a3      	ldr	r3, [r4, #24]
    5178:	60a3      	str	r3, [r4, #8]
    517a:	89a3      	ldrh	r3, [r4, #12]
    517c:	071b      	lsls	r3, r3, #28
    517e:	d50a      	bpl.n	5196 <__swbuf_r+0x52>
    5180:	6923      	ldr	r3, [r4, #16]
    5182:	2b00      	cmp	r3, #0
    5184:	d007      	beq.n	5196 <__swbuf_r+0x52>
    5186:	6823      	ldr	r3, [r4, #0]
    5188:	6922      	ldr	r2, [r4, #16]
    518a:	b2f6      	uxtb	r6, r6
    518c:	1a98      	subs	r0, r3, r2
    518e:	6963      	ldr	r3, [r4, #20]
    5190:	4298      	cmp	r0, r3
    5192:	db0f      	blt.n	51b4 <__swbuf_r+0x70>
    5194:	e008      	b.n	51a8 <__swbuf_r+0x64>
    5196:	1c28      	adds	r0, r5, #0
    5198:	1c21      	adds	r1, r4, #0
    519a:	f000 f82b 	bl	51f4 <__swsetup_r>
    519e:	2800      	cmp	r0, #0
    51a0:	d0f1      	beq.n	5186 <__swbuf_r+0x42>
    51a2:	2001      	movs	r0, #1
    51a4:	4240      	negs	r0, r0
    51a6:	e01d      	b.n	51e4 <__swbuf_r+0xa0>
    51a8:	1c28      	adds	r0, r5, #0
    51aa:	1c21      	adds	r1, r4, #0
    51ac:	f000 f920 	bl	53f0 <_fflush_r>
    51b0:	2800      	cmp	r0, #0
    51b2:	d1f6      	bne.n	51a2 <__swbuf_r+0x5e>
    51b4:	68a3      	ldr	r3, [r4, #8]
    51b6:	3001      	adds	r0, #1
    51b8:	3b01      	subs	r3, #1
    51ba:	60a3      	str	r3, [r4, #8]
    51bc:	6823      	ldr	r3, [r4, #0]
    51be:	1c5a      	adds	r2, r3, #1
    51c0:	6022      	str	r2, [r4, #0]
    51c2:	701e      	strb	r6, [r3, #0]
    51c4:	6963      	ldr	r3, [r4, #20]
    51c6:	4298      	cmp	r0, r3
    51c8:	d005      	beq.n	51d6 <__swbuf_r+0x92>
    51ca:	89a3      	ldrh	r3, [r4, #12]
    51cc:	1c30      	adds	r0, r6, #0
    51ce:	07db      	lsls	r3, r3, #31
    51d0:	d508      	bpl.n	51e4 <__swbuf_r+0xa0>
    51d2:	2e0a      	cmp	r6, #10
    51d4:	d106      	bne.n	51e4 <__swbuf_r+0xa0>
    51d6:	1c28      	adds	r0, r5, #0
    51d8:	1c21      	adds	r1, r4, #0
    51da:	f000 f909 	bl	53f0 <_fflush_r>
    51de:	2800      	cmp	r0, #0
    51e0:	d1df      	bne.n	51a2 <__swbuf_r+0x5e>
    51e2:	1c30      	adds	r0, r6, #0
    51e4:	bd70      	pop	{r4, r5, r6, pc}
    51e6:	46c0      	nop			; (mov r8, r8)
    51e8:	000061e0 	.word	0x000061e0
    51ec:	00006200 	.word	0x00006200
    51f0:	00006220 	.word	0x00006220

000051f4 <__swsetup_r>:
    51f4:	4b35      	ldr	r3, [pc, #212]	; (52cc <__swsetup_r+0xd8>)
    51f6:	b570      	push	{r4, r5, r6, lr}
    51f8:	681d      	ldr	r5, [r3, #0]
    51fa:	1c06      	adds	r6, r0, #0
    51fc:	1c0c      	adds	r4, r1, #0
    51fe:	2d00      	cmp	r5, #0
    5200:	d005      	beq.n	520e <__swsetup_r+0x1a>
    5202:	69ab      	ldr	r3, [r5, #24]
    5204:	2b00      	cmp	r3, #0
    5206:	d102      	bne.n	520e <__swsetup_r+0x1a>
    5208:	1c28      	adds	r0, r5, #0
    520a:	f000 f95f 	bl	54cc <__sinit>
    520e:	4b30      	ldr	r3, [pc, #192]	; (52d0 <__swsetup_r+0xdc>)
    5210:	429c      	cmp	r4, r3
    5212:	d101      	bne.n	5218 <__swsetup_r+0x24>
    5214:	686c      	ldr	r4, [r5, #4]
    5216:	e008      	b.n	522a <__swsetup_r+0x36>
    5218:	4b2e      	ldr	r3, [pc, #184]	; (52d4 <__swsetup_r+0xe0>)
    521a:	429c      	cmp	r4, r3
    521c:	d101      	bne.n	5222 <__swsetup_r+0x2e>
    521e:	68ac      	ldr	r4, [r5, #8]
    5220:	e003      	b.n	522a <__swsetup_r+0x36>
    5222:	4b2d      	ldr	r3, [pc, #180]	; (52d8 <__swsetup_r+0xe4>)
    5224:	429c      	cmp	r4, r3
    5226:	d100      	bne.n	522a <__swsetup_r+0x36>
    5228:	68ec      	ldr	r4, [r5, #12]
    522a:	89a3      	ldrh	r3, [r4, #12]
    522c:	b29a      	uxth	r2, r3
    522e:	0711      	lsls	r1, r2, #28
    5230:	d423      	bmi.n	527a <__swsetup_r+0x86>
    5232:	06d1      	lsls	r1, r2, #27
    5234:	d407      	bmi.n	5246 <__swsetup_r+0x52>
    5236:	2209      	movs	r2, #9
    5238:	2001      	movs	r0, #1
    523a:	6032      	str	r2, [r6, #0]
    523c:	3237      	adds	r2, #55	; 0x37
    523e:	4313      	orrs	r3, r2
    5240:	81a3      	strh	r3, [r4, #12]
    5242:	4240      	negs	r0, r0
    5244:	e040      	b.n	52c8 <__swsetup_r+0xd4>
    5246:	0753      	lsls	r3, r2, #29
    5248:	d513      	bpl.n	5272 <__swsetup_r+0x7e>
    524a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    524c:	2900      	cmp	r1, #0
    524e:	d008      	beq.n	5262 <__swsetup_r+0x6e>
    5250:	1c23      	adds	r3, r4, #0
    5252:	3344      	adds	r3, #68	; 0x44
    5254:	4299      	cmp	r1, r3
    5256:	d002      	beq.n	525e <__swsetup_r+0x6a>
    5258:	1c30      	adds	r0, r6, #0
    525a:	f000 fa2b 	bl	56b4 <_free_r>
    525e:	2300      	movs	r3, #0
    5260:	6363      	str	r3, [r4, #52]	; 0x34
    5262:	2224      	movs	r2, #36	; 0x24
    5264:	89a3      	ldrh	r3, [r4, #12]
    5266:	4393      	bics	r3, r2
    5268:	81a3      	strh	r3, [r4, #12]
    526a:	2300      	movs	r3, #0
    526c:	6063      	str	r3, [r4, #4]
    526e:	6923      	ldr	r3, [r4, #16]
    5270:	6023      	str	r3, [r4, #0]
    5272:	2208      	movs	r2, #8
    5274:	89a3      	ldrh	r3, [r4, #12]
    5276:	4313      	orrs	r3, r2
    5278:	81a3      	strh	r3, [r4, #12]
    527a:	6923      	ldr	r3, [r4, #16]
    527c:	2b00      	cmp	r3, #0
    527e:	d10b      	bne.n	5298 <__swsetup_r+0xa4>
    5280:	23a0      	movs	r3, #160	; 0xa0
    5282:	89a2      	ldrh	r2, [r4, #12]
    5284:	009b      	lsls	r3, r3, #2
    5286:	4013      	ands	r3, r2
    5288:	2280      	movs	r2, #128	; 0x80
    528a:	0092      	lsls	r2, r2, #2
    528c:	4293      	cmp	r3, r2
    528e:	d003      	beq.n	5298 <__swsetup_r+0xa4>
    5290:	1c30      	adds	r0, r6, #0
    5292:	1c21      	adds	r1, r4, #0
    5294:	f000 f9ac 	bl	55f0 <__smakebuf_r>
    5298:	2301      	movs	r3, #1
    529a:	89a2      	ldrh	r2, [r4, #12]
    529c:	4013      	ands	r3, r2
    529e:	d005      	beq.n	52ac <__swsetup_r+0xb8>
    52a0:	2300      	movs	r3, #0
    52a2:	60a3      	str	r3, [r4, #8]
    52a4:	6963      	ldr	r3, [r4, #20]
    52a6:	425b      	negs	r3, r3
    52a8:	61a3      	str	r3, [r4, #24]
    52aa:	e003      	b.n	52b4 <__swsetup_r+0xc0>
    52ac:	0791      	lsls	r1, r2, #30
    52ae:	d400      	bmi.n	52b2 <__swsetup_r+0xbe>
    52b0:	6963      	ldr	r3, [r4, #20]
    52b2:	60a3      	str	r3, [r4, #8]
    52b4:	2000      	movs	r0, #0
    52b6:	6923      	ldr	r3, [r4, #16]
    52b8:	4283      	cmp	r3, r0
    52ba:	d105      	bne.n	52c8 <__swsetup_r+0xd4>
    52bc:	0613      	lsls	r3, r2, #24
    52be:	d503      	bpl.n	52c8 <__swsetup_r+0xd4>
    52c0:	2340      	movs	r3, #64	; 0x40
    52c2:	431a      	orrs	r2, r3
    52c4:	81a2      	strh	r2, [r4, #12]
    52c6:	3801      	subs	r0, #1
    52c8:	bd70      	pop	{r4, r5, r6, pc}
    52ca:	46c0      	nop			; (mov r8, r8)
    52cc:	2000006c 	.word	0x2000006c
    52d0:	000061e0 	.word	0x000061e0
    52d4:	00006200 	.word	0x00006200
    52d8:	00006220 	.word	0x00006220

000052dc <__sflush_r>:
    52dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    52de:	898a      	ldrh	r2, [r1, #12]
    52e0:	1c05      	adds	r5, r0, #0
    52e2:	1c0c      	adds	r4, r1, #0
    52e4:	0713      	lsls	r3, r2, #28
    52e6:	d45e      	bmi.n	53a6 <__sflush_r+0xca>
    52e8:	684b      	ldr	r3, [r1, #4]
    52ea:	2b00      	cmp	r3, #0
    52ec:	dc02      	bgt.n	52f4 <__sflush_r+0x18>
    52ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    52f0:	2b00      	cmp	r3, #0
    52f2:	dd1a      	ble.n	532a <__sflush_r+0x4e>
    52f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    52f6:	2f00      	cmp	r7, #0
    52f8:	d017      	beq.n	532a <__sflush_r+0x4e>
    52fa:	2300      	movs	r3, #0
    52fc:	682e      	ldr	r6, [r5, #0]
    52fe:	602b      	str	r3, [r5, #0]
    5300:	2380      	movs	r3, #128	; 0x80
    5302:	015b      	lsls	r3, r3, #5
    5304:	401a      	ands	r2, r3
    5306:	d001      	beq.n	530c <__sflush_r+0x30>
    5308:	6d62      	ldr	r2, [r4, #84]	; 0x54
    530a:	e015      	b.n	5338 <__sflush_r+0x5c>
    530c:	1c28      	adds	r0, r5, #0
    530e:	6a21      	ldr	r1, [r4, #32]
    5310:	2301      	movs	r3, #1
    5312:	47b8      	blx	r7
    5314:	1c02      	adds	r2, r0, #0
    5316:	1c43      	adds	r3, r0, #1
    5318:	d10e      	bne.n	5338 <__sflush_r+0x5c>
    531a:	682b      	ldr	r3, [r5, #0]
    531c:	2b00      	cmp	r3, #0
    531e:	d00b      	beq.n	5338 <__sflush_r+0x5c>
    5320:	2b1d      	cmp	r3, #29
    5322:	d001      	beq.n	5328 <__sflush_r+0x4c>
    5324:	2b16      	cmp	r3, #22
    5326:	d102      	bne.n	532e <__sflush_r+0x52>
    5328:	602e      	str	r6, [r5, #0]
    532a:	2000      	movs	r0, #0
    532c:	e05e      	b.n	53ec <__sflush_r+0x110>
    532e:	2140      	movs	r1, #64	; 0x40
    5330:	89a3      	ldrh	r3, [r4, #12]
    5332:	430b      	orrs	r3, r1
    5334:	81a3      	strh	r3, [r4, #12]
    5336:	e059      	b.n	53ec <__sflush_r+0x110>
    5338:	89a3      	ldrh	r3, [r4, #12]
    533a:	075b      	lsls	r3, r3, #29
    533c:	d506      	bpl.n	534c <__sflush_r+0x70>
    533e:	6863      	ldr	r3, [r4, #4]
    5340:	1ad2      	subs	r2, r2, r3
    5342:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5344:	2b00      	cmp	r3, #0
    5346:	d001      	beq.n	534c <__sflush_r+0x70>
    5348:	6c23      	ldr	r3, [r4, #64]	; 0x40
    534a:	1ad2      	subs	r2, r2, r3
    534c:	2300      	movs	r3, #0
    534e:	1c28      	adds	r0, r5, #0
    5350:	6a21      	ldr	r1, [r4, #32]
    5352:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5354:	47b8      	blx	r7
    5356:	89a3      	ldrh	r3, [r4, #12]
    5358:	1c42      	adds	r2, r0, #1
    535a:	d106      	bne.n	536a <__sflush_r+0x8e>
    535c:	682a      	ldr	r2, [r5, #0]
    535e:	2a00      	cmp	r2, #0
    5360:	d003      	beq.n	536a <__sflush_r+0x8e>
    5362:	2a1d      	cmp	r2, #29
    5364:	d001      	beq.n	536a <__sflush_r+0x8e>
    5366:	2a16      	cmp	r2, #22
    5368:	d119      	bne.n	539e <__sflush_r+0xc2>
    536a:	2200      	movs	r2, #0
    536c:	6062      	str	r2, [r4, #4]
    536e:	6922      	ldr	r2, [r4, #16]
    5370:	6022      	str	r2, [r4, #0]
    5372:	04db      	lsls	r3, r3, #19
    5374:	d505      	bpl.n	5382 <__sflush_r+0xa6>
    5376:	1c43      	adds	r3, r0, #1
    5378:	d102      	bne.n	5380 <__sflush_r+0xa4>
    537a:	682b      	ldr	r3, [r5, #0]
    537c:	2b00      	cmp	r3, #0
    537e:	d100      	bne.n	5382 <__sflush_r+0xa6>
    5380:	6560      	str	r0, [r4, #84]	; 0x54
    5382:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5384:	602e      	str	r6, [r5, #0]
    5386:	2900      	cmp	r1, #0
    5388:	d0cf      	beq.n	532a <__sflush_r+0x4e>
    538a:	1c23      	adds	r3, r4, #0
    538c:	3344      	adds	r3, #68	; 0x44
    538e:	4299      	cmp	r1, r3
    5390:	d002      	beq.n	5398 <__sflush_r+0xbc>
    5392:	1c28      	adds	r0, r5, #0
    5394:	f000 f98e 	bl	56b4 <_free_r>
    5398:	2000      	movs	r0, #0
    539a:	6360      	str	r0, [r4, #52]	; 0x34
    539c:	e026      	b.n	53ec <__sflush_r+0x110>
    539e:	2240      	movs	r2, #64	; 0x40
    53a0:	4313      	orrs	r3, r2
    53a2:	81a3      	strh	r3, [r4, #12]
    53a4:	e022      	b.n	53ec <__sflush_r+0x110>
    53a6:	690f      	ldr	r7, [r1, #16]
    53a8:	2f00      	cmp	r7, #0
    53aa:	d0be      	beq.n	532a <__sflush_r+0x4e>
    53ac:	680b      	ldr	r3, [r1, #0]
    53ae:	600f      	str	r7, [r1, #0]
    53b0:	1bdb      	subs	r3, r3, r7
    53b2:	9301      	str	r3, [sp, #4]
    53b4:	2300      	movs	r3, #0
    53b6:	0792      	lsls	r2, r2, #30
    53b8:	d100      	bne.n	53bc <__sflush_r+0xe0>
    53ba:	694b      	ldr	r3, [r1, #20]
    53bc:	60a3      	str	r3, [r4, #8]
    53be:	9b01      	ldr	r3, [sp, #4]
    53c0:	2b00      	cmp	r3, #0
    53c2:	ddb2      	ble.n	532a <__sflush_r+0x4e>
    53c4:	1c28      	adds	r0, r5, #0
    53c6:	6a21      	ldr	r1, [r4, #32]
    53c8:	1c3a      	adds	r2, r7, #0
    53ca:	9b01      	ldr	r3, [sp, #4]
    53cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    53ce:	47b0      	blx	r6
    53d0:	2800      	cmp	r0, #0
    53d2:	dc06      	bgt.n	53e2 <__sflush_r+0x106>
    53d4:	2240      	movs	r2, #64	; 0x40
    53d6:	2001      	movs	r0, #1
    53d8:	89a3      	ldrh	r3, [r4, #12]
    53da:	4240      	negs	r0, r0
    53dc:	4313      	orrs	r3, r2
    53de:	81a3      	strh	r3, [r4, #12]
    53e0:	e004      	b.n	53ec <__sflush_r+0x110>
    53e2:	9b01      	ldr	r3, [sp, #4]
    53e4:	183f      	adds	r7, r7, r0
    53e6:	1a1b      	subs	r3, r3, r0
    53e8:	9301      	str	r3, [sp, #4]
    53ea:	e7e8      	b.n	53be <__sflush_r+0xe2>
    53ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000053f0 <_fflush_r>:
    53f0:	b538      	push	{r3, r4, r5, lr}
    53f2:	690b      	ldr	r3, [r1, #16]
    53f4:	1c05      	adds	r5, r0, #0
    53f6:	1c0c      	adds	r4, r1, #0
    53f8:	2b00      	cmp	r3, #0
    53fa:	d101      	bne.n	5400 <_fflush_r+0x10>
    53fc:	2000      	movs	r0, #0
    53fe:	e01c      	b.n	543a <_fflush_r+0x4a>
    5400:	2800      	cmp	r0, #0
    5402:	d004      	beq.n	540e <_fflush_r+0x1e>
    5404:	6983      	ldr	r3, [r0, #24]
    5406:	2b00      	cmp	r3, #0
    5408:	d101      	bne.n	540e <_fflush_r+0x1e>
    540a:	f000 f85f 	bl	54cc <__sinit>
    540e:	4b0b      	ldr	r3, [pc, #44]	; (543c <_fflush_r+0x4c>)
    5410:	429c      	cmp	r4, r3
    5412:	d101      	bne.n	5418 <_fflush_r+0x28>
    5414:	686c      	ldr	r4, [r5, #4]
    5416:	e008      	b.n	542a <_fflush_r+0x3a>
    5418:	4b09      	ldr	r3, [pc, #36]	; (5440 <_fflush_r+0x50>)
    541a:	429c      	cmp	r4, r3
    541c:	d101      	bne.n	5422 <_fflush_r+0x32>
    541e:	68ac      	ldr	r4, [r5, #8]
    5420:	e003      	b.n	542a <_fflush_r+0x3a>
    5422:	4b08      	ldr	r3, [pc, #32]	; (5444 <_fflush_r+0x54>)
    5424:	429c      	cmp	r4, r3
    5426:	d100      	bne.n	542a <_fflush_r+0x3a>
    5428:	68ec      	ldr	r4, [r5, #12]
    542a:	220c      	movs	r2, #12
    542c:	5ea3      	ldrsh	r3, [r4, r2]
    542e:	2b00      	cmp	r3, #0
    5430:	d0e4      	beq.n	53fc <_fflush_r+0xc>
    5432:	1c28      	adds	r0, r5, #0
    5434:	1c21      	adds	r1, r4, #0
    5436:	f7ff ff51 	bl	52dc <__sflush_r>
    543a:	bd38      	pop	{r3, r4, r5, pc}
    543c:	000061e0 	.word	0x000061e0
    5440:	00006200 	.word	0x00006200
    5444:	00006220 	.word	0x00006220

00005448 <_cleanup_r>:
    5448:	b508      	push	{r3, lr}
    544a:	4902      	ldr	r1, [pc, #8]	; (5454 <_cleanup_r+0xc>)
    544c:	f000 f8ae 	bl	55ac <_fwalk_reent>
    5450:	bd08      	pop	{r3, pc}
    5452:	46c0      	nop			; (mov r8, r8)
    5454:	000053f1 	.word	0x000053f1

00005458 <std.isra.0>:
    5458:	2300      	movs	r3, #0
    545a:	b510      	push	{r4, lr}
    545c:	1c04      	adds	r4, r0, #0
    545e:	6003      	str	r3, [r0, #0]
    5460:	6043      	str	r3, [r0, #4]
    5462:	6083      	str	r3, [r0, #8]
    5464:	8181      	strh	r1, [r0, #12]
    5466:	6643      	str	r3, [r0, #100]	; 0x64
    5468:	81c2      	strh	r2, [r0, #14]
    546a:	6103      	str	r3, [r0, #16]
    546c:	6143      	str	r3, [r0, #20]
    546e:	6183      	str	r3, [r0, #24]
    5470:	1c19      	adds	r1, r3, #0
    5472:	2208      	movs	r2, #8
    5474:	305c      	adds	r0, #92	; 0x5c
    5476:	f7ff fd0a 	bl	4e8e <memset>
    547a:	4b05      	ldr	r3, [pc, #20]	; (5490 <std.isra.0+0x38>)
    547c:	6224      	str	r4, [r4, #32]
    547e:	6263      	str	r3, [r4, #36]	; 0x24
    5480:	4b04      	ldr	r3, [pc, #16]	; (5494 <std.isra.0+0x3c>)
    5482:	62a3      	str	r3, [r4, #40]	; 0x28
    5484:	4b04      	ldr	r3, [pc, #16]	; (5498 <std.isra.0+0x40>)
    5486:	62e3      	str	r3, [r4, #44]	; 0x2c
    5488:	4b04      	ldr	r3, [pc, #16]	; (549c <std.isra.0+0x44>)
    548a:	6323      	str	r3, [r4, #48]	; 0x30
    548c:	bd10      	pop	{r4, pc}
    548e:	46c0      	nop			; (mov r8, r8)
    5490:	00005d91 	.word	0x00005d91
    5494:	00005db9 	.word	0x00005db9
    5498:	00005df1 	.word	0x00005df1
    549c:	00005e1d 	.word	0x00005e1d

000054a0 <__sfmoreglue>:
    54a0:	b570      	push	{r4, r5, r6, lr}
    54a2:	2568      	movs	r5, #104	; 0x68
    54a4:	1e4b      	subs	r3, r1, #1
    54a6:	435d      	muls	r5, r3
    54a8:	1c0e      	adds	r6, r1, #0
    54aa:	1c29      	adds	r1, r5, #0
    54ac:	3174      	adds	r1, #116	; 0x74
    54ae:	f000 f947 	bl	5740 <_malloc_r>
    54b2:	1e04      	subs	r4, r0, #0
    54b4:	d008      	beq.n	54c8 <__sfmoreglue+0x28>
    54b6:	2100      	movs	r1, #0
    54b8:	1c2a      	adds	r2, r5, #0
    54ba:	6001      	str	r1, [r0, #0]
    54bc:	6046      	str	r6, [r0, #4]
    54be:	300c      	adds	r0, #12
    54c0:	60a0      	str	r0, [r4, #8]
    54c2:	3268      	adds	r2, #104	; 0x68
    54c4:	f7ff fce3 	bl	4e8e <memset>
    54c8:	1c20      	adds	r0, r4, #0
    54ca:	bd70      	pop	{r4, r5, r6, pc}

000054cc <__sinit>:
    54cc:	6983      	ldr	r3, [r0, #24]
    54ce:	b513      	push	{r0, r1, r4, lr}
    54d0:	2b00      	cmp	r3, #0
    54d2:	d128      	bne.n	5526 <__sinit+0x5a>
    54d4:	6483      	str	r3, [r0, #72]	; 0x48
    54d6:	64c3      	str	r3, [r0, #76]	; 0x4c
    54d8:	6503      	str	r3, [r0, #80]	; 0x50
    54da:	4b13      	ldr	r3, [pc, #76]	; (5528 <__sinit+0x5c>)
    54dc:	4a13      	ldr	r2, [pc, #76]	; (552c <__sinit+0x60>)
    54de:	681b      	ldr	r3, [r3, #0]
    54e0:	6282      	str	r2, [r0, #40]	; 0x28
    54e2:	9301      	str	r3, [sp, #4]
    54e4:	4298      	cmp	r0, r3
    54e6:	d101      	bne.n	54ec <__sinit+0x20>
    54e8:	2301      	movs	r3, #1
    54ea:	6183      	str	r3, [r0, #24]
    54ec:	1c04      	adds	r4, r0, #0
    54ee:	f000 f81f 	bl	5530 <__sfp>
    54f2:	6060      	str	r0, [r4, #4]
    54f4:	1c20      	adds	r0, r4, #0
    54f6:	f000 f81b 	bl	5530 <__sfp>
    54fa:	60a0      	str	r0, [r4, #8]
    54fc:	1c20      	adds	r0, r4, #0
    54fe:	f000 f817 	bl	5530 <__sfp>
    5502:	2104      	movs	r1, #4
    5504:	60e0      	str	r0, [r4, #12]
    5506:	2200      	movs	r2, #0
    5508:	6860      	ldr	r0, [r4, #4]
    550a:	f7ff ffa5 	bl	5458 <std.isra.0>
    550e:	68a0      	ldr	r0, [r4, #8]
    5510:	2109      	movs	r1, #9
    5512:	2201      	movs	r2, #1
    5514:	f7ff ffa0 	bl	5458 <std.isra.0>
    5518:	68e0      	ldr	r0, [r4, #12]
    551a:	2112      	movs	r1, #18
    551c:	2202      	movs	r2, #2
    551e:	f7ff ff9b 	bl	5458 <std.isra.0>
    5522:	2301      	movs	r3, #1
    5524:	61a3      	str	r3, [r4, #24]
    5526:	bd13      	pop	{r0, r1, r4, pc}
    5528:	000061dc 	.word	0x000061dc
    552c:	00005449 	.word	0x00005449

00005530 <__sfp>:
    5530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5532:	4b1d      	ldr	r3, [pc, #116]	; (55a8 <__sfp+0x78>)
    5534:	1c06      	adds	r6, r0, #0
    5536:	681d      	ldr	r5, [r3, #0]
    5538:	69ab      	ldr	r3, [r5, #24]
    553a:	2b00      	cmp	r3, #0
    553c:	d102      	bne.n	5544 <__sfp+0x14>
    553e:	1c28      	adds	r0, r5, #0
    5540:	f7ff ffc4 	bl	54cc <__sinit>
    5544:	3548      	adds	r5, #72	; 0x48
    5546:	68ac      	ldr	r4, [r5, #8]
    5548:	686b      	ldr	r3, [r5, #4]
    554a:	3b01      	subs	r3, #1
    554c:	d405      	bmi.n	555a <__sfp+0x2a>
    554e:	220c      	movs	r2, #12
    5550:	5ea7      	ldrsh	r7, [r4, r2]
    5552:	2f00      	cmp	r7, #0
    5554:	d010      	beq.n	5578 <__sfp+0x48>
    5556:	3468      	adds	r4, #104	; 0x68
    5558:	e7f7      	b.n	554a <__sfp+0x1a>
    555a:	682b      	ldr	r3, [r5, #0]
    555c:	2b00      	cmp	r3, #0
    555e:	d106      	bne.n	556e <__sfp+0x3e>
    5560:	1c30      	adds	r0, r6, #0
    5562:	2104      	movs	r1, #4
    5564:	f7ff ff9c 	bl	54a0 <__sfmoreglue>
    5568:	6028      	str	r0, [r5, #0]
    556a:	2800      	cmp	r0, #0
    556c:	d001      	beq.n	5572 <__sfp+0x42>
    556e:	682d      	ldr	r5, [r5, #0]
    5570:	e7e9      	b.n	5546 <__sfp+0x16>
    5572:	230c      	movs	r3, #12
    5574:	6033      	str	r3, [r6, #0]
    5576:	e016      	b.n	55a6 <__sfp+0x76>
    5578:	2301      	movs	r3, #1
    557a:	1c20      	adds	r0, r4, #0
    557c:	425b      	negs	r3, r3
    557e:	81e3      	strh	r3, [r4, #14]
    5580:	3302      	adds	r3, #2
    5582:	81a3      	strh	r3, [r4, #12]
    5584:	6667      	str	r7, [r4, #100]	; 0x64
    5586:	6027      	str	r7, [r4, #0]
    5588:	60a7      	str	r7, [r4, #8]
    558a:	6067      	str	r7, [r4, #4]
    558c:	6127      	str	r7, [r4, #16]
    558e:	6167      	str	r7, [r4, #20]
    5590:	61a7      	str	r7, [r4, #24]
    5592:	305c      	adds	r0, #92	; 0x5c
    5594:	1c39      	adds	r1, r7, #0
    5596:	2208      	movs	r2, #8
    5598:	f7ff fc79 	bl	4e8e <memset>
    559c:	1c20      	adds	r0, r4, #0
    559e:	6367      	str	r7, [r4, #52]	; 0x34
    55a0:	63a7      	str	r7, [r4, #56]	; 0x38
    55a2:	64a7      	str	r7, [r4, #72]	; 0x48
    55a4:	64e7      	str	r7, [r4, #76]	; 0x4c
    55a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55a8:	000061dc 	.word	0x000061dc

000055ac <_fwalk_reent>:
    55ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    55ae:	1c04      	adds	r4, r0, #0
    55b0:	1c07      	adds	r7, r0, #0
    55b2:	2600      	movs	r6, #0
    55b4:	9101      	str	r1, [sp, #4]
    55b6:	3448      	adds	r4, #72	; 0x48
    55b8:	2c00      	cmp	r4, #0
    55ba:	d016      	beq.n	55ea <_fwalk_reent+0x3e>
    55bc:	6863      	ldr	r3, [r4, #4]
    55be:	68a5      	ldr	r5, [r4, #8]
    55c0:	9300      	str	r3, [sp, #0]
    55c2:	9b00      	ldr	r3, [sp, #0]
    55c4:	3b01      	subs	r3, #1
    55c6:	9300      	str	r3, [sp, #0]
    55c8:	d40d      	bmi.n	55e6 <_fwalk_reent+0x3a>
    55ca:	89ab      	ldrh	r3, [r5, #12]
    55cc:	2b01      	cmp	r3, #1
    55ce:	d908      	bls.n	55e2 <_fwalk_reent+0x36>
    55d0:	220e      	movs	r2, #14
    55d2:	5eab      	ldrsh	r3, [r5, r2]
    55d4:	3301      	adds	r3, #1
    55d6:	d004      	beq.n	55e2 <_fwalk_reent+0x36>
    55d8:	1c38      	adds	r0, r7, #0
    55da:	1c29      	adds	r1, r5, #0
    55dc:	9b01      	ldr	r3, [sp, #4]
    55de:	4798      	blx	r3
    55e0:	4306      	orrs	r6, r0
    55e2:	3568      	adds	r5, #104	; 0x68
    55e4:	e7ed      	b.n	55c2 <_fwalk_reent+0x16>
    55e6:	6824      	ldr	r4, [r4, #0]
    55e8:	e7e6      	b.n	55b8 <_fwalk_reent+0xc>
    55ea:	1c30      	adds	r0, r6, #0
    55ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000055f0 <__smakebuf_r>:
    55f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    55f2:	898b      	ldrh	r3, [r1, #12]
    55f4:	b091      	sub	sp, #68	; 0x44
    55f6:	079b      	lsls	r3, r3, #30
    55f8:	d506      	bpl.n	5608 <__smakebuf_r+0x18>
    55fa:	1c0b      	adds	r3, r1, #0
    55fc:	3347      	adds	r3, #71	; 0x47
    55fe:	600b      	str	r3, [r1, #0]
    5600:	610b      	str	r3, [r1, #16]
    5602:	2301      	movs	r3, #1
    5604:	614b      	str	r3, [r1, #20]
    5606:	e045      	b.n	5694 <__smakebuf_r+0xa4>
    5608:	1c0c      	adds	r4, r1, #0
    560a:	230e      	movs	r3, #14
    560c:	5ec9      	ldrsh	r1, [r1, r3]
    560e:	1c06      	adds	r6, r0, #0
    5610:	2900      	cmp	r1, #0
    5612:	da04      	bge.n	561e <__smakebuf_r+0x2e>
    5614:	2380      	movs	r3, #128	; 0x80
    5616:	89a5      	ldrh	r5, [r4, #12]
    5618:	401d      	ands	r5, r3
    561a:	d110      	bne.n	563e <__smakebuf_r+0x4e>
    561c:	e00c      	b.n	5638 <__smakebuf_r+0x48>
    561e:	aa01      	add	r2, sp, #4
    5620:	f000 fc28 	bl	5e74 <_fstat_r>
    5624:	2800      	cmp	r0, #0
    5626:	dbf5      	blt.n	5614 <__smakebuf_r+0x24>
    5628:	23f0      	movs	r3, #240	; 0xf0
    562a:	9d02      	ldr	r5, [sp, #8]
    562c:	021b      	lsls	r3, r3, #8
    562e:	401d      	ands	r5, r3
    5630:	4b19      	ldr	r3, [pc, #100]	; (5698 <__smakebuf_r+0xa8>)
    5632:	18ed      	adds	r5, r5, r3
    5634:	426b      	negs	r3, r5
    5636:	415d      	adcs	r5, r3
    5638:	2780      	movs	r7, #128	; 0x80
    563a:	00ff      	lsls	r7, r7, #3
    563c:	e001      	b.n	5642 <__smakebuf_r+0x52>
    563e:	2500      	movs	r5, #0
    5640:	2740      	movs	r7, #64	; 0x40
    5642:	1c30      	adds	r0, r6, #0
    5644:	1c39      	adds	r1, r7, #0
    5646:	f000 f87b 	bl	5740 <_malloc_r>
    564a:	2800      	cmp	r0, #0
    564c:	d10c      	bne.n	5668 <__smakebuf_r+0x78>
    564e:	89a3      	ldrh	r3, [r4, #12]
    5650:	059a      	lsls	r2, r3, #22
    5652:	d41f      	bmi.n	5694 <__smakebuf_r+0xa4>
    5654:	2202      	movs	r2, #2
    5656:	4313      	orrs	r3, r2
    5658:	81a3      	strh	r3, [r4, #12]
    565a:	1c23      	adds	r3, r4, #0
    565c:	3347      	adds	r3, #71	; 0x47
    565e:	6023      	str	r3, [r4, #0]
    5660:	6123      	str	r3, [r4, #16]
    5662:	2301      	movs	r3, #1
    5664:	6163      	str	r3, [r4, #20]
    5666:	e015      	b.n	5694 <__smakebuf_r+0xa4>
    5668:	2280      	movs	r2, #128	; 0x80
    566a:	4b0c      	ldr	r3, [pc, #48]	; (569c <__smakebuf_r+0xac>)
    566c:	62b3      	str	r3, [r6, #40]	; 0x28
    566e:	89a3      	ldrh	r3, [r4, #12]
    5670:	6020      	str	r0, [r4, #0]
    5672:	4313      	orrs	r3, r2
    5674:	81a3      	strh	r3, [r4, #12]
    5676:	6120      	str	r0, [r4, #16]
    5678:	6167      	str	r7, [r4, #20]
    567a:	2d00      	cmp	r5, #0
    567c:	d00a      	beq.n	5694 <__smakebuf_r+0xa4>
    567e:	230e      	movs	r3, #14
    5680:	5ee1      	ldrsh	r1, [r4, r3]
    5682:	1c30      	adds	r0, r6, #0
    5684:	f000 fc08 	bl	5e98 <_isatty_r>
    5688:	2800      	cmp	r0, #0
    568a:	d003      	beq.n	5694 <__smakebuf_r+0xa4>
    568c:	2201      	movs	r2, #1
    568e:	89a3      	ldrh	r3, [r4, #12]
    5690:	4313      	orrs	r3, r2
    5692:	81a3      	strh	r3, [r4, #12]
    5694:	b011      	add	sp, #68	; 0x44
    5696:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5698:	ffffe000 	.word	0xffffe000
    569c:	00005449 	.word	0x00005449

000056a0 <malloc>:
    56a0:	b508      	push	{r3, lr}
    56a2:	4b03      	ldr	r3, [pc, #12]	; (56b0 <malloc+0x10>)
    56a4:	1c01      	adds	r1, r0, #0
    56a6:	6818      	ldr	r0, [r3, #0]
    56a8:	f000 f84a 	bl	5740 <_malloc_r>
    56ac:	bd08      	pop	{r3, pc}
    56ae:	46c0      	nop			; (mov r8, r8)
    56b0:	2000006c 	.word	0x2000006c

000056b4 <_free_r>:
    56b4:	b530      	push	{r4, r5, lr}
    56b6:	2900      	cmp	r1, #0
    56b8:	d03e      	beq.n	5738 <_free_r+0x84>
    56ba:	3904      	subs	r1, #4
    56bc:	680b      	ldr	r3, [r1, #0]
    56be:	2b00      	cmp	r3, #0
    56c0:	da00      	bge.n	56c4 <_free_r+0x10>
    56c2:	18c9      	adds	r1, r1, r3
    56c4:	4a1d      	ldr	r2, [pc, #116]	; (573c <_free_r+0x88>)
    56c6:	6813      	ldr	r3, [r2, #0]
    56c8:	1c14      	adds	r4, r2, #0
    56ca:	2b00      	cmp	r3, #0
    56cc:	d102      	bne.n	56d4 <_free_r+0x20>
    56ce:	604b      	str	r3, [r1, #4]
    56d0:	6011      	str	r1, [r2, #0]
    56d2:	e031      	b.n	5738 <_free_r+0x84>
    56d4:	4299      	cmp	r1, r3
    56d6:	d20d      	bcs.n	56f4 <_free_r+0x40>
    56d8:	6808      	ldr	r0, [r1, #0]
    56da:	180a      	adds	r2, r1, r0
    56dc:	429a      	cmp	r2, r3
    56de:	d103      	bne.n	56e8 <_free_r+0x34>
    56e0:	6813      	ldr	r3, [r2, #0]
    56e2:	18c3      	adds	r3, r0, r3
    56e4:	600b      	str	r3, [r1, #0]
    56e6:	6853      	ldr	r3, [r2, #4]
    56e8:	604b      	str	r3, [r1, #4]
    56ea:	6021      	str	r1, [r4, #0]
    56ec:	e024      	b.n	5738 <_free_r+0x84>
    56ee:	428a      	cmp	r2, r1
    56f0:	d803      	bhi.n	56fa <_free_r+0x46>
    56f2:	1c13      	adds	r3, r2, #0
    56f4:	685a      	ldr	r2, [r3, #4]
    56f6:	2a00      	cmp	r2, #0
    56f8:	d1f9      	bne.n	56ee <_free_r+0x3a>
    56fa:	681d      	ldr	r5, [r3, #0]
    56fc:	195c      	adds	r4, r3, r5
    56fe:	428c      	cmp	r4, r1
    5700:	d10b      	bne.n	571a <_free_r+0x66>
    5702:	6809      	ldr	r1, [r1, #0]
    5704:	1869      	adds	r1, r5, r1
    5706:	1858      	adds	r0, r3, r1
    5708:	6019      	str	r1, [r3, #0]
    570a:	4290      	cmp	r0, r2
    570c:	d114      	bne.n	5738 <_free_r+0x84>
    570e:	6810      	ldr	r0, [r2, #0]
    5710:	6852      	ldr	r2, [r2, #4]
    5712:	1809      	adds	r1, r1, r0
    5714:	6019      	str	r1, [r3, #0]
    5716:	605a      	str	r2, [r3, #4]
    5718:	e00e      	b.n	5738 <_free_r+0x84>
    571a:	428c      	cmp	r4, r1
    571c:	d902      	bls.n	5724 <_free_r+0x70>
    571e:	230c      	movs	r3, #12
    5720:	6003      	str	r3, [r0, #0]
    5722:	e009      	b.n	5738 <_free_r+0x84>
    5724:	6808      	ldr	r0, [r1, #0]
    5726:	180c      	adds	r4, r1, r0
    5728:	4294      	cmp	r4, r2
    572a:	d103      	bne.n	5734 <_free_r+0x80>
    572c:	6814      	ldr	r4, [r2, #0]
    572e:	6852      	ldr	r2, [r2, #4]
    5730:	1900      	adds	r0, r0, r4
    5732:	6008      	str	r0, [r1, #0]
    5734:	604a      	str	r2, [r1, #4]
    5736:	6059      	str	r1, [r3, #4]
    5738:	bd30      	pop	{r4, r5, pc}
    573a:	46c0      	nop			; (mov r8, r8)
    573c:	20000c3c 	.word	0x20000c3c

00005740 <_malloc_r>:
    5740:	2303      	movs	r3, #3
    5742:	b570      	push	{r4, r5, r6, lr}
    5744:	1ccc      	adds	r4, r1, #3
    5746:	439c      	bics	r4, r3
    5748:	3408      	adds	r4, #8
    574a:	1c05      	adds	r5, r0, #0
    574c:	2c0c      	cmp	r4, #12
    574e:	d201      	bcs.n	5754 <_malloc_r+0x14>
    5750:	240c      	movs	r4, #12
    5752:	e005      	b.n	5760 <_malloc_r+0x20>
    5754:	2c00      	cmp	r4, #0
    5756:	da03      	bge.n	5760 <_malloc_r+0x20>
    5758:	230c      	movs	r3, #12
    575a:	2000      	movs	r0, #0
    575c:	602b      	str	r3, [r5, #0]
    575e:	e042      	b.n	57e6 <_malloc_r+0xa6>
    5760:	428c      	cmp	r4, r1
    5762:	d3f9      	bcc.n	5758 <_malloc_r+0x18>
    5764:	4a20      	ldr	r2, [pc, #128]	; (57e8 <_malloc_r+0xa8>)
    5766:	6813      	ldr	r3, [r2, #0]
    5768:	1c10      	adds	r0, r2, #0
    576a:	1c19      	adds	r1, r3, #0
    576c:	2900      	cmp	r1, #0
    576e:	d013      	beq.n	5798 <_malloc_r+0x58>
    5770:	680a      	ldr	r2, [r1, #0]
    5772:	1b12      	subs	r2, r2, r4
    5774:	d40d      	bmi.n	5792 <_malloc_r+0x52>
    5776:	2a0b      	cmp	r2, #11
    5778:	d902      	bls.n	5780 <_malloc_r+0x40>
    577a:	600a      	str	r2, [r1, #0]
    577c:	188b      	adds	r3, r1, r2
    577e:	e01f      	b.n	57c0 <_malloc_r+0x80>
    5780:	428b      	cmp	r3, r1
    5782:	d102      	bne.n	578a <_malloc_r+0x4a>
    5784:	685a      	ldr	r2, [r3, #4]
    5786:	6002      	str	r2, [r0, #0]
    5788:	e01b      	b.n	57c2 <_malloc_r+0x82>
    578a:	684a      	ldr	r2, [r1, #4]
    578c:	605a      	str	r2, [r3, #4]
    578e:	1c0b      	adds	r3, r1, #0
    5790:	e017      	b.n	57c2 <_malloc_r+0x82>
    5792:	1c0b      	adds	r3, r1, #0
    5794:	6849      	ldr	r1, [r1, #4]
    5796:	e7e9      	b.n	576c <_malloc_r+0x2c>
    5798:	4e14      	ldr	r6, [pc, #80]	; (57ec <_malloc_r+0xac>)
    579a:	6833      	ldr	r3, [r6, #0]
    579c:	2b00      	cmp	r3, #0
    579e:	d103      	bne.n	57a8 <_malloc_r+0x68>
    57a0:	1c28      	adds	r0, r5, #0
    57a2:	f000 fae3 	bl	5d6c <_sbrk_r>
    57a6:	6030      	str	r0, [r6, #0]
    57a8:	1c28      	adds	r0, r5, #0
    57aa:	1c21      	adds	r1, r4, #0
    57ac:	f000 fade 	bl	5d6c <_sbrk_r>
    57b0:	1c03      	adds	r3, r0, #0
    57b2:	1c42      	adds	r2, r0, #1
    57b4:	d0d0      	beq.n	5758 <_malloc_r+0x18>
    57b6:	2203      	movs	r2, #3
    57b8:	1cc6      	adds	r6, r0, #3
    57ba:	4396      	bics	r6, r2
    57bc:	4286      	cmp	r6, r0
    57be:	d10a      	bne.n	57d6 <_malloc_r+0x96>
    57c0:	601c      	str	r4, [r3, #0]
    57c2:	1c18      	adds	r0, r3, #0
    57c4:	2107      	movs	r1, #7
    57c6:	300b      	adds	r0, #11
    57c8:	1d1a      	adds	r2, r3, #4
    57ca:	4388      	bics	r0, r1
    57cc:	1a82      	subs	r2, r0, r2
    57ce:	d00a      	beq.n	57e6 <_malloc_r+0xa6>
    57d0:	4251      	negs	r1, r2
    57d2:	5099      	str	r1, [r3, r2]
    57d4:	e007      	b.n	57e6 <_malloc_r+0xa6>
    57d6:	1a31      	subs	r1, r6, r0
    57d8:	1c28      	adds	r0, r5, #0
    57da:	f000 fac7 	bl	5d6c <_sbrk_r>
    57de:	1c43      	adds	r3, r0, #1
    57e0:	d0ba      	beq.n	5758 <_malloc_r+0x18>
    57e2:	1c33      	adds	r3, r6, #0
    57e4:	e7ec      	b.n	57c0 <_malloc_r+0x80>
    57e6:	bd70      	pop	{r4, r5, r6, pc}
    57e8:	20000c3c 	.word	0x20000c3c
    57ec:	20000c38 	.word	0x20000c38

000057f0 <__sfputc_r>:
    57f0:	6893      	ldr	r3, [r2, #8]
    57f2:	b510      	push	{r4, lr}
    57f4:	3b01      	subs	r3, #1
    57f6:	6093      	str	r3, [r2, #8]
    57f8:	2b00      	cmp	r3, #0
    57fa:	da05      	bge.n	5808 <__sfputc_r+0x18>
    57fc:	6994      	ldr	r4, [r2, #24]
    57fe:	42a3      	cmp	r3, r4
    5800:	db08      	blt.n	5814 <__sfputc_r+0x24>
    5802:	b2cb      	uxtb	r3, r1
    5804:	2b0a      	cmp	r3, #10
    5806:	d005      	beq.n	5814 <__sfputc_r+0x24>
    5808:	6813      	ldr	r3, [r2, #0]
    580a:	1c58      	adds	r0, r3, #1
    580c:	6010      	str	r0, [r2, #0]
    580e:	7019      	strb	r1, [r3, #0]
    5810:	b2c8      	uxtb	r0, r1
    5812:	e001      	b.n	5818 <__sfputc_r+0x28>
    5814:	f7ff fc96 	bl	5144 <__swbuf_r>
    5818:	bd10      	pop	{r4, pc}

0000581a <__sfputs_r>:
    581a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    581c:	1c06      	adds	r6, r0, #0
    581e:	1c0f      	adds	r7, r1, #0
    5820:	1c14      	adds	r4, r2, #0
    5822:	18d5      	adds	r5, r2, r3
    5824:	42ac      	cmp	r4, r5
    5826:	d008      	beq.n	583a <__sfputs_r+0x20>
    5828:	7821      	ldrb	r1, [r4, #0]
    582a:	1c30      	adds	r0, r6, #0
    582c:	1c3a      	adds	r2, r7, #0
    582e:	f7ff ffdf 	bl	57f0 <__sfputc_r>
    5832:	3401      	adds	r4, #1
    5834:	1c43      	adds	r3, r0, #1
    5836:	d1f5      	bne.n	5824 <__sfputs_r+0xa>
    5838:	e000      	b.n	583c <__sfputs_r+0x22>
    583a:	2000      	movs	r0, #0
    583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005840 <_vfiprintf_r>:
    5840:	b5f0      	push	{r4, r5, r6, r7, lr}
    5842:	b09f      	sub	sp, #124	; 0x7c
    5844:	1c06      	adds	r6, r0, #0
    5846:	1c0f      	adds	r7, r1, #0
    5848:	9202      	str	r2, [sp, #8]
    584a:	9305      	str	r3, [sp, #20]
    584c:	2800      	cmp	r0, #0
    584e:	d004      	beq.n	585a <_vfiprintf_r+0x1a>
    5850:	6983      	ldr	r3, [r0, #24]
    5852:	2b00      	cmp	r3, #0
    5854:	d101      	bne.n	585a <_vfiprintf_r+0x1a>
    5856:	f7ff fe39 	bl	54cc <__sinit>
    585a:	4b79      	ldr	r3, [pc, #484]	; (5a40 <_vfiprintf_r+0x200>)
    585c:	429f      	cmp	r7, r3
    585e:	d101      	bne.n	5864 <_vfiprintf_r+0x24>
    5860:	6877      	ldr	r7, [r6, #4]
    5862:	e008      	b.n	5876 <_vfiprintf_r+0x36>
    5864:	4b77      	ldr	r3, [pc, #476]	; (5a44 <_vfiprintf_r+0x204>)
    5866:	429f      	cmp	r7, r3
    5868:	d101      	bne.n	586e <_vfiprintf_r+0x2e>
    586a:	68b7      	ldr	r7, [r6, #8]
    586c:	e003      	b.n	5876 <_vfiprintf_r+0x36>
    586e:	4b76      	ldr	r3, [pc, #472]	; (5a48 <_vfiprintf_r+0x208>)
    5870:	429f      	cmp	r7, r3
    5872:	d100      	bne.n	5876 <_vfiprintf_r+0x36>
    5874:	68f7      	ldr	r7, [r6, #12]
    5876:	89bb      	ldrh	r3, [r7, #12]
    5878:	071b      	lsls	r3, r3, #28
    587a:	d50a      	bpl.n	5892 <_vfiprintf_r+0x52>
    587c:	693b      	ldr	r3, [r7, #16]
    587e:	2b00      	cmp	r3, #0
    5880:	d007      	beq.n	5892 <_vfiprintf_r+0x52>
    5882:	2300      	movs	r3, #0
    5884:	ad06      	add	r5, sp, #24
    5886:	616b      	str	r3, [r5, #20]
    5888:	3320      	adds	r3, #32
    588a:	766b      	strb	r3, [r5, #25]
    588c:	3310      	adds	r3, #16
    588e:	76ab      	strb	r3, [r5, #26]
    5890:	e03d      	b.n	590e <_vfiprintf_r+0xce>
    5892:	1c30      	adds	r0, r6, #0
    5894:	1c39      	adds	r1, r7, #0
    5896:	f7ff fcad 	bl	51f4 <__swsetup_r>
    589a:	2800      	cmp	r0, #0
    589c:	d0f1      	beq.n	5882 <_vfiprintf_r+0x42>
    589e:	2001      	movs	r0, #1
    58a0:	4240      	negs	r0, r0
    58a2:	e0ca      	b.n	5a3a <_vfiprintf_r+0x1fa>
    58a4:	9a05      	ldr	r2, [sp, #20]
    58a6:	1d11      	adds	r1, r2, #4
    58a8:	6812      	ldr	r2, [r2, #0]
    58aa:	9105      	str	r1, [sp, #20]
    58ac:	2a00      	cmp	r2, #0
    58ae:	db7e      	blt.n	59ae <_vfiprintf_r+0x16e>
    58b0:	9209      	str	r2, [sp, #36]	; 0x24
    58b2:	3401      	adds	r4, #1
    58b4:	7823      	ldrb	r3, [r4, #0]
    58b6:	2b2e      	cmp	r3, #46	; 0x2e
    58b8:	d100      	bne.n	58bc <_vfiprintf_r+0x7c>
    58ba:	e089      	b.n	59d0 <_vfiprintf_r+0x190>
    58bc:	7821      	ldrb	r1, [r4, #0]
    58be:	4863      	ldr	r0, [pc, #396]	; (5a4c <_vfiprintf_r+0x20c>)
    58c0:	2203      	movs	r2, #3
    58c2:	f000 fb0f 	bl	5ee4 <memchr>
    58c6:	2800      	cmp	r0, #0
    58c8:	d008      	beq.n	58dc <_vfiprintf_r+0x9c>
    58ca:	4b60      	ldr	r3, [pc, #384]	; (5a4c <_vfiprintf_r+0x20c>)
    58cc:	3401      	adds	r4, #1
    58ce:	1ac0      	subs	r0, r0, r3
    58d0:	2340      	movs	r3, #64	; 0x40
    58d2:	4083      	lsls	r3, r0
    58d4:	1c18      	adds	r0, r3, #0
    58d6:	682b      	ldr	r3, [r5, #0]
    58d8:	4318      	orrs	r0, r3
    58da:	6028      	str	r0, [r5, #0]
    58dc:	7821      	ldrb	r1, [r4, #0]
    58de:	1c63      	adds	r3, r4, #1
    58e0:	485b      	ldr	r0, [pc, #364]	; (5a50 <_vfiprintf_r+0x210>)
    58e2:	2206      	movs	r2, #6
    58e4:	9302      	str	r3, [sp, #8]
    58e6:	7629      	strb	r1, [r5, #24]
    58e8:	f000 fafc 	bl	5ee4 <memchr>
    58ec:	2800      	cmp	r0, #0
    58ee:	d100      	bne.n	58f2 <_vfiprintf_r+0xb2>
    58f0:	e091      	b.n	5a16 <_vfiprintf_r+0x1d6>
    58f2:	4b58      	ldr	r3, [pc, #352]	; (5a54 <_vfiprintf_r+0x214>)
    58f4:	2b00      	cmp	r3, #0
    58f6:	d000      	beq.n	58fa <_vfiprintf_r+0xba>
    58f8:	e084      	b.n	5a04 <_vfiprintf_r+0x1c4>
    58fa:	2207      	movs	r2, #7
    58fc:	9b05      	ldr	r3, [sp, #20]
    58fe:	3307      	adds	r3, #7
    5900:	4393      	bics	r3, r2
    5902:	3308      	adds	r3, #8
    5904:	9305      	str	r3, [sp, #20]
    5906:	696b      	ldr	r3, [r5, #20]
    5908:	9a03      	ldr	r2, [sp, #12]
    590a:	189b      	adds	r3, r3, r2
    590c:	616b      	str	r3, [r5, #20]
    590e:	9c02      	ldr	r4, [sp, #8]
    5910:	7823      	ldrb	r3, [r4, #0]
    5912:	2b00      	cmp	r3, #0
    5914:	d104      	bne.n	5920 <_vfiprintf_r+0xe0>
    5916:	9b02      	ldr	r3, [sp, #8]
    5918:	1ae3      	subs	r3, r4, r3
    591a:	9304      	str	r3, [sp, #16]
    591c:	d011      	beq.n	5942 <_vfiprintf_r+0x102>
    591e:	e003      	b.n	5928 <_vfiprintf_r+0xe8>
    5920:	2b25      	cmp	r3, #37	; 0x25
    5922:	d0f8      	beq.n	5916 <_vfiprintf_r+0xd6>
    5924:	3401      	adds	r4, #1
    5926:	e7f3      	b.n	5910 <_vfiprintf_r+0xd0>
    5928:	9b04      	ldr	r3, [sp, #16]
    592a:	1c30      	adds	r0, r6, #0
    592c:	1c39      	adds	r1, r7, #0
    592e:	9a02      	ldr	r2, [sp, #8]
    5930:	f7ff ff73 	bl	581a <__sfputs_r>
    5934:	1c43      	adds	r3, r0, #1
    5936:	d07b      	beq.n	5a30 <_vfiprintf_r+0x1f0>
    5938:	696a      	ldr	r2, [r5, #20]
    593a:	9b04      	ldr	r3, [sp, #16]
    593c:	4694      	mov	ip, r2
    593e:	4463      	add	r3, ip
    5940:	616b      	str	r3, [r5, #20]
    5942:	7823      	ldrb	r3, [r4, #0]
    5944:	2b00      	cmp	r3, #0
    5946:	d073      	beq.n	5a30 <_vfiprintf_r+0x1f0>
    5948:	2201      	movs	r2, #1
    594a:	2300      	movs	r3, #0
    594c:	4252      	negs	r2, r2
    594e:	606a      	str	r2, [r5, #4]
    5950:	a902      	add	r1, sp, #8
    5952:	3254      	adds	r2, #84	; 0x54
    5954:	1852      	adds	r2, r2, r1
    5956:	3401      	adds	r4, #1
    5958:	602b      	str	r3, [r5, #0]
    595a:	60eb      	str	r3, [r5, #12]
    595c:	60ab      	str	r3, [r5, #8]
    595e:	7013      	strb	r3, [r2, #0]
    5960:	65ab      	str	r3, [r5, #88]	; 0x58
    5962:	7821      	ldrb	r1, [r4, #0]
    5964:	483c      	ldr	r0, [pc, #240]	; (5a58 <_vfiprintf_r+0x218>)
    5966:	2205      	movs	r2, #5
    5968:	f000 fabc 	bl	5ee4 <memchr>
    596c:	2800      	cmp	r0, #0
    596e:	d009      	beq.n	5984 <_vfiprintf_r+0x144>
    5970:	4b39      	ldr	r3, [pc, #228]	; (5a58 <_vfiprintf_r+0x218>)
    5972:	3401      	adds	r4, #1
    5974:	1ac0      	subs	r0, r0, r3
    5976:	2301      	movs	r3, #1
    5978:	4083      	lsls	r3, r0
    597a:	1c18      	adds	r0, r3, #0
    597c:	682b      	ldr	r3, [r5, #0]
    597e:	4318      	orrs	r0, r3
    5980:	6028      	str	r0, [r5, #0]
    5982:	e7ee      	b.n	5962 <_vfiprintf_r+0x122>
    5984:	682b      	ldr	r3, [r5, #0]
    5986:	06da      	lsls	r2, r3, #27
    5988:	d504      	bpl.n	5994 <_vfiprintf_r+0x154>
    598a:	2253      	movs	r2, #83	; 0x53
    598c:	2120      	movs	r1, #32
    598e:	a802      	add	r0, sp, #8
    5990:	1812      	adds	r2, r2, r0
    5992:	7011      	strb	r1, [r2, #0]
    5994:	071a      	lsls	r2, r3, #28
    5996:	d504      	bpl.n	59a2 <_vfiprintf_r+0x162>
    5998:	2253      	movs	r2, #83	; 0x53
    599a:	212b      	movs	r1, #43	; 0x2b
    599c:	a802      	add	r0, sp, #8
    599e:	1812      	adds	r2, r2, r0
    59a0:	7011      	strb	r1, [r2, #0]
    59a2:	7822      	ldrb	r2, [r4, #0]
    59a4:	2a2a      	cmp	r2, #42	; 0x2a
    59a6:	d100      	bne.n	59aa <_vfiprintf_r+0x16a>
    59a8:	e77c      	b.n	58a4 <_vfiprintf_r+0x64>
    59aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    59ac:	e005      	b.n	59ba <_vfiprintf_r+0x17a>
    59ae:	4252      	negs	r2, r2
    59b0:	60ea      	str	r2, [r5, #12]
    59b2:	2202      	movs	r2, #2
    59b4:	4313      	orrs	r3, r2
    59b6:	602b      	str	r3, [r5, #0]
    59b8:	e77b      	b.n	58b2 <_vfiprintf_r+0x72>
    59ba:	7822      	ldrb	r2, [r4, #0]
    59bc:	3a30      	subs	r2, #48	; 0x30
    59be:	2a09      	cmp	r2, #9
    59c0:	d804      	bhi.n	59cc <_vfiprintf_r+0x18c>
    59c2:	210a      	movs	r1, #10
    59c4:	434b      	muls	r3, r1
    59c6:	3401      	adds	r4, #1
    59c8:	189b      	adds	r3, r3, r2
    59ca:	e7f6      	b.n	59ba <_vfiprintf_r+0x17a>
    59cc:	9309      	str	r3, [sp, #36]	; 0x24
    59ce:	e771      	b.n	58b4 <_vfiprintf_r+0x74>
    59d0:	7863      	ldrb	r3, [r4, #1]
    59d2:	2b2a      	cmp	r3, #42	; 0x2a
    59d4:	d109      	bne.n	59ea <_vfiprintf_r+0x1aa>
    59d6:	9b05      	ldr	r3, [sp, #20]
    59d8:	3402      	adds	r4, #2
    59da:	1d1a      	adds	r2, r3, #4
    59dc:	681b      	ldr	r3, [r3, #0]
    59de:	9205      	str	r2, [sp, #20]
    59e0:	2b00      	cmp	r3, #0
    59e2:	da0d      	bge.n	5a00 <_vfiprintf_r+0x1c0>
    59e4:	2301      	movs	r3, #1
    59e6:	425b      	negs	r3, r3
    59e8:	e00a      	b.n	5a00 <_vfiprintf_r+0x1c0>
    59ea:	2300      	movs	r3, #0
    59ec:	3401      	adds	r4, #1
    59ee:	7822      	ldrb	r2, [r4, #0]
    59f0:	3a30      	subs	r2, #48	; 0x30
    59f2:	2a09      	cmp	r2, #9
    59f4:	d804      	bhi.n	5a00 <_vfiprintf_r+0x1c0>
    59f6:	210a      	movs	r1, #10
    59f8:	434b      	muls	r3, r1
    59fa:	3401      	adds	r4, #1
    59fc:	189b      	adds	r3, r3, r2
    59fe:	e7f6      	b.n	59ee <_vfiprintf_r+0x1ae>
    5a00:	9307      	str	r3, [sp, #28]
    5a02:	e75b      	b.n	58bc <_vfiprintf_r+0x7c>
    5a04:	ab05      	add	r3, sp, #20
    5a06:	9300      	str	r3, [sp, #0]
    5a08:	1c30      	adds	r0, r6, #0
    5a0a:	1c29      	adds	r1, r5, #0
    5a0c:	1c3a      	adds	r2, r7, #0
    5a0e:	4b13      	ldr	r3, [pc, #76]	; (5a5c <_vfiprintf_r+0x21c>)
    5a10:	e000      	b.n	5a14 <_vfiprintf_r+0x1d4>
    5a12:	bf00      	nop
    5a14:	e007      	b.n	5a26 <_vfiprintf_r+0x1e6>
    5a16:	ab05      	add	r3, sp, #20
    5a18:	9300      	str	r3, [sp, #0]
    5a1a:	1c30      	adds	r0, r6, #0
    5a1c:	1c29      	adds	r1, r5, #0
    5a1e:	1c3a      	adds	r2, r7, #0
    5a20:	4b0e      	ldr	r3, [pc, #56]	; (5a5c <_vfiprintf_r+0x21c>)
    5a22:	f000 f88b 	bl	5b3c <_printf_i>
    5a26:	9003      	str	r0, [sp, #12]
    5a28:	9b03      	ldr	r3, [sp, #12]
    5a2a:	3301      	adds	r3, #1
    5a2c:	d000      	beq.n	5a30 <_vfiprintf_r+0x1f0>
    5a2e:	e76a      	b.n	5906 <_vfiprintf_r+0xc6>
    5a30:	89bb      	ldrh	r3, [r7, #12]
    5a32:	065b      	lsls	r3, r3, #25
    5a34:	d500      	bpl.n	5a38 <_vfiprintf_r+0x1f8>
    5a36:	e732      	b.n	589e <_vfiprintf_r+0x5e>
    5a38:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5a3a:	b01f      	add	sp, #124	; 0x7c
    5a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a3e:	46c0      	nop			; (mov r8, r8)
    5a40:	000061e0 	.word	0x000061e0
    5a44:	00006200 	.word	0x00006200
    5a48:	00006220 	.word	0x00006220
    5a4c:	00006246 	.word	0x00006246
    5a50:	0000624a 	.word	0x0000624a
    5a54:	00000000 	.word	0x00000000
    5a58:	00006240 	.word	0x00006240
    5a5c:	0000581b 	.word	0x0000581b

00005a60 <_printf_common>:
    5a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5a62:	1c17      	adds	r7, r2, #0
    5a64:	9301      	str	r3, [sp, #4]
    5a66:	690a      	ldr	r2, [r1, #16]
    5a68:	688b      	ldr	r3, [r1, #8]
    5a6a:	9000      	str	r0, [sp, #0]
    5a6c:	1c0c      	adds	r4, r1, #0
    5a6e:	4293      	cmp	r3, r2
    5a70:	da00      	bge.n	5a74 <_printf_common+0x14>
    5a72:	1c13      	adds	r3, r2, #0
    5a74:	1c22      	adds	r2, r4, #0
    5a76:	603b      	str	r3, [r7, #0]
    5a78:	3243      	adds	r2, #67	; 0x43
    5a7a:	7812      	ldrb	r2, [r2, #0]
    5a7c:	2a00      	cmp	r2, #0
    5a7e:	d001      	beq.n	5a84 <_printf_common+0x24>
    5a80:	3301      	adds	r3, #1
    5a82:	603b      	str	r3, [r7, #0]
    5a84:	6823      	ldr	r3, [r4, #0]
    5a86:	069b      	lsls	r3, r3, #26
    5a88:	d502      	bpl.n	5a90 <_printf_common+0x30>
    5a8a:	683b      	ldr	r3, [r7, #0]
    5a8c:	3302      	adds	r3, #2
    5a8e:	603b      	str	r3, [r7, #0]
    5a90:	2506      	movs	r5, #6
    5a92:	6823      	ldr	r3, [r4, #0]
    5a94:	401d      	ands	r5, r3
    5a96:	d01e      	beq.n	5ad6 <_printf_common+0x76>
    5a98:	1c23      	adds	r3, r4, #0
    5a9a:	3343      	adds	r3, #67	; 0x43
    5a9c:	781b      	ldrb	r3, [r3, #0]
    5a9e:	1e5a      	subs	r2, r3, #1
    5aa0:	4193      	sbcs	r3, r2
    5aa2:	6822      	ldr	r2, [r4, #0]
    5aa4:	0692      	lsls	r2, r2, #26
    5aa6:	d51c      	bpl.n	5ae2 <_printf_common+0x82>
    5aa8:	2030      	movs	r0, #48	; 0x30
    5aaa:	18e1      	adds	r1, r4, r3
    5aac:	3140      	adds	r1, #64	; 0x40
    5aae:	70c8      	strb	r0, [r1, #3]
    5ab0:	1c21      	adds	r1, r4, #0
    5ab2:	1c5a      	adds	r2, r3, #1
    5ab4:	3145      	adds	r1, #69	; 0x45
    5ab6:	7809      	ldrb	r1, [r1, #0]
    5ab8:	18a2      	adds	r2, r4, r2
    5aba:	3240      	adds	r2, #64	; 0x40
    5abc:	3302      	adds	r3, #2
    5abe:	70d1      	strb	r1, [r2, #3]
    5ac0:	e00f      	b.n	5ae2 <_printf_common+0x82>
    5ac2:	1c22      	adds	r2, r4, #0
    5ac4:	2301      	movs	r3, #1
    5ac6:	9800      	ldr	r0, [sp, #0]
    5ac8:	9901      	ldr	r1, [sp, #4]
    5aca:	3219      	adds	r2, #25
    5acc:	9e08      	ldr	r6, [sp, #32]
    5ace:	47b0      	blx	r6
    5ad0:	1c43      	adds	r3, r0, #1
    5ad2:	d00e      	beq.n	5af2 <_printf_common+0x92>
    5ad4:	3501      	adds	r5, #1
    5ad6:	68e3      	ldr	r3, [r4, #12]
    5ad8:	683a      	ldr	r2, [r7, #0]
    5ada:	1a9b      	subs	r3, r3, r2
    5adc:	429d      	cmp	r5, r3
    5ade:	dbf0      	blt.n	5ac2 <_printf_common+0x62>
    5ae0:	e7da      	b.n	5a98 <_printf_common+0x38>
    5ae2:	1c22      	adds	r2, r4, #0
    5ae4:	9800      	ldr	r0, [sp, #0]
    5ae6:	9901      	ldr	r1, [sp, #4]
    5ae8:	3243      	adds	r2, #67	; 0x43
    5aea:	9d08      	ldr	r5, [sp, #32]
    5aec:	47a8      	blx	r5
    5aee:	1c43      	adds	r3, r0, #1
    5af0:	d102      	bne.n	5af8 <_printf_common+0x98>
    5af2:	2001      	movs	r0, #1
    5af4:	4240      	negs	r0, r0
    5af6:	e020      	b.n	5b3a <_printf_common+0xda>
    5af8:	2306      	movs	r3, #6
    5afa:	6820      	ldr	r0, [r4, #0]
    5afc:	68e1      	ldr	r1, [r4, #12]
    5afe:	683a      	ldr	r2, [r7, #0]
    5b00:	4003      	ands	r3, r0
    5b02:	2500      	movs	r5, #0
    5b04:	2b04      	cmp	r3, #4
    5b06:	d103      	bne.n	5b10 <_printf_common+0xb0>
    5b08:	1a8d      	subs	r5, r1, r2
    5b0a:	43eb      	mvns	r3, r5
    5b0c:	17db      	asrs	r3, r3, #31
    5b0e:	401d      	ands	r5, r3
    5b10:	68a3      	ldr	r3, [r4, #8]
    5b12:	6922      	ldr	r2, [r4, #16]
    5b14:	4293      	cmp	r3, r2
    5b16:	dd01      	ble.n	5b1c <_printf_common+0xbc>
    5b18:	1a9b      	subs	r3, r3, r2
    5b1a:	18ed      	adds	r5, r5, r3
    5b1c:	2700      	movs	r7, #0
    5b1e:	42af      	cmp	r7, r5
    5b20:	da0a      	bge.n	5b38 <_printf_common+0xd8>
    5b22:	1c22      	adds	r2, r4, #0
    5b24:	2301      	movs	r3, #1
    5b26:	9800      	ldr	r0, [sp, #0]
    5b28:	9901      	ldr	r1, [sp, #4]
    5b2a:	321a      	adds	r2, #26
    5b2c:	9e08      	ldr	r6, [sp, #32]
    5b2e:	47b0      	blx	r6
    5b30:	1c43      	adds	r3, r0, #1
    5b32:	d0de      	beq.n	5af2 <_printf_common+0x92>
    5b34:	3701      	adds	r7, #1
    5b36:	e7f2      	b.n	5b1e <_printf_common+0xbe>
    5b38:	2000      	movs	r0, #0
    5b3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005b3c <_printf_i>:
    5b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b3e:	b08b      	sub	sp, #44	; 0x2c
    5b40:	9206      	str	r2, [sp, #24]
    5b42:	1c0a      	adds	r2, r1, #0
    5b44:	3243      	adds	r2, #67	; 0x43
    5b46:	9307      	str	r3, [sp, #28]
    5b48:	9005      	str	r0, [sp, #20]
    5b4a:	9204      	str	r2, [sp, #16]
    5b4c:	7e0a      	ldrb	r2, [r1, #24]
    5b4e:	1c0c      	adds	r4, r1, #0
    5b50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5b52:	2a6e      	cmp	r2, #110	; 0x6e
    5b54:	d100      	bne.n	5b58 <_printf_i+0x1c>
    5b56:	e0a8      	b.n	5caa <_printf_i+0x16e>
    5b58:	d811      	bhi.n	5b7e <_printf_i+0x42>
    5b5a:	2a63      	cmp	r2, #99	; 0x63
    5b5c:	d022      	beq.n	5ba4 <_printf_i+0x68>
    5b5e:	d809      	bhi.n	5b74 <_printf_i+0x38>
    5b60:	2a00      	cmp	r2, #0
    5b62:	d100      	bne.n	5b66 <_printf_i+0x2a>
    5b64:	e0b2      	b.n	5ccc <_printf_i+0x190>
    5b66:	2a58      	cmp	r2, #88	; 0x58
    5b68:	d000      	beq.n	5b6c <_printf_i+0x30>
    5b6a:	e0c2      	b.n	5cf2 <_printf_i+0x1b6>
    5b6c:	3145      	adds	r1, #69	; 0x45
    5b6e:	700a      	strb	r2, [r1, #0]
    5b70:	4a7c      	ldr	r2, [pc, #496]	; (5d64 <_printf_i+0x228>)
    5b72:	e04f      	b.n	5c14 <_printf_i+0xd8>
    5b74:	2a64      	cmp	r2, #100	; 0x64
    5b76:	d01d      	beq.n	5bb4 <_printf_i+0x78>
    5b78:	2a69      	cmp	r2, #105	; 0x69
    5b7a:	d01b      	beq.n	5bb4 <_printf_i+0x78>
    5b7c:	e0b9      	b.n	5cf2 <_printf_i+0x1b6>
    5b7e:	2a73      	cmp	r2, #115	; 0x73
    5b80:	d100      	bne.n	5b84 <_printf_i+0x48>
    5b82:	e0a7      	b.n	5cd4 <_printf_i+0x198>
    5b84:	d809      	bhi.n	5b9a <_printf_i+0x5e>
    5b86:	2a6f      	cmp	r2, #111	; 0x6f
    5b88:	d029      	beq.n	5bde <_printf_i+0xa2>
    5b8a:	2a70      	cmp	r2, #112	; 0x70
    5b8c:	d000      	beq.n	5b90 <_printf_i+0x54>
    5b8e:	e0b0      	b.n	5cf2 <_printf_i+0x1b6>
    5b90:	2220      	movs	r2, #32
    5b92:	6809      	ldr	r1, [r1, #0]
    5b94:	430a      	orrs	r2, r1
    5b96:	6022      	str	r2, [r4, #0]
    5b98:	e037      	b.n	5c0a <_printf_i+0xce>
    5b9a:	2a75      	cmp	r2, #117	; 0x75
    5b9c:	d01f      	beq.n	5bde <_printf_i+0xa2>
    5b9e:	2a78      	cmp	r2, #120	; 0x78
    5ba0:	d033      	beq.n	5c0a <_printf_i+0xce>
    5ba2:	e0a6      	b.n	5cf2 <_printf_i+0x1b6>
    5ba4:	1c0e      	adds	r6, r1, #0
    5ba6:	681a      	ldr	r2, [r3, #0]
    5ba8:	3642      	adds	r6, #66	; 0x42
    5baa:	1d11      	adds	r1, r2, #4
    5bac:	6019      	str	r1, [r3, #0]
    5bae:	6813      	ldr	r3, [r2, #0]
    5bb0:	7033      	strb	r3, [r6, #0]
    5bb2:	e0a1      	b.n	5cf8 <_printf_i+0x1bc>
    5bb4:	6821      	ldr	r1, [r4, #0]
    5bb6:	681a      	ldr	r2, [r3, #0]
    5bb8:	0608      	lsls	r0, r1, #24
    5bba:	d406      	bmi.n	5bca <_printf_i+0x8e>
    5bbc:	0649      	lsls	r1, r1, #25
    5bbe:	d504      	bpl.n	5bca <_printf_i+0x8e>
    5bc0:	1d11      	adds	r1, r2, #4
    5bc2:	6019      	str	r1, [r3, #0]
    5bc4:	2300      	movs	r3, #0
    5bc6:	5ed5      	ldrsh	r5, [r2, r3]
    5bc8:	e002      	b.n	5bd0 <_printf_i+0x94>
    5bca:	1d11      	adds	r1, r2, #4
    5bcc:	6019      	str	r1, [r3, #0]
    5bce:	6815      	ldr	r5, [r2, #0]
    5bd0:	2d00      	cmp	r5, #0
    5bd2:	da3b      	bge.n	5c4c <_printf_i+0x110>
    5bd4:	232d      	movs	r3, #45	; 0x2d
    5bd6:	9a04      	ldr	r2, [sp, #16]
    5bd8:	426d      	negs	r5, r5
    5bda:	7013      	strb	r3, [r2, #0]
    5bdc:	e036      	b.n	5c4c <_printf_i+0x110>
    5bde:	6821      	ldr	r1, [r4, #0]
    5be0:	681a      	ldr	r2, [r3, #0]
    5be2:	0608      	lsls	r0, r1, #24
    5be4:	d406      	bmi.n	5bf4 <_printf_i+0xb8>
    5be6:	0649      	lsls	r1, r1, #25
    5be8:	d504      	bpl.n	5bf4 <_printf_i+0xb8>
    5bea:	6815      	ldr	r5, [r2, #0]
    5bec:	1d11      	adds	r1, r2, #4
    5bee:	6019      	str	r1, [r3, #0]
    5bf0:	b2ad      	uxth	r5, r5
    5bf2:	e002      	b.n	5bfa <_printf_i+0xbe>
    5bf4:	1d11      	adds	r1, r2, #4
    5bf6:	6019      	str	r1, [r3, #0]
    5bf8:	6815      	ldr	r5, [r2, #0]
    5bfa:	4b5a      	ldr	r3, [pc, #360]	; (5d64 <_printf_i+0x228>)
    5bfc:	7e22      	ldrb	r2, [r4, #24]
    5bfe:	9303      	str	r3, [sp, #12]
    5c00:	270a      	movs	r7, #10
    5c02:	2a6f      	cmp	r2, #111	; 0x6f
    5c04:	d11d      	bne.n	5c42 <_printf_i+0x106>
    5c06:	2708      	movs	r7, #8
    5c08:	e01b      	b.n	5c42 <_printf_i+0x106>
    5c0a:	1c22      	adds	r2, r4, #0
    5c0c:	2178      	movs	r1, #120	; 0x78
    5c0e:	3245      	adds	r2, #69	; 0x45
    5c10:	7011      	strb	r1, [r2, #0]
    5c12:	4a55      	ldr	r2, [pc, #340]	; (5d68 <_printf_i+0x22c>)
    5c14:	6819      	ldr	r1, [r3, #0]
    5c16:	9203      	str	r2, [sp, #12]
    5c18:	1d08      	adds	r0, r1, #4
    5c1a:	6822      	ldr	r2, [r4, #0]
    5c1c:	6018      	str	r0, [r3, #0]
    5c1e:	680d      	ldr	r5, [r1, #0]
    5c20:	0610      	lsls	r0, r2, #24
    5c22:	d402      	bmi.n	5c2a <_printf_i+0xee>
    5c24:	0650      	lsls	r0, r2, #25
    5c26:	d500      	bpl.n	5c2a <_printf_i+0xee>
    5c28:	b2ad      	uxth	r5, r5
    5c2a:	07d3      	lsls	r3, r2, #31
    5c2c:	d502      	bpl.n	5c34 <_printf_i+0xf8>
    5c2e:	2320      	movs	r3, #32
    5c30:	431a      	orrs	r2, r3
    5c32:	6022      	str	r2, [r4, #0]
    5c34:	2710      	movs	r7, #16
    5c36:	2d00      	cmp	r5, #0
    5c38:	d103      	bne.n	5c42 <_printf_i+0x106>
    5c3a:	2320      	movs	r3, #32
    5c3c:	6822      	ldr	r2, [r4, #0]
    5c3e:	439a      	bics	r2, r3
    5c40:	6022      	str	r2, [r4, #0]
    5c42:	1c23      	adds	r3, r4, #0
    5c44:	2200      	movs	r2, #0
    5c46:	3343      	adds	r3, #67	; 0x43
    5c48:	701a      	strb	r2, [r3, #0]
    5c4a:	e002      	b.n	5c52 <_printf_i+0x116>
    5c4c:	270a      	movs	r7, #10
    5c4e:	4b45      	ldr	r3, [pc, #276]	; (5d64 <_printf_i+0x228>)
    5c50:	9303      	str	r3, [sp, #12]
    5c52:	6863      	ldr	r3, [r4, #4]
    5c54:	60a3      	str	r3, [r4, #8]
    5c56:	2b00      	cmp	r3, #0
    5c58:	db03      	blt.n	5c62 <_printf_i+0x126>
    5c5a:	2204      	movs	r2, #4
    5c5c:	6821      	ldr	r1, [r4, #0]
    5c5e:	4391      	bics	r1, r2
    5c60:	6021      	str	r1, [r4, #0]
    5c62:	2d00      	cmp	r5, #0
    5c64:	d102      	bne.n	5c6c <_printf_i+0x130>
    5c66:	9e04      	ldr	r6, [sp, #16]
    5c68:	2b00      	cmp	r3, #0
    5c6a:	d00e      	beq.n	5c8a <_printf_i+0x14e>
    5c6c:	9e04      	ldr	r6, [sp, #16]
    5c6e:	1c28      	adds	r0, r5, #0
    5c70:	1c39      	adds	r1, r7, #0
    5c72:	f7ff f8a7 	bl	4dc4 <__aeabi_uidivmod>
    5c76:	9b03      	ldr	r3, [sp, #12]
    5c78:	3e01      	subs	r6, #1
    5c7a:	5c5b      	ldrb	r3, [r3, r1]
    5c7c:	1c28      	adds	r0, r5, #0
    5c7e:	7033      	strb	r3, [r6, #0]
    5c80:	1c39      	adds	r1, r7, #0
    5c82:	f7ff f819 	bl	4cb8 <__aeabi_uidiv>
    5c86:	1e05      	subs	r5, r0, #0
    5c88:	d1f1      	bne.n	5c6e <_printf_i+0x132>
    5c8a:	2f08      	cmp	r7, #8
    5c8c:	d109      	bne.n	5ca2 <_printf_i+0x166>
    5c8e:	6823      	ldr	r3, [r4, #0]
    5c90:	07db      	lsls	r3, r3, #31
    5c92:	d506      	bpl.n	5ca2 <_printf_i+0x166>
    5c94:	6863      	ldr	r3, [r4, #4]
    5c96:	6922      	ldr	r2, [r4, #16]
    5c98:	4293      	cmp	r3, r2
    5c9a:	dc02      	bgt.n	5ca2 <_printf_i+0x166>
    5c9c:	2330      	movs	r3, #48	; 0x30
    5c9e:	3e01      	subs	r6, #1
    5ca0:	7033      	strb	r3, [r6, #0]
    5ca2:	9b04      	ldr	r3, [sp, #16]
    5ca4:	1b9b      	subs	r3, r3, r6
    5ca6:	6123      	str	r3, [r4, #16]
    5ca8:	e02b      	b.n	5d02 <_printf_i+0x1c6>
    5caa:	6809      	ldr	r1, [r1, #0]
    5cac:	681a      	ldr	r2, [r3, #0]
    5cae:	0608      	lsls	r0, r1, #24
    5cb0:	d407      	bmi.n	5cc2 <_printf_i+0x186>
    5cb2:	0649      	lsls	r1, r1, #25
    5cb4:	d505      	bpl.n	5cc2 <_printf_i+0x186>
    5cb6:	1d11      	adds	r1, r2, #4
    5cb8:	6019      	str	r1, [r3, #0]
    5cba:	6813      	ldr	r3, [r2, #0]
    5cbc:	8aa2      	ldrh	r2, [r4, #20]
    5cbe:	801a      	strh	r2, [r3, #0]
    5cc0:	e004      	b.n	5ccc <_printf_i+0x190>
    5cc2:	1d11      	adds	r1, r2, #4
    5cc4:	6019      	str	r1, [r3, #0]
    5cc6:	6813      	ldr	r3, [r2, #0]
    5cc8:	6962      	ldr	r2, [r4, #20]
    5cca:	601a      	str	r2, [r3, #0]
    5ccc:	2300      	movs	r3, #0
    5cce:	9e04      	ldr	r6, [sp, #16]
    5cd0:	6123      	str	r3, [r4, #16]
    5cd2:	e016      	b.n	5d02 <_printf_i+0x1c6>
    5cd4:	681a      	ldr	r2, [r3, #0]
    5cd6:	1d11      	adds	r1, r2, #4
    5cd8:	6019      	str	r1, [r3, #0]
    5cda:	6816      	ldr	r6, [r2, #0]
    5cdc:	2100      	movs	r1, #0
    5cde:	1c30      	adds	r0, r6, #0
    5ce0:	6862      	ldr	r2, [r4, #4]
    5ce2:	f000 f8ff 	bl	5ee4 <memchr>
    5ce6:	2800      	cmp	r0, #0
    5ce8:	d001      	beq.n	5cee <_printf_i+0x1b2>
    5cea:	1b80      	subs	r0, r0, r6
    5cec:	6060      	str	r0, [r4, #4]
    5cee:	6863      	ldr	r3, [r4, #4]
    5cf0:	e003      	b.n	5cfa <_printf_i+0x1be>
    5cf2:	1c26      	adds	r6, r4, #0
    5cf4:	3642      	adds	r6, #66	; 0x42
    5cf6:	7032      	strb	r2, [r6, #0]
    5cf8:	2301      	movs	r3, #1
    5cfa:	6123      	str	r3, [r4, #16]
    5cfc:	2300      	movs	r3, #0
    5cfe:	9a04      	ldr	r2, [sp, #16]
    5d00:	7013      	strb	r3, [r2, #0]
    5d02:	9b07      	ldr	r3, [sp, #28]
    5d04:	9805      	ldr	r0, [sp, #20]
    5d06:	9300      	str	r3, [sp, #0]
    5d08:	1c21      	adds	r1, r4, #0
    5d0a:	9b06      	ldr	r3, [sp, #24]
    5d0c:	aa09      	add	r2, sp, #36	; 0x24
    5d0e:	f7ff fea7 	bl	5a60 <_printf_common>
    5d12:	1c43      	adds	r3, r0, #1
    5d14:	d102      	bne.n	5d1c <_printf_i+0x1e0>
    5d16:	2001      	movs	r0, #1
    5d18:	4240      	negs	r0, r0
    5d1a:	e021      	b.n	5d60 <_printf_i+0x224>
    5d1c:	6923      	ldr	r3, [r4, #16]
    5d1e:	9805      	ldr	r0, [sp, #20]
    5d20:	9906      	ldr	r1, [sp, #24]
    5d22:	1c32      	adds	r2, r6, #0
    5d24:	9d07      	ldr	r5, [sp, #28]
    5d26:	47a8      	blx	r5
    5d28:	1c43      	adds	r3, r0, #1
    5d2a:	d0f4      	beq.n	5d16 <_printf_i+0x1da>
    5d2c:	6823      	ldr	r3, [r4, #0]
    5d2e:	079b      	lsls	r3, r3, #30
    5d30:	d405      	bmi.n	5d3e <_printf_i+0x202>
    5d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5d34:	68e0      	ldr	r0, [r4, #12]
    5d36:	4298      	cmp	r0, r3
    5d38:	da12      	bge.n	5d60 <_printf_i+0x224>
    5d3a:	1c18      	adds	r0, r3, #0
    5d3c:	e010      	b.n	5d60 <_printf_i+0x224>
    5d3e:	2500      	movs	r5, #0
    5d40:	68e3      	ldr	r3, [r4, #12]
    5d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5d44:	1a9b      	subs	r3, r3, r2
    5d46:	429d      	cmp	r5, r3
    5d48:	daf3      	bge.n	5d32 <_printf_i+0x1f6>
    5d4a:	1c22      	adds	r2, r4, #0
    5d4c:	2301      	movs	r3, #1
    5d4e:	9805      	ldr	r0, [sp, #20]
    5d50:	9906      	ldr	r1, [sp, #24]
    5d52:	3219      	adds	r2, #25
    5d54:	9e07      	ldr	r6, [sp, #28]
    5d56:	47b0      	blx	r6
    5d58:	1c43      	adds	r3, r0, #1
    5d5a:	d0dc      	beq.n	5d16 <_printf_i+0x1da>
    5d5c:	3501      	adds	r5, #1
    5d5e:	e7ef      	b.n	5d40 <_printf_i+0x204>
    5d60:	b00b      	add	sp, #44	; 0x2c
    5d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d64:	00006251 	.word	0x00006251
    5d68:	00006262 	.word	0x00006262

00005d6c <_sbrk_r>:
    5d6c:	b538      	push	{r3, r4, r5, lr}
    5d6e:	2300      	movs	r3, #0
    5d70:	4c06      	ldr	r4, [pc, #24]	; (5d8c <_sbrk_r+0x20>)
    5d72:	1c05      	adds	r5, r0, #0
    5d74:	1c08      	adds	r0, r1, #0
    5d76:	6023      	str	r3, [r4, #0]
    5d78:	f7fe fe66 	bl	4a48 <_sbrk>
    5d7c:	1c43      	adds	r3, r0, #1
    5d7e:	d103      	bne.n	5d88 <_sbrk_r+0x1c>
    5d80:	6823      	ldr	r3, [r4, #0]
    5d82:	2b00      	cmp	r3, #0
    5d84:	d000      	beq.n	5d88 <_sbrk_r+0x1c>
    5d86:	602b      	str	r3, [r5, #0]
    5d88:	bd38      	pop	{r3, r4, r5, pc}
    5d8a:	46c0      	nop			; (mov r8, r8)
    5d8c:	20000e48 	.word	0x20000e48

00005d90 <__sread>:
    5d90:	b538      	push	{r3, r4, r5, lr}
    5d92:	1c0c      	adds	r4, r1, #0
    5d94:	250e      	movs	r5, #14
    5d96:	5f49      	ldrsh	r1, [r1, r5]
    5d98:	f000 f8b0 	bl	5efc <_read_r>
    5d9c:	2800      	cmp	r0, #0
    5d9e:	db03      	blt.n	5da8 <__sread+0x18>
    5da0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5da2:	181b      	adds	r3, r3, r0
    5da4:	6563      	str	r3, [r4, #84]	; 0x54
    5da6:	e003      	b.n	5db0 <__sread+0x20>
    5da8:	89a2      	ldrh	r2, [r4, #12]
    5daa:	4b02      	ldr	r3, [pc, #8]	; (5db4 <__sread+0x24>)
    5dac:	4013      	ands	r3, r2
    5dae:	81a3      	strh	r3, [r4, #12]
    5db0:	bd38      	pop	{r3, r4, r5, pc}
    5db2:	46c0      	nop			; (mov r8, r8)
    5db4:	ffffefff 	.word	0xffffefff

00005db8 <__swrite>:
    5db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5dba:	1c1e      	adds	r6, r3, #0
    5dbc:	898b      	ldrh	r3, [r1, #12]
    5dbe:	1c05      	adds	r5, r0, #0
    5dc0:	1c0c      	adds	r4, r1, #0
    5dc2:	1c17      	adds	r7, r2, #0
    5dc4:	05db      	lsls	r3, r3, #23
    5dc6:	d505      	bpl.n	5dd4 <__swrite+0x1c>
    5dc8:	230e      	movs	r3, #14
    5dca:	5ec9      	ldrsh	r1, [r1, r3]
    5dcc:	2200      	movs	r2, #0
    5dce:	2302      	movs	r3, #2
    5dd0:	f000 f874 	bl	5ebc <_lseek_r>
    5dd4:	89a2      	ldrh	r2, [r4, #12]
    5dd6:	4b05      	ldr	r3, [pc, #20]	; (5dec <__swrite+0x34>)
    5dd8:	1c28      	adds	r0, r5, #0
    5dda:	4013      	ands	r3, r2
    5ddc:	81a3      	strh	r3, [r4, #12]
    5dde:	1c3a      	adds	r2, r7, #0
    5de0:	230e      	movs	r3, #14
    5de2:	5ee1      	ldrsh	r1, [r4, r3]
    5de4:	1c33      	adds	r3, r6, #0
    5de6:	f000 f81f 	bl	5e28 <_write_r>
    5dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5dec:	ffffefff 	.word	0xffffefff

00005df0 <__sseek>:
    5df0:	b538      	push	{r3, r4, r5, lr}
    5df2:	1c0c      	adds	r4, r1, #0
    5df4:	250e      	movs	r5, #14
    5df6:	5f49      	ldrsh	r1, [r1, r5]
    5df8:	f000 f860 	bl	5ebc <_lseek_r>
    5dfc:	89a3      	ldrh	r3, [r4, #12]
    5dfe:	1c42      	adds	r2, r0, #1
    5e00:	d103      	bne.n	5e0a <__sseek+0x1a>
    5e02:	4a05      	ldr	r2, [pc, #20]	; (5e18 <__sseek+0x28>)
    5e04:	4013      	ands	r3, r2
    5e06:	81a3      	strh	r3, [r4, #12]
    5e08:	e004      	b.n	5e14 <__sseek+0x24>
    5e0a:	2280      	movs	r2, #128	; 0x80
    5e0c:	0152      	lsls	r2, r2, #5
    5e0e:	4313      	orrs	r3, r2
    5e10:	81a3      	strh	r3, [r4, #12]
    5e12:	6560      	str	r0, [r4, #84]	; 0x54
    5e14:	bd38      	pop	{r3, r4, r5, pc}
    5e16:	46c0      	nop			; (mov r8, r8)
    5e18:	ffffefff 	.word	0xffffefff

00005e1c <__sclose>:
    5e1c:	b508      	push	{r3, lr}
    5e1e:	230e      	movs	r3, #14
    5e20:	5ec9      	ldrsh	r1, [r1, r3]
    5e22:	f000 f815 	bl	5e50 <_close_r>
    5e26:	bd08      	pop	{r3, pc}

00005e28 <_write_r>:
    5e28:	b538      	push	{r3, r4, r5, lr}
    5e2a:	1c05      	adds	r5, r0, #0
    5e2c:	2000      	movs	r0, #0
    5e2e:	4c07      	ldr	r4, [pc, #28]	; (5e4c <_write_r+0x24>)
    5e30:	6020      	str	r0, [r4, #0]
    5e32:	1c08      	adds	r0, r1, #0
    5e34:	1c11      	adds	r1, r2, #0
    5e36:	1c1a      	adds	r2, r3, #0
    5e38:	f7fe fdde 	bl	49f8 <_write>
    5e3c:	1c43      	adds	r3, r0, #1
    5e3e:	d103      	bne.n	5e48 <_write_r+0x20>
    5e40:	6823      	ldr	r3, [r4, #0]
    5e42:	2b00      	cmp	r3, #0
    5e44:	d000      	beq.n	5e48 <_write_r+0x20>
    5e46:	602b      	str	r3, [r5, #0]
    5e48:	bd38      	pop	{r3, r4, r5, pc}
    5e4a:	46c0      	nop			; (mov r8, r8)
    5e4c:	20000e48 	.word	0x20000e48

00005e50 <_close_r>:
    5e50:	b538      	push	{r3, r4, r5, lr}
    5e52:	2300      	movs	r3, #0
    5e54:	4c06      	ldr	r4, [pc, #24]	; (5e70 <_close_r+0x20>)
    5e56:	1c05      	adds	r5, r0, #0
    5e58:	1c08      	adds	r0, r1, #0
    5e5a:	6023      	str	r3, [r4, #0]
    5e5c:	f7fe fe06 	bl	4a6c <_close>
    5e60:	1c43      	adds	r3, r0, #1
    5e62:	d103      	bne.n	5e6c <_close_r+0x1c>
    5e64:	6823      	ldr	r3, [r4, #0]
    5e66:	2b00      	cmp	r3, #0
    5e68:	d000      	beq.n	5e6c <_close_r+0x1c>
    5e6a:	602b      	str	r3, [r5, #0]
    5e6c:	bd38      	pop	{r3, r4, r5, pc}
    5e6e:	46c0      	nop			; (mov r8, r8)
    5e70:	20000e48 	.word	0x20000e48

00005e74 <_fstat_r>:
    5e74:	b538      	push	{r3, r4, r5, lr}
    5e76:	2300      	movs	r3, #0
    5e78:	4c06      	ldr	r4, [pc, #24]	; (5e94 <_fstat_r+0x20>)
    5e7a:	1c05      	adds	r5, r0, #0
    5e7c:	1c08      	adds	r0, r1, #0
    5e7e:	1c11      	adds	r1, r2, #0
    5e80:	6023      	str	r3, [r4, #0]
    5e82:	f7fe fdf7 	bl	4a74 <_fstat>
    5e86:	1c43      	adds	r3, r0, #1
    5e88:	d103      	bne.n	5e92 <_fstat_r+0x1e>
    5e8a:	6823      	ldr	r3, [r4, #0]
    5e8c:	2b00      	cmp	r3, #0
    5e8e:	d000      	beq.n	5e92 <_fstat_r+0x1e>
    5e90:	602b      	str	r3, [r5, #0]
    5e92:	bd38      	pop	{r3, r4, r5, pc}
    5e94:	20000e48 	.word	0x20000e48

00005e98 <_isatty_r>:
    5e98:	b538      	push	{r3, r4, r5, lr}
    5e9a:	2300      	movs	r3, #0
    5e9c:	4c06      	ldr	r4, [pc, #24]	; (5eb8 <_isatty_r+0x20>)
    5e9e:	1c05      	adds	r5, r0, #0
    5ea0:	1c08      	adds	r0, r1, #0
    5ea2:	6023      	str	r3, [r4, #0]
    5ea4:	f7fe fdec 	bl	4a80 <_isatty>
    5ea8:	1c43      	adds	r3, r0, #1
    5eaa:	d103      	bne.n	5eb4 <_isatty_r+0x1c>
    5eac:	6823      	ldr	r3, [r4, #0]
    5eae:	2b00      	cmp	r3, #0
    5eb0:	d000      	beq.n	5eb4 <_isatty_r+0x1c>
    5eb2:	602b      	str	r3, [r5, #0]
    5eb4:	bd38      	pop	{r3, r4, r5, pc}
    5eb6:	46c0      	nop			; (mov r8, r8)
    5eb8:	20000e48 	.word	0x20000e48

00005ebc <_lseek_r>:
    5ebc:	b538      	push	{r3, r4, r5, lr}
    5ebe:	1c05      	adds	r5, r0, #0
    5ec0:	2000      	movs	r0, #0
    5ec2:	4c07      	ldr	r4, [pc, #28]	; (5ee0 <_lseek_r+0x24>)
    5ec4:	6020      	str	r0, [r4, #0]
    5ec6:	1c08      	adds	r0, r1, #0
    5ec8:	1c11      	adds	r1, r2, #0
    5eca:	1c1a      	adds	r2, r3, #0
    5ecc:	f7fe fdda 	bl	4a84 <_lseek>
    5ed0:	1c43      	adds	r3, r0, #1
    5ed2:	d103      	bne.n	5edc <_lseek_r+0x20>
    5ed4:	6823      	ldr	r3, [r4, #0]
    5ed6:	2b00      	cmp	r3, #0
    5ed8:	d000      	beq.n	5edc <_lseek_r+0x20>
    5eda:	602b      	str	r3, [r5, #0]
    5edc:	bd38      	pop	{r3, r4, r5, pc}
    5ede:	46c0      	nop			; (mov r8, r8)
    5ee0:	20000e48 	.word	0x20000e48

00005ee4 <memchr>:
    5ee4:	b2c9      	uxtb	r1, r1
    5ee6:	1882      	adds	r2, r0, r2
    5ee8:	4290      	cmp	r0, r2
    5eea:	d004      	beq.n	5ef6 <memchr+0x12>
    5eec:	7803      	ldrb	r3, [r0, #0]
    5eee:	428b      	cmp	r3, r1
    5ef0:	d002      	beq.n	5ef8 <memchr+0x14>
    5ef2:	3001      	adds	r0, #1
    5ef4:	e7f8      	b.n	5ee8 <memchr+0x4>
    5ef6:	2000      	movs	r0, #0
    5ef8:	4770      	bx	lr
	...

00005efc <_read_r>:
    5efc:	b538      	push	{r3, r4, r5, lr}
    5efe:	1c05      	adds	r5, r0, #0
    5f00:	2000      	movs	r0, #0
    5f02:	4c07      	ldr	r4, [pc, #28]	; (5f20 <_read_r+0x24>)
    5f04:	6020      	str	r0, [r4, #0]
    5f06:	1c08      	adds	r0, r1, #0
    5f08:	1c11      	adds	r1, r2, #0
    5f0a:	1c1a      	adds	r2, r3, #0
    5f0c:	f7fe fd52 	bl	49b4 <_read>
    5f10:	1c43      	adds	r3, r0, #1
    5f12:	d103      	bne.n	5f1c <_read_r+0x20>
    5f14:	6823      	ldr	r3, [r4, #0]
    5f16:	2b00      	cmp	r3, #0
    5f18:	d000      	beq.n	5f1c <_read_r+0x20>
    5f1a:	602b      	str	r3, [r5, #0]
    5f1c:	bd38      	pop	{r3, r4, r5, pc}
    5f1e:	46c0      	nop			; (mov r8, r8)
    5f20:	20000e48 	.word	0x20000e48
    5f24:	65636572 	.word	0x65636572
    5f28:	64657669 	.word	0x64657669
    5f2c:	200d0a20 	.word	0x200d0a20
    5f30:	6e616843 	.word	0x6e616843
    5f34:	206c656e 	.word	0x206c656e
    5f38:	61762030 	.word	0x61762030
    5f3c:	2065756c 	.word	0x2065756c
    5f40:	7525203d 	.word	0x7525203d
    5f44:	43200d0a 	.word	0x43200d0a
    5f48:	6e6e6168 	.word	0x6e6e6168
    5f4c:	31206c65 	.word	0x31206c65
    5f50:	6c617620 	.word	0x6c617620
    5f54:	3d206575 	.word	0x3d206575
    5f58:	0a752520 	.word	0x0a752520
    5f5c:	0000000d 	.word	0x0000000d
    5f60:	646e6573 	.word	0x646e6573
    5f64:	20676e69 	.word	0x20676e69
    5f68:	63200d0a 	.word	0x63200d0a
    5f6c:	6e6e6168 	.word	0x6e6e6168
    5f70:	30206c65 	.word	0x30206c65
    5f74:	6c617620 	.word	0x6c617620
    5f78:	3d206575 	.word	0x3d206575
    5f7c:	0a752520 	.word	0x0a752520
    5f80:	6863200d 	.word	0x6863200d
    5f84:	656e6e61 	.word	0x656e6e61
    5f88:	2031206c 	.word	0x2031206c
    5f8c:	756c6176 	.word	0x756c6176
    5f90:	203d2065 	.word	0x203d2065
    5f94:	0d0a7525 	.word	0x0d0a7525
    5f98:	00000000 	.word	0x00000000

00005f9c <tc_interrupt_vectors.13689>:
    5f9c:	17161514 00000018 00002ac8 00002d2e     .........*...-..
    5fac:	00002d2e 00002d2e 00002d2e 00002d2e     .-...-...-...-..
    5fbc:	00002d2e 00002d2e 00002d2e 00002d2e     .-...-...-...-..
    5fcc:	00002d2e 00002d2e 00002d2e 00002d2e     .-...-...-...-..
    5fdc:	00002d2e 00002d2e 00002ab0 00002d2e     .-...-...*...-..
    5fec:	00002d2e 00002d2e 00002d2e 00002d2e     .-...-...-...-..
    5ffc:	00002d2e 00002d2e 00002d2e 00002d2e     .-...-...-...-..
    600c:	00002d2e 00002d2e 00002d2e 00002d2e     .-...-...-...-..
    601c:	00002d2e 00002d2e 00002ac0 00002d2e     .-...-...*...-..
    602c:	00002d2e 00002d2e 00002d2e 00002d2e     .-...-...-...-..
    603c:	00002d2e 00002d2e 00002d2e 00002d2e     .-...-...-...-..
    604c:	00002d2e 00002d2e 00002d2e 00002d2e     .-...-...-...-..
    605c:	00002d2e 00002d2e 00002ab8 00002ad0     .-...-...*...*..
    606c:	00002a98 00002aa8 00002aa0              .*...*...*..

00006078 <_adc_gclk_ids>:
    6078:	00002221 42004400 42004800 00000002     !"...D.B.H.B....
    6088:	00000003 00000028 00000029 00000004     ....(...).......
    6098:	00000005 00000006 00000007 00000008     ................
    60a8:	00000009 0000000a 0000000b 00000020     ............ ...
    60b8:	00000021 00000022 00000023 00000028     !..."...#...(...
    60c8:	00000029 00000024 00000025 00000026     )...$...%...&...
    60d8:	00000027 00000008 00000009              '...........

000060e4 <_adc_biasrefbuf_pos>:
    60e4:	00000600                                ....

000060e8 <_adc_apbcmasks>:
    60e8:	00020000 00040000                       ........

000060f0 <_adc_biascomp_pos>:
    60f0:	00000903                                ....

000060f4 <_adc_extchannel_msb>:
    60f4:	0000000b 0000000b                       ........

000060fc <_adc_biascomp_addr>:
    60fc:	00806020 00806020                        `.. `..

00006104 <_adc_biasrefbuf_addr>:
    6104:	00806020 00806020                        `.. `..

0000610c <adc_interrupt_vectors.13737>:
    610c:	00001a19                                ....

00006110 <tc_interrupt_vectors.15064>:
    6110:	17161514 00000018 42000400 42000800     ...........B...B
    6120:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    6130:	0c0b0a09 00000e0d 0000405e 0000405a     ........^@..Z@..
    6140:	0000405a 0000408c 0000408c 00004076     Z@...@...@..v@..
    6150:	00004064 0000407c 42003000 42003400     d@..|@...0.B.4.B
    6160:	42003800 42003c00 42004000 1f1f1e1e     .8.B.<.B.@.B....
    6170:	00000020 00000002 00001000 00000002      ...............
    6180:	00002000 00000002 00004000 00000002     . .......@......
    6190:	00008000 00000002 00010000 20313243     ............C21 
    61a0:	42323132 20435220 0d726143 0000000a     212B RC Car.....
    61b0:	72646441 20737365 7525203d 000d0a0a     Address = %u....
    61c0:	206c6176 7525203d 00000d0a 20726964     val = %u....dir 
    61d0:	6425203d 00000d0a 00000043              = %d....C...

000061dc <_global_impure_ptr>:
    61dc:	2000000c                                ... 

000061e0 <__sf_fake_stdin>:
	...

00006200 <__sf_fake_stdout>:
	...

00006220 <__sf_fake_stderr>:
	...
    6240:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6250:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6260:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6270:	00006665                                ef..

00006274 <_init>:
    6274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6276:	46c0      	nop			; (mov r8, r8)
    6278:	bcf8      	pop	{r3, r4, r5, r6, r7}
    627a:	bc08      	pop	{r3}
    627c:	469e      	mov	lr, r3
    627e:	4770      	bx	lr

00006280 <__init_array_start>:
    6280:	000000e5 	.word	0x000000e5

00006284 <_fini>:
    6284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6286:	46c0      	nop			; (mov r8, r8)
    6288:	bcf8      	pop	{r3, r4, r5, r6, r7}
    628a:	bc08      	pop	{r3}
    628c:	469e      	mov	lr, r3
    628e:	4770      	bx	lr

00006290 <__fini_array_start>:
    6290:	000000bd 	.word	0x000000bd
