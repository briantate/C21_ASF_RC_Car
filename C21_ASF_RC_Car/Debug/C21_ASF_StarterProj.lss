
C21_ASF_StarterProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028b8  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  000028b8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012c  20000068  00002920  00010068  2**2
                  ALLOC
  3 .stack        00002004  20000194  00002a4c  00010068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002149a  00000000  00000000  000100eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003872  00000000  00000000  00031585  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000056e8  00000000  00000000  00034df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005f0  00000000  00000000  0003a4df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005d0  00000000  00000000  0003aacf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020642  00000000  00000000  0003b09f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010040  00000000  00000000  0005b6e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009c96a  00000000  00000000  0006b721  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001370  00000000  00000000  0010808c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002198 	.word	0x20002198
       4:	00001971 	.word	0x00001971
       8:	0000196d 	.word	0x0000196d
       c:	0000196d 	.word	0x0000196d
	...
      2c:	0000196d 	.word	0x0000196d
	...
      38:	0000196d 	.word	0x0000196d
      3c:	0000196d 	.word	0x0000196d
      40:	0000196d 	.word	0x0000196d
      44:	0000196d 	.word	0x0000196d
      48:	0000196d 	.word	0x0000196d
      4c:	000004c5 	.word	0x000004c5
      50:	0000196d 	.word	0x0000196d
      54:	0000196d 	.word	0x0000196d
      58:	0000196d 	.word	0x0000196d
      5c:	0000196d 	.word	0x0000196d
      60:	0000196d 	.word	0x0000196d
      64:	00000b25 	.word	0x00000b25
      68:	00000b35 	.word	0x00000b35
      6c:	00000b45 	.word	0x00000b45
      70:	00000b55 	.word	0x00000b55
      74:	00000b65 	.word	0x00000b65
      78:	00000b75 	.word	0x00000b75
      7c:	0000196d 	.word	0x0000196d
      80:	0000196d 	.word	0x0000196d
      84:	0000196d 	.word	0x0000196d
      88:	0000196d 	.word	0x0000196d
      8c:	0000196d 	.word	0x0000196d
      90:	000015f5 	.word	0x000015f5
      94:	00001605 	.word	0x00001605
      98:	00001615 	.word	0x00001615
      9c:	00001625 	.word	0x00001625
      a0:	00001635 	.word	0x00001635
      a4:	0000196d 	.word	0x0000196d
      a8:	0000196d 	.word	0x0000196d
      ac:	0000196d 	.word	0x0000196d
      b0:	0000196d 	.word	0x0000196d
      b4:	0000196d 	.word	0x0000196d
      b8:	0000196d 	.word	0x0000196d

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000068 	.word	0x20000068
      dc:	00000000 	.word	0x00000000
      e0:	000028b8 	.word	0x000028b8

000000e4 <frame_dummy>:
      e4:	b508      	push	{r3, lr}
      e6:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4908      	ldr	r1, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd08      	pop	{r3, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	000028b8 	.word	0x000028b8
     110:	2000006c 	.word	0x2000006c
     114:	000028b8 	.word	0x000028b8
     118:	00000000 	.word	0x00000000

0000011c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     11c:	b570      	push	{r4, r5, r6, lr}
     11e:	b082      	sub	sp, #8
     120:	1c05      	adds	r5, r0, #0
     122:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
     124:	2200      	movs	r2, #0
     126:	466b      	mov	r3, sp
     128:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     12a:	4c06      	ldr	r4, [pc, #24]	; (144 <usart_serial_getchar+0x28>)
     12c:	1c28      	adds	r0, r5, #0
     12e:	466b      	mov	r3, sp
     130:	1d99      	adds	r1, r3, #6
     132:	47a0      	blx	r4
     134:	2800      	cmp	r0, #0
     136:	d1f9      	bne.n	12c <usart_serial_getchar+0x10>

	*c = temp;
     138:	466b      	mov	r3, sp
     13a:	3306      	adds	r3, #6
     13c:	881b      	ldrh	r3, [r3, #0]
     13e:	7033      	strb	r3, [r6, #0]
}
     140:	b002      	add	sp, #8
     142:	bd70      	pop	{r4, r5, r6, pc}
     144:	00000f41 	.word	0x00000f41

00000148 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     148:	b570      	push	{r4, r5, r6, lr}
     14a:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
     14c:	b28c      	uxth	r4, r1
     14e:	4e03      	ldr	r6, [pc, #12]	; (15c <usart_serial_putchar+0x14>)
     150:	1c28      	adds	r0, r5, #0
     152:	1c21      	adds	r1, r4, #0
     154:	47b0      	blx	r6
     156:	2800      	cmp	r0, #0
     158:	d1fa      	bne.n	150 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     15a:	bd70      	pop	{r4, r5, r6, pc}
     15c:	00000f15 	.word	0x00000f15

00000160 <configure_console>:
#include <asf.h>

static struct usart_module cdc_uart_module;

void configure_console(void)
{
     160:	b5f0      	push	{r4, r5, r6, r7, lr}
     162:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     164:	2380      	movs	r3, #128	; 0x80
     166:	05db      	lsls	r3, r3, #23
     168:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     16a:	2300      	movs	r3, #0
     16c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     16e:	22ff      	movs	r2, #255	; 0xff
     170:	4669      	mov	r1, sp
     172:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     174:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     176:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     178:	2401      	movs	r4, #1
     17a:	222c      	movs	r2, #44	; 0x2c
     17c:	548c      	strb	r4, [r1, r2]
	config->transmitter_enable = true;
     17e:	3201      	adds	r2, #1
     180:	548c      	strb	r4, [r1, r2]
	config->clock_polarity_inverted = false;
     182:	3201      	adds	r2, #1
     184:	548b      	strb	r3, [r1, r2]
	config->use_external_clock = false;
     186:	3201      	adds	r2, #1
     188:	548b      	strb	r3, [r1, r2]
	config->ext_clock_freq   = 0;
     18a:	930c      	str	r3, [sp, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     18c:	3205      	adds	r2, #5
     18e:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
     190:	3201      	adds	r2, #1
     192:	548b      	strb	r3, [r1, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     194:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     196:	2200      	movs	r2, #0
     198:	820b      	strh	r3, [r1, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     19a:	76ca      	strb	r2, [r1, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
     19c:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
     19e:	840b      	strh	r3, [r1, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
     1a0:	844b      	strh	r3, [r1, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     1a2:	760a      	strb	r2, [r1, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     1a4:	2324      	movs	r3, #36	; 0x24
     1a6:	54ca      	strb	r2, [r1, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     1a8:	764a      	strb	r2, [r1, #25]
	config->receive_pulse_length                    = 19;
     1aa:	2313      	movs	r3, #19
     1ac:	768b      	strb	r3, [r1, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     1ae:	3313      	adds	r3, #19
     1b0:	54ca      	strb	r2, [r1, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
     1b2:	3b01      	subs	r3, #1
     1b4:	54ca      	strb	r2, [r1, r3]
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     1b6:	23c4      	movs	r3, #196	; 0xc4
     1b8:	039b      	lsls	r3, r3, #14
     1ba:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     1bc:	2301      	movs	r3, #1
     1be:	425b      	negs	r3, r3
     1c0:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     1c2:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     1c4:	4b18      	ldr	r3, [pc, #96]	; (228 <configure_console+0xc8>)
     1c6:	9310      	str	r3, [sp, #64]	; 0x40
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     1c8:	4b18      	ldr	r3, [pc, #96]	; (22c <configure_console+0xcc>)
     1ca:	9311      	str	r3, [sp, #68]	; 0x44
	usart_conf.baudrate    = EDBG_CDC_SERCOM_BAUDRATE;
     1cc:	2396      	movs	r3, #150	; 0x96
     1ce:	021b      	lsls	r3, r3, #8
     1d0:	930a      	str	r3, [sp, #40]	; 0x28
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     1d2:	4d17      	ldr	r5, [pc, #92]	; (230 <configure_console+0xd0>)
     1d4:	4b17      	ldr	r3, [pc, #92]	; (234 <configure_console+0xd4>)
     1d6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     1d8:	4a17      	ldr	r2, [pc, #92]	; (238 <configure_console+0xd8>)
     1da:	4b18      	ldr	r3, [pc, #96]	; (23c <configure_console+0xdc>)
     1dc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     1de:	4a18      	ldr	r2, [pc, #96]	; (240 <configure_console+0xe0>)
     1e0:	4b18      	ldr	r3, [pc, #96]	; (244 <configure_console+0xe4>)
     1e2:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     1e4:	1c28      	adds	r0, r5, #0
     1e6:	4918      	ldr	r1, [pc, #96]	; (248 <configure_console+0xe8>)
     1e8:	466a      	mov	r2, sp
     1ea:	4b18      	ldr	r3, [pc, #96]	; (24c <configure_console+0xec>)
     1ec:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     1ee:	4f18      	ldr	r7, [pc, #96]	; (250 <configure_console+0xf0>)
     1f0:	683b      	ldr	r3, [r7, #0]
     1f2:	6898      	ldr	r0, [r3, #8]
     1f4:	2100      	movs	r1, #0
     1f6:	4e17      	ldr	r6, [pc, #92]	; (254 <configure_console+0xf4>)
     1f8:	47b0      	blx	r6
	setbuf(stdin, NULL);
     1fa:	683b      	ldr	r3, [r7, #0]
     1fc:	6858      	ldr	r0, [r3, #4]
     1fe:	2100      	movs	r1, #0
     200:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     202:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     204:	1c30      	adds	r0, r6, #0
     206:	4b14      	ldr	r3, [pc, #80]	; (258 <configure_console+0xf8>)
     208:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     20a:	231f      	movs	r3, #31
     20c:	4018      	ands	r0, r3
     20e:	4084      	lsls	r4, r0
     210:	4b12      	ldr	r3, [pc, #72]	; (25c <configure_console+0xfc>)
     212:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     214:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     216:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     218:	2b00      	cmp	r3, #0
     21a:	d1fc      	bne.n	216 <configure_console+0xb6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     21c:	6832      	ldr	r2, [r6, #0]
     21e:	3302      	adds	r3, #2
     220:	4313      	orrs	r3, r2
     222:	6033      	str	r3, [r6, #0]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
	usart_enable(&cdc_uart_module);
}
     224:	b013      	add	sp, #76	; 0x4c
     226:	bdf0      	pop	{r4, r5, r6, r7, pc}
     228:	002a0003 	.word	0x002a0003
     22c:	002b0003 	.word	0x002b0003
     230:	20000084 	.word	0x20000084
     234:	2000018c 	.word	0x2000018c
     238:	00000149 	.word	0x00000149
     23c:	20000188 	.word	0x20000188
     240:	0000011d 	.word	0x0000011d
     244:	20000184 	.word	0x20000184
     248:	42001400 	.word	0x42001400
     24c:	00000b85 	.word	0x00000b85
     250:	20000064 	.word	0x20000064
     254:	00001df9 	.word	0x00001df9
     258:	00000af9 	.word	0x00000af9
     25c:	e000e100 	.word	0xe000e100

00000260 <tc_callback_to_counter>:
#include <asf.h>

/** TC Callback function.
 */
void tc_callback_to_counter(struct tc_module *const module_inst)
{
     260:	b510      	push	{r4, lr}
     262:	1c04      	adds	r4, r0, #0
	static uint32_t count = 0;
	count ++;
     264:	4b08      	ldr	r3, [pc, #32]	; (288 <tc_callback_to_counter+0x28>)
     266:	681a      	ldr	r2, [r3, #0]
     268:	1c50      	adds	r0, r2, #1
     26a:	6018      	str	r0, [r3, #0]
	if(count%800 == 0){
     26c:	21c8      	movs	r1, #200	; 0xc8
     26e:	0089      	lsls	r1, r1, #2
     270:	4b06      	ldr	r3, [pc, #24]	; (28c <tc_callback_to_counter+0x2c>)
     272:	4798      	blx	r3
     274:	2900      	cmp	r1, #0
     276:	d102      	bne.n	27e <tc_callback_to_counter+0x1e>
		printf("The output is triggered by TC counter\r\n");
     278:	4805      	ldr	r0, [pc, #20]	; (290 <tc_callback_to_counter+0x30>)
     27a:	4b06      	ldr	r3, [pc, #24]	; (294 <tc_callback_to_counter+0x34>)
     27c:	4798      	blx	r3
	}

	tc_set_count_value(module_inst,TC_COUNT_VALUE);
     27e:	1c20      	adds	r0, r4, #0
     280:	4905      	ldr	r1, [pc, #20]	; (298 <tc_callback_to_counter+0x38>)
     282:	4b06      	ldr	r3, [pc, #24]	; (29c <tc_callback_to_counter+0x3c>)
     284:	4798      	blx	r3
}
     286:	bd10      	pop	{r4, pc}
     288:	200000b8 	.word	0x200000b8
     28c:	00001c49 	.word	0x00001c49
     290:	0000276c 	.word	0x0000276c
     294:	00001de5 	.word	0x00001de5
     298:	0000d8ef 	.word	0x0000d8ef
     29c:	00001939 	.word	0x00001939

000002a0 <configure_tc>:

/** Configures  TC function with the  driver.
 */
void configure_tc(void)
{
     2a0:	b510      	push	{r4, lr}
     2a2:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     2a4:	2200      	movs	r2, #0
     2a6:	2300      	movs	r3, #0
     2a8:	4669      	mov	r1, sp
     2aa:	700a      	strb	r2, [r1, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     2ac:	70ca      	strb	r2, [r1, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
     2ae:	2100      	movs	r1, #0
     2b0:	4668      	mov	r0, sp
     2b2:	8082      	strh	r2, [r0, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     2b4:	7181      	strb	r1, [r0, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     2b6:	71c3      	strb	r3, [r0, #7]
	config->run_in_standby             = false;
     2b8:	7043      	strb	r3, [r0, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
     2ba:	7083      	strb	r3, [r0, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     2bc:	7203      	strb	r3, [r0, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     2be:	7243      	strb	r3, [r0, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     2c0:	7283      	strb	r3, [r0, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     2c2:	72c3      	strb	r3, [r0, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     2c4:	7303      	strb	r3, [r0, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     2c6:	7383      	strb	r3, [r0, #14]
	config->oneshot                    = false;
     2c8:	7343      	strb	r3, [r0, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     2ca:	7403      	strb	r3, [r0, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     2cc:	9205      	str	r2, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     2ce:	9206      	str	r2, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     2d0:	7703      	strb	r3, [r0, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     2d2:	9208      	str	r2, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     2d4:	9209      	str	r2, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     2d6:	8542      	strh	r2, [r0, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     2d8:	8582      	strh	r2, [r0, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
     2da:	2334      	movs	r3, #52	; 0x34
     2dc:	466a      	mov	r2, sp
     2de:	54c1      	strb	r1, [r0, r3]
	struct tc_config config_tc;

	tc_get_config_defaults(&config_tc);
	config_tc.counter_size    = TC_COUNTER_SIZE_16BIT;
	config_tc.counter_16_bit.value = TC_COUNT_VALUE;
     2e0:	4b08      	ldr	r3, [pc, #32]	; (304 <configure_tc+0x64>)
     2e2:	8503      	strh	r3, [r0, #40]	; 0x28

	tc_init(&tc_instance, TC3, &config_tc);
     2e4:	4c08      	ldr	r4, [pc, #32]	; (308 <configure_tc+0x68>)
     2e6:	1c20      	adds	r0, r4, #0
     2e8:	4908      	ldr	r1, [pc, #32]	; (30c <configure_tc+0x6c>)
     2ea:	4b09      	ldr	r3, [pc, #36]	; (310 <configure_tc+0x70>)
     2ec:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2ee:	6822      	ldr	r2, [r4, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
     2f0:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     2f2:	2b00      	cmp	r3, #0
     2f4:	d1fc      	bne.n	2f0 <configure_tc+0x50>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     2f6:	6811      	ldr	r1, [r2, #0]
     2f8:	3302      	adds	r3, #2
     2fa:	430b      	orrs	r3, r1
     2fc:	6013      	str	r3, [r2, #0]
	tc_enable(&tc_instance);
}
     2fe:	b00e      	add	sp, #56	; 0x38
     300:	bd10      	pop	{r4, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	ffffd8ef 	.word	0xffffd8ef
     308:	200000f8 	.word	0x200000f8
     30c:	42003c00 	.word	0x42003c00
     310:	00001681 	.word	0x00001681

00000314 <configure_tc_callbacks>:

/** Registers TC callback function with the  driver.
 */
void configure_tc_callbacks(void)
{
     314:	b510      	push	{r4, lr}
	tc_register_callback(
     316:	4c0d      	ldr	r4, [pc, #52]	; (34c <configure_tc_callbacks+0x38>)
     318:	1c20      	adds	r0, r4, #0
     31a:	490d      	ldr	r1, [pc, #52]	; (350 <configure_tc_callbacks+0x3c>)
     31c:	2200      	movs	r2, #0
     31e:	4b0d      	ldr	r3, [pc, #52]	; (354 <configure_tc_callbacks+0x40>)
     320:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     322:	6820      	ldr	r0, [r4, #0]
     324:	4b0c      	ldr	r3, [pc, #48]	; (358 <configure_tc_callbacks+0x44>)
     326:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     328:	4b0c      	ldr	r3, [pc, #48]	; (35c <configure_tc_callbacks+0x48>)
     32a:	5c1b      	ldrb	r3, [r3, r0]
     32c:	221f      	movs	r2, #31
     32e:	4013      	ands	r3, r2
     330:	3a1e      	subs	r2, #30
     332:	1c11      	adds	r1, r2, #0
     334:	4099      	lsls	r1, r3
     336:	1c0b      	adds	r3, r1, #0
     338:	4909      	ldr	r1, [pc, #36]	; (360 <configure_tc_callbacks+0x4c>)
     33a:	600b      	str	r3, [r1, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     33c:	7e61      	ldrb	r1, [r4, #25]
     33e:	2301      	movs	r3, #1
     340:	430b      	orrs	r3, r1
     342:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     344:	6823      	ldr	r3, [r4, #0]
     346:	725a      	strb	r2, [r3, #9]
			&tc_instance,
			tc_callback_to_counter,
			TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
}
     348:	bd10      	pop	{r4, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	200000f8 	.word	0x200000f8
     350:	00000261 	.word	0x00000261
     354:	00001565 	.word	0x00001565
     358:	00001645 	.word	0x00001645
     35c:	00002764 	.word	0x00002764
     360:	e000e100 	.word	0xe000e100

00000364 <extint_callback>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     364:	2382      	movs	r3, #130	; 0x82
     366:	05db      	lsls	r3, r3, #23
     368:	6a1b      	ldr	r3, [r3, #32]


static void update_led_state(void)
{
	bool pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	if (pin_state) {
     36a:	00db      	lsls	r3, r3, #3
     36c:	d505      	bpl.n	37a <extint_callback+0x16>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     36e:	2280      	movs	r2, #128	; 0x80
     370:	0212      	lsls	r2, r2, #8
     372:	2382      	movs	r3, #130	; 0x82
     374:	05db      	lsls	r3, r3, #23
     376:	619a      	str	r2, [r3, #24]
     378:	e004      	b.n	384 <extint_callback+0x20>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     37a:	2280      	movs	r2, #128	; 0x80
     37c:	0212      	lsls	r2, r2, #8
     37e:	2382      	movs	r3, #130	; 0x82
     380:	05db      	lsls	r3, r3, #23
     382:	615a      	str	r2, [r3, #20]
}

static void extint_callback(void)
{
	update_led_state();
}
     384:	4770      	bx	lr
     386:	46c0      	nop			; (mov r8, r8)

00000388 <configure_pins>:
#include "UserIO.h"

/*Configures PORT for LED0*/
struct port_config pin;

void configure_pins(void){
     388:	b508      	push	{r3, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     38a:	4907      	ldr	r1, [pc, #28]	; (3a8 <configure_pins+0x20>)
     38c:	2301      	movs	r3, #1
     38e:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     390:	2200      	movs	r2, #0
     392:	708a      	strb	r2, [r1, #2]
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
     394:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED0_PIN, &pin);
     396:	200f      	movs	r0, #15
     398:	4b04      	ldr	r3, [pc, #16]	; (3ac <configure_pins+0x24>)
     39a:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     39c:	2280      	movs	r2, #128	; 0x80
     39e:	0212      	lsls	r2, r2, #8
     3a0:	2382      	movs	r3, #130	; 0x82
     3a2:	05db      	lsls	r3, r3, #23
     3a4:	619a      	str	r2, [r3, #24]

	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
}
     3a6:	bd08      	pop	{r3, pc}
     3a8:	20000114 	.word	0x20000114
     3ac:	00000691 	.word	0x00000691

000003b0 <configure_eic_callback>:

/** Configures and registers the External Interrupt callback function with the
 *  driver.
 */
void configure_eic_callback(void)
{
     3b0:	b508      	push	{r3, lr}
	extint_register_callback(extint_callback,
     3b2:	4805      	ldr	r0, [pc, #20]	; (3c8 <configure_eic_callback+0x18>)
     3b4:	2108      	movs	r1, #8
     3b6:	2200      	movs	r2, #0
     3b8:	4b04      	ldr	r3, [pc, #16]	; (3cc <configure_eic_callback+0x1c>)
     3ba:	4798      	blx	r3
			BUTTON_0_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,
     3bc:	2008      	movs	r0, #8
     3be:	2100      	movs	r1, #0
     3c0:	4b03      	ldr	r3, [pc, #12]	; (3d0 <configure_eic_callback+0x20>)
     3c2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     3c4:	bd08      	pop	{r3, pc}
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	00000365 	.word	0x00000365
     3cc:	00000479 	.word	0x00000479
     3d0:	000004a5 	.word	0x000004a5

000003d4 <configure_extint>:

/** Configures the External Interrupt Controller to detect changes in the board
 *  button state.
 */
void configure_extint(void)
{
     3d4:	b510      	push	{r4, lr}
     3d6:	b084      	sub	sp, #16
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
     3d8:	ac01      	add	r4, sp, #4
     3da:	1c20      	adds	r0, r4, #0
     3dc:	4b07      	ldr	r3, [pc, #28]	; (3fc <configure_extint+0x28>)
     3de:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
     3e0:	231c      	movs	r3, #28
     3e2:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
     3e4:	2300      	movs	r3, #0
     3e6:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
     3e8:	3303      	adds	r3, #3
     3ea:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
     3ec:	3b02      	subs	r3, #2
     3ee:	72a3      	strb	r3, [r4, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
     3f0:	2008      	movs	r0, #8
     3f2:	1c21      	adds	r1, r4, #0
     3f4:	4b02      	ldr	r3, [pc, #8]	; (400 <configure_extint+0x2c>)
     3f6:	4798      	blx	r3
}
     3f8:	b004      	add	sp, #16
     3fa:	bd10      	pop	{r4, pc}
     3fc:	000005f1 	.word	0x000005f1
     400:	00000605 	.word	0x00000605

00000404 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     404:	4770      	bx	lr
     406:	46c0      	nop			; (mov r8, r8)

00000408 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     408:	4b0c      	ldr	r3, [pc, #48]	; (43c <cpu_irq_enter_critical+0x34>)
     40a:	681b      	ldr	r3, [r3, #0]
     40c:	2b00      	cmp	r3, #0
     40e:	d110      	bne.n	432 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     410:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     414:	2b00      	cmp	r3, #0
     416:	d109      	bne.n	42c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     418:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     41a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     41e:	2200      	movs	r2, #0
     420:	4b07      	ldr	r3, [pc, #28]	; (440 <cpu_irq_enter_critical+0x38>)
     422:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     424:	3201      	adds	r2, #1
     426:	4b07      	ldr	r3, [pc, #28]	; (444 <cpu_irq_enter_critical+0x3c>)
     428:	701a      	strb	r2, [r3, #0]
     42a:	e002      	b.n	432 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     42c:	2200      	movs	r2, #0
     42e:	4b05      	ldr	r3, [pc, #20]	; (444 <cpu_irq_enter_critical+0x3c>)
     430:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     432:	4a02      	ldr	r2, [pc, #8]	; (43c <cpu_irq_enter_critical+0x34>)
     434:	6813      	ldr	r3, [r2, #0]
     436:	3301      	adds	r3, #1
     438:	6013      	str	r3, [r2, #0]
}
     43a:	4770      	bx	lr
     43c:	200000bc 	.word	0x200000bc
     440:	20000000 	.word	0x20000000
     444:	200000c0 	.word	0x200000c0

00000448 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     448:	4b08      	ldr	r3, [pc, #32]	; (46c <cpu_irq_leave_critical+0x24>)
     44a:	681a      	ldr	r2, [r3, #0]
     44c:	3a01      	subs	r2, #1
     44e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     450:	681b      	ldr	r3, [r3, #0]
     452:	2b00      	cmp	r3, #0
     454:	d109      	bne.n	46a <cpu_irq_leave_critical+0x22>
     456:	4b06      	ldr	r3, [pc, #24]	; (470 <cpu_irq_leave_critical+0x28>)
     458:	781b      	ldrb	r3, [r3, #0]
     45a:	2b00      	cmp	r3, #0
     45c:	d005      	beq.n	46a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     45e:	2201      	movs	r2, #1
     460:	4b04      	ldr	r3, [pc, #16]	; (474 <cpu_irq_leave_critical+0x2c>)
     462:	701a      	strb	r2, [r3, #0]
     464:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     468:	b662      	cpsie	i
	}
}
     46a:	4770      	bx	lr
     46c:	200000bc 	.word	0x200000bc
     470:	200000c0 	.word	0x200000c0
     474:	20000000 	.word	0x20000000

00000478 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     478:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     47a:	2a00      	cmp	r2, #0
     47c:	d10d      	bne.n	49a <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     47e:	008b      	lsls	r3, r1, #2
     480:	4a07      	ldr	r2, [pc, #28]	; (4a0 <extint_register_callback+0x28>)
     482:	589b      	ldr	r3, [r3, r2]
     484:	2b00      	cmp	r3, #0
     486:	d103      	bne.n	490 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     488:	0089      	lsls	r1, r1, #2
     48a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     48c:	2300      	movs	r3, #0
     48e:	e004      	b.n	49a <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     490:	4283      	cmp	r3, r0
     492:	d001      	beq.n	498 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     494:	231d      	movs	r3, #29
     496:	e000      	b.n	49a <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     498:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     49a:	1c18      	adds	r0, r3, #0
     49c:	4770      	bx	lr
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	20000118 	.word	0x20000118

000004a4 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     4a4:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     4a6:	2900      	cmp	r1, #0
     4a8:	d107      	bne.n	4ba <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     4aa:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     4ac:	281f      	cmp	r0, #31
     4ae:	d800      	bhi.n	4b2 <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     4b0:	4a03      	ldr	r2, [pc, #12]	; (4c0 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     4b2:	2301      	movs	r3, #1
     4b4:	4083      	lsls	r3, r0
     4b6:	6113      	str	r3, [r2, #16]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     4b8:	2300      	movs	r3, #0
}
     4ba:	1c18      	adds	r0, r3, #0
     4bc:	4770      	bx	lr
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	40002800 	.word	0x40002800

000004c4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     4c4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4c6:	2200      	movs	r2, #0
     4c8:	4b15      	ldr	r3, [pc, #84]	; (520 <EIC_Handler+0x5c>)
     4ca:	701a      	strb	r2, [r3, #0]
     4cc:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     4ce:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     4d0:	4e14      	ldr	r6, [pc, #80]	; (524 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4d2:	4c13      	ldr	r4, [pc, #76]	; (520 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     4d4:	2b1f      	cmp	r3, #31
     4d6:	d919      	bls.n	50c <EIC_Handler+0x48>
     4d8:	e00f      	b.n	4fa <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     4da:	2100      	movs	r1, #0
     4dc:	e000      	b.n	4e0 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     4de:	4912      	ldr	r1, [pc, #72]	; (528 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     4e0:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     4e2:	009b      	lsls	r3, r3, #2
     4e4:	599b      	ldr	r3, [r3, r6]
     4e6:	2b00      	cmp	r3, #0
     4e8:	d000      	beq.n	4ec <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     4ea:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4ec:	7823      	ldrb	r3, [r4, #0]
     4ee:	3301      	adds	r3, #1
     4f0:	b2db      	uxtb	r3, r3
     4f2:	7023      	strb	r3, [r4, #0]
     4f4:	2b0f      	cmp	r3, #15
     4f6:	d9ed      	bls.n	4d4 <EIC_Handler+0x10>
     4f8:	e011      	b.n	51e <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     4fa:	1c29      	adds	r1, r5, #0
     4fc:	4019      	ands	r1, r3
     4fe:	2201      	movs	r2, #1
     500:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     502:	2100      	movs	r1, #0
     504:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     506:	4211      	tst	r1, r2
     508:	d1e7      	bne.n	4da <EIC_Handler+0x16>
     50a:	e7ef      	b.n	4ec <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     50c:	1c29      	adds	r1, r5, #0
     50e:	4019      	ands	r1, r3
     510:	2201      	movs	r2, #1
     512:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     514:	4904      	ldr	r1, [pc, #16]	; (528 <EIC_Handler+0x64>)
     516:	6949      	ldr	r1, [r1, #20]
     518:	4211      	tst	r1, r2
     51a:	d1e0      	bne.n	4de <EIC_Handler+0x1a>
     51c:	e7e6      	b.n	4ec <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     51e:	bd70      	pop	{r4, r5, r6, pc}
     520:	20000117 	.word	0x20000117
     524:	20000118 	.word	0x20000118
     528:	40002800 	.word	0x40002800

0000052c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     52c:	4a06      	ldr	r2, [pc, #24]	; (548 <_extint_enable+0x1c>)
     52e:	7811      	ldrb	r1, [r2, #0]
     530:	2302      	movs	r3, #2
     532:	430b      	orrs	r3, r1
     534:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     536:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     538:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     53a:	6853      	ldr	r3, [r2, #4]
     53c:	4219      	tst	r1, r3
     53e:	d1fc      	bne.n	53a <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     540:	6853      	ldr	r3, [r2, #4]
     542:	4218      	tst	r0, r3
     544:	d1f9      	bne.n	53a <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     546:	4770      	bx	lr
     548:	40002800 	.word	0x40002800

0000054c <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     54c:	4a06      	ldr	r2, [pc, #24]	; (568 <_extint_disable+0x1c>)
     54e:	7813      	ldrb	r3, [r2, #0]
     550:	2102      	movs	r1, #2
     552:	438b      	bics	r3, r1
     554:	7013      	strb	r3, [r2, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     556:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     558:	6853      	ldr	r3, [r2, #4]
     55a:	4219      	tst	r1, r3
     55c:	d1fc      	bne.n	558 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     55e:	6853      	ldr	r3, [r2, #4]
     560:	4218      	tst	r0, r3
     562:	d1f9      	bne.n	558 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     564:	4770      	bx	lr
     566:	46c0      	nop			; (mov r8, r8)
     568:	40002800 	.word	0x40002800

0000056c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     56c:	b500      	push	{lr}
     56e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     570:	4a18      	ldr	r2, [pc, #96]	; (5d4 <_system_extint_init+0x68>)
     572:	6953      	ldr	r3, [r2, #20]
     574:	2180      	movs	r1, #128	; 0x80
     576:	00c9      	lsls	r1, r1, #3
     578:	430b      	orrs	r3, r1
     57a:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     57c:	a901      	add	r1, sp, #4
     57e:	2300      	movs	r3, #0
     580:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     582:	2002      	movs	r0, #2
     584:	4b14      	ldr	r3, [pc, #80]	; (5d8 <_system_extint_init+0x6c>)
     586:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     588:	2002      	movs	r0, #2
     58a:	4b14      	ldr	r3, [pc, #80]	; (5dc <_system_extint_init+0x70>)
     58c:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     58e:	4a14      	ldr	r2, [pc, #80]	; (5e0 <_system_extint_init+0x74>)
     590:	7811      	ldrb	r1, [r2, #0]
     592:	2301      	movs	r3, #1
     594:	430b      	orrs	r3, r1
     596:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     598:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     59a:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     59c:	6853      	ldr	r3, [r2, #4]
     59e:	4219      	tst	r1, r3
     5a0:	d1fc      	bne.n	59c <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     5a2:	6853      	ldr	r3, [r2, #4]
     5a4:	4218      	tst	r0, r3
     5a6:	d009      	beq.n	5bc <_system_extint_init+0x50>
     5a8:	e7f8      	b.n	59c <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     5aa:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     5ac:	428b      	cmp	r3, r1
     5ae:	d1fc      	bne.n	5aa <_system_extint_init+0x3e>
     5b0:	2208      	movs	r2, #8
     5b2:	4b0c      	ldr	r3, [pc, #48]	; (5e4 <_system_extint_init+0x78>)
     5b4:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     5b6:	4b0c      	ldr	r3, [pc, #48]	; (5e8 <_system_extint_init+0x7c>)
     5b8:	4798      	blx	r3
     5ba:	e009      	b.n	5d0 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     5bc:	4a08      	ldr	r2, [pc, #32]	; (5e0 <_system_extint_init+0x74>)
     5be:	7813      	ldrb	r3, [r2, #0]
     5c0:	2110      	movs	r1, #16
     5c2:	438b      	bics	r3, r1
     5c4:	7013      	strb	r3, [r2, #0]
     5c6:	4b09      	ldr	r3, [pc, #36]	; (5ec <_system_extint_init+0x80>)
     5c8:	1c19      	adds	r1, r3, #0
     5ca:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     5cc:	2200      	movs	r2, #0
     5ce:	e7ec      	b.n	5aa <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     5d0:	b003      	add	sp, #12
     5d2:	bd00      	pop	{pc}
     5d4:	40000800 	.word	0x40000800
     5d8:	0000140d 	.word	0x0000140d
     5dc:	000013a5 	.word	0x000013a5
     5e0:	40002800 	.word	0x40002800
     5e4:	e000e100 	.word	0xe000e100
     5e8:	0000052d 	.word	0x0000052d
     5ec:	20000118 	.word	0x20000118

000005f0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     5f0:	2300      	movs	r3, #0
     5f2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     5f4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     5f6:	2201      	movs	r2, #1
     5f8:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     5fa:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     5fc:	3201      	adds	r2, #1
     5fe:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     600:	7243      	strb	r3, [r0, #9]
}
     602:	4770      	bx	lr

00000604 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     604:	b5f0      	push	{r4, r5, r6, r7, lr}
     606:	b083      	sub	sp, #12
     608:	1c05      	adds	r5, r0, #0
     60a:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     60c:	4b1c      	ldr	r3, [pc, #112]	; (680 <extint_chan_set_config+0x7c>)
     60e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     610:	a901      	add	r1, sp, #4
     612:	2300      	movs	r3, #0
     614:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     616:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     618:	7923      	ldrb	r3, [r4, #4]
     61a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     61c:	7a23      	ldrb	r3, [r4, #8]
     61e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     620:	7820      	ldrb	r0, [r4, #0]
     622:	4b18      	ldr	r3, [pc, #96]	; (684 <extint_chan_set_config+0x80>)
     624:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     626:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     628:	2d1f      	cmp	r5, #31
     62a:	d800      	bhi.n	62e <extint_chan_set_config+0x2a>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     62c:	4e16      	ldr	r6, [pc, #88]	; (688 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     62e:	2207      	movs	r2, #7
     630:	402a      	ands	r2, r5
     632:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     634:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     636:	7aa3      	ldrb	r3, [r4, #10]
     638:	2b00      	cmp	r3, #0
     63a:	d001      	beq.n	640 <extint_chan_set_config+0x3c>
		new_config |= EIC_CONFIG_FILTEN0;
     63c:	2308      	movs	r3, #8
     63e:	4318      	orrs	r0, r3
     640:	08eb      	lsrs	r3, r5, #3
     642:	009b      	lsls	r3, r3, #2
     644:	18f3      	adds	r3, r6, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     646:	69d9      	ldr	r1, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     648:	4090      	lsls	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     64a:	270f      	movs	r7, #15
     64c:	4097      	lsls	r7, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     64e:	43b9      	bics	r1, r7
     650:	1c0a      	adds	r2, r1, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     652:	4302      	orrs	r2, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     654:	61da      	str	r2, [r3, #28]
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
#if (SAMC21)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     656:	7a63      	ldrb	r3, [r4, #9]
     658:	2b00      	cmp	r3, #0
     65a:	d006      	beq.n	66a <extint_chan_set_config+0x66>
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
     65c:	69b3      	ldr	r3, [r6, #24]
     65e:	2201      	movs	r2, #1
     660:	40aa      	lsls	r2, r5
     662:	1c15      	adds	r5, r2, #0
     664:	431d      	orrs	r5, r3
     666:	61b5      	str	r5, [r6, #24]
     668:	e006      	b.n	678 <extint_chan_set_config+0x74>
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
     66a:	69b3      	ldr	r3, [r6, #24]
     66c:	041b      	lsls	r3, r3, #16
     66e:	0c1b      	lsrs	r3, r3, #16
     670:	2201      	movs	r2, #1
     672:	40aa      	lsls	r2, r5
     674:	4393      	bics	r3, r2
     676:	61b3      	str	r3, [r6, #24]
	}
#endif
	_extint_enable();
     678:	4b04      	ldr	r3, [pc, #16]	; (68c <extint_chan_set_config+0x88>)
     67a:	4798      	blx	r3
}
     67c:	b003      	add	sp, #12
     67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     680:	0000054d 	.word	0x0000054d
     684:	00001509 	.word	0x00001509
     688:	40002800 	.word	0x40002800
     68c:	0000052d 	.word	0x0000052d

00000690 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     690:	b500      	push	{lr}
     692:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     694:	ab01      	add	r3, sp, #4
     696:	2280      	movs	r2, #128	; 0x80
     698:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     69a:	780a      	ldrb	r2, [r1, #0]
     69c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     69e:	784a      	ldrb	r2, [r1, #1]
     6a0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     6a2:	788a      	ldrb	r2, [r1, #2]
     6a4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     6a6:	1c19      	adds	r1, r3, #0
     6a8:	4b01      	ldr	r3, [pc, #4]	; (6b0 <port_pin_set_config+0x20>)
     6aa:	4798      	blx	r3
}
     6ac:	b003      	add	sp, #12
     6ae:	bd00      	pop	{pc}
     6b0:	00001509 	.word	0x00001509

000006b4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     6b4:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     6b6:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6b8:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     6ba:	4281      	cmp	r1, r0
     6bc:	d30c      	bcc.n	6d8 <_sercom_get_sync_baud_val+0x24>
     6be:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     6c0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     6c2:	3301      	adds	r3, #1
     6c4:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     6c6:	4288      	cmp	r0, r1
     6c8:	d9fa      	bls.n	6c0 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     6ca:	3b01      	subs	r3, #1
     6cc:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6ce:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     6d0:	2bff      	cmp	r3, #255	; 0xff
     6d2:	d801      	bhi.n	6d8 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     6d4:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     6d6:	2400      	movs	r4, #0
	}
}
     6d8:	1c20      	adds	r0, r4, #0
     6da:	bd10      	pop	{r4, pc}

000006dc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6de:	465f      	mov	r7, fp
     6e0:	4656      	mov	r6, sl
     6e2:	464d      	mov	r5, r9
     6e4:	4644      	mov	r4, r8
     6e6:	b4f0      	push	{r4, r5, r6, r7}
     6e8:	b089      	sub	sp, #36	; 0x24
     6ea:	1c1c      	adds	r4, r3, #0
     6ec:	ab12      	add	r3, sp, #72	; 0x48
     6ee:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     6f0:	1c06      	adds	r6, r0, #0
     6f2:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6f4:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     6f6:	428e      	cmp	r6, r1
     6f8:	d900      	bls.n	6fc <_sercom_get_async_baud_val+0x20>
     6fa:	e0c7      	b.n	88c <_sercom_get_async_baud_val+0x1b0>
     6fc:	1c25      	adds	r5, r4, #0
     6fe:	9207      	str	r2, [sp, #28]
     700:	1c0c      	adds	r4, r1, #0
     702:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     704:	2d00      	cmp	r5, #0
     706:	d151      	bne.n	7ac <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     708:	1c18      	adds	r0, r3, #0
     70a:	2100      	movs	r1, #0
     70c:	2300      	movs	r3, #0
     70e:	4d63      	ldr	r5, [pc, #396]	; (89c <_sercom_get_async_baud_val+0x1c0>)
     710:	47a8      	blx	r5
     712:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     714:	1c26      	adds	r6, r4, #0
     716:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     718:	2300      	movs	r3, #0
     71a:	2400      	movs	r4, #0
     71c:	9302      	str	r3, [sp, #8]
     71e:	9403      	str	r4, [sp, #12]
     720:	2200      	movs	r2, #0
     722:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     724:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     726:	2120      	movs	r1, #32
     728:	468c      	mov	ip, r1
     72a:	391f      	subs	r1, #31
     72c:	9600      	str	r6, [sp, #0]
     72e:	9701      	str	r7, [sp, #4]
     730:	2420      	movs	r4, #32
     732:	4264      	negs	r4, r4
     734:	1904      	adds	r4, r0, r4
     736:	d403      	bmi.n	740 <_sercom_get_async_baud_val+0x64>
     738:	1c0d      	adds	r5, r1, #0
     73a:	40a5      	lsls	r5, r4
     73c:	46a8      	mov	r8, r5
     73e:	e004      	b.n	74a <_sercom_get_async_baud_val+0x6e>
     740:	4664      	mov	r4, ip
     742:	1a24      	subs	r4, r4, r0
     744:	1c0d      	adds	r5, r1, #0
     746:	40e5      	lsrs	r5, r4
     748:	46a8      	mov	r8, r5
     74a:	1c0c      	adds	r4, r1, #0
     74c:	4084      	lsls	r4, r0
     74e:	46a1      	mov	r9, r4

		r = r << 1;
     750:	1c14      	adds	r4, r2, #0
     752:	1c1d      	adds	r5, r3, #0
     754:	18a4      	adds	r4, r4, r2
     756:	415d      	adcs	r5, r3
     758:	1c22      	adds	r2, r4, #0
     75a:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     75c:	465e      	mov	r6, fp
     75e:	4647      	mov	r7, r8
     760:	423e      	tst	r6, r7
     762:	d003      	beq.n	76c <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     764:	1c0e      	adds	r6, r1, #0
     766:	4326      	orrs	r6, r4
     768:	1c32      	adds	r2, r6, #0
     76a:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     76c:	9c01      	ldr	r4, [sp, #4]
     76e:	429c      	cmp	r4, r3
     770:	d810      	bhi.n	794 <_sercom_get_async_baud_val+0xb8>
     772:	d102      	bne.n	77a <_sercom_get_async_baud_val+0x9e>
     774:	9c00      	ldr	r4, [sp, #0]
     776:	4294      	cmp	r4, r2
     778:	d80c      	bhi.n	794 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     77a:	9c00      	ldr	r4, [sp, #0]
     77c:	9d01      	ldr	r5, [sp, #4]
     77e:	1b12      	subs	r2, r2, r4
     780:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     782:	464d      	mov	r5, r9
     784:	9e02      	ldr	r6, [sp, #8]
     786:	9f03      	ldr	r7, [sp, #12]
     788:	4335      	orrs	r5, r6
     78a:	1c3c      	adds	r4, r7, #0
     78c:	4646      	mov	r6, r8
     78e:	4334      	orrs	r4, r6
     790:	9502      	str	r5, [sp, #8]
     792:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     794:	3801      	subs	r0, #1
     796:	d2cb      	bcs.n	730 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     798:	2200      	movs	r2, #0
     79a:	2301      	movs	r3, #1
     79c:	9802      	ldr	r0, [sp, #8]
     79e:	9903      	ldr	r1, [sp, #12]
     7a0:	1a12      	subs	r2, r2, r0
     7a2:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     7a4:	0c11      	lsrs	r1, r2, #16
     7a6:	041b      	lsls	r3, r3, #16
     7a8:	4319      	orrs	r1, r3
     7aa:	e06c      	b.n	886 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     7ac:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     7ae:	2d01      	cmp	r5, #1
     7b0:	d169      	bne.n	886 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     7b2:	0f61      	lsrs	r1, r4, #29
     7b4:	1c0f      	adds	r7, r1, #0
     7b6:	00e1      	lsls	r1, r4, #3
     7b8:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     7ba:	1c18      	adds	r0, r3, #0
     7bc:	2100      	movs	r1, #0
     7be:	2300      	movs	r3, #0
     7c0:	4c36      	ldr	r4, [pc, #216]	; (89c <_sercom_get_async_baud_val+0x1c0>)
     7c2:	47a0      	blx	r4
     7c4:	1c04      	adds	r4, r0, #0
     7c6:	1c0d      	adds	r5, r1, #0
     7c8:	2300      	movs	r3, #0
     7ca:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     7cc:	3320      	adds	r3, #32
     7ce:	469b      	mov	fp, r3
     7d0:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     7d2:	4663      	mov	r3, ip
     7d4:	9305      	str	r3, [sp, #20]
     7d6:	46b9      	mov	r9, r7
     7d8:	466b      	mov	r3, sp
     7da:	7d1b      	ldrb	r3, [r3, #20]
     7dc:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     7de:	2300      	movs	r3, #0
     7e0:	469c      	mov	ip, r3
     7e2:	2000      	movs	r0, #0
     7e4:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     7e6:	223f      	movs	r2, #63	; 0x3f
     7e8:	9400      	str	r4, [sp, #0]
     7ea:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     7ec:	2320      	movs	r3, #32
     7ee:	425b      	negs	r3, r3
     7f0:	18d3      	adds	r3, r2, r3
     7f2:	d403      	bmi.n	7fc <_sercom_get_async_baud_val+0x120>
     7f4:	1c34      	adds	r4, r6, #0
     7f6:	409c      	lsls	r4, r3
     7f8:	1c23      	adds	r3, r4, #0
     7fa:	e004      	b.n	806 <_sercom_get_async_baud_val+0x12a>
     7fc:	465b      	mov	r3, fp
     7fe:	1a9b      	subs	r3, r3, r2
     800:	1c34      	adds	r4, r6, #0
     802:	40dc      	lsrs	r4, r3
     804:	1c23      	adds	r3, r4, #0
     806:	1c37      	adds	r7, r6, #0
     808:	4097      	lsls	r7, r2

		r = r << 1;
     80a:	1c04      	adds	r4, r0, #0
     80c:	1c0d      	adds	r5, r1, #0
     80e:	1824      	adds	r4, r4, r0
     810:	414d      	adcs	r5, r1
     812:	1c20      	adds	r0, r4, #0
     814:	1c29      	adds	r1, r5, #0
     816:	9002      	str	r0, [sp, #8]
     818:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     81a:	4644      	mov	r4, r8
     81c:	403c      	ands	r4, r7
     81e:	46a2      	mov	sl, r4
     820:	464c      	mov	r4, r9
     822:	4023      	ands	r3, r4
     824:	4654      	mov	r4, sl
     826:	4323      	orrs	r3, r4
     828:	d005      	beq.n	836 <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     82a:	9b02      	ldr	r3, [sp, #8]
     82c:	9c03      	ldr	r4, [sp, #12]
     82e:	1c1d      	adds	r5, r3, #0
     830:	4335      	orrs	r5, r6
     832:	1c28      	adds	r0, r5, #0
     834:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     836:	9b01      	ldr	r3, [sp, #4]
     838:	428b      	cmp	r3, r1
     83a:	d80a      	bhi.n	852 <_sercom_get_async_baud_val+0x176>
     83c:	d102      	bne.n	844 <_sercom_get_async_baud_val+0x168>
     83e:	9b00      	ldr	r3, [sp, #0]
     840:	4283      	cmp	r3, r0
     842:	d806      	bhi.n	852 <_sercom_get_async_baud_val+0x176>
			r = r - d;
     844:	9b00      	ldr	r3, [sp, #0]
     846:	9c01      	ldr	r4, [sp, #4]
     848:	1ac0      	subs	r0, r0, r3
     84a:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     84c:	4663      	mov	r3, ip
     84e:	433b      	orrs	r3, r7
     850:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     852:	3a01      	subs	r2, #1
     854:	d2ca      	bcs.n	7ec <_sercom_get_async_baud_val+0x110>
     856:	9c00      	ldr	r4, [sp, #0]
     858:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     85a:	4662      	mov	r2, ip
     85c:	9905      	ldr	r1, [sp, #20]
     85e:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     860:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     862:	4a0f      	ldr	r2, [pc, #60]	; (8a0 <_sercom_get_async_baud_val+0x1c4>)
     864:	4293      	cmp	r3, r2
     866:	d908      	bls.n	87a <_sercom_get_async_baud_val+0x19e>
     868:	9a06      	ldr	r2, [sp, #24]
     86a:	3201      	adds	r2, #1
     86c:	b2d2      	uxtb	r2, r2
     86e:	9206      	str	r2, [sp, #24]
     870:	1c0a      	adds	r2, r1, #0
     872:	3201      	adds	r2, #1
     874:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     876:	2a08      	cmp	r2, #8
     878:	d1ae      	bne.n	7d8 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     87a:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     87c:	9a06      	ldr	r2, [sp, #24]
     87e:	2a08      	cmp	r2, #8
     880:	d004      	beq.n	88c <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     882:	0351      	lsls	r1, r2, #13
     884:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     886:	9b07      	ldr	r3, [sp, #28]
     888:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     88a:	2500      	movs	r5, #0
}
     88c:	1c28      	adds	r0, r5, #0
     88e:	b009      	add	sp, #36	; 0x24
     890:	bc3c      	pop	{r2, r3, r4, r5}
     892:	4690      	mov	r8, r2
     894:	4699      	mov	r9, r3
     896:	46a2      	mov	sl, r4
     898:	46ab      	mov	fp, r5
     89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     89c:	00001c61 	.word	0x00001c61
     8a0:	00001fff 	.word	0x00001fff

000008a4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     8a4:	b510      	push	{r4, lr}
     8a6:	b082      	sub	sp, #8
     8a8:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     8aa:	4b0e      	ldr	r3, [pc, #56]	; (8e4 <sercom_set_gclk_generator+0x40>)
     8ac:	781b      	ldrb	r3, [r3, #0]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d001      	beq.n	8b6 <sercom_set_gclk_generator+0x12>
     8b2:	2900      	cmp	r1, #0
     8b4:	d00d      	beq.n	8d2 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     8b6:	a901      	add	r1, sp, #4
     8b8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     8ba:	2012      	movs	r0, #18
     8bc:	4b0a      	ldr	r3, [pc, #40]	; (8e8 <sercom_set_gclk_generator+0x44>)
     8be:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     8c0:	2012      	movs	r0, #18
     8c2:	4b0a      	ldr	r3, [pc, #40]	; (8ec <sercom_set_gclk_generator+0x48>)
     8c4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     8c6:	4b07      	ldr	r3, [pc, #28]	; (8e4 <sercom_set_gclk_generator+0x40>)
     8c8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     8ca:	2201      	movs	r2, #1
     8cc:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     8ce:	2000      	movs	r0, #0
     8d0:	e006      	b.n	8e0 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     8d2:	4b04      	ldr	r3, [pc, #16]	; (8e4 <sercom_set_gclk_generator+0x40>)
     8d4:	785b      	ldrb	r3, [r3, #1]
     8d6:	4283      	cmp	r3, r0
     8d8:	d001      	beq.n	8de <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     8da:	201d      	movs	r0, #29
     8dc:	e000      	b.n	8e0 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     8de:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     8e0:	b002      	add	sp, #8
     8e2:	bd10      	pop	{r4, pc}
     8e4:	200000c4 	.word	0x200000c4
     8e8:	0000140d 	.word	0x0000140d
     8ec:	000013a5 	.word	0x000013a5

000008f0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8f0:	4b44      	ldr	r3, [pc, #272]	; (a04 <_sercom_get_default_pad+0x114>)
     8f2:	4298      	cmp	r0, r3
     8f4:	d033      	beq.n	95e <_sercom_get_default_pad+0x6e>
     8f6:	d806      	bhi.n	906 <_sercom_get_default_pad+0x16>
     8f8:	4b43      	ldr	r3, [pc, #268]	; (a08 <_sercom_get_default_pad+0x118>)
     8fa:	4298      	cmp	r0, r3
     8fc:	d00d      	beq.n	91a <_sercom_get_default_pad+0x2a>
     8fe:	4b43      	ldr	r3, [pc, #268]	; (a0c <_sercom_get_default_pad+0x11c>)
     900:	4298      	cmp	r0, r3
     902:	d01b      	beq.n	93c <_sercom_get_default_pad+0x4c>
     904:	e06f      	b.n	9e6 <_sercom_get_default_pad+0xf6>
     906:	4b42      	ldr	r3, [pc, #264]	; (a10 <_sercom_get_default_pad+0x120>)
     908:	4298      	cmp	r0, r3
     90a:	d04a      	beq.n	9a2 <_sercom_get_default_pad+0xb2>
     90c:	4b41      	ldr	r3, [pc, #260]	; (a14 <_sercom_get_default_pad+0x124>)
     90e:	4298      	cmp	r0, r3
     910:	d058      	beq.n	9c4 <_sercom_get_default_pad+0xd4>
     912:	4b41      	ldr	r3, [pc, #260]	; (a18 <_sercom_get_default_pad+0x128>)
     914:	4298      	cmp	r0, r3
     916:	d166      	bne.n	9e6 <_sercom_get_default_pad+0xf6>
     918:	e032      	b.n	980 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     91a:	2901      	cmp	r1, #1
     91c:	d006      	beq.n	92c <_sercom_get_default_pad+0x3c>
     91e:	2900      	cmp	r1, #0
     920:	d063      	beq.n	9ea <_sercom_get_default_pad+0xfa>
     922:	2902      	cmp	r1, #2
     924:	d006      	beq.n	934 <_sercom_get_default_pad+0x44>
     926:	2903      	cmp	r1, #3
     928:	d006      	beq.n	938 <_sercom_get_default_pad+0x48>
     92a:	e001      	b.n	930 <_sercom_get_default_pad+0x40>
     92c:	483b      	ldr	r0, [pc, #236]	; (a1c <_sercom_get_default_pad+0x12c>)
     92e:	e067      	b.n	a00 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     930:	2000      	movs	r0, #0
     932:	e065      	b.n	a00 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     934:	483a      	ldr	r0, [pc, #232]	; (a20 <_sercom_get_default_pad+0x130>)
     936:	e063      	b.n	a00 <_sercom_get_default_pad+0x110>
     938:	483a      	ldr	r0, [pc, #232]	; (a24 <_sercom_get_default_pad+0x134>)
     93a:	e061      	b.n	a00 <_sercom_get_default_pad+0x110>
     93c:	2901      	cmp	r1, #1
     93e:	d006      	beq.n	94e <_sercom_get_default_pad+0x5e>
     940:	2900      	cmp	r1, #0
     942:	d054      	beq.n	9ee <_sercom_get_default_pad+0xfe>
     944:	2902      	cmp	r1, #2
     946:	d006      	beq.n	956 <_sercom_get_default_pad+0x66>
     948:	2903      	cmp	r1, #3
     94a:	d006      	beq.n	95a <_sercom_get_default_pad+0x6a>
     94c:	e001      	b.n	952 <_sercom_get_default_pad+0x62>
     94e:	4836      	ldr	r0, [pc, #216]	; (a28 <_sercom_get_default_pad+0x138>)
     950:	e056      	b.n	a00 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     952:	2000      	movs	r0, #0
     954:	e054      	b.n	a00 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     956:	4835      	ldr	r0, [pc, #212]	; (a2c <_sercom_get_default_pad+0x13c>)
     958:	e052      	b.n	a00 <_sercom_get_default_pad+0x110>
     95a:	4835      	ldr	r0, [pc, #212]	; (a30 <_sercom_get_default_pad+0x140>)
     95c:	e050      	b.n	a00 <_sercom_get_default_pad+0x110>
     95e:	2901      	cmp	r1, #1
     960:	d006      	beq.n	970 <_sercom_get_default_pad+0x80>
     962:	2900      	cmp	r1, #0
     964:	d045      	beq.n	9f2 <_sercom_get_default_pad+0x102>
     966:	2902      	cmp	r1, #2
     968:	d006      	beq.n	978 <_sercom_get_default_pad+0x88>
     96a:	2903      	cmp	r1, #3
     96c:	d006      	beq.n	97c <_sercom_get_default_pad+0x8c>
     96e:	e001      	b.n	974 <_sercom_get_default_pad+0x84>
     970:	4830      	ldr	r0, [pc, #192]	; (a34 <_sercom_get_default_pad+0x144>)
     972:	e045      	b.n	a00 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     974:	2000      	movs	r0, #0
     976:	e043      	b.n	a00 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     978:	482f      	ldr	r0, [pc, #188]	; (a38 <_sercom_get_default_pad+0x148>)
     97a:	e041      	b.n	a00 <_sercom_get_default_pad+0x110>
     97c:	482f      	ldr	r0, [pc, #188]	; (a3c <_sercom_get_default_pad+0x14c>)
     97e:	e03f      	b.n	a00 <_sercom_get_default_pad+0x110>
     980:	2901      	cmp	r1, #1
     982:	d006      	beq.n	992 <_sercom_get_default_pad+0xa2>
     984:	2900      	cmp	r1, #0
     986:	d036      	beq.n	9f6 <_sercom_get_default_pad+0x106>
     988:	2902      	cmp	r1, #2
     98a:	d006      	beq.n	99a <_sercom_get_default_pad+0xaa>
     98c:	2903      	cmp	r1, #3
     98e:	d006      	beq.n	99e <_sercom_get_default_pad+0xae>
     990:	e001      	b.n	996 <_sercom_get_default_pad+0xa6>
     992:	482b      	ldr	r0, [pc, #172]	; (a40 <_sercom_get_default_pad+0x150>)
     994:	e034      	b.n	a00 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     996:	2000      	movs	r0, #0
     998:	e032      	b.n	a00 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     99a:	482a      	ldr	r0, [pc, #168]	; (a44 <_sercom_get_default_pad+0x154>)
     99c:	e030      	b.n	a00 <_sercom_get_default_pad+0x110>
     99e:	482a      	ldr	r0, [pc, #168]	; (a48 <_sercom_get_default_pad+0x158>)
     9a0:	e02e      	b.n	a00 <_sercom_get_default_pad+0x110>
     9a2:	2901      	cmp	r1, #1
     9a4:	d006      	beq.n	9b4 <_sercom_get_default_pad+0xc4>
     9a6:	2900      	cmp	r1, #0
     9a8:	d027      	beq.n	9fa <_sercom_get_default_pad+0x10a>
     9aa:	2902      	cmp	r1, #2
     9ac:	d006      	beq.n	9bc <_sercom_get_default_pad+0xcc>
     9ae:	2903      	cmp	r1, #3
     9b0:	d006      	beq.n	9c0 <_sercom_get_default_pad+0xd0>
     9b2:	e001      	b.n	9b8 <_sercom_get_default_pad+0xc8>
     9b4:	4825      	ldr	r0, [pc, #148]	; (a4c <_sercom_get_default_pad+0x15c>)
     9b6:	e023      	b.n	a00 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     9b8:	2000      	movs	r0, #0
     9ba:	e021      	b.n	a00 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9bc:	4824      	ldr	r0, [pc, #144]	; (a50 <_sercom_get_default_pad+0x160>)
     9be:	e01f      	b.n	a00 <_sercom_get_default_pad+0x110>
     9c0:	4824      	ldr	r0, [pc, #144]	; (a54 <_sercom_get_default_pad+0x164>)
     9c2:	e01d      	b.n	a00 <_sercom_get_default_pad+0x110>
     9c4:	2901      	cmp	r1, #1
     9c6:	d006      	beq.n	9d6 <_sercom_get_default_pad+0xe6>
     9c8:	2900      	cmp	r1, #0
     9ca:	d018      	beq.n	9fe <_sercom_get_default_pad+0x10e>
     9cc:	2902      	cmp	r1, #2
     9ce:	d006      	beq.n	9de <_sercom_get_default_pad+0xee>
     9d0:	2903      	cmp	r1, #3
     9d2:	d006      	beq.n	9e2 <_sercom_get_default_pad+0xf2>
     9d4:	e001      	b.n	9da <_sercom_get_default_pad+0xea>
     9d6:	4820      	ldr	r0, [pc, #128]	; (a58 <_sercom_get_default_pad+0x168>)
     9d8:	e012      	b.n	a00 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     9da:	2000      	movs	r0, #0
     9dc:	e010      	b.n	a00 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9de:	481f      	ldr	r0, [pc, #124]	; (a5c <_sercom_get_default_pad+0x16c>)
     9e0:	e00e      	b.n	a00 <_sercom_get_default_pad+0x110>
     9e2:	481f      	ldr	r0, [pc, #124]	; (a60 <_sercom_get_default_pad+0x170>)
     9e4:	e00c      	b.n	a00 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     9e6:	2000      	movs	r0, #0
     9e8:	e00a      	b.n	a00 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ea:	481e      	ldr	r0, [pc, #120]	; (a64 <_sercom_get_default_pad+0x174>)
     9ec:	e008      	b.n	a00 <_sercom_get_default_pad+0x110>
     9ee:	481e      	ldr	r0, [pc, #120]	; (a68 <_sercom_get_default_pad+0x178>)
     9f0:	e006      	b.n	a00 <_sercom_get_default_pad+0x110>
     9f2:	481e      	ldr	r0, [pc, #120]	; (a6c <_sercom_get_default_pad+0x17c>)
     9f4:	e004      	b.n	a00 <_sercom_get_default_pad+0x110>
     9f6:	481e      	ldr	r0, [pc, #120]	; (a70 <_sercom_get_default_pad+0x180>)
     9f8:	e002      	b.n	a00 <_sercom_get_default_pad+0x110>
     9fa:	481e      	ldr	r0, [pc, #120]	; (a74 <_sercom_get_default_pad+0x184>)
     9fc:	e000      	b.n	a00 <_sercom_get_default_pad+0x110>
     9fe:	481e      	ldr	r0, [pc, #120]	; (a78 <_sercom_get_default_pad+0x188>)
	}

	Assert(false);
	return 0;
}
     a00:	4770      	bx	lr
     a02:	46c0      	nop			; (mov r8, r8)
     a04:	42000c00 	.word	0x42000c00
     a08:	42000400 	.word	0x42000400
     a0c:	42000800 	.word	0x42000800
     a10:	42001400 	.word	0x42001400
     a14:	42001800 	.word	0x42001800
     a18:	42001000 	.word	0x42001000
     a1c:	00050003 	.word	0x00050003
     a20:	00060003 	.word	0x00060003
     a24:	00070003 	.word	0x00070003
     a28:	00110002 	.word	0x00110002
     a2c:	00120002 	.word	0x00120002
     a30:	00130002 	.word	0x00130002
     a34:	000d0002 	.word	0x000d0002
     a38:	000e0002 	.word	0x000e0002
     a3c:	000f0002 	.word	0x000f0002
     a40:	00170002 	.word	0x00170002
     a44:	00180002 	.word	0x00180002
     a48:	00190002 	.word	0x00190002
     a4c:	00290003 	.word	0x00290003
     a50:	002a0003 	.word	0x002a0003
     a54:	002b0003 	.word	0x002b0003
     a58:	00230003 	.word	0x00230003
     a5c:	00200003 	.word	0x00200003
     a60:	00210003 	.word	0x00210003
     a64:	00040003 	.word	0x00040003
     a68:	00100002 	.word	0x00100002
     a6c:	000c0002 	.word	0x000c0002
     a70:	00160002 	.word	0x00160002
     a74:	00280003 	.word	0x00280003
     a78:	00220003 	.word	0x00220003

00000a7c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a7c:	b530      	push	{r4, r5, lr}
     a7e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a80:	4b0c      	ldr	r3, [pc, #48]	; (ab4 <_sercom_get_sercom_inst_index+0x38>)
     a82:	466a      	mov	r2, sp
     a84:	cb32      	ldmia	r3!, {r1, r4, r5}
     a86:	c232      	stmia	r2!, {r1, r4, r5}
     a88:	cb32      	ldmia	r3!, {r1, r4, r5}
     a8a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a8c:	9b00      	ldr	r3, [sp, #0]
     a8e:	4283      	cmp	r3, r0
     a90:	d006      	beq.n	aa0 <_sercom_get_sercom_inst_index+0x24>
     a92:	2301      	movs	r3, #1
     a94:	009a      	lsls	r2, r3, #2
     a96:	4669      	mov	r1, sp
     a98:	5852      	ldr	r2, [r2, r1]
     a9a:	4282      	cmp	r2, r0
     a9c:	d103      	bne.n	aa6 <_sercom_get_sercom_inst_index+0x2a>
     a9e:	e000      	b.n	aa2 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     aa0:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     aa2:	b2d8      	uxtb	r0, r3
     aa4:	e003      	b.n	aae <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     aa6:	3301      	adds	r3, #1
     aa8:	2b06      	cmp	r3, #6
     aaa:	d1f3      	bne.n	a94 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     aac:	2000      	movs	r0, #0
}
     aae:	b007      	add	sp, #28
     ab0:	bd30      	pop	{r4, r5, pc}
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	00002794 	.word	0x00002794

00000ab8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     ab8:	4770      	bx	lr
     aba:	46c0      	nop			; (mov r8, r8)

00000abc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     abc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     abe:	4b0a      	ldr	r3, [pc, #40]	; (ae8 <_sercom_set_handler+0x2c>)
     ac0:	781b      	ldrb	r3, [r3, #0]
     ac2:	2b00      	cmp	r3, #0
     ac4:	d10c      	bne.n	ae0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ac6:	4f09      	ldr	r7, [pc, #36]	; (aec <_sercom_set_handler+0x30>)
     ac8:	4e09      	ldr	r6, [pc, #36]	; (af0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     aca:	4d0a      	ldr	r5, [pc, #40]	; (af4 <_sercom_set_handler+0x38>)
     acc:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ace:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     ad0:	195a      	adds	r2, r3, r5
     ad2:	6014      	str	r4, [r2, #0]
     ad4:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ad6:	2b18      	cmp	r3, #24
     ad8:	d1f9      	bne.n	ace <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     ada:	2201      	movs	r2, #1
     adc:	4b02      	ldr	r3, [pc, #8]	; (ae8 <_sercom_set_handler+0x2c>)
     ade:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     ae0:	0080      	lsls	r0, r0, #2
     ae2:	4b02      	ldr	r3, [pc, #8]	; (aec <_sercom_set_handler+0x30>)
     ae4:	50c1      	str	r1, [r0, r3]
}
     ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ae8:	200000c6 	.word	0x200000c6
     aec:	200000c8 	.word	0x200000c8
     af0:	00000ab9 	.word	0x00000ab9
     af4:	20000158 	.word	0x20000158

00000af8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     af8:	b510      	push	{r4, lr}
     afa:	b082      	sub	sp, #8
     afc:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     afe:	4668      	mov	r0, sp
     b00:	4905      	ldr	r1, [pc, #20]	; (b18 <_sercom_get_interrupt_vector+0x20>)
     b02:	2206      	movs	r2, #6
     b04:	4b05      	ldr	r3, [pc, #20]	; (b1c <_sercom_get_interrupt_vector+0x24>)
     b06:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     b08:	1c20      	adds	r0, r4, #0
     b0a:	4b05      	ldr	r3, [pc, #20]	; (b20 <_sercom_get_interrupt_vector+0x28>)
     b0c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     b0e:	466b      	mov	r3, sp
     b10:	5618      	ldrsb	r0, [r3, r0]
}
     b12:	b002      	add	sp, #8
     b14:	bd10      	pop	{r4, pc}
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	000027ac 	.word	0x000027ac
     b1c:	00001d01 	.word	0x00001d01
     b20:	00000a7d 	.word	0x00000a7d

00000b24 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     b24:	b508      	push	{r3, lr}
     b26:	4b02      	ldr	r3, [pc, #8]	; (b30 <SERCOM0_Handler+0xc>)
     b28:	681b      	ldr	r3, [r3, #0]
     b2a:	2000      	movs	r0, #0
     b2c:	4798      	blx	r3
     b2e:	bd08      	pop	{r3, pc}
     b30:	200000c8 	.word	0x200000c8

00000b34 <SERCOM1_Handler>:
     b34:	b508      	push	{r3, lr}
     b36:	4b02      	ldr	r3, [pc, #8]	; (b40 <SERCOM1_Handler+0xc>)
     b38:	685b      	ldr	r3, [r3, #4]
     b3a:	2001      	movs	r0, #1
     b3c:	4798      	blx	r3
     b3e:	bd08      	pop	{r3, pc}
     b40:	200000c8 	.word	0x200000c8

00000b44 <SERCOM2_Handler>:
     b44:	b508      	push	{r3, lr}
     b46:	4b02      	ldr	r3, [pc, #8]	; (b50 <SERCOM2_Handler+0xc>)
     b48:	689b      	ldr	r3, [r3, #8]
     b4a:	2002      	movs	r0, #2
     b4c:	4798      	blx	r3
     b4e:	bd08      	pop	{r3, pc}
     b50:	200000c8 	.word	0x200000c8

00000b54 <SERCOM3_Handler>:
     b54:	b508      	push	{r3, lr}
     b56:	4b02      	ldr	r3, [pc, #8]	; (b60 <SERCOM3_Handler+0xc>)
     b58:	68db      	ldr	r3, [r3, #12]
     b5a:	2003      	movs	r0, #3
     b5c:	4798      	blx	r3
     b5e:	bd08      	pop	{r3, pc}
     b60:	200000c8 	.word	0x200000c8

00000b64 <SERCOM4_Handler>:
     b64:	b508      	push	{r3, lr}
     b66:	4b02      	ldr	r3, [pc, #8]	; (b70 <SERCOM4_Handler+0xc>)
     b68:	691b      	ldr	r3, [r3, #16]
     b6a:	2004      	movs	r0, #4
     b6c:	4798      	blx	r3
     b6e:	bd08      	pop	{r3, pc}
     b70:	200000c8 	.word	0x200000c8

00000b74 <SERCOM5_Handler>:
     b74:	b508      	push	{r3, lr}
     b76:	4b02      	ldr	r3, [pc, #8]	; (b80 <SERCOM5_Handler+0xc>)
     b78:	695b      	ldr	r3, [r3, #20]
     b7a:	2005      	movs	r0, #5
     b7c:	4798      	blx	r3
     b7e:	bd08      	pop	{r3, pc}
     b80:	200000c8 	.word	0x200000c8

00000b84 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     b84:	b5f0      	push	{r4, r5, r6, r7, lr}
     b86:	465f      	mov	r7, fp
     b88:	4656      	mov	r6, sl
     b8a:	464d      	mov	r5, r9
     b8c:	4644      	mov	r4, r8
     b8e:	b4f0      	push	{r4, r5, r6, r7}
     b90:	b091      	sub	sp, #68	; 0x44
     b92:	1c05      	adds	r5, r0, #0
     b94:	1c0c      	adds	r4, r1, #0
     b96:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     b98:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b9a:	1c08      	adds	r0, r1, #0
     b9c:	4bce      	ldr	r3, [pc, #824]	; (ed8 <usart_init+0x354>)
     b9e:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ba0:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     ba2:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ba4:	07d2      	lsls	r2, r2, #31
     ba6:	d500      	bpl.n	baa <usart_init+0x26>
     ba8:	e18e      	b.n	ec8 <usart_init+0x344>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     baa:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     bac:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     bae:	0792      	lsls	r2, r2, #30
     bb0:	d500      	bpl.n	bb4 <usart_init+0x30>
     bb2:	e189      	b.n	ec8 <usart_init+0x344>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     bb4:	49c9      	ldr	r1, [pc, #804]	; (edc <usart_init+0x358>)
     bb6:	69ca      	ldr	r2, [r1, #28]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     bb8:	1c47      	adds	r7, r0, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     bba:	3b1b      	subs	r3, #27
     bbc:	40bb      	lsls	r3, r7
     bbe:	4313      	orrs	r3, r2
     bc0:	61cb      	str	r3, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     bc2:	a90f      	add	r1, sp, #60	; 0x3c
     bc4:	2735      	movs	r7, #53	; 0x35
     bc6:	5df3      	ldrb	r3, [r6, r7]
     bc8:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bca:	3013      	adds	r0, #19

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     bcc:	b2c3      	uxtb	r3, r0
     bce:	9302      	str	r3, [sp, #8]
     bd0:	1c18      	adds	r0, r3, #0
     bd2:	4bc3      	ldr	r3, [pc, #780]	; (ee0 <usart_init+0x35c>)
     bd4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     bd6:	9802      	ldr	r0, [sp, #8]
     bd8:	4bc2      	ldr	r3, [pc, #776]	; (ee4 <usart_init+0x360>)
     bda:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bdc:	5df0      	ldrb	r0, [r6, r7]
     bde:	2100      	movs	r1, #0
     be0:	4bc1      	ldr	r3, [pc, #772]	; (ee8 <usart_init+0x364>)
     be2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     be4:	7af3      	ldrb	r3, [r6, #11]
     be6:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     be8:	232c      	movs	r3, #44	; 0x2c
     bea:	5cf3      	ldrb	r3, [r6, r3]
     bec:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     bee:	232d      	movs	r3, #45	; 0x2d
     bf0:	5cf3      	ldrb	r3, [r6, r3]
     bf2:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     bf4:	7ef3      	ldrb	r3, [r6, #27]
     bf6:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     bf8:	2324      	movs	r3, #36	; 0x24
     bfa:	5cf3      	ldrb	r3, [r6, r3]
     bfc:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     bfe:	682b      	ldr	r3, [r5, #0]
     c00:	4698      	mov	r8, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c02:	1c18      	adds	r0, r3, #0
     c04:	4bb4      	ldr	r3, [pc, #720]	; (ed8 <usart_init+0x354>)
     c06:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c08:	3013      	adds	r0, #19
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     c0a:	2200      	movs	r2, #0
     c0c:	230e      	movs	r3, #14
     c0e:	a906      	add	r1, sp, #24
     c10:	468c      	mov	ip, r1
     c12:	4463      	add	r3, ip
     c14:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     c16:	8a33      	ldrh	r3, [r6, #16]
     c18:	469a      	mov	sl, r3
     c1a:	2380      	movs	r3, #128	; 0x80
     c1c:	01db      	lsls	r3, r3, #7
     c1e:	459a      	cmp	sl, r3
     c20:	d019      	beq.n	c56 <usart_init+0xd2>
     c22:	d804      	bhi.n	c2e <usart_init+0xaa>
     c24:	2380      	movs	r3, #128	; 0x80
     c26:	019b      	lsls	r3, r3, #6
     c28:	459a      	cmp	sl, r3
     c2a:	d00a      	beq.n	c42 <usart_init+0xbe>
     c2c:	e12d      	b.n	e8a <usart_init+0x306>
     c2e:	23c0      	movs	r3, #192	; 0xc0
     c30:	01db      	lsls	r3, r3, #7
     c32:	459a      	cmp	sl, r3
     c34:	d00a      	beq.n	c4c <usart_init+0xc8>
     c36:	2380      	movs	r3, #128	; 0x80
     c38:	021b      	lsls	r3, r3, #8
     c3a:	459a      	cmp	sl, r3
     c3c:	d100      	bne.n	c40 <usart_init+0xbc>
     c3e:	e129      	b.n	e94 <usart_init+0x310>
     c40:	e123      	b.n	e8a <usart_init+0x306>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c42:	2310      	movs	r3, #16
     c44:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c46:	3b0f      	subs	r3, #15
     c48:	9307      	str	r3, [sp, #28]
     c4a:	e127      	b.n	e9c <usart_init+0x318>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c4c:	2308      	movs	r3, #8
     c4e:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c50:	3b07      	subs	r3, #7
     c52:	9307      	str	r3, [sp, #28]
     c54:	e122      	b.n	e9c <usart_init+0x318>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     c56:	6833      	ldr	r3, [r6, #0]
     c58:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     c5a:	68f3      	ldr	r3, [r6, #12]
     c5c:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     c5e:	6973      	ldr	r3, [r6, #20]
     c60:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c62:	7e33      	ldrb	r3, [r6, #24]
     c64:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c66:	232e      	movs	r3, #46	; 0x2e
     c68:	5cf3      	ldrb	r3, [r6, r3]
     c6a:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     c6c:	6872      	ldr	r2, [r6, #4]
     c6e:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     c70:	2a00      	cmp	r2, #0
     c72:	d015      	beq.n	ca0 <usart_init+0x11c>
     c74:	2380      	movs	r3, #128	; 0x80
     c76:	055b      	lsls	r3, r3, #21
     c78:	429a      	cmp	r2, r3
     c7a:	d136      	bne.n	cea <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     c7c:	232f      	movs	r3, #47	; 0x2f
     c7e:	5cf3      	ldrb	r3, [r6, r3]
     c80:	2b00      	cmp	r3, #0
     c82:	d136      	bne.n	cf2 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     c84:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     c86:	4699      	mov	r9, r3
     c88:	b2c0      	uxtb	r0, r0
     c8a:	4b98      	ldr	r3, [pc, #608]	; (eec <usart_init+0x368>)
     c8c:	4798      	blx	r3
     c8e:	1c01      	adds	r1, r0, #0
     c90:	4648      	mov	r0, r9
     c92:	220e      	movs	r2, #14
     c94:	ab06      	add	r3, sp, #24
     c96:	469c      	mov	ip, r3
     c98:	4462      	add	r2, ip
     c9a:	4b95      	ldr	r3, [pc, #596]	; (ef0 <usart_init+0x36c>)
     c9c:	4798      	blx	r3
     c9e:	e025      	b.n	cec <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ca0:	2308      	movs	r3, #8
     ca2:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ca4:	2300      	movs	r3, #0
     ca6:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     ca8:	232f      	movs	r3, #47	; 0x2f
     caa:	5cf3      	ldrb	r3, [r6, r3]
     cac:	2b00      	cmp	r3, #0
     cae:	d00b      	beq.n	cc8 <usart_init+0x144>
				status_code =
     cb0:	464b      	mov	r3, r9
     cb2:	9300      	str	r3, [sp, #0]
     cb4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     cb6:	6b31      	ldr	r1, [r6, #48]	; 0x30
     cb8:	220e      	movs	r2, #14
     cba:	ab06      	add	r3, sp, #24
     cbc:	469c      	mov	ip, r3
     cbe:	4462      	add	r2, ip
     cc0:	9b07      	ldr	r3, [sp, #28]
     cc2:	4f8c      	ldr	r7, [pc, #560]	; (ef4 <usart_init+0x370>)
     cc4:	47b8      	blx	r7
     cc6:	e011      	b.n	cec <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     cc8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     cca:	1c1f      	adds	r7, r3, #0
     ccc:	b2c0      	uxtb	r0, r0
     cce:	4b87      	ldr	r3, [pc, #540]	; (eec <usart_init+0x368>)
     cd0:	4798      	blx	r3
     cd2:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     cd4:	464b      	mov	r3, r9
     cd6:	9300      	str	r3, [sp, #0]
     cd8:	1c38      	adds	r0, r7, #0
     cda:	220e      	movs	r2, #14
     cdc:	ab06      	add	r3, sp, #24
     cde:	469c      	mov	ip, r3
     ce0:	4462      	add	r2, ip
     ce2:	9b07      	ldr	r3, [sp, #28]
     ce4:	4f83      	ldr	r7, [pc, #524]	; (ef4 <usart_init+0x370>)
     ce6:	47b8      	blx	r7
     ce8:	e000      	b.n	cec <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     cea:	2000      	movs	r0, #0
     cec:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     cee:	d000      	beq.n	cf2 <usart_init+0x16e>
     cf0:	e0ea      	b.n	ec8 <usart_init+0x344>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     cf2:	7e73      	ldrb	r3, [r6, #25]
     cf4:	2b00      	cmp	r3, #0
     cf6:	d002      	beq.n	cfe <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     cf8:	7eb3      	ldrb	r3, [r6, #26]
     cfa:	4642      	mov	r2, r8
     cfc:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     cfe:	682a      	ldr	r2, [r5, #0]
     d00:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d02:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     d04:	2b00      	cmp	r3, #0
     d06:	d1fc      	bne.n	d02 <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     d08:	330e      	adds	r3, #14
     d0a:	aa06      	add	r2, sp, #24
     d0c:	4694      	mov	ip, r2
     d0e:	4463      	add	r3, ip
     d10:	881b      	ldrh	r3, [r3, #0]
     d12:	4642      	mov	r2, r8
     d14:	8193      	strh	r3, [r2, #12]
     d16:	9b02      	ldr	r3, [sp, #8]
     d18:	465a      	mov	r2, fp
     d1a:	4313      	orrs	r3, r2
     d1c:	9a03      	ldr	r2, [sp, #12]
     d1e:	4313      	orrs	r3, r2
     d20:	433b      	orrs	r3, r7
     d22:	4652      	mov	r2, sl
     d24:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     d26:	9a04      	ldr	r2, [sp, #16]
     d28:	0212      	lsls	r2, r2, #8
     d2a:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d2c:	9a05      	ldr	r2, [sp, #20]
     d2e:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
     d30:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     d32:	232f      	movs	r3, #47	; 0x2f
     d34:	5cf3      	ldrb	r3, [r6, r3]
     d36:	2b00      	cmp	r3, #0
     d38:	d101      	bne.n	d3e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     d3a:	3304      	adds	r3, #4
     d3c:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d3e:	2324      	movs	r3, #36	; 0x24
     d40:	5cf3      	ldrb	r3, [r6, r3]
     d42:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     d44:	7e72      	ldrb	r2, [r6, #25]
     d46:	0293      	lsls	r3, r2, #10
     d48:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d4a:	2226      	movs	r2, #38	; 0x26
     d4c:	5cb2      	ldrb	r2, [r6, r2]
     d4e:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d50:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     d52:	222c      	movs	r2, #44	; 0x2c
     d54:	5cb2      	ldrb	r2, [r6, r2]
     d56:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d58:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     d5a:	222d      	movs	r2, #45	; 0x2d
     d5c:	5cb2      	ldrb	r2, [r6, r2]
     d5e:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     d60:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     d62:	7af1      	ldrb	r1, [r6, #11]
     d64:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     d66:	8933      	ldrh	r3, [r6, #8]
     d68:	2bff      	cmp	r3, #255	; 0xff
     d6a:	d004      	beq.n	d76 <usart_init+0x1f2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     d6c:	2280      	movs	r2, #128	; 0x80
     d6e:	0452      	lsls	r2, r2, #17
     d70:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     d72:	4319      	orrs	r1, r3
     d74:	e005      	b.n	d82 <usart_init+0x1fe>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     d76:	7ef3      	ldrb	r3, [r6, #27]
     d78:	2b00      	cmp	r3, #0
     d7a:	d002      	beq.n	d82 <usart_init+0x1fe>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     d7c:	2380      	movs	r3, #128	; 0x80
     d7e:	04db      	lsls	r3, r3, #19
     d80:	431f      	orrs	r7, r3
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     d82:	4643      	mov	r3, r8
     d84:	689a      	ldr	r2, [r3, #8]
						| config->lin_header_delay
     d86:	8c30      	ldrh	r0, [r6, #32]
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     d88:	2307      	movs	r3, #7
     d8a:	4013      	ands	r3, r2
						| config->lin_header_delay
     d8c:	4303      	orrs	r3, r0
						| config->lin_break_length;
     d8e:	8c72      	ldrh	r2, [r6, #34]	; 0x22
     d90:	4313      	orrs	r3, r2
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     d92:	4642      	mov	r2, r8
     d94:	6093      	str	r3, [r2, #8]
						| config->lin_header_delay
						| config->lin_break_length;

	if (config->lin_node != LIN_INVALID_MODE) {
     d96:	69f3      	ldr	r3, [r6, #28]
     d98:	2b00      	cmp	r3, #0
     d9a:	d002      	beq.n	da2 <usart_init+0x21e>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
     d9c:	4a56      	ldr	r2, [pc, #344]	; (ef8 <usart_init+0x374>)
     d9e:	4017      	ands	r7, r2
		ctrla |= config->lin_node;
     da0:	431f      	orrs	r7, r3
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     da2:	2334      	movs	r3, #52	; 0x34
     da4:	5cf3      	ldrb	r3, [r6, r3]
     da6:	2b00      	cmp	r3, #0
     da8:	d103      	bne.n	db2 <usart_init+0x22e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     daa:	4b54      	ldr	r3, [pc, #336]	; (efc <usart_init+0x378>)
     dac:	789b      	ldrb	r3, [r3, #2]
     dae:	079b      	lsls	r3, r3, #30
     db0:	d501      	bpl.n	db6 <usart_init+0x232>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     db2:	2380      	movs	r3, #128	; 0x80
     db4:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     db6:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     db8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     dba:	2b00      	cmp	r3, #0
     dbc:	d1fc      	bne.n	db8 <usart_init+0x234>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     dbe:	4643      	mov	r3, r8
     dc0:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     dc2:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     dc4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     dc6:	2b00      	cmp	r3, #0
     dc8:	d1fc      	bne.n	dc4 <usart_init+0x240>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     dca:	4643      	mov	r3, r8
     dcc:	601f      	str	r7, [r3, #0]

#ifdef FEATURE_USART_RS485
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
     dce:	681a      	ldr	r2, [r3, #0]
     dd0:	23f0      	movs	r3, #240	; 0xf0
     dd2:	051b      	lsls	r3, r3, #20
     dd4:	4013      	ands	r3, r2
     dd6:	22e0      	movs	r2, #224	; 0xe0
     dd8:	04d2      	lsls	r2, r2, #19
     dda:	4293      	cmp	r3, r2
     ddc:	d042      	beq.n	e64 <usart_init+0x2e0>
		SERCOM_USART_CTRLA_FORM(0x07)) {
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
     dde:	4643      	mov	r3, r8
     de0:	689b      	ldr	r3, [r3, #8]
     de2:	2207      	movs	r2, #7
     de4:	4393      	bics	r3, r2
     de6:	4642      	mov	r2, r8
     de8:	6093      	str	r3, [r2, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
     dea:	6892      	ldr	r2, [r2, #8]
     dec:	2325      	movs	r3, #37	; 0x25
     dee:	5cf3      	ldrb	r3, [r6, r3]
     df0:	2107      	movs	r1, #7
     df2:	400b      	ands	r3, r1
     df4:	4313      	orrs	r3, r2
     df6:	4642      	mov	r2, r8
     df8:	6093      	str	r3, [r2, #8]
     dfa:	e033      	b.n	e64 <usart_init+0x2e0>
     dfc:	b2f9      	uxtb	r1, r7
     dfe:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     e00:	aa0a      	add	r2, sp, #40	; 0x28
     e02:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     e04:	2800      	cmp	r0, #0
     e06:	d102      	bne.n	e0e <usart_init+0x28a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     e08:	1c20      	adds	r0, r4, #0
     e0a:	4b3d      	ldr	r3, [pc, #244]	; (f00 <usart_init+0x37c>)
     e0c:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     e0e:	1c43      	adds	r3, r0, #1
     e10:	d005      	beq.n	e1e <usart_init+0x29a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     e12:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     e14:	0c00      	lsrs	r0, r0, #16
     e16:	b2c0      	uxtb	r0, r0
     e18:	1c31      	adds	r1, r6, #0
     e1a:	4b3a      	ldr	r3, [pc, #232]	; (f04 <usart_init+0x380>)
     e1c:	4798      	blx	r3
     e1e:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     e20:	2f04      	cmp	r7, #4
     e22:	d1eb      	bne.n	dfc <usart_init+0x278>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     e24:	2300      	movs	r3, #0
     e26:	60eb      	str	r3, [r5, #12]
     e28:	612b      	str	r3, [r5, #16]
     e2a:	616b      	str	r3, [r5, #20]
     e2c:	61ab      	str	r3, [r5, #24]
     e2e:	61eb      	str	r3, [r5, #28]
     e30:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     e32:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     e34:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     e36:	2200      	movs	r2, #0
     e38:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     e3a:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     e3c:	3330      	adds	r3, #48	; 0x30
     e3e:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     e40:	3301      	adds	r3, #1
     e42:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     e44:	3301      	adds	r3, #1
     e46:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     e48:	3301      	adds	r3, #1
     e4a:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     e4c:	6828      	ldr	r0, [r5, #0]
     e4e:	4b22      	ldr	r3, [pc, #136]	; (ed8 <usart_init+0x354>)
     e50:	4798      	blx	r3
     e52:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     e54:	492c      	ldr	r1, [pc, #176]	; (f08 <usart_init+0x384>)
     e56:	4b2d      	ldr	r3, [pc, #180]	; (f0c <usart_init+0x388>)
     e58:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     e5a:	00a4      	lsls	r4, r4, #2
     e5c:	4b2c      	ldr	r3, [pc, #176]	; (f10 <usart_init+0x38c>)
     e5e:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     e60:	2300      	movs	r3, #0
     e62:	e031      	b.n	ec8 <usart_init+0x344>
     e64:	ab0e      	add	r3, sp, #56	; 0x38
     e66:	2280      	movs	r2, #128	; 0x80
     e68:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e6a:	2200      	movs	r2, #0
     e6c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     e6e:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     e70:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     e72:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     e74:	930a      	str	r3, [sp, #40]	; 0x28
     e76:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     e78:	930b      	str	r3, [sp, #44]	; 0x2c
     e7a:	6c33      	ldr	r3, [r6, #64]	; 0x40
     e7c:	930c      	str	r3, [sp, #48]	; 0x30
     e7e:	6c73      	ldr	r3, [r6, #68]	; 0x44
     e80:	9302      	str	r3, [sp, #8]
     e82:	930d      	str	r3, [sp, #52]	; 0x34
     e84:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     e86:	ae0e      	add	r6, sp, #56	; 0x38
     e88:	e7b8      	b.n	dfc <usart_init+0x278>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e8a:	2310      	movs	r3, #16
     e8c:	4699      	mov	r9, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e8e:	2300      	movs	r3, #0
     e90:	9307      	str	r3, [sp, #28]
     e92:	e003      	b.n	e9c <usart_init+0x318>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     e94:	2303      	movs	r3, #3
     e96:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e98:	2300      	movs	r3, #0
     e9a:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     e9c:	6833      	ldr	r3, [r6, #0]
     e9e:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     ea0:	68f3      	ldr	r3, [r6, #12]
     ea2:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ea4:	6973      	ldr	r3, [r6, #20]
     ea6:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ea8:	7e33      	ldrb	r3, [r6, #24]
     eaa:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     eac:	232e      	movs	r3, #46	; 0x2e
     eae:	5cf3      	ldrb	r3, [r6, r3]
     eb0:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     eb2:	6872      	ldr	r2, [r6, #4]
     eb4:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     eb6:	2a00      	cmp	r2, #0
     eb8:	d100      	bne.n	ebc <usart_init+0x338>
     eba:	e6f5      	b.n	ca8 <usart_init+0x124>
     ebc:	2380      	movs	r3, #128	; 0x80
     ebe:	055b      	lsls	r3, r3, #21
     ec0:	429a      	cmp	r2, r3
     ec2:	d100      	bne.n	ec6 <usart_init+0x342>
     ec4:	e6da      	b.n	c7c <usart_init+0xf8>
     ec6:	e714      	b.n	cf2 <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     ec8:	1c18      	adds	r0, r3, #0
     eca:	b011      	add	sp, #68	; 0x44
     ecc:	bc3c      	pop	{r2, r3, r4, r5}
     ece:	4690      	mov	r8, r2
     ed0:	4699      	mov	r9, r3
     ed2:	46a2      	mov	sl, r4
     ed4:	46ab      	mov	fp, r5
     ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ed8:	00000a7d 	.word	0x00000a7d
     edc:	40000800 	.word	0x40000800
     ee0:	0000140d 	.word	0x0000140d
     ee4:	000013a5 	.word	0x000013a5
     ee8:	000008a5 	.word	0x000008a5
     eec:	00001431 	.word	0x00001431
     ef0:	000006b5 	.word	0x000006b5
     ef4:	000006dd 	.word	0x000006dd
     ef8:	f0ffffff 	.word	0xf0ffffff
     efc:	41002000 	.word	0x41002000
     f00:	000008f1 	.word	0x000008f1
     f04:	00001509 	.word	0x00001509
     f08:	00000fb9 	.word	0x00000fb9
     f0c:	00000abd 	.word	0x00000abd
     f10:	20000158 	.word	0x20000158

00000f14 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     f14:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f16:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     f18:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     f1a:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     f1c:	2c00      	cmp	r4, #0
     f1e:	d00d      	beq.n	f3c <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     f20:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
     f22:	b280      	uxth	r0, r0
		return STATUS_BUSY;
     f24:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     f26:	2800      	cmp	r0, #0
     f28:	d108      	bne.n	f3c <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f2a:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f2c:	2a00      	cmp	r2, #0
     f2e:	d1fc      	bne.n	f2a <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     f30:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     f32:	2102      	movs	r1, #2
     f34:	7e1a      	ldrb	r2, [r3, #24]
     f36:	420a      	tst	r2, r1
     f38:	d0fc      	beq.n	f34 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     f3a:	2200      	movs	r2, #0
}
     f3c:	1c10      	adds	r0, r2, #0
     f3e:	bd10      	pop	{r4, pc}

00000f40 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     f40:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f42:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     f44:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     f46:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     f48:	2a00      	cmp	r2, #0
     f4a:	d033      	beq.n	fb4 <usart_read_wait+0x74>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     f4c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     f4e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     f50:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     f52:	2a00      	cmp	r2, #0
     f54:	d12e      	bne.n	fb4 <usart_read_wait+0x74>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     f56:	7e22      	ldrb	r2, [r4, #24]
     f58:	0752      	lsls	r2, r2, #29
     f5a:	d52b      	bpl.n	fb4 <usart_read_wait+0x74>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f5c:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f5e:	2b00      	cmp	r3, #0
     f60:	d1fc      	bne.n	f5c <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f62:	8b63      	ldrh	r3, [r4, #26]
     f64:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     f66:	065a      	lsls	r2, r3, #25
     f68:	d021      	beq.n	fae <usart_read_wait+0x6e>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     f6a:	079a      	lsls	r2, r3, #30
     f6c:	d503      	bpl.n	f76 <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     f6e:	2302      	movs	r3, #2
     f70:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
     f72:	3318      	adds	r3, #24
     f74:	e01e      	b.n	fb4 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     f76:	075a      	lsls	r2, r3, #29
     f78:	d503      	bpl.n	f82 <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     f7a:	2304      	movs	r3, #4
     f7c:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
     f7e:	331a      	adds	r3, #26
     f80:	e018      	b.n	fb4 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     f82:	07da      	lsls	r2, r3, #31
     f84:	d503      	bpl.n	f8e <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     f86:	2301      	movs	r3, #1
     f88:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
     f8a:	3312      	adds	r3, #18
     f8c:	e012      	b.n	fb4 <usart_read_wait+0x74>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     f8e:	06da      	lsls	r2, r3, #27
     f90:	d505      	bpl.n	f9e <usart_read_wait+0x5e>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     f92:	8b62      	ldrh	r2, [r4, #26]
     f94:	2310      	movs	r3, #16
     f96:	4313      	orrs	r3, r2
     f98:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
     f9a:	2342      	movs	r3, #66	; 0x42
     f9c:	e00a      	b.n	fb4 <usart_read_wait+0x74>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     f9e:	069b      	lsls	r3, r3, #26
     fa0:	d505      	bpl.n	fae <usart_read_wait+0x6e>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     fa2:	8b62      	ldrh	r2, [r4, #26]
     fa4:	2320      	movs	r3, #32
     fa6:	4313      	orrs	r3, r2
     fa8:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
     faa:	2341      	movs	r3, #65	; 0x41
     fac:	e002      	b.n	fb4 <usart_read_wait+0x74>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     fae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     fb0:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     fb2:	2300      	movs	r3, #0
}
     fb4:	1c18      	adds	r0, r3, #0
     fb6:	bd10      	pop	{r4, pc}

00000fb8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     fba:	0080      	lsls	r0, r0, #2
     fbc:	4b66      	ldr	r3, [pc, #408]	; (1158 <_usart_interrupt_handler+0x1a0>)
     fbe:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     fc0:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     fc2:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     fc4:	2b00      	cmp	r3, #0
     fc6:	d1fc      	bne.n	fc2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     fc8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     fca:	7da6      	ldrb	r6, [r4, #22]
     fcc:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     fce:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     fd0:	5ceb      	ldrb	r3, [r5, r3]
     fd2:	2230      	movs	r2, #48	; 0x30
     fd4:	5caf      	ldrb	r7, [r5, r2]
     fd6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     fd8:	07f3      	lsls	r3, r6, #31
     fda:	d522      	bpl.n	1022 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     fdc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     fde:	b29b      	uxth	r3, r3
     fe0:	2b00      	cmp	r3, #0
     fe2:	d01c      	beq.n	101e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     fe4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     fe6:	7813      	ldrb	r3, [r2, #0]
     fe8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     fea:	1c51      	adds	r1, r2, #1
     fec:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     fee:	7969      	ldrb	r1, [r5, #5]
     ff0:	2901      	cmp	r1, #1
     ff2:	d001      	beq.n	ff8 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     ff4:	b29b      	uxth	r3, r3
     ff6:	e004      	b.n	1002 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     ff8:	7851      	ldrb	r1, [r2, #1]
     ffa:	0209      	lsls	r1, r1, #8
     ffc:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     ffe:	3202      	adds	r2, #2
    1000:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1002:	05db      	lsls	r3, r3, #23
    1004:	0ddb      	lsrs	r3, r3, #23
    1006:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1008:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    100a:	3b01      	subs	r3, #1
    100c:	b29b      	uxth	r3, r3
    100e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1010:	2b00      	cmp	r3, #0
    1012:	d106      	bne.n	1022 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1014:	3301      	adds	r3, #1
    1016:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1018:	3301      	adds	r3, #1
    101a:	75a3      	strb	r3, [r4, #22]
    101c:	e001      	b.n	1022 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    101e:	2301      	movs	r3, #1
    1020:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1022:	07b3      	lsls	r3, r6, #30
    1024:	d509      	bpl.n	103a <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1026:	2302      	movs	r3, #2
    1028:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    102a:	2200      	movs	r2, #0
    102c:	3331      	adds	r3, #49	; 0x31
    102e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1030:	07fb      	lsls	r3, r7, #31
    1032:	d502      	bpl.n	103a <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1034:	1c28      	adds	r0, r5, #0
    1036:	68eb      	ldr	r3, [r5, #12]
    1038:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    103a:	0773      	lsls	r3, r6, #29
    103c:	d56d      	bpl.n	111a <_usart_interrupt_handler+0x162>

		if (module->remaining_rx_buffer_length) {
    103e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1040:	b29b      	uxth	r3, r3
    1042:	2b00      	cmp	r3, #0
    1044:	d067      	beq.n	1116 <_usart_interrupt_handler+0x15e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1046:	8b63      	ldrh	r3, [r4, #26]
    1048:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    104a:	071a      	lsls	r2, r3, #28
    104c:	d402      	bmi.n	1054 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    104e:	227f      	movs	r2, #127	; 0x7f
    1050:	4013      	ands	r3, r2
    1052:	e001      	b.n	1058 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1054:	2277      	movs	r2, #119	; 0x77
    1056:	4013      	ands	r3, r2
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    1058:	065a      	lsls	r2, r3, #25
    105a:	d501      	bpl.n	1060 <_usart_interrupt_handler+0xa8>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    105c:	2240      	movs	r2, #64	; 0x40
    105e:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1060:	2b00      	cmp	r3, #0
    1062:	d036      	beq.n	10d2 <_usart_interrupt_handler+0x11a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1064:	079a      	lsls	r2, r3, #30
    1066:	d507      	bpl.n	1078 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1068:	221a      	movs	r2, #26
    106a:	2332      	movs	r3, #50	; 0x32
    106c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    106e:	8b62      	ldrh	r2, [r4, #26]
    1070:	3b30      	subs	r3, #48	; 0x30
    1072:	4313      	orrs	r3, r2
    1074:	8363      	strh	r3, [r4, #26]
    1076:	e026      	b.n	10c6 <_usart_interrupt_handler+0x10e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1078:	075a      	lsls	r2, r3, #29
    107a:	d507      	bpl.n	108c <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    107c:	221e      	movs	r2, #30
    107e:	2332      	movs	r3, #50	; 0x32
    1080:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1082:	8b62      	ldrh	r2, [r4, #26]
    1084:	3b2e      	subs	r3, #46	; 0x2e
    1086:	4313      	orrs	r3, r2
    1088:	8363      	strh	r3, [r4, #26]
    108a:	e01c      	b.n	10c6 <_usart_interrupt_handler+0x10e>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    108c:	07da      	lsls	r2, r3, #31
    108e:	d507      	bpl.n	10a0 <_usart_interrupt_handler+0xe8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1090:	2213      	movs	r2, #19
    1092:	2332      	movs	r3, #50	; 0x32
    1094:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1096:	8b62      	ldrh	r2, [r4, #26]
    1098:	3b31      	subs	r3, #49	; 0x31
    109a:	4313      	orrs	r3, r2
    109c:	8363      	strh	r3, [r4, #26]
    109e:	e012      	b.n	10c6 <_usart_interrupt_handler+0x10e>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    10a0:	06da      	lsls	r2, r3, #27
    10a2:	d507      	bpl.n	10b4 <_usart_interrupt_handler+0xfc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    10a4:	2242      	movs	r2, #66	; 0x42
    10a6:	2332      	movs	r3, #50	; 0x32
    10a8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    10aa:	8b62      	ldrh	r2, [r4, #26]
    10ac:	3b22      	subs	r3, #34	; 0x22
    10ae:	4313      	orrs	r3, r2
    10b0:	8363      	strh	r3, [r4, #26]
    10b2:	e008      	b.n	10c6 <_usart_interrupt_handler+0x10e>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    10b4:	069b      	lsls	r3, r3, #26
    10b6:	d506      	bpl.n	10c6 <_usart_interrupt_handler+0x10e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    10b8:	2241      	movs	r2, #65	; 0x41
    10ba:	2332      	movs	r3, #50	; 0x32
    10bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    10be:	8b62      	ldrh	r2, [r4, #26]
    10c0:	3b12      	subs	r3, #18
    10c2:	4313      	orrs	r3, r2
    10c4:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    10c6:	077b      	lsls	r3, r7, #29
    10c8:	d527      	bpl.n	111a <_usart_interrupt_handler+0x162>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    10ca:	1c28      	adds	r0, r5, #0
    10cc:	696b      	ldr	r3, [r5, #20]
    10ce:	4798      	blx	r3
    10d0:	e023      	b.n	111a <_usart_interrupt_handler+0x162>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    10d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    10d4:	05db      	lsls	r3, r3, #23
    10d6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    10d8:	b2da      	uxtb	r2, r3
    10da:	6a69      	ldr	r1, [r5, #36]	; 0x24
    10dc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    10de:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    10e0:	1c51      	adds	r1, r2, #1
    10e2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    10e4:	7969      	ldrb	r1, [r5, #5]
    10e6:	2901      	cmp	r1, #1
    10e8:	d104      	bne.n	10f4 <_usart_interrupt_handler+0x13c>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    10ea:	0a1b      	lsrs	r3, r3, #8
    10ec:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    10ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    10f0:	3301      	adds	r3, #1
    10f2:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    10f4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    10f6:	3b01      	subs	r3, #1
    10f8:	b29b      	uxth	r3, r3
    10fa:	85ab      	strh	r3, [r5, #44]	; 0x2c
    10fc:	2b00      	cmp	r3, #0
    10fe:	d10c      	bne.n	111a <_usart_interrupt_handler+0x162>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1100:	3304      	adds	r3, #4
    1102:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1104:	2200      	movs	r2, #0
    1106:	332e      	adds	r3, #46	; 0x2e
    1108:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    110a:	07bb      	lsls	r3, r7, #30
    110c:	d505      	bpl.n	111a <_usart_interrupt_handler+0x162>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    110e:	1c28      	adds	r0, r5, #0
    1110:	692b      	ldr	r3, [r5, #16]
    1112:	4798      	blx	r3
    1114:	e001      	b.n	111a <_usart_interrupt_handler+0x162>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1116:	2304      	movs	r3, #4
    1118:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    111a:	06f3      	lsls	r3, r6, #27
    111c:	d507      	bpl.n	112e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    111e:	2310      	movs	r3, #16
    1120:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1122:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1124:	06fb      	lsls	r3, r7, #27
    1126:	d502      	bpl.n	112e <_usart_interrupt_handler+0x176>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1128:	1c28      	adds	r0, r5, #0
    112a:	69eb      	ldr	r3, [r5, #28]
    112c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    112e:	06b3      	lsls	r3, r6, #26
    1130:	d507      	bpl.n	1142 <_usart_interrupt_handler+0x18a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1132:	2320      	movs	r3, #32
    1134:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1136:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1138:	073b      	lsls	r3, r7, #28
    113a:	d502      	bpl.n	1142 <_usart_interrupt_handler+0x18a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    113c:	1c28      	adds	r0, r5, #0
    113e:	69ab      	ldr	r3, [r5, #24]
    1140:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1142:	0733      	lsls	r3, r6, #28
    1144:	d507      	bpl.n	1156 <_usart_interrupt_handler+0x19e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1146:	2308      	movs	r3, #8
    1148:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    114a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    114c:	06bb      	lsls	r3, r7, #26
    114e:	d502      	bpl.n	1156 <_usart_interrupt_handler+0x19e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1150:	6a2b      	ldr	r3, [r5, #32]
    1152:	1c28      	adds	r0, r5, #0
    1154:	4798      	blx	r3
		}
	}
#endif
}
    1156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1158:	20000158 	.word	0x20000158

0000115c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    115c:	b508      	push	{r3, lr}
	switch (clock_source) {
    115e:	2807      	cmp	r0, #7
    1160:	d803      	bhi.n	116a <system_clock_source_get_hz+0xe>
    1162:	0080      	lsls	r0, r0, #2
    1164:	4b0f      	ldr	r3, [pc, #60]	; (11a4 <system_clock_source_get_hz+0x48>)
    1166:	581b      	ldr	r3, [r3, r0]
    1168:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    116a:	2000      	movs	r0, #0
    116c:	e018      	b.n	11a0 <system_clock_source_get_hz+0x44>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    116e:	4b0e      	ldr	r3, [pc, #56]	; (11a8 <system_clock_source_get_hz+0x4c>)
    1170:	6858      	ldr	r0, [r3, #4]
    1172:	e015      	b.n	11a0 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    1174:	4b0d      	ldr	r3, [pc, #52]	; (11ac <system_clock_source_get_hz+0x50>)
    1176:	7d5b      	ldrb	r3, [r3, #21]
    1178:	210f      	movs	r1, #15
    117a:	4019      	ands	r1, r3
    117c:	3101      	adds	r1, #1
    117e:	480c      	ldr	r0, [pc, #48]	; (11b0 <system_clock_source_get_hz+0x54>)
    1180:	4b0c      	ldr	r3, [pc, #48]	; (11b4 <system_clock_source_get_hz+0x58>)
    1182:	4798      	blx	r3
    1184:	e00c      	b.n	11a0 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1186:	4b08      	ldr	r3, [pc, #32]	; (11a8 <system_clock_source_get_hz+0x4c>)
    1188:	6898      	ldr	r0, [r3, #8]
    118a:	e009      	b.n	11a0 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    118c:	4b07      	ldr	r3, [pc, #28]	; (11ac <system_clock_source_get_hz+0x50>)
    118e:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    1190:	2000      	movs	r0, #0

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1192:	079b      	lsls	r3, r3, #30
    1194:	d504      	bpl.n	11a0 <system_clock_source_get_hz+0x44>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1196:	4b04      	ldr	r3, [pc, #16]	; (11a8 <system_clock_source_get_hz+0x4c>)
    1198:	6818      	ldr	r0, [r3, #0]
    119a:	e001      	b.n	11a0 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    119c:	2080      	movs	r0, #128	; 0x80
    119e:	0200      	lsls	r0, r0, #8
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    11a0:	bd08      	pop	{r3, pc}
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	000027b4 	.word	0x000027b4
    11a8:	200000e0 	.word	0x200000e0
    11ac:	40001000 	.word	0x40001000
    11b0:	02dc6c00 	.word	0x02dc6c00
    11b4:	00001b3d 	.word	0x00001b3d

000011b8 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    11b8:	b500      	push	{lr}
    11ba:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    11bc:	2203      	movs	r2, #3
    11be:	4b13      	ldr	r3, [pc, #76]	; (120c <system_clock_init+0x54>)
    11c0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    11c2:	4a13      	ldr	r2, [pc, #76]	; (1210 <system_clock_init+0x58>)
    11c4:	6853      	ldr	r3, [r2, #4]
    11c6:	211e      	movs	r1, #30
    11c8:	438b      	bics	r3, r1
    11ca:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    11cc:	4b11      	ldr	r3, [pc, #68]	; (1214 <system_clock_init+0x5c>)
    11ce:	7d19      	ldrb	r1, [r3, #20]
    11d0:	2280      	movs	r2, #128	; 0x80
    11d2:	430a      	orrs	r2, r1
    11d4:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    11d6:	2205      	movs	r2, #5
    11d8:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    11da:	1c1a      	adds	r2, r3, #0
    11dc:	6993      	ldr	r3, [r2, #24]
    11de:	2b00      	cmp	r3, #0
    11e0:	d1fc      	bne.n	11dc <system_clock_init+0x24>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    11e2:	4b0d      	ldr	r3, [pc, #52]	; (1218 <system_clock_init+0x60>)
    11e4:	4798      	blx	r3
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    11e6:	2301      	movs	r3, #1
    11e8:	4a0c      	ldr	r2, [pc, #48]	; (121c <system_clock_init+0x64>)
    11ea:	7113      	strb	r3, [r2, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    11ec:	a901      	add	r1, sp, #4
    11ee:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    11f0:	2300      	movs	r3, #0
    11f2:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
    11f4:	2206      	movs	r2, #6
    11f6:	700a      	strb	r2, [r1, #0]
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    11f8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    11fa:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    11fc:	2000      	movs	r0, #0
    11fe:	4b08      	ldr	r3, [pc, #32]	; (1220 <system_clock_init+0x68>)
    1200:	4798      	blx	r3
    1202:	2000      	movs	r0, #0
    1204:	4b07      	ldr	r3, [pc, #28]	; (1224 <system_clock_init+0x6c>)
    1206:	4798      	blx	r3
#endif

}
    1208:	b005      	add	sp, #20
    120a:	bd00      	pop	{pc}
    120c:	40001800 	.word	0x40001800
    1210:	41004000 	.word	0x41004000
    1214:	40001000 	.word	0x40001000
    1218:	00001229 	.word	0x00001229
    121c:	40000800 	.word	0x40000800
    1220:	0000124d 	.word	0x0000124d
    1224:	000012f9 	.word	0x000012f9

00001228 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1228:	4a06      	ldr	r2, [pc, #24]	; (1244 <system_gclk_init+0x1c>)
    122a:	6951      	ldr	r1, [r2, #20]
    122c:	2380      	movs	r3, #128	; 0x80
    122e:	430b      	orrs	r3, r1
    1230:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    1232:	2201      	movs	r2, #1
    1234:	4b04      	ldr	r3, [pc, #16]	; (1248 <system_gclk_init+0x20>)
    1236:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1238:	1c19      	adds	r1, r3, #0
    123a:	780b      	ldrb	r3, [r1, #0]
    123c:	4213      	tst	r3, r2
    123e:	d1fc      	bne.n	123a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1240:	4770      	bx	lr
    1242:	46c0      	nop			; (mov r8, r8)
    1244:	40000800 	.word	0x40000800
    1248:	40001c00 	.word	0x40001c00

0000124c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    124c:	b570      	push	{r4, r5, r6, lr}
    124e:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1250:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1252:	784b      	ldrb	r3, [r1, #1]
    1254:	2b00      	cmp	r3, #0
    1256:	d002      	beq.n	125e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1258:	2380      	movs	r3, #128	; 0x80
    125a:	00db      	lsls	r3, r3, #3
    125c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    125e:	7a4b      	ldrb	r3, [r1, #9]
    1260:	2b00      	cmp	r3, #0
    1262:	d002      	beq.n	126a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1264:	2380      	movs	r3, #128	; 0x80
    1266:	011b      	lsls	r3, r3, #4
    1268:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    126a:	684a      	ldr	r2, [r1, #4]
    126c:	2a01      	cmp	r2, #1
    126e:	d917      	bls.n	12a0 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1270:	1e53      	subs	r3, r2, #1
    1272:	421a      	tst	r2, r3
    1274:	d10f      	bne.n	1296 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1276:	2a02      	cmp	r2, #2
    1278:	d906      	bls.n	1288 <system_gclk_gen_set_config+0x3c>
    127a:	2302      	movs	r3, #2
    127c:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    127e:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1280:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1282:	429a      	cmp	r2, r3
    1284:	d8fb      	bhi.n	127e <system_gclk_gen_set_config+0x32>
    1286:	e000      	b.n	128a <system_gclk_gen_set_config+0x3e>
    1288:	2000      	movs	r0, #0
    128a:	2380      	movs	r3, #128	; 0x80
    128c:	015b      	lsls	r3, r3, #5
    128e:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    1290:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1292:	4305      	orrs	r5, r0
    1294:	e004      	b.n	12a0 <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    1296:	0412      	lsls	r2, r2, #16
    1298:	2380      	movs	r3, #128	; 0x80
    129a:	009b      	lsls	r3, r3, #2
    129c:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    129e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    12a0:	7a0b      	ldrb	r3, [r1, #8]
    12a2:	2b00      	cmp	r3, #0
    12a4:	d002      	beq.n	12ac <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    12a6:	2380      	movs	r3, #128	; 0x80
    12a8:	019b      	lsls	r3, r3, #6
    12aa:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    12ac:	2604      	movs	r6, #4
    12ae:	40a6      	lsls	r6, r4
    12b0:	490d      	ldr	r1, [pc, #52]	; (12e8 <system_gclk_gen_set_config+0x9c>)
    12b2:	4a0e      	ldr	r2, [pc, #56]	; (12ec <system_gclk_gen_set_config+0xa0>)
    12b4:	684b      	ldr	r3, [r1, #4]
    12b6:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    12b8:	421e      	tst	r6, r3
    12ba:	d1fb      	bne.n	12b4 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    12bc:	4b0c      	ldr	r3, [pc, #48]	; (12f0 <system_gclk_gen_set_config+0xa4>)
    12be:	4798      	blx	r3
    12c0:	00a4      	lsls	r4, r4, #2
    12c2:	4b09      	ldr	r3, [pc, #36]	; (12e8 <system_gclk_gen_set_config+0x9c>)
    12c4:	469c      	mov	ip, r3
    12c6:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    12c8:	6a20      	ldr	r0, [r4, #32]
    12ca:	2380      	movs	r3, #128	; 0x80
    12cc:	005b      	lsls	r3, r3, #1
    12ce:	4018      	ands	r0, r3
    12d0:	4328      	orrs	r0, r5
    12d2:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    12d4:	4661      	mov	r1, ip
    12d6:	4a05      	ldr	r2, [pc, #20]	; (12ec <system_gclk_gen_set_config+0xa0>)
    12d8:	684b      	ldr	r3, [r1, #4]
    12da:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    12dc:	421e      	tst	r6, r3
    12de:	d1fb      	bne.n	12d8 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    12e0:	4b04      	ldr	r3, [pc, #16]	; (12f4 <system_gclk_gen_set_config+0xa8>)
    12e2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    12e4:	bd70      	pop	{r4, r5, r6, pc}
    12e6:	46c0      	nop			; (mov r8, r8)
    12e8:	40001c00 	.word	0x40001c00
    12ec:	000007fc 	.word	0x000007fc
    12f0:	00000409 	.word	0x00000409
    12f4:	00000449 	.word	0x00000449

000012f8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    12f8:	b510      	push	{r4, lr}
    12fa:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    12fc:	2204      	movs	r2, #4
    12fe:	4082      	lsls	r2, r0
    1300:	4809      	ldr	r0, [pc, #36]	; (1328 <system_gclk_gen_enable+0x30>)
    1302:	490a      	ldr	r1, [pc, #40]	; (132c <system_gclk_gen_enable+0x34>)
    1304:	6843      	ldr	r3, [r0, #4]
    1306:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1308:	421a      	tst	r2, r3
    130a:	d1fb      	bne.n	1304 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    130c:	4b08      	ldr	r3, [pc, #32]	; (1330 <system_gclk_gen_enable+0x38>)
    130e:	4798      	blx	r3
    1310:	00a4      	lsls	r4, r4, #2
    1312:	4b05      	ldr	r3, [pc, #20]	; (1328 <system_gclk_gen_enable+0x30>)
    1314:	469c      	mov	ip, r3
    1316:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1318:	6a23      	ldr	r3, [r4, #32]
    131a:	2280      	movs	r2, #128	; 0x80
    131c:	0052      	lsls	r2, r2, #1
    131e:	4313      	orrs	r3, r2
    1320:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1322:	4b04      	ldr	r3, [pc, #16]	; (1334 <system_gclk_gen_enable+0x3c>)
    1324:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1326:	bd10      	pop	{r4, pc}
    1328:	40001c00 	.word	0x40001c00
    132c:	000007fc 	.word	0x000007fc
    1330:	00000409 	.word	0x00000409
    1334:	00000449 	.word	0x00000449

00001338 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    133a:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    133c:	2204      	movs	r2, #4
    133e:	4082      	lsls	r2, r0
    1340:	4812      	ldr	r0, [pc, #72]	; (138c <system_gclk_gen_get_hz+0x54>)
    1342:	4913      	ldr	r1, [pc, #76]	; (1390 <system_gclk_gen_get_hz+0x58>)
    1344:	6843      	ldr	r3, [r0, #4]
    1346:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1348:	421a      	tst	r2, r3
    134a:	d1fb      	bne.n	1344 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    134c:	4b11      	ldr	r3, [pc, #68]	; (1394 <system_gclk_gen_get_hz+0x5c>)
    134e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1350:	4f0e      	ldr	r7, [pc, #56]	; (138c <system_gclk_gen_get_hz+0x54>)
    1352:	3408      	adds	r4, #8
    1354:	00a4      	lsls	r4, r4, #2
    1356:	59e3      	ldr	r3, [r4, r7]
    1358:	2007      	movs	r0, #7
    135a:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    135c:	4b0e      	ldr	r3, [pc, #56]	; (1398 <system_gclk_gen_get_hz+0x60>)
    135e:	4798      	blx	r3
    1360:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1362:	59e5      	ldr	r5, [r4, r7]
    1364:	04ed      	lsls	r5, r5, #19
    1366:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1368:	59e4      	ldr	r4, [r4, r7]
    136a:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    136c:	4b0b      	ldr	r3, [pc, #44]	; (139c <system_gclk_gen_get_hz+0x64>)
    136e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1370:	2d00      	cmp	r5, #0
    1372:	d107      	bne.n	1384 <system_gclk_gen_get_hz+0x4c>
    1374:	2c01      	cmp	r4, #1
    1376:	d907      	bls.n	1388 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1378:	1c30      	adds	r0, r6, #0
    137a:	1c21      	adds	r1, r4, #0
    137c:	4b08      	ldr	r3, [pc, #32]	; (13a0 <system_gclk_gen_get_hz+0x68>)
    137e:	4798      	blx	r3
    1380:	1c06      	adds	r6, r0, #0
    1382:	e001      	b.n	1388 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1384:	3401      	adds	r4, #1
    1386:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1388:	1c30      	adds	r0, r6, #0
    138a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    138c:	40001c00 	.word	0x40001c00
    1390:	000007fc 	.word	0x000007fc
    1394:	00000409 	.word	0x00000409
    1398:	0000115d 	.word	0x0000115d
    139c:	00000449 	.word	0x00000449
    13a0:	00001b3d 	.word	0x00001b3d

000013a4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    13a4:	b510      	push	{r4, lr}
    13a6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    13a8:	4b08      	ldr	r3, [pc, #32]	; (13cc <system_gclk_chan_enable+0x28>)
    13aa:	4798      	blx	r3
    13ac:	00a4      	lsls	r4, r4, #2
    13ae:	4b08      	ldr	r3, [pc, #32]	; (13d0 <system_gclk_chan_enable+0x2c>)
    13b0:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    13b2:	2280      	movs	r2, #128	; 0x80
    13b4:	5881      	ldr	r1, [r0, r2]
    13b6:	2340      	movs	r3, #64	; 0x40
    13b8:	430b      	orrs	r3, r1
    13ba:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    13bc:	2180      	movs	r1, #128	; 0x80
    13be:	3a40      	subs	r2, #64	; 0x40
    13c0:	5843      	ldr	r3, [r0, r1]
    13c2:	421a      	tst	r2, r3
    13c4:	d0fc      	beq.n	13c0 <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13c6:	4b03      	ldr	r3, [pc, #12]	; (13d4 <system_gclk_chan_enable+0x30>)
    13c8:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    13ca:	bd10      	pop	{r4, pc}
    13cc:	00000409 	.word	0x00000409
    13d0:	40001c00 	.word	0x40001c00
    13d4:	00000449 	.word	0x00000449

000013d8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    13d8:	b510      	push	{r4, lr}
    13da:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    13dc:	4b08      	ldr	r3, [pc, #32]	; (1400 <system_gclk_chan_disable+0x28>)
    13de:	4798      	blx	r3
    13e0:	00a4      	lsls	r4, r4, #2
    13e2:	4b08      	ldr	r3, [pc, #32]	; (1404 <system_gclk_chan_disable+0x2c>)
    13e4:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    13e6:	2280      	movs	r2, #128	; 0x80
    13e8:	5883      	ldr	r3, [r0, r2]
    13ea:	2140      	movs	r1, #64	; 0x40
    13ec:	438b      	bics	r3, r1
    13ee:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    13f0:	3140      	adds	r1, #64	; 0x40
    13f2:	3a40      	subs	r2, #64	; 0x40
    13f4:	5843      	ldr	r3, [r0, r1]
    13f6:	421a      	tst	r2, r3
    13f8:	d1fc      	bne.n	13f4 <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13fa:	4b03      	ldr	r3, [pc, #12]	; (1408 <system_gclk_chan_disable+0x30>)
    13fc:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    13fe:	bd10      	pop	{r4, pc}
    1400:	00000409 	.word	0x00000409
    1404:	40001c00 	.word	0x40001c00
    1408:	00000449 	.word	0x00000449

0000140c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    140c:	b538      	push	{r3, r4, r5, lr}
    140e:	1c04      	adds	r4, r0, #0
    1410:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1412:	4b05      	ldr	r3, [pc, #20]	; (1428 <system_gclk_chan_set_config+0x1c>)
    1414:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    1416:	782b      	ldrb	r3, [r5, #0]
    1418:	220f      	movs	r2, #15
    141a:	4013      	ands	r3, r2
    141c:	3420      	adds	r4, #32
    141e:	00a4      	lsls	r4, r4, #2
    1420:	4a02      	ldr	r2, [pc, #8]	; (142c <system_gclk_chan_set_config+0x20>)
    1422:	50a3      	str	r3, [r4, r2]


}
    1424:	bd38      	pop	{r3, r4, r5, pc}
    1426:	46c0      	nop			; (mov r8, r8)
    1428:	000013d9 	.word	0x000013d9
    142c:	40001c00 	.word	0x40001c00

00001430 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1430:	b510      	push	{r4, lr}
    1432:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1434:	4b06      	ldr	r3, [pc, #24]	; (1450 <system_gclk_chan_get_hz+0x20>)
    1436:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1438:	3420      	adds	r4, #32
    143a:	00a4      	lsls	r4, r4, #2
    143c:	4b05      	ldr	r3, [pc, #20]	; (1454 <system_gclk_chan_get_hz+0x24>)
    143e:	58e3      	ldr	r3, [r4, r3]
    1440:	240f      	movs	r4, #15
    1442:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1444:	4b04      	ldr	r3, [pc, #16]	; (1458 <system_gclk_chan_get_hz+0x28>)
    1446:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1448:	1c20      	adds	r0, r4, #0
    144a:	4b04      	ldr	r3, [pc, #16]	; (145c <system_gclk_chan_get_hz+0x2c>)
    144c:	4798      	blx	r3
}
    144e:	bd10      	pop	{r4, pc}
    1450:	00000409 	.word	0x00000409
    1454:	40001c00 	.word	0x40001c00
    1458:	00000449 	.word	0x00000449
    145c:	00001339 	.word	0x00001339

00001460 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1460:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1462:	78d3      	ldrb	r3, [r2, #3]
    1464:	2b00      	cmp	r3, #0
    1466:	d11e      	bne.n	14a6 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1468:	7814      	ldrb	r4, [r2, #0]
    146a:	2c80      	cmp	r4, #128	; 0x80
    146c:	d004      	beq.n	1478 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    146e:	0624      	lsls	r4, r4, #24
    1470:	2380      	movs	r3, #128	; 0x80
    1472:	025b      	lsls	r3, r3, #9
    1474:	431c      	orrs	r4, r3
    1476:	e000      	b.n	147a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1478:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    147a:	7853      	ldrb	r3, [r2, #1]
    147c:	2502      	movs	r5, #2
    147e:	43ab      	bics	r3, r5
    1480:	d10a      	bne.n	1498 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1482:	7893      	ldrb	r3, [r2, #2]
    1484:	2b00      	cmp	r3, #0
    1486:	d103      	bne.n	1490 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1488:	2380      	movs	r3, #128	; 0x80
    148a:	029b      	lsls	r3, r3, #10
    148c:	431c      	orrs	r4, r3
    148e:	e002      	b.n	1496 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1490:	23c0      	movs	r3, #192	; 0xc0
    1492:	02db      	lsls	r3, r3, #11
    1494:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1496:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1498:	7853      	ldrb	r3, [r2, #1]
    149a:	3b01      	subs	r3, #1
    149c:	2b01      	cmp	r3, #1
    149e:	d812      	bhi.n	14c6 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    14a0:	4b18      	ldr	r3, [pc, #96]	; (1504 <_system_pinmux_config+0xa4>)
    14a2:	401c      	ands	r4, r3
    14a4:	e00f      	b.n	14c6 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    14a6:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    14a8:	040b      	lsls	r3, r1, #16
    14aa:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    14ac:	24a0      	movs	r4, #160	; 0xa0
    14ae:	05e4      	lsls	r4, r4, #23
    14b0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    14b2:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    14b4:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    14b6:	24d0      	movs	r4, #208	; 0xd0
    14b8:	0624      	lsls	r4, r4, #24
    14ba:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    14bc:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    14be:	78d3      	ldrb	r3, [r2, #3]
    14c0:	2b00      	cmp	r3, #0
    14c2:	d018      	beq.n	14f6 <_system_pinmux_config+0x96>
    14c4:	e01c      	b.n	1500 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    14c6:	040b      	lsls	r3, r1, #16
    14c8:	0c1b      	lsrs	r3, r3, #16
    14ca:	25a0      	movs	r5, #160	; 0xa0
    14cc:	05ed      	lsls	r5, r5, #23
    14ce:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    14d0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    14d2:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    14d4:	0c0b      	lsrs	r3, r1, #16
    14d6:	25d0      	movs	r5, #208	; 0xd0
    14d8:	062d      	lsls	r5, r5, #24
    14da:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    14dc:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    14de:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    14e0:	78d3      	ldrb	r3, [r2, #3]
    14e2:	2b00      	cmp	r3, #0
    14e4:	d10c      	bne.n	1500 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    14e6:	0363      	lsls	r3, r4, #13
    14e8:	d505      	bpl.n	14f6 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    14ea:	7893      	ldrb	r3, [r2, #2]
    14ec:	2b01      	cmp	r3, #1
    14ee:	d101      	bne.n	14f4 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    14f0:	6181      	str	r1, [r0, #24]
    14f2:	e000      	b.n	14f6 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    14f4:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    14f6:	7853      	ldrb	r3, [r2, #1]
    14f8:	3b01      	subs	r3, #1
    14fa:	2b01      	cmp	r3, #1
    14fc:	d800      	bhi.n	1500 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    14fe:	6081      	str	r1, [r0, #8]
		}
	}
}
    1500:	bd30      	pop	{r4, r5, pc}
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	fffbffff 	.word	0xfffbffff

00001508 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1508:	b508      	push	{r3, lr}
    150a:	1c03      	adds	r3, r0, #0
    150c:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    150e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1510:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1512:	2900      	cmp	r1, #0
    1514:	d105      	bne.n	1522 <system_pinmux_pin_set_config+0x1a>
		return &(ports[port_index]->Group[group_index]);
    1516:	0958      	lsrs	r0, r3, #5
    1518:	01c0      	lsls	r0, r0, #7
    151a:	2182      	movs	r1, #130	; 0x82
    151c:	05c9      	lsls	r1, r1, #23
    151e:	468c      	mov	ip, r1
    1520:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1522:	211f      	movs	r1, #31
    1524:	400b      	ands	r3, r1
    1526:	391e      	subs	r1, #30
    1528:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    152a:	4b01      	ldr	r3, [pc, #4]	; (1530 <system_pinmux_pin_set_config+0x28>)
    152c:	4798      	blx	r3
}
    152e:	bd08      	pop	{r3, pc}
    1530:	00001461 	.word	0x00001461

00001534 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1534:	4770      	bx	lr
    1536:	46c0      	nop			; (mov r8, r8)

00001538 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1538:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    153a:	4b05      	ldr	r3, [pc, #20]	; (1550 <system_init+0x18>)
    153c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    153e:	4b05      	ldr	r3, [pc, #20]	; (1554 <system_init+0x1c>)
    1540:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1542:	4b05      	ldr	r3, [pc, #20]	; (1558 <system_init+0x20>)
    1544:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1546:	4b05      	ldr	r3, [pc, #20]	; (155c <system_init+0x24>)
    1548:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    154a:	4b05      	ldr	r3, [pc, #20]	; (1560 <system_init+0x28>)
    154c:	4798      	blx	r3
}
    154e:	bd08      	pop	{r3, pc}
    1550:	000011b9 	.word	0x000011b9
    1554:	00000405 	.word	0x00000405
    1558:	00001535 	.word	0x00001535
    155c:	0000056d 	.word	0x0000056d
    1560:	00001535 	.word	0x00001535

00001564 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1564:	1c93      	adds	r3, r2, #2
    1566:	009b      	lsls	r3, r3, #2
    1568:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    156a:	2a02      	cmp	r2, #2
    156c:	d104      	bne.n	1578 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    156e:	7e02      	ldrb	r2, [r0, #24]
    1570:	2310      	movs	r3, #16
    1572:	4313      	orrs	r3, r2
    1574:	7603      	strb	r3, [r0, #24]
    1576:	e00c      	b.n	1592 <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1578:	2a03      	cmp	r2, #3
    157a:	d104      	bne.n	1586 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    157c:	7e02      	ldrb	r2, [r0, #24]
    157e:	2320      	movs	r3, #32
    1580:	4313      	orrs	r3, r2
    1582:	7603      	strb	r3, [r0, #24]
    1584:	e005      	b.n	1592 <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1586:	2301      	movs	r3, #1
    1588:	4093      	lsls	r3, r2
    158a:	1c1a      	adds	r2, r3, #0
    158c:	7e03      	ldrb	r3, [r0, #24]
    158e:	431a      	orrs	r2, r3
    1590:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    1592:	2000      	movs	r0, #0
    1594:	4770      	bx	lr
    1596:	46c0      	nop			; (mov r8, r8)

00001598 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1598:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    159a:	0080      	lsls	r0, r0, #2
    159c:	4b14      	ldr	r3, [pc, #80]	; (15f0 <_tc_interrupt_handler+0x58>)
    159e:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    15a0:	682b      	ldr	r3, [r5, #0]
    15a2:	7a9c      	ldrb	r4, [r3, #10]
    15a4:	7e2b      	ldrb	r3, [r5, #24]
    15a6:	401c      	ands	r4, r3
    15a8:	7e6b      	ldrb	r3, [r5, #25]
    15aa:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    15ac:	07e3      	lsls	r3, r4, #31
    15ae:	d505      	bpl.n	15bc <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    15b0:	1c28      	adds	r0, r5, #0
    15b2:	68ab      	ldr	r3, [r5, #8]
    15b4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    15b6:	2301      	movs	r3, #1
    15b8:	682a      	ldr	r2, [r5, #0]
    15ba:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    15bc:	07a3      	lsls	r3, r4, #30
    15be:	d505      	bpl.n	15cc <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    15c0:	1c28      	adds	r0, r5, #0
    15c2:	68eb      	ldr	r3, [r5, #12]
    15c4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    15c6:	2302      	movs	r3, #2
    15c8:	682a      	ldr	r2, [r5, #0]
    15ca:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    15cc:	06e3      	lsls	r3, r4, #27
    15ce:	d505      	bpl.n	15dc <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    15d0:	1c28      	adds	r0, r5, #0
    15d2:	692b      	ldr	r3, [r5, #16]
    15d4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    15d6:	2310      	movs	r3, #16
    15d8:	682a      	ldr	r2, [r5, #0]
    15da:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    15dc:	06a3      	lsls	r3, r4, #26
    15de:	d505      	bpl.n	15ec <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    15e0:	1c28      	adds	r0, r5, #0
    15e2:	696b      	ldr	r3, [r5, #20]
    15e4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    15e6:	682b      	ldr	r3, [r5, #0]
    15e8:	2220      	movs	r2, #32
    15ea:	729a      	strb	r2, [r3, #10]
	}
}
    15ec:	bd38      	pop	{r3, r4, r5, pc}
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	20000170 	.word	0x20000170

000015f4 <TC0_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    15f4:	b508      	push	{r3, lr}
    15f6:	2000      	movs	r0, #0
    15f8:	4b01      	ldr	r3, [pc, #4]	; (1600 <TC0_Handler+0xc>)
    15fa:	4798      	blx	r3
    15fc:	bd08      	pop	{r3, pc}
    15fe:	46c0      	nop			; (mov r8, r8)
    1600:	00001599 	.word	0x00001599

00001604 <TC1_Handler>:
    1604:	b508      	push	{r3, lr}
    1606:	2001      	movs	r0, #1
    1608:	4b01      	ldr	r3, [pc, #4]	; (1610 <TC1_Handler+0xc>)
    160a:	4798      	blx	r3
    160c:	bd08      	pop	{r3, pc}
    160e:	46c0      	nop			; (mov r8, r8)
    1610:	00001599 	.word	0x00001599

00001614 <TC2_Handler>:
    1614:	b508      	push	{r3, lr}
    1616:	2002      	movs	r0, #2
    1618:	4b01      	ldr	r3, [pc, #4]	; (1620 <TC2_Handler+0xc>)
    161a:	4798      	blx	r3
    161c:	bd08      	pop	{r3, pc}
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	00001599 	.word	0x00001599

00001624 <TC3_Handler>:
    1624:	b508      	push	{r3, lr}
    1626:	2003      	movs	r0, #3
    1628:	4b01      	ldr	r3, [pc, #4]	; (1630 <TC3_Handler+0xc>)
    162a:	4798      	blx	r3
    162c:	bd08      	pop	{r3, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	00001599 	.word	0x00001599

00001634 <TC4_Handler>:
    1634:	b508      	push	{r3, lr}
    1636:	2004      	movs	r0, #4
    1638:	4b01      	ldr	r3, [pc, #4]	; (1640 <TC4_Handler+0xc>)
    163a:	4798      	blx	r3
    163c:	bd08      	pop	{r3, pc}
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	00001599 	.word	0x00001599

00001644 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1644:	b530      	push	{r4, r5, lr}
    1646:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1648:	a901      	add	r1, sp, #4
    164a:	4b0c      	ldr	r3, [pc, #48]	; (167c <_tc_get_inst_index+0x38>)
    164c:	1c0a      	adds	r2, r1, #0
    164e:	cb32      	ldmia	r3!, {r1, r4, r5}
    1650:	c232      	stmia	r2!, {r1, r4, r5}
    1652:	cb12      	ldmia	r3!, {r1, r4}
    1654:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1656:	9b01      	ldr	r3, [sp, #4]
    1658:	4283      	cmp	r3, r0
    165a:	d006      	beq.n	166a <_tc_get_inst_index+0x26>
    165c:	2301      	movs	r3, #1
    165e:	009a      	lsls	r2, r3, #2
    1660:	a901      	add	r1, sp, #4
    1662:	5852      	ldr	r2, [r2, r1]
    1664:	4282      	cmp	r2, r0
    1666:	d103      	bne.n	1670 <_tc_get_inst_index+0x2c>
    1668:	e000      	b.n	166c <_tc_get_inst_index+0x28>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    166a:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    166c:	b2d8      	uxtb	r0, r3
    166e:	e003      	b.n	1678 <_tc_get_inst_index+0x34>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1670:	3301      	adds	r3, #1
    1672:	2b05      	cmp	r3, #5
    1674:	d1f3      	bne.n	165e <_tc_get_inst_index+0x1a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1676:	2000      	movs	r0, #0
}
    1678:	b007      	add	sp, #28
    167a:	bd30      	pop	{r4, r5, pc}
    167c:	000027d4 	.word	0x000027d4

00001680 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1680:	b5f0      	push	{r4, r5, r6, r7, lr}
    1682:	4647      	mov	r7, r8
    1684:	b480      	push	{r7}
    1686:	b08e      	sub	sp, #56	; 0x38
    1688:	1c05      	adds	r5, r0, #0
    168a:	1c0e      	adds	r6, r1, #0
    168c:	1c17      	adds	r7, r2, #0
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    168e:	1c08      	adds	r0, r1, #0
    1690:	4ba1      	ldr	r3, [pc, #644]	; (1918 <tc_init+0x298>)
    1692:	4798      	blx	r3
    1694:	4680      	mov	r8, r0

#if (SAMC20) || (SAMC21)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    1696:	4ca1      	ldr	r4, [pc, #644]	; (191c <tc_init+0x29c>)
    1698:	1c21      	adds	r1, r4, #0
    169a:	3114      	adds	r1, #20
    169c:	a80c      	add	r0, sp, #48	; 0x30
    169e:	2205      	movs	r2, #5
    16a0:	4b9f      	ldr	r3, [pc, #636]	; (1920 <tc_init+0x2a0>)
    16a2:	4798      	blx	r3
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    16a4:	a902      	add	r1, sp, #8
    16a6:	1c23      	adds	r3, r4, #0
    16a8:	331c      	adds	r3, #28
    16aa:	1c0a      	adds	r2, r1, #0
    16ac:	cb13      	ldmia	r3!, {r0, r1, r4}
    16ae:	c213      	stmia	r2!, {r0, r1, r4}
    16b0:	cb13      	ldmia	r3!, {r0, r1, r4}
    16b2:	c213      	stmia	r2!, {r0, r1, r4}
    16b4:	cb13      	ldmia	r3!, {r0, r1, r4}
    16b6:	c213      	stmia	r2!, {r0, r1, r4}
    16b8:	681b      	ldr	r3, [r3, #0]
    16ba:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    16bc:	2300      	movs	r3, #0
    16be:	60ab      	str	r3, [r5, #8]
    16c0:	60eb      	str	r3, [r5, #12]
    16c2:	612b      	str	r3, [r5, #16]
    16c4:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    16c6:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    16c8:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    16ca:	4643      	mov	r3, r8
    16cc:	009a      	lsls	r2, r3, #2
    16ce:	4b95      	ldr	r3, [pc, #596]	; (1924 <tc_init+0x2a4>)
    16d0:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    16d2:	602e      	str	r6, [r5, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    16d4:	2334      	movs	r3, #52	; 0x34
    16d6:	5cfb      	ldrb	r3, [r7, r3]
    16d8:	76ab      	strb	r3, [r5, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    16da:	78fb      	ldrb	r3, [r7, #3]
    16dc:	2b08      	cmp	r3, #8
    16de:	d104      	bne.n	16ea <tc_init+0x6a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    16e0:	2017      	movs	r0, #23

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    16e2:	4642      	mov	r2, r8
    16e4:	07d2      	lsls	r2, r2, #31
    16e6:	d500      	bpl.n	16ea <tc_init+0x6a>
    16e8:	e111      	b.n	190e <tc_init+0x28e>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    16ea:	712b      	strb	r3, [r5, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    16ec:	6833      	ldr	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    16ee:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    16f0:	07db      	lsls	r3, r3, #31
    16f2:	d500      	bpl.n	16f6 <tc_init+0x76>
    16f4:	e10b      	b.n	190e <tc_init+0x28e>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    16f6:	7af3      	ldrb	r3, [r6, #11]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    16f8:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    16fa:	079b      	lsls	r3, r3, #30
    16fc:	d500      	bpl.n	1700 <tc_init+0x80>
    16fe:	e106      	b.n	190e <tc_init+0x28e>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1700:	6833      	ldr	r3, [r6, #0]
    1702:	079b      	lsls	r3, r3, #30
    1704:	d500      	bpl.n	1708 <tc_init+0x88>
    1706:	e102      	b.n	190e <tc_init+0x28e>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1708:	7c3b      	ldrb	r3, [r7, #16]
    170a:	2b00      	cmp	r3, #0
    170c:	d00a      	beq.n	1724 <tc_init+0xa4>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    170e:	a901      	add	r1, sp, #4
    1710:	2301      	movs	r3, #1
    1712:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1714:	2200      	movs	r2, #0
    1716:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1718:	7e3a      	ldrb	r2, [r7, #24]
    171a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    171c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    171e:	7d38      	ldrb	r0, [r7, #20]
    1720:	4b81      	ldr	r3, [pc, #516]	; (1928 <tc_init+0x2a8>)
    1722:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1724:	7f3b      	ldrb	r3, [r7, #28]
    1726:	2b00      	cmp	r3, #0
    1728:	d00b      	beq.n	1742 <tc_init+0xc2>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    172a:	a901      	add	r1, sp, #4
    172c:	2301      	movs	r3, #1
    172e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1730:	2200      	movs	r2, #0
    1732:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1736:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1738:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    173a:	6a3b      	ldr	r3, [r7, #32]
    173c:	b2d8      	uxtb	r0, r3
    173e:	4b7a      	ldr	r3, [pc, #488]	; (1928 <tc_init+0x2a8>)
    1740:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    1742:	4643      	mov	r3, r8
    1744:	0059      	lsls	r1, r3, #1
    1746:	aa02      	add	r2, sp, #8
    1748:	1c4b      	adds	r3, r1, #1
    174a:	009b      	lsls	r3, r3, #2
    174c:	5898      	ldr	r0, [r3, r2]
    174e:	4643      	mov	r3, r8
    1750:	00db      	lsls	r3, r3, #3
    1752:	589a      	ldr	r2, [r3, r2]
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    1754:	b2d3      	uxtb	r3, r2
    1756:	2b01      	cmp	r3, #1
    1758:	d009      	beq.n	176e <tc_init+0xee>
    175a:	2b00      	cmp	r3, #0
    175c:	d002      	beq.n	1764 <tc_init+0xe4>
    175e:	2b02      	cmp	r3, #2
    1760:	d00a      	beq.n	1778 <tc_init+0xf8>
    1762:	e00d      	b.n	1780 <tc_init+0x100>
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1764:	4a71      	ldr	r2, [pc, #452]	; (192c <tc_init+0x2ac>)
    1766:	6953      	ldr	r3, [r2, #20]
    1768:	4318      	orrs	r0, r3
    176a:	6150      	str	r0, [r2, #20]
    176c:	e008      	b.n	1780 <tc_init+0x100>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    176e:	4a6f      	ldr	r2, [pc, #444]	; (192c <tc_init+0x2ac>)
    1770:	6993      	ldr	r3, [r2, #24]
    1772:	4318      	orrs	r0, r3
    1774:	6190      	str	r0, [r2, #24]
    1776:	e003      	b.n	1780 <tc_init+0x100>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    1778:	4a6c      	ldr	r2, [pc, #432]	; (192c <tc_init+0x2ac>)
    177a:	69d3      	ldr	r3, [r2, #28]
    177c:	4318      	orrs	r0, r3
    177e:	61d0      	str	r0, [r2, #28]
			inst_mclk_apbmask[2*instance+1]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    1780:	78fb      	ldrb	r3, [r7, #3]
    1782:	2b08      	cmp	r3, #8
    1784:	d120      	bne.n	17c8 <tc_init+0x148>
    1786:	4643      	mov	r3, r8
    1788:	3301      	adds	r3, #1
    178a:	2b04      	cmp	r3, #4
    178c:	dc1c      	bgt.n	17c8 <tc_init+0x148>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    178e:	aa02      	add	r2, sp, #8
    1790:	1ccb      	adds	r3, r1, #3
    1792:	009b      	lsls	r3, r3, #2
    1794:	5898      	ldr	r0, [r3, r2]
    1796:	1c8b      	adds	r3, r1, #2
    1798:	009b      	lsls	r3, r3, #2
    179a:	589b      	ldr	r3, [r3, r2]
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    179c:	b2da      	uxtb	r2, r3
    179e:	2a01      	cmp	r2, #1
    17a0:	d009      	beq.n	17b6 <tc_init+0x136>
    17a2:	2a00      	cmp	r2, #0
    17a4:	d002      	beq.n	17ac <tc_init+0x12c>
    17a6:	2a02      	cmp	r2, #2
    17a8:	d00a      	beq.n	17c0 <tc_init+0x140>
    17aa:	e00d      	b.n	17c8 <tc_init+0x148>
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    17ac:	4a5f      	ldr	r2, [pc, #380]	; (192c <tc_init+0x2ac>)
    17ae:	6953      	ldr	r3, [r2, #20]
    17b0:	4303      	orrs	r3, r0
    17b2:	6153      	str	r3, [r2, #20]
    17b4:	e008      	b.n	17c8 <tc_init+0x148>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    17b6:	4a5d      	ldr	r2, [pc, #372]	; (192c <tc_init+0x2ac>)
    17b8:	6993      	ldr	r3, [r2, #24]
    17ba:	4303      	orrs	r3, r0
    17bc:	6193      	str	r3, [r2, #24]
    17be:	e003      	b.n	17c8 <tc_init+0x148>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    17c0:	4a5a      	ldr	r2, [pc, #360]	; (192c <tc_init+0x2ac>)
    17c2:	69d3      	ldr	r3, [r2, #28]
    17c4:	4303      	orrs	r3, r0
    17c6:	61d3      	str	r3, [r2, #28]
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    17c8:	783b      	ldrb	r3, [r7, #0]
    17ca:	466a      	mov	r2, sp
    17cc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    17ce:	ab0c      	add	r3, sp, #48	; 0x30
    17d0:	4642      	mov	r2, r8
    17d2:	5c9c      	ldrb	r4, [r3, r2]
    17d4:	1c20      	adds	r0, r4, #0
    17d6:	4669      	mov	r1, sp
    17d8:	4b55      	ldr	r3, [pc, #340]	; (1930 <tc_init+0x2b0>)
    17da:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    17dc:	1c20      	adds	r0, r4, #0
    17de:	4b55      	ldr	r3, [pc, #340]	; (1934 <tc_init+0x2b4>)
    17e0:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    17e2:	79fa      	ldrb	r2, [r7, #7]
    17e4:	78fb      	ldrb	r3, [r7, #3]
    17e6:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    17e8:	88ba      	ldrh	r2, [r7, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    17ea:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    17ec:	7a7a      	ldrb	r2, [r7, #9]
    17ee:	2a00      	cmp	r2, #0
    17f0:	d002      	beq.n	17f8 <tc_init+0x178>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    17f2:	2280      	movs	r2, #128	; 0x80
    17f4:	0252      	lsls	r2, r2, #9
    17f6:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    17f8:	7aba      	ldrb	r2, [r7, #10]
    17fa:	2a00      	cmp	r2, #0
    17fc:	d002      	beq.n	1804 <tc_init+0x184>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    17fe:	2280      	movs	r2, #128	; 0x80
    1800:	0292      	lsls	r2, r2, #10
    1802:	4313      	orrs	r3, r2
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    1804:	7afa      	ldrb	r2, [r7, #11]
    1806:	2a00      	cmp	r2, #0
    1808:	d002      	beq.n	1810 <tc_init+0x190>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    180a:	2280      	movs	r2, #128	; 0x80
    180c:	0352      	lsls	r2, r2, #13
    180e:	4313      	orrs	r3, r2
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    1810:	7b3a      	ldrb	r2, [r7, #12]
    1812:	2a00      	cmp	r2, #0
    1814:	d002      	beq.n	181c <tc_init+0x19c>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    1816:	2280      	movs	r2, #128	; 0x80
    1818:	0392      	lsls	r2, r2, #14
    181a:	4313      	orrs	r3, r2
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    181c:	78b9      	ldrb	r1, [r7, #2]
    181e:	01c9      	lsls	r1, r1, #7
		if (config->enable_capture_on_IO[i] == true) {
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    1820:	787a      	ldrb	r2, [r7, #1]
    1822:	0192      	lsls	r2, r2, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    1824:	4311      	orrs	r1, r2
		if (config->enable_capture_on_IO[i] == true) {
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    1826:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1828:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    182a:	6913      	ldr	r3, [r2, #16]
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    182c:	2b00      	cmp	r3, #0
    182e:	d1fc      	bne.n	182a <tc_init+0x1aa>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1830:	6031      	str	r1, [r6, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1832:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1834:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1836:	2b00      	cmp	r3, #0
    1838:	d1fc      	bne.n	1834 <tc_init+0x1b4>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
    183a:	79bb      	ldrb	r3, [r7, #6]
    183c:	7333      	strb	r3, [r6, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
    183e:	7b79      	ldrb	r1, [r7, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1840:	1e4b      	subs	r3, r1, #1
    1842:	4199      	sbcs	r1, r3
    1844:	0089      	lsls	r1, r1, #2
	}

	if (config->count_direction) {
    1846:	7bbb      	ldrb	r3, [r7, #14]
    1848:	2b00      	cmp	r3, #0
    184a:	d001      	beq.n	1850 <tc_init+0x1d0>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    184c:	2301      	movs	r3, #1
    184e:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1850:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1852:	6913      	ldr	r3, [r2, #16]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1854:	2b00      	cmp	r3, #0
    1856:	d1fc      	bne.n	1852 <tc_init+0x1d2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1858:	33ff      	adds	r3, #255	; 0xff
    185a:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    185c:	2900      	cmp	r1, #0
    185e:	d004      	beq.n	186a <tc_init+0x1ea>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1860:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1862:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    1864:	2b00      	cmp	r3, #0
    1866:	d1fc      	bne.n	1862 <tc_init+0x1e2>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1868:	7171      	strb	r1, [r6, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    186a:	7a3b      	ldrb	r3, [r7, #8]
    186c:	7373      	strb	r3, [r6, #13]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    186e:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1870:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1872:	2b00      	cmp	r3, #0
    1874:	d1fc      	bne.n	1870 <tc_init+0x1f0>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1876:	792b      	ldrb	r3, [r5, #4]
    1878:	2b04      	cmp	r3, #4
    187a:	d005      	beq.n	1888 <tc_init+0x208>
    187c:	2b08      	cmp	r3, #8
    187e:	d033      	beq.n	18e8 <tc_init+0x268>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1880:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1882:	2b00      	cmp	r3, #0
    1884:	d143      	bne.n	190e <tc_init+0x28e>
    1886:	e01c      	b.n	18c2 <tc_init+0x242>
    1888:	6913      	ldr	r3, [r2, #16]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    188a:	2b00      	cmp	r3, #0
    188c:	d1fc      	bne.n	1888 <tc_init+0x208>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    188e:	3328      	adds	r3, #40	; 0x28
    1890:	5cfb      	ldrb	r3, [r7, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    1892:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1894:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1896:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    1898:	2b00      	cmp	r3, #0
    189a:	d1fc      	bne.n	1896 <tc_init+0x216>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    189c:	3329      	adds	r3, #41	; 0x29
    189e:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    18a0:	76f3      	strb	r3, [r6, #27]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18a2:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    18a4:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    18a6:	2b00      	cmp	r3, #0
    18a8:	d1fc      	bne.n	18a4 <tc_init+0x224>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    18aa:	332a      	adds	r3, #42	; 0x2a
    18ac:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    18ae:	7733      	strb	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18b0:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    18b2:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    18b4:	2b00      	cmp	r3, #0
    18b6:	d1fc      	bne.n	18b2 <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    18b8:	332b      	adds	r3, #43	; 0x2b
    18ba:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    18bc:	7773      	strb	r3, [r6, #29]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    18be:	2000      	movs	r0, #0
    18c0:	e025      	b.n	190e <tc_init+0x28e>
    18c2:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    18c4:	2b00      	cmp	r3, #0
    18c6:	d1fc      	bne.n	18c2 <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    18c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    18ca:	82b3      	strh	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18cc:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    18ce:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    18d0:	2b00      	cmp	r3, #0
    18d2:	d1fc      	bne.n	18ce <tc_init+0x24e>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    18d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    18d6:	83b3      	strh	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18d8:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    18da:	6913      	ldr	r3, [r2, #16]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    18dc:	2b00      	cmp	r3, #0
    18de:	d1fc      	bne.n	18da <tc_init+0x25a>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    18e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    18e2:	83f3      	strh	r3, [r6, #30]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    18e4:	2000      	movs	r0, #0
    18e6:	e012      	b.n	190e <tc_init+0x28e>
    18e8:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    18ea:	2b00      	cmp	r3, #0
    18ec:	d1fc      	bne.n	18e8 <tc_init+0x268>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    18ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    18f0:	6173      	str	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18f2:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    18f4:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    18f6:	2b00      	cmp	r3, #0
    18f8:	d1fc      	bne.n	18f4 <tc_init+0x274>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    18fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18fc:	61f3      	str	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18fe:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
    1900:	6913      	ldr	r3, [r2, #16]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1902:	2b00      	cmp	r3, #0
    1904:	d1fc      	bne.n	1900 <tc_init+0x280>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1906:	6b3b      	ldr	r3, [r7, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    1908:	6233      	str	r3, [r6, #32]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    190a:	2000      	movs	r0, #0
    190c:	e7ff      	b.n	190e <tc_init+0x28e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    190e:	b00e      	add	sp, #56	; 0x38
    1910:	bc04      	pop	{r2}
    1912:	4690      	mov	r8, r2
    1914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	00001645 	.word	0x00001645
    191c:	000027d4 	.word	0x000027d4
    1920:	00001d01 	.word	0x00001d01
    1924:	20000170 	.word	0x20000170
    1928:	00001509 	.word	0x00001509
    192c:	40000800 	.word	0x40000800
    1930:	0000140d 	.word	0x0000140d
    1934:	000013a5 	.word	0x000013a5

00001938 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    1938:	6802      	ldr	r2, [r0, #0]
    193a:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    193c:	2b00      	cmp	r3, #0
    193e:	d1fc      	bne.n	193a <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    1940:	7903      	ldrb	r3, [r0, #4]
    1942:	2b04      	cmp	r3, #4
    1944:	d005      	beq.n	1952 <tc_set_count_value+0x1a>
    1946:	2b08      	cmp	r3, #8
    1948:	d00b      	beq.n	1962 <tc_set_count_value+0x2a>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    194a:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    194c:	2b00      	cmp	r3, #0
    194e:	d10b      	bne.n	1968 <tc_set_count_value+0x30>
    1950:	e003      	b.n	195a <tc_set_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    1952:	b2c9      	uxtb	r1, r1
    1954:	7511      	strb	r1, [r2, #20]
			return STATUS_OK;
    1956:	2000      	movs	r0, #0
    1958:	e006      	b.n	1968 <tc_set_count_value+0x30>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    195a:	b289      	uxth	r1, r1
    195c:	8291      	strh	r1, [r2, #20]
			return STATUS_OK;
    195e:	2000      	movs	r0, #0
    1960:	e002      	b.n	1968 <tc_set_count_value+0x30>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    1962:	6151      	str	r1, [r2, #20]
			return STATUS_OK;
    1964:	2000      	movs	r0, #0
    1966:	e7ff      	b.n	1968 <tc_set_count_value+0x30>

		default:
			return STATUS_ERR_INVALID_ARG;
	}
}
    1968:	4770      	bx	lr
    196a:	46c0      	nop			; (mov r8, r8)

0000196c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    196c:	e7fe      	b.n	196c <Dummy_Handler>
    196e:	46c0      	nop			; (mov r8, r8)

00001970 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1970:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1972:	4b1b      	ldr	r3, [pc, #108]	; (19e0 <Reset_Handler+0x70>)
    1974:	4a1b      	ldr	r2, [pc, #108]	; (19e4 <Reset_Handler+0x74>)
    1976:	429a      	cmp	r2, r3
    1978:	d003      	beq.n	1982 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    197a:	4b1b      	ldr	r3, [pc, #108]	; (19e8 <Reset_Handler+0x78>)
    197c:	4a18      	ldr	r2, [pc, #96]	; (19e0 <Reset_Handler+0x70>)
    197e:	429a      	cmp	r2, r3
    1980:	d304      	bcc.n	198c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1982:	4b1a      	ldr	r3, [pc, #104]	; (19ec <Reset_Handler+0x7c>)
    1984:	4a1a      	ldr	r2, [pc, #104]	; (19f0 <Reset_Handler+0x80>)
    1986:	429a      	cmp	r2, r3
    1988:	d310      	bcc.n	19ac <Reset_Handler+0x3c>
    198a:	e01e      	b.n	19ca <Reset_Handler+0x5a>
    198c:	4a19      	ldr	r2, [pc, #100]	; (19f4 <Reset_Handler+0x84>)
    198e:	4b16      	ldr	r3, [pc, #88]	; (19e8 <Reset_Handler+0x78>)
    1990:	3303      	adds	r3, #3
    1992:	1a9b      	subs	r3, r3, r2
    1994:	089b      	lsrs	r3, r3, #2
    1996:	3301      	adds	r3, #1
    1998:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    199a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    199c:	4810      	ldr	r0, [pc, #64]	; (19e0 <Reset_Handler+0x70>)
    199e:	4911      	ldr	r1, [pc, #68]	; (19e4 <Reset_Handler+0x74>)
    19a0:	588c      	ldr	r4, [r1, r2]
    19a2:	5084      	str	r4, [r0, r2]
    19a4:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    19a6:	429a      	cmp	r2, r3
    19a8:	d1fa      	bne.n	19a0 <Reset_Handler+0x30>
    19aa:	e7ea      	b.n	1982 <Reset_Handler+0x12>
    19ac:	4a12      	ldr	r2, [pc, #72]	; (19f8 <Reset_Handler+0x88>)
    19ae:	4b0f      	ldr	r3, [pc, #60]	; (19ec <Reset_Handler+0x7c>)
    19b0:	3303      	adds	r3, #3
    19b2:	1a9b      	subs	r3, r3, r2
    19b4:	089b      	lsrs	r3, r3, #2
    19b6:	3301      	adds	r3, #1
    19b8:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    19ba:	2200      	movs	r2, #0
                *pDest++ = 0;
    19bc:	480c      	ldr	r0, [pc, #48]	; (19f0 <Reset_Handler+0x80>)
    19be:	2100      	movs	r1, #0
    19c0:	1814      	adds	r4, r2, r0
    19c2:	6021      	str	r1, [r4, #0]
    19c4:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    19c6:	429a      	cmp	r2, r3
    19c8:	d1fa      	bne.n	19c0 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    19ca:	4a0c      	ldr	r2, [pc, #48]	; (19fc <Reset_Handler+0x8c>)
    19cc:	21ff      	movs	r1, #255	; 0xff
    19ce:	4b0c      	ldr	r3, [pc, #48]	; (1a00 <Reset_Handler+0x90>)
    19d0:	438b      	bics	r3, r1
    19d2:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    19d4:	4b0b      	ldr	r3, [pc, #44]	; (1a04 <Reset_Handler+0x94>)
    19d6:	4798      	blx	r3

        /* Branch to main function */
        main();
    19d8:	4b0b      	ldr	r3, [pc, #44]	; (1a08 <Reset_Handler+0x98>)
    19da:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    19dc:	e7fe      	b.n	19dc <Reset_Handler+0x6c>
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	20000000 	.word	0x20000000
    19e4:	000028b8 	.word	0x000028b8
    19e8:	20000068 	.word	0x20000068
    19ec:	20000194 	.word	0x20000194
    19f0:	20000068 	.word	0x20000068
    19f4:	20000004 	.word	0x20000004
    19f8:	2000006c 	.word	0x2000006c
    19fc:	e000ed00 	.word	0xe000ed00
    1a00:	00000000 	.word	0x00000000
    1a04:	00001cb5 	.word	0x00001cb5
    1a08:	00001ae1 	.word	0x00001ae1

00001a0c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a0e:	4647      	mov	r7, r8
    1a10:	b480      	push	{r7}
    1a12:	1c0c      	adds	r4, r1, #0
    1a14:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1a16:	2800      	cmp	r0, #0
    1a18:	d110      	bne.n	1a3c <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
    1a1a:	2a00      	cmp	r2, #0
    1a1c:	dd0a      	ble.n	1a34 <_read+0x28>
    1a1e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1a20:	4e09      	ldr	r6, [pc, #36]	; (1a48 <_read+0x3c>)
    1a22:	4d0a      	ldr	r5, [pc, #40]	; (1a4c <_read+0x40>)
    1a24:	6830      	ldr	r0, [r6, #0]
    1a26:	1c21      	adds	r1, r4, #0
    1a28:	682b      	ldr	r3, [r5, #0]
    1a2a:	4798      	blx	r3
		ptr++;
    1a2c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1a2e:	42bc      	cmp	r4, r7
    1a30:	d1f8      	bne.n	1a24 <_read+0x18>
    1a32:	e001      	b.n	1a38 <_read+0x2c>
    1a34:	2300      	movs	r3, #0
    1a36:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    1a38:	4640      	mov	r0, r8
    1a3a:	e001      	b.n	1a40 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    1a3c:	2001      	movs	r0, #1
    1a3e:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    1a40:	bc04      	pop	{r2}
    1a42:	4690      	mov	r8, r2
    1a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	2000018c 	.word	0x2000018c
    1a4c:	20000184 	.word	0x20000184

00001a50 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a52:	4647      	mov	r7, r8
    1a54:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1a56:	3801      	subs	r0, #1
    1a58:	2802      	cmp	r0, #2
    1a5a:	d815      	bhi.n	1a88 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
    1a5c:	2a00      	cmp	r2, #0
    1a5e:	d010      	beq.n	1a82 <_write+0x32>
    1a60:	1c15      	adds	r5, r2, #0
    1a62:	1c0e      	adds	r6, r1, #0
    1a64:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1a66:	4b0c      	ldr	r3, [pc, #48]	; (1a98 <_write+0x48>)
    1a68:	4698      	mov	r8, r3
    1a6a:	4f0c      	ldr	r7, [pc, #48]	; (1a9c <_write+0x4c>)
    1a6c:	4643      	mov	r3, r8
    1a6e:	6818      	ldr	r0, [r3, #0]
    1a70:	5d31      	ldrb	r1, [r6, r4]
    1a72:	683b      	ldr	r3, [r7, #0]
    1a74:	4798      	blx	r3
    1a76:	2800      	cmp	r0, #0
    1a78:	db09      	blt.n	1a8e <_write+0x3e>
			return -1;
		}
		++nChars;
    1a7a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1a7c:	42a5      	cmp	r5, r4
    1a7e:	d1f5      	bne.n	1a6c <_write+0x1c>
    1a80:	e000      	b.n	1a84 <_write+0x34>
    1a82:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    1a84:	1c20      	adds	r0, r4, #0
    1a86:	e004      	b.n	1a92 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    1a88:	2001      	movs	r0, #1
    1a8a:	4240      	negs	r0, r0
    1a8c:	e001      	b.n	1a92 <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    1a8e:	2001      	movs	r0, #1
    1a90:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    1a92:	bc04      	pop	{r2}
    1a94:	4690      	mov	r8, r2
    1a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a98:	2000018c 	.word	0x2000018c
    1a9c:	20000188 	.word	0x20000188

00001aa0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1aa0:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1aa2:	4a06      	ldr	r2, [pc, #24]	; (1abc <_sbrk+0x1c>)
    1aa4:	6812      	ldr	r2, [r2, #0]
    1aa6:	2a00      	cmp	r2, #0
    1aa8:	d102      	bne.n	1ab0 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    1aaa:	4905      	ldr	r1, [pc, #20]	; (1ac0 <_sbrk+0x20>)
    1aac:	4a03      	ldr	r2, [pc, #12]	; (1abc <_sbrk+0x1c>)
    1aae:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    1ab0:	4a02      	ldr	r2, [pc, #8]	; (1abc <_sbrk+0x1c>)
    1ab2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1ab4:	18c3      	adds	r3, r0, r3
    1ab6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1ab8:	4770      	bx	lr
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	200000ec 	.word	0x200000ec
    1ac0:	20002198 	.word	0x20002198

00001ac4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1ac4:	2001      	movs	r0, #1
    1ac6:	4240      	negs	r0, r0
    1ac8:	4770      	bx	lr
    1aca:	46c0      	nop			; (mov r8, r8)

00001acc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1acc:	2380      	movs	r3, #128	; 0x80
    1ace:	019b      	lsls	r3, r3, #6
    1ad0:	604b      	str	r3, [r1, #4]

	return 0;
}
    1ad2:	2000      	movs	r0, #0
    1ad4:	4770      	bx	lr
    1ad6:	46c0      	nop			; (mov r8, r8)

00001ad8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1ad8:	2001      	movs	r0, #1
    1ada:	4770      	bx	lr

00001adc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1adc:	2000      	movs	r0, #0
    1ade:	4770      	bx	lr

00001ae0 <main>:
#include "TimerTick.h"
#include "DebugConsole.h"
#include "UserIO.h"

int main (void)
{
    1ae0:	b508      	push	{r3, lr}
	/*Enable system interrupt*/

	system_init();
    1ae2:	4b0c      	ldr	r3, [pc, #48]	; (1b14 <main+0x34>)
    1ae4:	4798      	blx	r3
	
	/*Configures the External Interrupt*/
	configure_extint();
    1ae6:	4b0c      	ldr	r3, [pc, #48]	; (1b18 <main+0x38>)
    1ae8:	4798      	blx	r3

	/*Configures the External Interrupt callback*/
	configure_eic_callback();
    1aea:	4b0c      	ldr	r3, [pc, #48]	; (1b1c <main+0x3c>)
    1aec:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    1aee:	2201      	movs	r2, #1
    1af0:	4b0b      	ldr	r3, [pc, #44]	; (1b20 <main+0x40>)
    1af2:	701a      	strb	r2, [r3, #0]
    1af4:	f3bf 8f5f 	dmb	sy
    1af8:	b662      	cpsie	i
	 pin.direction = PORT_PIN_DIR_OUTPUT;
	 port_pin_set_config(LED0_PIN, &pin);

	 port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
*/
	configure_pins();
    1afa:	4b0a      	ldr	r3, [pc, #40]	; (1b24 <main+0x44>)
    1afc:	4798      	blx	r3
	 
	 /*Configures  TC driver*/
	 configure_tc();
    1afe:	4b0a      	ldr	r3, [pc, #40]	; (1b28 <main+0x48>)
    1b00:	4798      	blx	r3

	 /*Configures TC callback*/
	 configure_tc_callbacks();
    1b02:	4b0a      	ldr	r3, [pc, #40]	; (1b2c <main+0x4c>)
    1b04:	4798      	blx	r3
	
	configure_console();
    1b06:	4b0a      	ldr	r3, [pc, #40]	; (1b30 <main+0x50>)
    1b08:	4798      	blx	r3
	puts("C21 Starter Project\n\n");
    1b0a:	480a      	ldr	r0, [pc, #40]	; (1b34 <main+0x54>)
    1b0c:	4b0a      	ldr	r3, [pc, #40]	; (1b38 <main+0x58>)
    1b0e:	4798      	blx	r3
	
	while(1)
	{
		//do stuff
	}
    1b10:	e7fe      	b.n	1b10 <main+0x30>
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	00001539 	.word	0x00001539
    1b18:	000003d5 	.word	0x000003d5
    1b1c:	000003b1 	.word	0x000003b1
    1b20:	20000000 	.word	0x20000000
    1b24:	00000389 	.word	0x00000389
    1b28:	000002a1 	.word	0x000002a1
    1b2c:	00000315 	.word	0x00000315
    1b30:	00000161 	.word	0x00000161
    1b34:	00002818 	.word	0x00002818
    1b38:	00001de5 	.word	0x00001de5

00001b3c <__aeabi_uidiv>:
    1b3c:	2200      	movs	r2, #0
    1b3e:	0843      	lsrs	r3, r0, #1
    1b40:	428b      	cmp	r3, r1
    1b42:	d374      	bcc.n	1c2e <__aeabi_uidiv+0xf2>
    1b44:	0903      	lsrs	r3, r0, #4
    1b46:	428b      	cmp	r3, r1
    1b48:	d35f      	bcc.n	1c0a <__aeabi_uidiv+0xce>
    1b4a:	0a03      	lsrs	r3, r0, #8
    1b4c:	428b      	cmp	r3, r1
    1b4e:	d344      	bcc.n	1bda <__aeabi_uidiv+0x9e>
    1b50:	0b03      	lsrs	r3, r0, #12
    1b52:	428b      	cmp	r3, r1
    1b54:	d328      	bcc.n	1ba8 <__aeabi_uidiv+0x6c>
    1b56:	0c03      	lsrs	r3, r0, #16
    1b58:	428b      	cmp	r3, r1
    1b5a:	d30d      	bcc.n	1b78 <__aeabi_uidiv+0x3c>
    1b5c:	22ff      	movs	r2, #255	; 0xff
    1b5e:	0209      	lsls	r1, r1, #8
    1b60:	ba12      	rev	r2, r2
    1b62:	0c03      	lsrs	r3, r0, #16
    1b64:	428b      	cmp	r3, r1
    1b66:	d302      	bcc.n	1b6e <__aeabi_uidiv+0x32>
    1b68:	1212      	asrs	r2, r2, #8
    1b6a:	0209      	lsls	r1, r1, #8
    1b6c:	d065      	beq.n	1c3a <__aeabi_uidiv+0xfe>
    1b6e:	0b03      	lsrs	r3, r0, #12
    1b70:	428b      	cmp	r3, r1
    1b72:	d319      	bcc.n	1ba8 <__aeabi_uidiv+0x6c>
    1b74:	e000      	b.n	1b78 <__aeabi_uidiv+0x3c>
    1b76:	0a09      	lsrs	r1, r1, #8
    1b78:	0bc3      	lsrs	r3, r0, #15
    1b7a:	428b      	cmp	r3, r1
    1b7c:	d301      	bcc.n	1b82 <__aeabi_uidiv+0x46>
    1b7e:	03cb      	lsls	r3, r1, #15
    1b80:	1ac0      	subs	r0, r0, r3
    1b82:	4152      	adcs	r2, r2
    1b84:	0b83      	lsrs	r3, r0, #14
    1b86:	428b      	cmp	r3, r1
    1b88:	d301      	bcc.n	1b8e <__aeabi_uidiv+0x52>
    1b8a:	038b      	lsls	r3, r1, #14
    1b8c:	1ac0      	subs	r0, r0, r3
    1b8e:	4152      	adcs	r2, r2
    1b90:	0b43      	lsrs	r3, r0, #13
    1b92:	428b      	cmp	r3, r1
    1b94:	d301      	bcc.n	1b9a <__aeabi_uidiv+0x5e>
    1b96:	034b      	lsls	r3, r1, #13
    1b98:	1ac0      	subs	r0, r0, r3
    1b9a:	4152      	adcs	r2, r2
    1b9c:	0b03      	lsrs	r3, r0, #12
    1b9e:	428b      	cmp	r3, r1
    1ba0:	d301      	bcc.n	1ba6 <__aeabi_uidiv+0x6a>
    1ba2:	030b      	lsls	r3, r1, #12
    1ba4:	1ac0      	subs	r0, r0, r3
    1ba6:	4152      	adcs	r2, r2
    1ba8:	0ac3      	lsrs	r3, r0, #11
    1baa:	428b      	cmp	r3, r1
    1bac:	d301      	bcc.n	1bb2 <__aeabi_uidiv+0x76>
    1bae:	02cb      	lsls	r3, r1, #11
    1bb0:	1ac0      	subs	r0, r0, r3
    1bb2:	4152      	adcs	r2, r2
    1bb4:	0a83      	lsrs	r3, r0, #10
    1bb6:	428b      	cmp	r3, r1
    1bb8:	d301      	bcc.n	1bbe <__aeabi_uidiv+0x82>
    1bba:	028b      	lsls	r3, r1, #10
    1bbc:	1ac0      	subs	r0, r0, r3
    1bbe:	4152      	adcs	r2, r2
    1bc0:	0a43      	lsrs	r3, r0, #9
    1bc2:	428b      	cmp	r3, r1
    1bc4:	d301      	bcc.n	1bca <__aeabi_uidiv+0x8e>
    1bc6:	024b      	lsls	r3, r1, #9
    1bc8:	1ac0      	subs	r0, r0, r3
    1bca:	4152      	adcs	r2, r2
    1bcc:	0a03      	lsrs	r3, r0, #8
    1bce:	428b      	cmp	r3, r1
    1bd0:	d301      	bcc.n	1bd6 <__aeabi_uidiv+0x9a>
    1bd2:	020b      	lsls	r3, r1, #8
    1bd4:	1ac0      	subs	r0, r0, r3
    1bd6:	4152      	adcs	r2, r2
    1bd8:	d2cd      	bcs.n	1b76 <__aeabi_uidiv+0x3a>
    1bda:	09c3      	lsrs	r3, r0, #7
    1bdc:	428b      	cmp	r3, r1
    1bde:	d301      	bcc.n	1be4 <__aeabi_uidiv+0xa8>
    1be0:	01cb      	lsls	r3, r1, #7
    1be2:	1ac0      	subs	r0, r0, r3
    1be4:	4152      	adcs	r2, r2
    1be6:	0983      	lsrs	r3, r0, #6
    1be8:	428b      	cmp	r3, r1
    1bea:	d301      	bcc.n	1bf0 <__aeabi_uidiv+0xb4>
    1bec:	018b      	lsls	r3, r1, #6
    1bee:	1ac0      	subs	r0, r0, r3
    1bf0:	4152      	adcs	r2, r2
    1bf2:	0943      	lsrs	r3, r0, #5
    1bf4:	428b      	cmp	r3, r1
    1bf6:	d301      	bcc.n	1bfc <__aeabi_uidiv+0xc0>
    1bf8:	014b      	lsls	r3, r1, #5
    1bfa:	1ac0      	subs	r0, r0, r3
    1bfc:	4152      	adcs	r2, r2
    1bfe:	0903      	lsrs	r3, r0, #4
    1c00:	428b      	cmp	r3, r1
    1c02:	d301      	bcc.n	1c08 <__aeabi_uidiv+0xcc>
    1c04:	010b      	lsls	r3, r1, #4
    1c06:	1ac0      	subs	r0, r0, r3
    1c08:	4152      	adcs	r2, r2
    1c0a:	08c3      	lsrs	r3, r0, #3
    1c0c:	428b      	cmp	r3, r1
    1c0e:	d301      	bcc.n	1c14 <__aeabi_uidiv+0xd8>
    1c10:	00cb      	lsls	r3, r1, #3
    1c12:	1ac0      	subs	r0, r0, r3
    1c14:	4152      	adcs	r2, r2
    1c16:	0883      	lsrs	r3, r0, #2
    1c18:	428b      	cmp	r3, r1
    1c1a:	d301      	bcc.n	1c20 <__aeabi_uidiv+0xe4>
    1c1c:	008b      	lsls	r3, r1, #2
    1c1e:	1ac0      	subs	r0, r0, r3
    1c20:	4152      	adcs	r2, r2
    1c22:	0843      	lsrs	r3, r0, #1
    1c24:	428b      	cmp	r3, r1
    1c26:	d301      	bcc.n	1c2c <__aeabi_uidiv+0xf0>
    1c28:	004b      	lsls	r3, r1, #1
    1c2a:	1ac0      	subs	r0, r0, r3
    1c2c:	4152      	adcs	r2, r2
    1c2e:	1a41      	subs	r1, r0, r1
    1c30:	d200      	bcs.n	1c34 <__aeabi_uidiv+0xf8>
    1c32:	4601      	mov	r1, r0
    1c34:	4152      	adcs	r2, r2
    1c36:	4610      	mov	r0, r2
    1c38:	4770      	bx	lr
    1c3a:	e7ff      	b.n	1c3c <__aeabi_uidiv+0x100>
    1c3c:	b501      	push	{r0, lr}
    1c3e:	2000      	movs	r0, #0
    1c40:	f000 f80c 	bl	1c5c <__aeabi_idiv0>
    1c44:	bd02      	pop	{r1, pc}
    1c46:	46c0      	nop			; (mov r8, r8)

00001c48 <__aeabi_uidivmod>:
    1c48:	2900      	cmp	r1, #0
    1c4a:	d0f7      	beq.n	1c3c <__aeabi_uidiv+0x100>
    1c4c:	b503      	push	{r0, r1, lr}
    1c4e:	f7ff ff75 	bl	1b3c <__aeabi_uidiv>
    1c52:	bc0e      	pop	{r1, r2, r3}
    1c54:	4342      	muls	r2, r0
    1c56:	1a89      	subs	r1, r1, r2
    1c58:	4718      	bx	r3
    1c5a:	46c0      	nop			; (mov r8, r8)

00001c5c <__aeabi_idiv0>:
    1c5c:	4770      	bx	lr
    1c5e:	46c0      	nop			; (mov r8, r8)

00001c60 <__aeabi_lmul>:
    1c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c62:	464f      	mov	r7, r9
    1c64:	4646      	mov	r6, r8
    1c66:	0405      	lsls	r5, r0, #16
    1c68:	0c2d      	lsrs	r5, r5, #16
    1c6a:	1c2c      	adds	r4, r5, #0
    1c6c:	b4c0      	push	{r6, r7}
    1c6e:	0417      	lsls	r7, r2, #16
    1c70:	0c16      	lsrs	r6, r2, #16
    1c72:	0c3f      	lsrs	r7, r7, #16
    1c74:	4699      	mov	r9, r3
    1c76:	0c03      	lsrs	r3, r0, #16
    1c78:	437c      	muls	r4, r7
    1c7a:	4375      	muls	r5, r6
    1c7c:	435f      	muls	r7, r3
    1c7e:	4373      	muls	r3, r6
    1c80:	197d      	adds	r5, r7, r5
    1c82:	0c26      	lsrs	r6, r4, #16
    1c84:	19ad      	adds	r5, r5, r6
    1c86:	469c      	mov	ip, r3
    1c88:	42af      	cmp	r7, r5
    1c8a:	d903      	bls.n	1c94 <__aeabi_lmul+0x34>
    1c8c:	2380      	movs	r3, #128	; 0x80
    1c8e:	025b      	lsls	r3, r3, #9
    1c90:	4698      	mov	r8, r3
    1c92:	44c4      	add	ip, r8
    1c94:	464b      	mov	r3, r9
    1c96:	4351      	muls	r1, r2
    1c98:	4343      	muls	r3, r0
    1c9a:	0424      	lsls	r4, r4, #16
    1c9c:	0c2e      	lsrs	r6, r5, #16
    1c9e:	0c24      	lsrs	r4, r4, #16
    1ca0:	042d      	lsls	r5, r5, #16
    1ca2:	4466      	add	r6, ip
    1ca4:	192c      	adds	r4, r5, r4
    1ca6:	1859      	adds	r1, r3, r1
    1ca8:	1989      	adds	r1, r1, r6
    1caa:	1c20      	adds	r0, r4, #0
    1cac:	bc0c      	pop	{r2, r3}
    1cae:	4690      	mov	r8, r2
    1cb0:	4699      	mov	r9, r3
    1cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001cb4 <__libc_init_array>:
    1cb4:	4b0e      	ldr	r3, [pc, #56]	; (1cf0 <__libc_init_array+0x3c>)
    1cb6:	b570      	push	{r4, r5, r6, lr}
    1cb8:	2500      	movs	r5, #0
    1cba:	1c1e      	adds	r6, r3, #0
    1cbc:	4c0d      	ldr	r4, [pc, #52]	; (1cf4 <__libc_init_array+0x40>)
    1cbe:	1ae4      	subs	r4, r4, r3
    1cc0:	10a4      	asrs	r4, r4, #2
    1cc2:	42a5      	cmp	r5, r4
    1cc4:	d004      	beq.n	1cd0 <__libc_init_array+0x1c>
    1cc6:	00ab      	lsls	r3, r5, #2
    1cc8:	58f3      	ldr	r3, [r6, r3]
    1cca:	4798      	blx	r3
    1ccc:	3501      	adds	r5, #1
    1cce:	e7f8      	b.n	1cc2 <__libc_init_array+0xe>
    1cd0:	f000 fde2 	bl	2898 <_init>
    1cd4:	4b08      	ldr	r3, [pc, #32]	; (1cf8 <__libc_init_array+0x44>)
    1cd6:	2500      	movs	r5, #0
    1cd8:	1c1e      	adds	r6, r3, #0
    1cda:	4c08      	ldr	r4, [pc, #32]	; (1cfc <__libc_init_array+0x48>)
    1cdc:	1ae4      	subs	r4, r4, r3
    1cde:	10a4      	asrs	r4, r4, #2
    1ce0:	42a5      	cmp	r5, r4
    1ce2:	d004      	beq.n	1cee <__libc_init_array+0x3a>
    1ce4:	00ab      	lsls	r3, r5, #2
    1ce6:	58f3      	ldr	r3, [r6, r3]
    1ce8:	4798      	blx	r3
    1cea:	3501      	adds	r5, #1
    1cec:	e7f8      	b.n	1ce0 <__libc_init_array+0x2c>
    1cee:	bd70      	pop	{r4, r5, r6, pc}
    1cf0:	000028a4 	.word	0x000028a4
    1cf4:	000028a4 	.word	0x000028a4
    1cf8:	000028a4 	.word	0x000028a4
    1cfc:	000028a8 	.word	0x000028a8

00001d00 <memcpy>:
    1d00:	2300      	movs	r3, #0
    1d02:	b510      	push	{r4, lr}
    1d04:	4293      	cmp	r3, r2
    1d06:	d003      	beq.n	1d10 <memcpy+0x10>
    1d08:	5ccc      	ldrb	r4, [r1, r3]
    1d0a:	54c4      	strb	r4, [r0, r3]
    1d0c:	3301      	adds	r3, #1
    1d0e:	e7f9      	b.n	1d04 <memcpy+0x4>
    1d10:	bd10      	pop	{r4, pc}

00001d12 <memset>:
    1d12:	1c03      	adds	r3, r0, #0
    1d14:	1882      	adds	r2, r0, r2
    1d16:	4293      	cmp	r3, r2
    1d18:	d002      	beq.n	1d20 <memset+0xe>
    1d1a:	7019      	strb	r1, [r3, #0]
    1d1c:	3301      	adds	r3, #1
    1d1e:	e7fa      	b.n	1d16 <memset+0x4>
    1d20:	4770      	bx	lr

00001d22 <_puts_r>:
    1d22:	b570      	push	{r4, r5, r6, lr}
    1d24:	1c05      	adds	r5, r0, #0
    1d26:	1c0e      	adds	r6, r1, #0
    1d28:	2800      	cmp	r0, #0
    1d2a:	d004      	beq.n	1d36 <_puts_r+0x14>
    1d2c:	6983      	ldr	r3, [r0, #24]
    1d2e:	2b00      	cmp	r3, #0
    1d30:	d101      	bne.n	1d36 <_puts_r+0x14>
    1d32:	f000 fab5 	bl	22a0 <__sinit>
    1d36:	68ac      	ldr	r4, [r5, #8]
    1d38:	89a3      	ldrh	r3, [r4, #12]
    1d3a:	071b      	lsls	r3, r3, #28
    1d3c:	d502      	bpl.n	1d44 <_puts_r+0x22>
    1d3e:	6923      	ldr	r3, [r4, #16]
    1d40:	2b00      	cmp	r3, #0
    1d42:	d119      	bne.n	1d78 <_puts_r+0x56>
    1d44:	1c28      	adds	r0, r5, #0
    1d46:	1c21      	adds	r1, r4, #0
    1d48:	f000 f93e 	bl	1fc8 <__swsetup_r>
    1d4c:	2800      	cmp	r0, #0
    1d4e:	d013      	beq.n	1d78 <_puts_r+0x56>
    1d50:	2001      	movs	r0, #1
    1d52:	4240      	negs	r0, r0
    1d54:	e045      	b.n	1de2 <_puts_r+0xc0>
    1d56:	7831      	ldrb	r1, [r6, #0]
    1d58:	2b00      	cmp	r3, #0
    1d5a:	da1b      	bge.n	1d94 <_puts_r+0x72>
    1d5c:	69a2      	ldr	r2, [r4, #24]
    1d5e:	4293      	cmp	r3, r2
    1d60:	da11      	bge.n	1d86 <_puts_r+0x64>
    1d62:	1c22      	adds	r2, r4, #0
    1d64:	1c28      	adds	r0, r5, #0
    1d66:	f000 f8d7 	bl	1f18 <__swbuf_r>
    1d6a:	3001      	adds	r0, #1
    1d6c:	4242      	negs	r2, r0
    1d6e:	4142      	adcs	r2, r0
    1d70:	b2d0      	uxtb	r0, r2
    1d72:	2800      	cmp	r0, #0
    1d74:	d1ec      	bne.n	1d50 <_puts_r+0x2e>
    1d76:	3601      	adds	r6, #1
    1d78:	68a3      	ldr	r3, [r4, #8]
    1d7a:	7832      	ldrb	r2, [r6, #0]
    1d7c:	3b01      	subs	r3, #1
    1d7e:	60a3      	str	r3, [r4, #8]
    1d80:	2a00      	cmp	r2, #0
    1d82:	d1e8      	bne.n	1d56 <_puts_r+0x34>
    1d84:	e00c      	b.n	1da0 <_puts_r+0x7e>
    1d86:	6823      	ldr	r3, [r4, #0]
    1d88:	7019      	strb	r1, [r3, #0]
    1d8a:	6823      	ldr	r3, [r4, #0]
    1d8c:	7819      	ldrb	r1, [r3, #0]
    1d8e:	290a      	cmp	r1, #10
    1d90:	d103      	bne.n	1d9a <_puts_r+0x78>
    1d92:	e7e6      	b.n	1d62 <_puts_r+0x40>
    1d94:	6823      	ldr	r3, [r4, #0]
    1d96:	7019      	strb	r1, [r3, #0]
    1d98:	6823      	ldr	r3, [r4, #0]
    1d9a:	3301      	adds	r3, #1
    1d9c:	6023      	str	r3, [r4, #0]
    1d9e:	e7ea      	b.n	1d76 <_puts_r+0x54>
    1da0:	2b00      	cmp	r3, #0
    1da2:	da17      	bge.n	1dd4 <_puts_r+0xb2>
    1da4:	69a2      	ldr	r2, [r4, #24]
    1da6:	4293      	cmp	r3, r2
    1da8:	db08      	blt.n	1dbc <_puts_r+0x9a>
    1daa:	230a      	movs	r3, #10
    1dac:	6822      	ldr	r2, [r4, #0]
    1dae:	7013      	strb	r3, [r2, #0]
    1db0:	6823      	ldr	r3, [r4, #0]
    1db2:	7819      	ldrb	r1, [r3, #0]
    1db4:	290a      	cmp	r1, #10
    1db6:	d111      	bne.n	1ddc <_puts_r+0xba>
    1db8:	1c28      	adds	r0, r5, #0
    1dba:	e001      	b.n	1dc0 <_puts_r+0x9e>
    1dbc:	1c28      	adds	r0, r5, #0
    1dbe:	210a      	movs	r1, #10
    1dc0:	1c22      	adds	r2, r4, #0
    1dc2:	f000 f8a9 	bl	1f18 <__swbuf_r>
    1dc6:	3001      	adds	r0, #1
    1dc8:	4242      	negs	r2, r0
    1dca:	4142      	adcs	r2, r0
    1dcc:	b2d0      	uxtb	r0, r2
    1dce:	2800      	cmp	r0, #0
    1dd0:	d006      	beq.n	1de0 <_puts_r+0xbe>
    1dd2:	e7bd      	b.n	1d50 <_puts_r+0x2e>
    1dd4:	230a      	movs	r3, #10
    1dd6:	6822      	ldr	r2, [r4, #0]
    1dd8:	7013      	strb	r3, [r2, #0]
    1dda:	6823      	ldr	r3, [r4, #0]
    1ddc:	3301      	adds	r3, #1
    1dde:	6023      	str	r3, [r4, #0]
    1de0:	200a      	movs	r0, #10
    1de2:	bd70      	pop	{r4, r5, r6, pc}

00001de4 <puts>:
    1de4:	b508      	push	{r3, lr}
    1de6:	4b03      	ldr	r3, [pc, #12]	; (1df4 <puts+0x10>)
    1de8:	1c01      	adds	r1, r0, #0
    1dea:	6818      	ldr	r0, [r3, #0]
    1dec:	f7ff ff99 	bl	1d22 <_puts_r>
    1df0:	bd08      	pop	{r3, pc}
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	20000064 	.word	0x20000064

00001df8 <setbuf>:
    1df8:	b508      	push	{r3, lr}
    1dfa:	424a      	negs	r2, r1
    1dfc:	414a      	adcs	r2, r1
    1dfe:	2380      	movs	r3, #128	; 0x80
    1e00:	0052      	lsls	r2, r2, #1
    1e02:	00db      	lsls	r3, r3, #3
    1e04:	f000 f802 	bl	1e0c <setvbuf>
    1e08:	bd08      	pop	{r3, pc}
	...

00001e0c <setvbuf>:
    1e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e0e:	1c1e      	adds	r6, r3, #0
    1e10:	4b3c      	ldr	r3, [pc, #240]	; (1f04 <setvbuf+0xf8>)
    1e12:	1c04      	adds	r4, r0, #0
    1e14:	681d      	ldr	r5, [r3, #0]
    1e16:	1c0f      	adds	r7, r1, #0
    1e18:	9201      	str	r2, [sp, #4]
    1e1a:	2d00      	cmp	r5, #0
    1e1c:	d005      	beq.n	1e2a <setvbuf+0x1e>
    1e1e:	69ab      	ldr	r3, [r5, #24]
    1e20:	2b00      	cmp	r3, #0
    1e22:	d102      	bne.n	1e2a <setvbuf+0x1e>
    1e24:	1c28      	adds	r0, r5, #0
    1e26:	f000 fa3b 	bl	22a0 <__sinit>
    1e2a:	4b37      	ldr	r3, [pc, #220]	; (1f08 <setvbuf+0xfc>)
    1e2c:	429c      	cmp	r4, r3
    1e2e:	d101      	bne.n	1e34 <setvbuf+0x28>
    1e30:	686c      	ldr	r4, [r5, #4]
    1e32:	e008      	b.n	1e46 <setvbuf+0x3a>
    1e34:	4b35      	ldr	r3, [pc, #212]	; (1f0c <setvbuf+0x100>)
    1e36:	429c      	cmp	r4, r3
    1e38:	d101      	bne.n	1e3e <setvbuf+0x32>
    1e3a:	68ac      	ldr	r4, [r5, #8]
    1e3c:	e003      	b.n	1e46 <setvbuf+0x3a>
    1e3e:	4b34      	ldr	r3, [pc, #208]	; (1f10 <setvbuf+0x104>)
    1e40:	429c      	cmp	r4, r3
    1e42:	d100      	bne.n	1e46 <setvbuf+0x3a>
    1e44:	68ec      	ldr	r4, [r5, #12]
    1e46:	9b01      	ldr	r3, [sp, #4]
    1e48:	2b02      	cmp	r3, #2
    1e4a:	d858      	bhi.n	1efe <setvbuf+0xf2>
    1e4c:	2e00      	cmp	r6, #0
    1e4e:	db56      	blt.n	1efe <setvbuf+0xf2>
    1e50:	1c28      	adds	r0, r5, #0
    1e52:	1c21      	adds	r1, r4, #0
    1e54:	f000 f9b6 	bl	21c4 <_fflush_r>
    1e58:	2300      	movs	r3, #0
    1e5a:	6063      	str	r3, [r4, #4]
    1e5c:	61a3      	str	r3, [r4, #24]
    1e5e:	89a3      	ldrh	r3, [r4, #12]
    1e60:	061b      	lsls	r3, r3, #24
    1e62:	d503      	bpl.n	1e6c <setvbuf+0x60>
    1e64:	1c28      	adds	r0, r5, #0
    1e66:	6921      	ldr	r1, [r4, #16]
    1e68:	f000 fb0e 	bl	2488 <_free_r>
    1e6c:	2283      	movs	r2, #131	; 0x83
    1e6e:	89a3      	ldrh	r3, [r4, #12]
    1e70:	4393      	bics	r3, r2
    1e72:	81a3      	strh	r3, [r4, #12]
    1e74:	9b01      	ldr	r3, [sp, #4]
    1e76:	2b02      	cmp	r3, #2
    1e78:	d013      	beq.n	1ea2 <setvbuf+0x96>
    1e7a:	2f00      	cmp	r7, #0
    1e7c:	d125      	bne.n	1eca <setvbuf+0xbe>
    1e7e:	2e00      	cmp	r6, #0
    1e80:	d101      	bne.n	1e86 <setvbuf+0x7a>
    1e82:	2680      	movs	r6, #128	; 0x80
    1e84:	00f6      	lsls	r6, r6, #3
    1e86:	1c30      	adds	r0, r6, #0
    1e88:	f000 faf4 	bl	2474 <malloc>
    1e8c:	1e07      	subs	r7, r0, #0
    1e8e:	d118      	bne.n	1ec2 <setvbuf+0xb6>
    1e90:	2080      	movs	r0, #128	; 0x80
    1e92:	00c0      	lsls	r0, r0, #3
    1e94:	f000 faee 	bl	2474 <malloc>
    1e98:	1e07      	subs	r7, r0, #0
    1e9a:	d110      	bne.n	1ebe <setvbuf+0xb2>
    1e9c:	2001      	movs	r0, #1
    1e9e:	4240      	negs	r0, r0
    1ea0:	e000      	b.n	1ea4 <setvbuf+0x98>
    1ea2:	2000      	movs	r0, #0
    1ea4:	2202      	movs	r2, #2
    1ea6:	89a3      	ldrh	r3, [r4, #12]
    1ea8:	4313      	orrs	r3, r2
    1eaa:	81a3      	strh	r3, [r4, #12]
    1eac:	2300      	movs	r3, #0
    1eae:	60a3      	str	r3, [r4, #8]
    1eb0:	1c23      	adds	r3, r4, #0
    1eb2:	3347      	adds	r3, #71	; 0x47
    1eb4:	6023      	str	r3, [r4, #0]
    1eb6:	6123      	str	r3, [r4, #16]
    1eb8:	2301      	movs	r3, #1
    1eba:	6163      	str	r3, [r4, #20]
    1ebc:	e021      	b.n	1f02 <setvbuf+0xf6>
    1ebe:	2680      	movs	r6, #128	; 0x80
    1ec0:	00f6      	lsls	r6, r6, #3
    1ec2:	2280      	movs	r2, #128	; 0x80
    1ec4:	89a3      	ldrh	r3, [r4, #12]
    1ec6:	4313      	orrs	r3, r2
    1ec8:	81a3      	strh	r3, [r4, #12]
    1eca:	9b01      	ldr	r3, [sp, #4]
    1ecc:	2b01      	cmp	r3, #1
    1ece:	d105      	bne.n	1edc <setvbuf+0xd0>
    1ed0:	89a3      	ldrh	r3, [r4, #12]
    1ed2:	9a01      	ldr	r2, [sp, #4]
    1ed4:	431a      	orrs	r2, r3
    1ed6:	4273      	negs	r3, r6
    1ed8:	81a2      	strh	r2, [r4, #12]
    1eda:	61a3      	str	r3, [r4, #24]
    1edc:	4b0d      	ldr	r3, [pc, #52]	; (1f14 <setvbuf+0x108>)
    1ede:	2000      	movs	r0, #0
    1ee0:	62ab      	str	r3, [r5, #40]	; 0x28
    1ee2:	89a2      	ldrh	r2, [r4, #12]
    1ee4:	6027      	str	r7, [r4, #0]
    1ee6:	6127      	str	r7, [r4, #16]
    1ee8:	6166      	str	r6, [r4, #20]
    1eea:	0713      	lsls	r3, r2, #28
    1eec:	d509      	bpl.n	1f02 <setvbuf+0xf6>
    1eee:	2303      	movs	r3, #3
    1ef0:	401a      	ands	r2, r3
    1ef2:	4253      	negs	r3, r2
    1ef4:	4153      	adcs	r3, r2
    1ef6:	425b      	negs	r3, r3
    1ef8:	401e      	ands	r6, r3
    1efa:	60a6      	str	r6, [r4, #8]
    1efc:	e001      	b.n	1f02 <setvbuf+0xf6>
    1efe:	2001      	movs	r0, #1
    1f00:	4240      	negs	r0, r0
    1f02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1f04:	20000064 	.word	0x20000064
    1f08:	00002838 	.word	0x00002838
    1f0c:	00002858 	.word	0x00002858
    1f10:	00002878 	.word	0x00002878
    1f14:	0000221d 	.word	0x0000221d

00001f18 <__swbuf_r>:
    1f18:	b570      	push	{r4, r5, r6, lr}
    1f1a:	1c05      	adds	r5, r0, #0
    1f1c:	1c0e      	adds	r6, r1, #0
    1f1e:	1c14      	adds	r4, r2, #0
    1f20:	2800      	cmp	r0, #0
    1f22:	d004      	beq.n	1f2e <__swbuf_r+0x16>
    1f24:	6983      	ldr	r3, [r0, #24]
    1f26:	2b00      	cmp	r3, #0
    1f28:	d101      	bne.n	1f2e <__swbuf_r+0x16>
    1f2a:	f000 f9b9 	bl	22a0 <__sinit>
    1f2e:	4b23      	ldr	r3, [pc, #140]	; (1fbc <__swbuf_r+0xa4>)
    1f30:	429c      	cmp	r4, r3
    1f32:	d101      	bne.n	1f38 <__swbuf_r+0x20>
    1f34:	686c      	ldr	r4, [r5, #4]
    1f36:	e008      	b.n	1f4a <__swbuf_r+0x32>
    1f38:	4b21      	ldr	r3, [pc, #132]	; (1fc0 <__swbuf_r+0xa8>)
    1f3a:	429c      	cmp	r4, r3
    1f3c:	d101      	bne.n	1f42 <__swbuf_r+0x2a>
    1f3e:	68ac      	ldr	r4, [r5, #8]
    1f40:	e003      	b.n	1f4a <__swbuf_r+0x32>
    1f42:	4b20      	ldr	r3, [pc, #128]	; (1fc4 <__swbuf_r+0xac>)
    1f44:	429c      	cmp	r4, r3
    1f46:	d100      	bne.n	1f4a <__swbuf_r+0x32>
    1f48:	68ec      	ldr	r4, [r5, #12]
    1f4a:	69a3      	ldr	r3, [r4, #24]
    1f4c:	60a3      	str	r3, [r4, #8]
    1f4e:	89a3      	ldrh	r3, [r4, #12]
    1f50:	071b      	lsls	r3, r3, #28
    1f52:	d50a      	bpl.n	1f6a <__swbuf_r+0x52>
    1f54:	6923      	ldr	r3, [r4, #16]
    1f56:	2b00      	cmp	r3, #0
    1f58:	d007      	beq.n	1f6a <__swbuf_r+0x52>
    1f5a:	6823      	ldr	r3, [r4, #0]
    1f5c:	6922      	ldr	r2, [r4, #16]
    1f5e:	b2f6      	uxtb	r6, r6
    1f60:	1a98      	subs	r0, r3, r2
    1f62:	6963      	ldr	r3, [r4, #20]
    1f64:	4298      	cmp	r0, r3
    1f66:	db0f      	blt.n	1f88 <__swbuf_r+0x70>
    1f68:	e008      	b.n	1f7c <__swbuf_r+0x64>
    1f6a:	1c28      	adds	r0, r5, #0
    1f6c:	1c21      	adds	r1, r4, #0
    1f6e:	f000 f82b 	bl	1fc8 <__swsetup_r>
    1f72:	2800      	cmp	r0, #0
    1f74:	d0f1      	beq.n	1f5a <__swbuf_r+0x42>
    1f76:	2001      	movs	r0, #1
    1f78:	4240      	negs	r0, r0
    1f7a:	e01d      	b.n	1fb8 <__swbuf_r+0xa0>
    1f7c:	1c28      	adds	r0, r5, #0
    1f7e:	1c21      	adds	r1, r4, #0
    1f80:	f000 f920 	bl	21c4 <_fflush_r>
    1f84:	2800      	cmp	r0, #0
    1f86:	d1f6      	bne.n	1f76 <__swbuf_r+0x5e>
    1f88:	68a3      	ldr	r3, [r4, #8]
    1f8a:	3001      	adds	r0, #1
    1f8c:	3b01      	subs	r3, #1
    1f8e:	60a3      	str	r3, [r4, #8]
    1f90:	6823      	ldr	r3, [r4, #0]
    1f92:	1c5a      	adds	r2, r3, #1
    1f94:	6022      	str	r2, [r4, #0]
    1f96:	701e      	strb	r6, [r3, #0]
    1f98:	6963      	ldr	r3, [r4, #20]
    1f9a:	4298      	cmp	r0, r3
    1f9c:	d005      	beq.n	1faa <__swbuf_r+0x92>
    1f9e:	89a3      	ldrh	r3, [r4, #12]
    1fa0:	1c30      	adds	r0, r6, #0
    1fa2:	07db      	lsls	r3, r3, #31
    1fa4:	d508      	bpl.n	1fb8 <__swbuf_r+0xa0>
    1fa6:	2e0a      	cmp	r6, #10
    1fa8:	d106      	bne.n	1fb8 <__swbuf_r+0xa0>
    1faa:	1c28      	adds	r0, r5, #0
    1fac:	1c21      	adds	r1, r4, #0
    1fae:	f000 f909 	bl	21c4 <_fflush_r>
    1fb2:	2800      	cmp	r0, #0
    1fb4:	d1df      	bne.n	1f76 <__swbuf_r+0x5e>
    1fb6:	1c30      	adds	r0, r6, #0
    1fb8:	bd70      	pop	{r4, r5, r6, pc}
    1fba:	46c0      	nop			; (mov r8, r8)
    1fbc:	00002838 	.word	0x00002838
    1fc0:	00002858 	.word	0x00002858
    1fc4:	00002878 	.word	0x00002878

00001fc8 <__swsetup_r>:
    1fc8:	4b35      	ldr	r3, [pc, #212]	; (20a0 <STACK_SIZE+0xa0>)
    1fca:	b570      	push	{r4, r5, r6, lr}
    1fcc:	681d      	ldr	r5, [r3, #0]
    1fce:	1c06      	adds	r6, r0, #0
    1fd0:	1c0c      	adds	r4, r1, #0
    1fd2:	2d00      	cmp	r5, #0
    1fd4:	d005      	beq.n	1fe2 <__swsetup_r+0x1a>
    1fd6:	69ab      	ldr	r3, [r5, #24]
    1fd8:	2b00      	cmp	r3, #0
    1fda:	d102      	bne.n	1fe2 <__swsetup_r+0x1a>
    1fdc:	1c28      	adds	r0, r5, #0
    1fde:	f000 f95f 	bl	22a0 <__sinit>
    1fe2:	4b30      	ldr	r3, [pc, #192]	; (20a4 <STACK_SIZE+0xa4>)
    1fe4:	429c      	cmp	r4, r3
    1fe6:	d101      	bne.n	1fec <__swsetup_r+0x24>
    1fe8:	686c      	ldr	r4, [r5, #4]
    1fea:	e008      	b.n	1ffe <__swsetup_r+0x36>
    1fec:	4b2e      	ldr	r3, [pc, #184]	; (20a8 <STACK_SIZE+0xa8>)
    1fee:	429c      	cmp	r4, r3
    1ff0:	d101      	bne.n	1ff6 <__swsetup_r+0x2e>
    1ff2:	68ac      	ldr	r4, [r5, #8]
    1ff4:	e003      	b.n	1ffe <__swsetup_r+0x36>
    1ff6:	4b2d      	ldr	r3, [pc, #180]	; (20ac <STACK_SIZE+0xac>)
    1ff8:	429c      	cmp	r4, r3
    1ffa:	d100      	bne.n	1ffe <__swsetup_r+0x36>
    1ffc:	68ec      	ldr	r4, [r5, #12]
    1ffe:	89a3      	ldrh	r3, [r4, #12]
    2000:	b29a      	uxth	r2, r3
    2002:	0711      	lsls	r1, r2, #28
    2004:	d423      	bmi.n	204e <STACK_SIZE+0x4e>
    2006:	06d1      	lsls	r1, r2, #27
    2008:	d407      	bmi.n	201a <STACK_SIZE+0x1a>
    200a:	2209      	movs	r2, #9
    200c:	2001      	movs	r0, #1
    200e:	6032      	str	r2, [r6, #0]
    2010:	3237      	adds	r2, #55	; 0x37
    2012:	4313      	orrs	r3, r2
    2014:	81a3      	strh	r3, [r4, #12]
    2016:	4240      	negs	r0, r0
    2018:	e040      	b.n	209c <STACK_SIZE+0x9c>
    201a:	0753      	lsls	r3, r2, #29
    201c:	d513      	bpl.n	2046 <STACK_SIZE+0x46>
    201e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2020:	2900      	cmp	r1, #0
    2022:	d008      	beq.n	2036 <STACK_SIZE+0x36>
    2024:	1c23      	adds	r3, r4, #0
    2026:	3344      	adds	r3, #68	; 0x44
    2028:	4299      	cmp	r1, r3
    202a:	d002      	beq.n	2032 <STACK_SIZE+0x32>
    202c:	1c30      	adds	r0, r6, #0
    202e:	f000 fa2b 	bl	2488 <_free_r>
    2032:	2300      	movs	r3, #0
    2034:	6363      	str	r3, [r4, #52]	; 0x34
    2036:	2224      	movs	r2, #36	; 0x24
    2038:	89a3      	ldrh	r3, [r4, #12]
    203a:	4393      	bics	r3, r2
    203c:	81a3      	strh	r3, [r4, #12]
    203e:	2300      	movs	r3, #0
    2040:	6063      	str	r3, [r4, #4]
    2042:	6923      	ldr	r3, [r4, #16]
    2044:	6023      	str	r3, [r4, #0]
    2046:	2208      	movs	r2, #8
    2048:	89a3      	ldrh	r3, [r4, #12]
    204a:	4313      	orrs	r3, r2
    204c:	81a3      	strh	r3, [r4, #12]
    204e:	6923      	ldr	r3, [r4, #16]
    2050:	2b00      	cmp	r3, #0
    2052:	d10b      	bne.n	206c <STACK_SIZE+0x6c>
    2054:	23a0      	movs	r3, #160	; 0xa0
    2056:	89a2      	ldrh	r2, [r4, #12]
    2058:	009b      	lsls	r3, r3, #2
    205a:	4013      	ands	r3, r2
    205c:	2280      	movs	r2, #128	; 0x80
    205e:	0092      	lsls	r2, r2, #2
    2060:	4293      	cmp	r3, r2
    2062:	d003      	beq.n	206c <STACK_SIZE+0x6c>
    2064:	1c30      	adds	r0, r6, #0
    2066:	1c21      	adds	r1, r4, #0
    2068:	f000 f9ac 	bl	23c4 <__smakebuf_r>
    206c:	2301      	movs	r3, #1
    206e:	89a2      	ldrh	r2, [r4, #12]
    2070:	4013      	ands	r3, r2
    2072:	d005      	beq.n	2080 <STACK_SIZE+0x80>
    2074:	2300      	movs	r3, #0
    2076:	60a3      	str	r3, [r4, #8]
    2078:	6963      	ldr	r3, [r4, #20]
    207a:	425b      	negs	r3, r3
    207c:	61a3      	str	r3, [r4, #24]
    207e:	e003      	b.n	2088 <STACK_SIZE+0x88>
    2080:	0791      	lsls	r1, r2, #30
    2082:	d400      	bmi.n	2086 <STACK_SIZE+0x86>
    2084:	6963      	ldr	r3, [r4, #20]
    2086:	60a3      	str	r3, [r4, #8]
    2088:	2000      	movs	r0, #0
    208a:	6923      	ldr	r3, [r4, #16]
    208c:	4283      	cmp	r3, r0
    208e:	d105      	bne.n	209c <STACK_SIZE+0x9c>
    2090:	0613      	lsls	r3, r2, #24
    2092:	d503      	bpl.n	209c <STACK_SIZE+0x9c>
    2094:	2340      	movs	r3, #64	; 0x40
    2096:	431a      	orrs	r2, r3
    2098:	81a2      	strh	r2, [r4, #12]
    209a:	3801      	subs	r0, #1
    209c:	bd70      	pop	{r4, r5, r6, pc}
    209e:	46c0      	nop			; (mov r8, r8)
    20a0:	20000064 	.word	0x20000064
    20a4:	00002838 	.word	0x00002838
    20a8:	00002858 	.word	0x00002858
    20ac:	00002878 	.word	0x00002878

000020b0 <__sflush_r>:
    20b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20b2:	898a      	ldrh	r2, [r1, #12]
    20b4:	1c05      	adds	r5, r0, #0
    20b6:	1c0c      	adds	r4, r1, #0
    20b8:	0713      	lsls	r3, r2, #28
    20ba:	d45e      	bmi.n	217a <__sflush_r+0xca>
    20bc:	684b      	ldr	r3, [r1, #4]
    20be:	2b00      	cmp	r3, #0
    20c0:	dc02      	bgt.n	20c8 <__sflush_r+0x18>
    20c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    20c4:	2b00      	cmp	r3, #0
    20c6:	dd1a      	ble.n	20fe <__sflush_r+0x4e>
    20c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    20ca:	2f00      	cmp	r7, #0
    20cc:	d017      	beq.n	20fe <__sflush_r+0x4e>
    20ce:	2300      	movs	r3, #0
    20d0:	682e      	ldr	r6, [r5, #0]
    20d2:	602b      	str	r3, [r5, #0]
    20d4:	2380      	movs	r3, #128	; 0x80
    20d6:	015b      	lsls	r3, r3, #5
    20d8:	401a      	ands	r2, r3
    20da:	d001      	beq.n	20e0 <__sflush_r+0x30>
    20dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    20de:	e015      	b.n	210c <__sflush_r+0x5c>
    20e0:	1c28      	adds	r0, r5, #0
    20e2:	6a21      	ldr	r1, [r4, #32]
    20e4:	2301      	movs	r3, #1
    20e6:	47b8      	blx	r7
    20e8:	1c02      	adds	r2, r0, #0
    20ea:	1c43      	adds	r3, r0, #1
    20ec:	d10e      	bne.n	210c <__sflush_r+0x5c>
    20ee:	682b      	ldr	r3, [r5, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d00b      	beq.n	210c <__sflush_r+0x5c>
    20f4:	2b1d      	cmp	r3, #29
    20f6:	d001      	beq.n	20fc <__sflush_r+0x4c>
    20f8:	2b16      	cmp	r3, #22
    20fa:	d102      	bne.n	2102 <__sflush_r+0x52>
    20fc:	602e      	str	r6, [r5, #0]
    20fe:	2000      	movs	r0, #0
    2100:	e05e      	b.n	21c0 <__sflush_r+0x110>
    2102:	2140      	movs	r1, #64	; 0x40
    2104:	89a3      	ldrh	r3, [r4, #12]
    2106:	430b      	orrs	r3, r1
    2108:	81a3      	strh	r3, [r4, #12]
    210a:	e059      	b.n	21c0 <__sflush_r+0x110>
    210c:	89a3      	ldrh	r3, [r4, #12]
    210e:	075b      	lsls	r3, r3, #29
    2110:	d506      	bpl.n	2120 <__sflush_r+0x70>
    2112:	6863      	ldr	r3, [r4, #4]
    2114:	1ad2      	subs	r2, r2, r3
    2116:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2118:	2b00      	cmp	r3, #0
    211a:	d001      	beq.n	2120 <__sflush_r+0x70>
    211c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    211e:	1ad2      	subs	r2, r2, r3
    2120:	2300      	movs	r3, #0
    2122:	1c28      	adds	r0, r5, #0
    2124:	6a21      	ldr	r1, [r4, #32]
    2126:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2128:	47b8      	blx	r7
    212a:	89a3      	ldrh	r3, [r4, #12]
    212c:	1c42      	adds	r2, r0, #1
    212e:	d106      	bne.n	213e <__sflush_r+0x8e>
    2130:	682a      	ldr	r2, [r5, #0]
    2132:	2a00      	cmp	r2, #0
    2134:	d003      	beq.n	213e <__sflush_r+0x8e>
    2136:	2a1d      	cmp	r2, #29
    2138:	d001      	beq.n	213e <__sflush_r+0x8e>
    213a:	2a16      	cmp	r2, #22
    213c:	d119      	bne.n	2172 <__sflush_r+0xc2>
    213e:	2200      	movs	r2, #0
    2140:	6062      	str	r2, [r4, #4]
    2142:	6922      	ldr	r2, [r4, #16]
    2144:	6022      	str	r2, [r4, #0]
    2146:	04db      	lsls	r3, r3, #19
    2148:	d505      	bpl.n	2156 <__sflush_r+0xa6>
    214a:	1c43      	adds	r3, r0, #1
    214c:	d102      	bne.n	2154 <__sflush_r+0xa4>
    214e:	682b      	ldr	r3, [r5, #0]
    2150:	2b00      	cmp	r3, #0
    2152:	d100      	bne.n	2156 <__sflush_r+0xa6>
    2154:	6560      	str	r0, [r4, #84]	; 0x54
    2156:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2158:	602e      	str	r6, [r5, #0]
    215a:	2900      	cmp	r1, #0
    215c:	d0cf      	beq.n	20fe <__sflush_r+0x4e>
    215e:	1c23      	adds	r3, r4, #0
    2160:	3344      	adds	r3, #68	; 0x44
    2162:	4299      	cmp	r1, r3
    2164:	d002      	beq.n	216c <__sflush_r+0xbc>
    2166:	1c28      	adds	r0, r5, #0
    2168:	f000 f98e 	bl	2488 <_free_r>
    216c:	2000      	movs	r0, #0
    216e:	6360      	str	r0, [r4, #52]	; 0x34
    2170:	e026      	b.n	21c0 <__sflush_r+0x110>
    2172:	2240      	movs	r2, #64	; 0x40
    2174:	4313      	orrs	r3, r2
    2176:	81a3      	strh	r3, [r4, #12]
    2178:	e022      	b.n	21c0 <__sflush_r+0x110>
    217a:	690f      	ldr	r7, [r1, #16]
    217c:	2f00      	cmp	r7, #0
    217e:	d0be      	beq.n	20fe <__sflush_r+0x4e>
    2180:	680b      	ldr	r3, [r1, #0]
    2182:	600f      	str	r7, [r1, #0]
    2184:	1bdb      	subs	r3, r3, r7
    2186:	9301      	str	r3, [sp, #4]
    2188:	2300      	movs	r3, #0
    218a:	0792      	lsls	r2, r2, #30
    218c:	d100      	bne.n	2190 <__sflush_r+0xe0>
    218e:	694b      	ldr	r3, [r1, #20]
    2190:	60a3      	str	r3, [r4, #8]
    2192:	9b01      	ldr	r3, [sp, #4]
    2194:	2b00      	cmp	r3, #0
    2196:	ddb2      	ble.n	20fe <__sflush_r+0x4e>
    2198:	1c28      	adds	r0, r5, #0
    219a:	6a21      	ldr	r1, [r4, #32]
    219c:	1c3a      	adds	r2, r7, #0
    219e:	9b01      	ldr	r3, [sp, #4]
    21a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    21a2:	47b0      	blx	r6
    21a4:	2800      	cmp	r0, #0
    21a6:	dc06      	bgt.n	21b6 <__sflush_r+0x106>
    21a8:	2240      	movs	r2, #64	; 0x40
    21aa:	2001      	movs	r0, #1
    21ac:	89a3      	ldrh	r3, [r4, #12]
    21ae:	4240      	negs	r0, r0
    21b0:	4313      	orrs	r3, r2
    21b2:	81a3      	strh	r3, [r4, #12]
    21b4:	e004      	b.n	21c0 <__sflush_r+0x110>
    21b6:	9b01      	ldr	r3, [sp, #4]
    21b8:	183f      	adds	r7, r7, r0
    21ba:	1a1b      	subs	r3, r3, r0
    21bc:	9301      	str	r3, [sp, #4]
    21be:	e7e8      	b.n	2192 <__sflush_r+0xe2>
    21c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000021c4 <_fflush_r>:
    21c4:	b538      	push	{r3, r4, r5, lr}
    21c6:	690b      	ldr	r3, [r1, #16]
    21c8:	1c05      	adds	r5, r0, #0
    21ca:	1c0c      	adds	r4, r1, #0
    21cc:	2b00      	cmp	r3, #0
    21ce:	d101      	bne.n	21d4 <_fflush_r+0x10>
    21d0:	2000      	movs	r0, #0
    21d2:	e01c      	b.n	220e <_fflush_r+0x4a>
    21d4:	2800      	cmp	r0, #0
    21d6:	d004      	beq.n	21e2 <_fflush_r+0x1e>
    21d8:	6983      	ldr	r3, [r0, #24]
    21da:	2b00      	cmp	r3, #0
    21dc:	d101      	bne.n	21e2 <_fflush_r+0x1e>
    21de:	f000 f85f 	bl	22a0 <__sinit>
    21e2:	4b0b      	ldr	r3, [pc, #44]	; (2210 <_fflush_r+0x4c>)
    21e4:	429c      	cmp	r4, r3
    21e6:	d101      	bne.n	21ec <_fflush_r+0x28>
    21e8:	686c      	ldr	r4, [r5, #4]
    21ea:	e008      	b.n	21fe <_fflush_r+0x3a>
    21ec:	4b09      	ldr	r3, [pc, #36]	; (2214 <_fflush_r+0x50>)
    21ee:	429c      	cmp	r4, r3
    21f0:	d101      	bne.n	21f6 <_fflush_r+0x32>
    21f2:	68ac      	ldr	r4, [r5, #8]
    21f4:	e003      	b.n	21fe <_fflush_r+0x3a>
    21f6:	4b08      	ldr	r3, [pc, #32]	; (2218 <_fflush_r+0x54>)
    21f8:	429c      	cmp	r4, r3
    21fa:	d100      	bne.n	21fe <_fflush_r+0x3a>
    21fc:	68ec      	ldr	r4, [r5, #12]
    21fe:	220c      	movs	r2, #12
    2200:	5ea3      	ldrsh	r3, [r4, r2]
    2202:	2b00      	cmp	r3, #0
    2204:	d0e4      	beq.n	21d0 <_fflush_r+0xc>
    2206:	1c28      	adds	r0, r5, #0
    2208:	1c21      	adds	r1, r4, #0
    220a:	f7ff ff51 	bl	20b0 <__sflush_r>
    220e:	bd38      	pop	{r3, r4, r5, pc}
    2210:	00002838 	.word	0x00002838
    2214:	00002858 	.word	0x00002858
    2218:	00002878 	.word	0x00002878

0000221c <_cleanup_r>:
    221c:	b508      	push	{r3, lr}
    221e:	4902      	ldr	r1, [pc, #8]	; (2228 <_cleanup_r+0xc>)
    2220:	f000 f8ae 	bl	2380 <_fwalk_reent>
    2224:	bd08      	pop	{r3, pc}
    2226:	46c0      	nop			; (mov r8, r8)
    2228:	000021c5 	.word	0x000021c5

0000222c <std.isra.0>:
    222c:	2300      	movs	r3, #0
    222e:	b510      	push	{r4, lr}
    2230:	1c04      	adds	r4, r0, #0
    2232:	6003      	str	r3, [r0, #0]
    2234:	6043      	str	r3, [r0, #4]
    2236:	6083      	str	r3, [r0, #8]
    2238:	8181      	strh	r1, [r0, #12]
    223a:	6643      	str	r3, [r0, #100]	; 0x64
    223c:	81c2      	strh	r2, [r0, #14]
    223e:	6103      	str	r3, [r0, #16]
    2240:	6143      	str	r3, [r0, #20]
    2242:	6183      	str	r3, [r0, #24]
    2244:	1c19      	adds	r1, r3, #0
    2246:	2208      	movs	r2, #8
    2248:	305c      	adds	r0, #92	; 0x5c
    224a:	f7ff fd62 	bl	1d12 <memset>
    224e:	4b05      	ldr	r3, [pc, #20]	; (2264 <std.isra.0+0x38>)
    2250:	6224      	str	r4, [r4, #32]
    2252:	6263      	str	r3, [r4, #36]	; 0x24
    2254:	4b04      	ldr	r3, [pc, #16]	; (2268 <std.isra.0+0x3c>)
    2256:	62a3      	str	r3, [r4, #40]	; 0x28
    2258:	4b04      	ldr	r3, [pc, #16]	; (226c <std.isra.0+0x40>)
    225a:	62e3      	str	r3, [r4, #44]	; 0x2c
    225c:	4b04      	ldr	r3, [pc, #16]	; (2270 <std.isra.0+0x44>)
    225e:	6323      	str	r3, [r4, #48]	; 0x30
    2260:	bd10      	pop	{r4, pc}
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	000025e9 	.word	0x000025e9
    2268:	00002611 	.word	0x00002611
    226c:	00002649 	.word	0x00002649
    2270:	00002675 	.word	0x00002675

00002274 <__sfmoreglue>:
    2274:	b570      	push	{r4, r5, r6, lr}
    2276:	2568      	movs	r5, #104	; 0x68
    2278:	1e4b      	subs	r3, r1, #1
    227a:	435d      	muls	r5, r3
    227c:	1c0e      	adds	r6, r1, #0
    227e:	1c29      	adds	r1, r5, #0
    2280:	3174      	adds	r1, #116	; 0x74
    2282:	f000 f947 	bl	2514 <_malloc_r>
    2286:	1e04      	subs	r4, r0, #0
    2288:	d008      	beq.n	229c <__sfmoreglue+0x28>
    228a:	2100      	movs	r1, #0
    228c:	1c2a      	adds	r2, r5, #0
    228e:	6001      	str	r1, [r0, #0]
    2290:	6046      	str	r6, [r0, #4]
    2292:	300c      	adds	r0, #12
    2294:	60a0      	str	r0, [r4, #8]
    2296:	3268      	adds	r2, #104	; 0x68
    2298:	f7ff fd3b 	bl	1d12 <memset>
    229c:	1c20      	adds	r0, r4, #0
    229e:	bd70      	pop	{r4, r5, r6, pc}

000022a0 <__sinit>:
    22a0:	6983      	ldr	r3, [r0, #24]
    22a2:	b513      	push	{r0, r1, r4, lr}
    22a4:	2b00      	cmp	r3, #0
    22a6:	d128      	bne.n	22fa <__sinit+0x5a>
    22a8:	6483      	str	r3, [r0, #72]	; 0x48
    22aa:	64c3      	str	r3, [r0, #76]	; 0x4c
    22ac:	6503      	str	r3, [r0, #80]	; 0x50
    22ae:	4b13      	ldr	r3, [pc, #76]	; (22fc <__sinit+0x5c>)
    22b0:	4a13      	ldr	r2, [pc, #76]	; (2300 <__sinit+0x60>)
    22b2:	681b      	ldr	r3, [r3, #0]
    22b4:	6282      	str	r2, [r0, #40]	; 0x28
    22b6:	9301      	str	r3, [sp, #4]
    22b8:	4298      	cmp	r0, r3
    22ba:	d101      	bne.n	22c0 <__sinit+0x20>
    22bc:	2301      	movs	r3, #1
    22be:	6183      	str	r3, [r0, #24]
    22c0:	1c04      	adds	r4, r0, #0
    22c2:	f000 f81f 	bl	2304 <__sfp>
    22c6:	6060      	str	r0, [r4, #4]
    22c8:	1c20      	adds	r0, r4, #0
    22ca:	f000 f81b 	bl	2304 <__sfp>
    22ce:	60a0      	str	r0, [r4, #8]
    22d0:	1c20      	adds	r0, r4, #0
    22d2:	f000 f817 	bl	2304 <__sfp>
    22d6:	2104      	movs	r1, #4
    22d8:	60e0      	str	r0, [r4, #12]
    22da:	2200      	movs	r2, #0
    22dc:	6860      	ldr	r0, [r4, #4]
    22de:	f7ff ffa5 	bl	222c <std.isra.0>
    22e2:	68a0      	ldr	r0, [r4, #8]
    22e4:	2109      	movs	r1, #9
    22e6:	2201      	movs	r2, #1
    22e8:	f7ff ffa0 	bl	222c <std.isra.0>
    22ec:	68e0      	ldr	r0, [r4, #12]
    22ee:	2112      	movs	r1, #18
    22f0:	2202      	movs	r2, #2
    22f2:	f7ff ff9b 	bl	222c <std.isra.0>
    22f6:	2301      	movs	r3, #1
    22f8:	61a3      	str	r3, [r4, #24]
    22fa:	bd13      	pop	{r0, r1, r4, pc}
    22fc:	00002834 	.word	0x00002834
    2300:	0000221d 	.word	0x0000221d

00002304 <__sfp>:
    2304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2306:	4b1d      	ldr	r3, [pc, #116]	; (237c <__sfp+0x78>)
    2308:	1c06      	adds	r6, r0, #0
    230a:	681d      	ldr	r5, [r3, #0]
    230c:	69ab      	ldr	r3, [r5, #24]
    230e:	2b00      	cmp	r3, #0
    2310:	d102      	bne.n	2318 <__sfp+0x14>
    2312:	1c28      	adds	r0, r5, #0
    2314:	f7ff ffc4 	bl	22a0 <__sinit>
    2318:	3548      	adds	r5, #72	; 0x48
    231a:	68ac      	ldr	r4, [r5, #8]
    231c:	686b      	ldr	r3, [r5, #4]
    231e:	3b01      	subs	r3, #1
    2320:	d405      	bmi.n	232e <__sfp+0x2a>
    2322:	220c      	movs	r2, #12
    2324:	5ea7      	ldrsh	r7, [r4, r2]
    2326:	2f00      	cmp	r7, #0
    2328:	d010      	beq.n	234c <__sfp+0x48>
    232a:	3468      	adds	r4, #104	; 0x68
    232c:	e7f7      	b.n	231e <__sfp+0x1a>
    232e:	682b      	ldr	r3, [r5, #0]
    2330:	2b00      	cmp	r3, #0
    2332:	d106      	bne.n	2342 <__sfp+0x3e>
    2334:	1c30      	adds	r0, r6, #0
    2336:	2104      	movs	r1, #4
    2338:	f7ff ff9c 	bl	2274 <__sfmoreglue>
    233c:	6028      	str	r0, [r5, #0]
    233e:	2800      	cmp	r0, #0
    2340:	d001      	beq.n	2346 <__sfp+0x42>
    2342:	682d      	ldr	r5, [r5, #0]
    2344:	e7e9      	b.n	231a <__sfp+0x16>
    2346:	230c      	movs	r3, #12
    2348:	6033      	str	r3, [r6, #0]
    234a:	e016      	b.n	237a <__sfp+0x76>
    234c:	2301      	movs	r3, #1
    234e:	1c20      	adds	r0, r4, #0
    2350:	425b      	negs	r3, r3
    2352:	81e3      	strh	r3, [r4, #14]
    2354:	3302      	adds	r3, #2
    2356:	81a3      	strh	r3, [r4, #12]
    2358:	6667      	str	r7, [r4, #100]	; 0x64
    235a:	6027      	str	r7, [r4, #0]
    235c:	60a7      	str	r7, [r4, #8]
    235e:	6067      	str	r7, [r4, #4]
    2360:	6127      	str	r7, [r4, #16]
    2362:	6167      	str	r7, [r4, #20]
    2364:	61a7      	str	r7, [r4, #24]
    2366:	305c      	adds	r0, #92	; 0x5c
    2368:	1c39      	adds	r1, r7, #0
    236a:	2208      	movs	r2, #8
    236c:	f7ff fcd1 	bl	1d12 <memset>
    2370:	1c20      	adds	r0, r4, #0
    2372:	6367      	str	r7, [r4, #52]	; 0x34
    2374:	63a7      	str	r7, [r4, #56]	; 0x38
    2376:	64a7      	str	r7, [r4, #72]	; 0x48
    2378:	64e7      	str	r7, [r4, #76]	; 0x4c
    237a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    237c:	00002834 	.word	0x00002834

00002380 <_fwalk_reent>:
    2380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2382:	1c04      	adds	r4, r0, #0
    2384:	1c07      	adds	r7, r0, #0
    2386:	2600      	movs	r6, #0
    2388:	9101      	str	r1, [sp, #4]
    238a:	3448      	adds	r4, #72	; 0x48
    238c:	2c00      	cmp	r4, #0
    238e:	d016      	beq.n	23be <_fwalk_reent+0x3e>
    2390:	6863      	ldr	r3, [r4, #4]
    2392:	68a5      	ldr	r5, [r4, #8]
    2394:	9300      	str	r3, [sp, #0]
    2396:	9b00      	ldr	r3, [sp, #0]
    2398:	3b01      	subs	r3, #1
    239a:	9300      	str	r3, [sp, #0]
    239c:	d40d      	bmi.n	23ba <_fwalk_reent+0x3a>
    239e:	89ab      	ldrh	r3, [r5, #12]
    23a0:	2b01      	cmp	r3, #1
    23a2:	d908      	bls.n	23b6 <_fwalk_reent+0x36>
    23a4:	220e      	movs	r2, #14
    23a6:	5eab      	ldrsh	r3, [r5, r2]
    23a8:	3301      	adds	r3, #1
    23aa:	d004      	beq.n	23b6 <_fwalk_reent+0x36>
    23ac:	1c38      	adds	r0, r7, #0
    23ae:	1c29      	adds	r1, r5, #0
    23b0:	9b01      	ldr	r3, [sp, #4]
    23b2:	4798      	blx	r3
    23b4:	4306      	orrs	r6, r0
    23b6:	3568      	adds	r5, #104	; 0x68
    23b8:	e7ed      	b.n	2396 <_fwalk_reent+0x16>
    23ba:	6824      	ldr	r4, [r4, #0]
    23bc:	e7e6      	b.n	238c <_fwalk_reent+0xc>
    23be:	1c30      	adds	r0, r6, #0
    23c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000023c4 <__smakebuf_r>:
    23c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23c6:	898b      	ldrh	r3, [r1, #12]
    23c8:	b091      	sub	sp, #68	; 0x44
    23ca:	079b      	lsls	r3, r3, #30
    23cc:	d506      	bpl.n	23dc <__smakebuf_r+0x18>
    23ce:	1c0b      	adds	r3, r1, #0
    23d0:	3347      	adds	r3, #71	; 0x47
    23d2:	600b      	str	r3, [r1, #0]
    23d4:	610b      	str	r3, [r1, #16]
    23d6:	2301      	movs	r3, #1
    23d8:	614b      	str	r3, [r1, #20]
    23da:	e045      	b.n	2468 <__smakebuf_r+0xa4>
    23dc:	1c0c      	adds	r4, r1, #0
    23de:	230e      	movs	r3, #14
    23e0:	5ec9      	ldrsh	r1, [r1, r3]
    23e2:	1c06      	adds	r6, r0, #0
    23e4:	2900      	cmp	r1, #0
    23e6:	da04      	bge.n	23f2 <__smakebuf_r+0x2e>
    23e8:	2380      	movs	r3, #128	; 0x80
    23ea:	89a5      	ldrh	r5, [r4, #12]
    23ec:	401d      	ands	r5, r3
    23ee:	d110      	bne.n	2412 <__smakebuf_r+0x4e>
    23f0:	e00c      	b.n	240c <__smakebuf_r+0x48>
    23f2:	aa01      	add	r2, sp, #4
    23f4:	f000 f96a 	bl	26cc <_fstat_r>
    23f8:	2800      	cmp	r0, #0
    23fa:	dbf5      	blt.n	23e8 <__smakebuf_r+0x24>
    23fc:	23f0      	movs	r3, #240	; 0xf0
    23fe:	9d02      	ldr	r5, [sp, #8]
    2400:	021b      	lsls	r3, r3, #8
    2402:	401d      	ands	r5, r3
    2404:	4b19      	ldr	r3, [pc, #100]	; (246c <__smakebuf_r+0xa8>)
    2406:	18ed      	adds	r5, r5, r3
    2408:	426b      	negs	r3, r5
    240a:	415d      	adcs	r5, r3
    240c:	2780      	movs	r7, #128	; 0x80
    240e:	00ff      	lsls	r7, r7, #3
    2410:	e001      	b.n	2416 <__smakebuf_r+0x52>
    2412:	2500      	movs	r5, #0
    2414:	2740      	movs	r7, #64	; 0x40
    2416:	1c30      	adds	r0, r6, #0
    2418:	1c39      	adds	r1, r7, #0
    241a:	f000 f87b 	bl	2514 <_malloc_r>
    241e:	2800      	cmp	r0, #0
    2420:	d10c      	bne.n	243c <__smakebuf_r+0x78>
    2422:	89a3      	ldrh	r3, [r4, #12]
    2424:	059a      	lsls	r2, r3, #22
    2426:	d41f      	bmi.n	2468 <__smakebuf_r+0xa4>
    2428:	2202      	movs	r2, #2
    242a:	4313      	orrs	r3, r2
    242c:	81a3      	strh	r3, [r4, #12]
    242e:	1c23      	adds	r3, r4, #0
    2430:	3347      	adds	r3, #71	; 0x47
    2432:	6023      	str	r3, [r4, #0]
    2434:	6123      	str	r3, [r4, #16]
    2436:	2301      	movs	r3, #1
    2438:	6163      	str	r3, [r4, #20]
    243a:	e015      	b.n	2468 <__smakebuf_r+0xa4>
    243c:	2280      	movs	r2, #128	; 0x80
    243e:	4b0c      	ldr	r3, [pc, #48]	; (2470 <__smakebuf_r+0xac>)
    2440:	62b3      	str	r3, [r6, #40]	; 0x28
    2442:	89a3      	ldrh	r3, [r4, #12]
    2444:	6020      	str	r0, [r4, #0]
    2446:	4313      	orrs	r3, r2
    2448:	81a3      	strh	r3, [r4, #12]
    244a:	6120      	str	r0, [r4, #16]
    244c:	6167      	str	r7, [r4, #20]
    244e:	2d00      	cmp	r5, #0
    2450:	d00a      	beq.n	2468 <__smakebuf_r+0xa4>
    2452:	230e      	movs	r3, #14
    2454:	5ee1      	ldrsh	r1, [r4, r3]
    2456:	1c30      	adds	r0, r6, #0
    2458:	f000 f94a 	bl	26f0 <_isatty_r>
    245c:	2800      	cmp	r0, #0
    245e:	d003      	beq.n	2468 <__smakebuf_r+0xa4>
    2460:	2201      	movs	r2, #1
    2462:	89a3      	ldrh	r3, [r4, #12]
    2464:	4313      	orrs	r3, r2
    2466:	81a3      	strh	r3, [r4, #12]
    2468:	b011      	add	sp, #68	; 0x44
    246a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    246c:	ffffe000 	.word	0xffffe000
    2470:	0000221d 	.word	0x0000221d

00002474 <malloc>:
    2474:	b508      	push	{r3, lr}
    2476:	4b03      	ldr	r3, [pc, #12]	; (2484 <malloc+0x10>)
    2478:	1c01      	adds	r1, r0, #0
    247a:	6818      	ldr	r0, [r3, #0]
    247c:	f000 f84a 	bl	2514 <_malloc_r>
    2480:	bd08      	pop	{r3, pc}
    2482:	46c0      	nop			; (mov r8, r8)
    2484:	20000064 	.word	0x20000064

00002488 <_free_r>:
    2488:	b530      	push	{r4, r5, lr}
    248a:	2900      	cmp	r1, #0
    248c:	d03e      	beq.n	250c <_free_r+0x84>
    248e:	3904      	subs	r1, #4
    2490:	680b      	ldr	r3, [r1, #0]
    2492:	2b00      	cmp	r3, #0
    2494:	da00      	bge.n	2498 <_free_r+0x10>
    2496:	18c9      	adds	r1, r1, r3
    2498:	4a1d      	ldr	r2, [pc, #116]	; (2510 <_free_r+0x88>)
    249a:	6813      	ldr	r3, [r2, #0]
    249c:	1c14      	adds	r4, r2, #0
    249e:	2b00      	cmp	r3, #0
    24a0:	d102      	bne.n	24a8 <_free_r+0x20>
    24a2:	604b      	str	r3, [r1, #4]
    24a4:	6011      	str	r1, [r2, #0]
    24a6:	e031      	b.n	250c <_free_r+0x84>
    24a8:	4299      	cmp	r1, r3
    24aa:	d20d      	bcs.n	24c8 <_free_r+0x40>
    24ac:	6808      	ldr	r0, [r1, #0]
    24ae:	180a      	adds	r2, r1, r0
    24b0:	429a      	cmp	r2, r3
    24b2:	d103      	bne.n	24bc <_free_r+0x34>
    24b4:	6813      	ldr	r3, [r2, #0]
    24b6:	18c3      	adds	r3, r0, r3
    24b8:	600b      	str	r3, [r1, #0]
    24ba:	6853      	ldr	r3, [r2, #4]
    24bc:	604b      	str	r3, [r1, #4]
    24be:	6021      	str	r1, [r4, #0]
    24c0:	e024      	b.n	250c <_free_r+0x84>
    24c2:	428a      	cmp	r2, r1
    24c4:	d803      	bhi.n	24ce <_free_r+0x46>
    24c6:	1c13      	adds	r3, r2, #0
    24c8:	685a      	ldr	r2, [r3, #4]
    24ca:	2a00      	cmp	r2, #0
    24cc:	d1f9      	bne.n	24c2 <_free_r+0x3a>
    24ce:	681d      	ldr	r5, [r3, #0]
    24d0:	195c      	adds	r4, r3, r5
    24d2:	428c      	cmp	r4, r1
    24d4:	d10b      	bne.n	24ee <_free_r+0x66>
    24d6:	6809      	ldr	r1, [r1, #0]
    24d8:	1869      	adds	r1, r5, r1
    24da:	1858      	adds	r0, r3, r1
    24dc:	6019      	str	r1, [r3, #0]
    24de:	4290      	cmp	r0, r2
    24e0:	d114      	bne.n	250c <_free_r+0x84>
    24e2:	6810      	ldr	r0, [r2, #0]
    24e4:	6852      	ldr	r2, [r2, #4]
    24e6:	1809      	adds	r1, r1, r0
    24e8:	6019      	str	r1, [r3, #0]
    24ea:	605a      	str	r2, [r3, #4]
    24ec:	e00e      	b.n	250c <_free_r+0x84>
    24ee:	428c      	cmp	r4, r1
    24f0:	d902      	bls.n	24f8 <_free_r+0x70>
    24f2:	230c      	movs	r3, #12
    24f4:	6003      	str	r3, [r0, #0]
    24f6:	e009      	b.n	250c <_free_r+0x84>
    24f8:	6808      	ldr	r0, [r1, #0]
    24fa:	180c      	adds	r4, r1, r0
    24fc:	4294      	cmp	r4, r2
    24fe:	d103      	bne.n	2508 <_free_r+0x80>
    2500:	6814      	ldr	r4, [r2, #0]
    2502:	6852      	ldr	r2, [r2, #4]
    2504:	1900      	adds	r0, r0, r4
    2506:	6008      	str	r0, [r1, #0]
    2508:	604a      	str	r2, [r1, #4]
    250a:	6059      	str	r1, [r3, #4]
    250c:	bd30      	pop	{r4, r5, pc}
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	200000f4 	.word	0x200000f4

00002514 <_malloc_r>:
    2514:	2303      	movs	r3, #3
    2516:	b570      	push	{r4, r5, r6, lr}
    2518:	1ccc      	adds	r4, r1, #3
    251a:	439c      	bics	r4, r3
    251c:	3408      	adds	r4, #8
    251e:	1c05      	adds	r5, r0, #0
    2520:	2c0c      	cmp	r4, #12
    2522:	d201      	bcs.n	2528 <_malloc_r+0x14>
    2524:	240c      	movs	r4, #12
    2526:	e005      	b.n	2534 <_malloc_r+0x20>
    2528:	2c00      	cmp	r4, #0
    252a:	da03      	bge.n	2534 <_malloc_r+0x20>
    252c:	230c      	movs	r3, #12
    252e:	2000      	movs	r0, #0
    2530:	602b      	str	r3, [r5, #0]
    2532:	e042      	b.n	25ba <_malloc_r+0xa6>
    2534:	428c      	cmp	r4, r1
    2536:	d3f9      	bcc.n	252c <_malloc_r+0x18>
    2538:	4a20      	ldr	r2, [pc, #128]	; (25bc <_malloc_r+0xa8>)
    253a:	6813      	ldr	r3, [r2, #0]
    253c:	1c10      	adds	r0, r2, #0
    253e:	1c19      	adds	r1, r3, #0
    2540:	2900      	cmp	r1, #0
    2542:	d013      	beq.n	256c <_malloc_r+0x58>
    2544:	680a      	ldr	r2, [r1, #0]
    2546:	1b12      	subs	r2, r2, r4
    2548:	d40d      	bmi.n	2566 <_malloc_r+0x52>
    254a:	2a0b      	cmp	r2, #11
    254c:	d902      	bls.n	2554 <_malloc_r+0x40>
    254e:	600a      	str	r2, [r1, #0]
    2550:	188b      	adds	r3, r1, r2
    2552:	e01f      	b.n	2594 <_malloc_r+0x80>
    2554:	428b      	cmp	r3, r1
    2556:	d102      	bne.n	255e <_malloc_r+0x4a>
    2558:	685a      	ldr	r2, [r3, #4]
    255a:	6002      	str	r2, [r0, #0]
    255c:	e01b      	b.n	2596 <_malloc_r+0x82>
    255e:	684a      	ldr	r2, [r1, #4]
    2560:	605a      	str	r2, [r3, #4]
    2562:	1c0b      	adds	r3, r1, #0
    2564:	e017      	b.n	2596 <_malloc_r+0x82>
    2566:	1c0b      	adds	r3, r1, #0
    2568:	6849      	ldr	r1, [r1, #4]
    256a:	e7e9      	b.n	2540 <_malloc_r+0x2c>
    256c:	4e14      	ldr	r6, [pc, #80]	; (25c0 <_malloc_r+0xac>)
    256e:	6833      	ldr	r3, [r6, #0]
    2570:	2b00      	cmp	r3, #0
    2572:	d103      	bne.n	257c <_malloc_r+0x68>
    2574:	1c28      	adds	r0, r5, #0
    2576:	f000 f825 	bl	25c4 <_sbrk_r>
    257a:	6030      	str	r0, [r6, #0]
    257c:	1c28      	adds	r0, r5, #0
    257e:	1c21      	adds	r1, r4, #0
    2580:	f000 f820 	bl	25c4 <_sbrk_r>
    2584:	1c03      	adds	r3, r0, #0
    2586:	1c42      	adds	r2, r0, #1
    2588:	d0d0      	beq.n	252c <_malloc_r+0x18>
    258a:	2203      	movs	r2, #3
    258c:	1cc6      	adds	r6, r0, #3
    258e:	4396      	bics	r6, r2
    2590:	4286      	cmp	r6, r0
    2592:	d10a      	bne.n	25aa <_malloc_r+0x96>
    2594:	601c      	str	r4, [r3, #0]
    2596:	1c18      	adds	r0, r3, #0
    2598:	2107      	movs	r1, #7
    259a:	300b      	adds	r0, #11
    259c:	1d1a      	adds	r2, r3, #4
    259e:	4388      	bics	r0, r1
    25a0:	1a82      	subs	r2, r0, r2
    25a2:	d00a      	beq.n	25ba <_malloc_r+0xa6>
    25a4:	4251      	negs	r1, r2
    25a6:	5099      	str	r1, [r3, r2]
    25a8:	e007      	b.n	25ba <_malloc_r+0xa6>
    25aa:	1a31      	subs	r1, r6, r0
    25ac:	1c28      	adds	r0, r5, #0
    25ae:	f000 f809 	bl	25c4 <_sbrk_r>
    25b2:	1c43      	adds	r3, r0, #1
    25b4:	d0ba      	beq.n	252c <_malloc_r+0x18>
    25b6:	1c33      	adds	r3, r6, #0
    25b8:	e7ec      	b.n	2594 <_malloc_r+0x80>
    25ba:	bd70      	pop	{r4, r5, r6, pc}
    25bc:	200000f4 	.word	0x200000f4
    25c0:	200000f0 	.word	0x200000f0

000025c4 <_sbrk_r>:
    25c4:	b538      	push	{r3, r4, r5, lr}
    25c6:	2300      	movs	r3, #0
    25c8:	4c06      	ldr	r4, [pc, #24]	; (25e4 <_sbrk_r+0x20>)
    25ca:	1c05      	adds	r5, r0, #0
    25cc:	1c08      	adds	r0, r1, #0
    25ce:	6023      	str	r3, [r4, #0]
    25d0:	f7ff fa66 	bl	1aa0 <_sbrk>
    25d4:	1c43      	adds	r3, r0, #1
    25d6:	d103      	bne.n	25e0 <_sbrk_r+0x1c>
    25d8:	6823      	ldr	r3, [r4, #0]
    25da:	2b00      	cmp	r3, #0
    25dc:	d000      	beq.n	25e0 <_sbrk_r+0x1c>
    25de:	602b      	str	r3, [r5, #0]
    25e0:	bd38      	pop	{r3, r4, r5, pc}
    25e2:	46c0      	nop			; (mov r8, r8)
    25e4:	20000190 	.word	0x20000190

000025e8 <__sread>:
    25e8:	b538      	push	{r3, r4, r5, lr}
    25ea:	1c0c      	adds	r4, r1, #0
    25ec:	250e      	movs	r5, #14
    25ee:	5f49      	ldrsh	r1, [r1, r5]
    25f0:	f000 f8a4 	bl	273c <_read_r>
    25f4:	2800      	cmp	r0, #0
    25f6:	db03      	blt.n	2600 <__sread+0x18>
    25f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    25fa:	181b      	adds	r3, r3, r0
    25fc:	6563      	str	r3, [r4, #84]	; 0x54
    25fe:	e003      	b.n	2608 <__sread+0x20>
    2600:	89a2      	ldrh	r2, [r4, #12]
    2602:	4b02      	ldr	r3, [pc, #8]	; (260c <__sread+0x24>)
    2604:	4013      	ands	r3, r2
    2606:	81a3      	strh	r3, [r4, #12]
    2608:	bd38      	pop	{r3, r4, r5, pc}
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	ffffefff 	.word	0xffffefff

00002610 <__swrite>:
    2610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2612:	1c1e      	adds	r6, r3, #0
    2614:	898b      	ldrh	r3, [r1, #12]
    2616:	1c05      	adds	r5, r0, #0
    2618:	1c0c      	adds	r4, r1, #0
    261a:	1c17      	adds	r7, r2, #0
    261c:	05db      	lsls	r3, r3, #23
    261e:	d505      	bpl.n	262c <__swrite+0x1c>
    2620:	230e      	movs	r3, #14
    2622:	5ec9      	ldrsh	r1, [r1, r3]
    2624:	2200      	movs	r2, #0
    2626:	2302      	movs	r3, #2
    2628:	f000 f874 	bl	2714 <_lseek_r>
    262c:	89a2      	ldrh	r2, [r4, #12]
    262e:	4b05      	ldr	r3, [pc, #20]	; (2644 <__swrite+0x34>)
    2630:	1c28      	adds	r0, r5, #0
    2632:	4013      	ands	r3, r2
    2634:	81a3      	strh	r3, [r4, #12]
    2636:	1c3a      	adds	r2, r7, #0
    2638:	230e      	movs	r3, #14
    263a:	5ee1      	ldrsh	r1, [r4, r3]
    263c:	1c33      	adds	r3, r6, #0
    263e:	f000 f81f 	bl	2680 <_write_r>
    2642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2644:	ffffefff 	.word	0xffffefff

00002648 <__sseek>:
    2648:	b538      	push	{r3, r4, r5, lr}
    264a:	1c0c      	adds	r4, r1, #0
    264c:	250e      	movs	r5, #14
    264e:	5f49      	ldrsh	r1, [r1, r5]
    2650:	f000 f860 	bl	2714 <_lseek_r>
    2654:	89a3      	ldrh	r3, [r4, #12]
    2656:	1c42      	adds	r2, r0, #1
    2658:	d103      	bne.n	2662 <__sseek+0x1a>
    265a:	4a05      	ldr	r2, [pc, #20]	; (2670 <__sseek+0x28>)
    265c:	4013      	ands	r3, r2
    265e:	81a3      	strh	r3, [r4, #12]
    2660:	e004      	b.n	266c <__sseek+0x24>
    2662:	2280      	movs	r2, #128	; 0x80
    2664:	0152      	lsls	r2, r2, #5
    2666:	4313      	orrs	r3, r2
    2668:	81a3      	strh	r3, [r4, #12]
    266a:	6560      	str	r0, [r4, #84]	; 0x54
    266c:	bd38      	pop	{r3, r4, r5, pc}
    266e:	46c0      	nop			; (mov r8, r8)
    2670:	ffffefff 	.word	0xffffefff

00002674 <__sclose>:
    2674:	b508      	push	{r3, lr}
    2676:	230e      	movs	r3, #14
    2678:	5ec9      	ldrsh	r1, [r1, r3]
    267a:	f000 f815 	bl	26a8 <_close_r>
    267e:	bd08      	pop	{r3, pc}

00002680 <_write_r>:
    2680:	b538      	push	{r3, r4, r5, lr}
    2682:	1c05      	adds	r5, r0, #0
    2684:	2000      	movs	r0, #0
    2686:	4c07      	ldr	r4, [pc, #28]	; (26a4 <_write_r+0x24>)
    2688:	6020      	str	r0, [r4, #0]
    268a:	1c08      	adds	r0, r1, #0
    268c:	1c11      	adds	r1, r2, #0
    268e:	1c1a      	adds	r2, r3, #0
    2690:	f7ff f9de 	bl	1a50 <_write>
    2694:	1c43      	adds	r3, r0, #1
    2696:	d103      	bne.n	26a0 <_write_r+0x20>
    2698:	6823      	ldr	r3, [r4, #0]
    269a:	2b00      	cmp	r3, #0
    269c:	d000      	beq.n	26a0 <_write_r+0x20>
    269e:	602b      	str	r3, [r5, #0]
    26a0:	bd38      	pop	{r3, r4, r5, pc}
    26a2:	46c0      	nop			; (mov r8, r8)
    26a4:	20000190 	.word	0x20000190

000026a8 <_close_r>:
    26a8:	b538      	push	{r3, r4, r5, lr}
    26aa:	2300      	movs	r3, #0
    26ac:	4c06      	ldr	r4, [pc, #24]	; (26c8 <_close_r+0x20>)
    26ae:	1c05      	adds	r5, r0, #0
    26b0:	1c08      	adds	r0, r1, #0
    26b2:	6023      	str	r3, [r4, #0]
    26b4:	f7ff fa06 	bl	1ac4 <_close>
    26b8:	1c43      	adds	r3, r0, #1
    26ba:	d103      	bne.n	26c4 <_close_r+0x1c>
    26bc:	6823      	ldr	r3, [r4, #0]
    26be:	2b00      	cmp	r3, #0
    26c0:	d000      	beq.n	26c4 <_close_r+0x1c>
    26c2:	602b      	str	r3, [r5, #0]
    26c4:	bd38      	pop	{r3, r4, r5, pc}
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	20000190 	.word	0x20000190

000026cc <_fstat_r>:
    26cc:	b538      	push	{r3, r4, r5, lr}
    26ce:	2300      	movs	r3, #0
    26d0:	4c06      	ldr	r4, [pc, #24]	; (26ec <_fstat_r+0x20>)
    26d2:	1c05      	adds	r5, r0, #0
    26d4:	1c08      	adds	r0, r1, #0
    26d6:	1c11      	adds	r1, r2, #0
    26d8:	6023      	str	r3, [r4, #0]
    26da:	f7ff f9f7 	bl	1acc <_fstat>
    26de:	1c43      	adds	r3, r0, #1
    26e0:	d103      	bne.n	26ea <_fstat_r+0x1e>
    26e2:	6823      	ldr	r3, [r4, #0]
    26e4:	2b00      	cmp	r3, #0
    26e6:	d000      	beq.n	26ea <_fstat_r+0x1e>
    26e8:	602b      	str	r3, [r5, #0]
    26ea:	bd38      	pop	{r3, r4, r5, pc}
    26ec:	20000190 	.word	0x20000190

000026f0 <_isatty_r>:
    26f0:	b538      	push	{r3, r4, r5, lr}
    26f2:	2300      	movs	r3, #0
    26f4:	4c06      	ldr	r4, [pc, #24]	; (2710 <_isatty_r+0x20>)
    26f6:	1c05      	adds	r5, r0, #0
    26f8:	1c08      	adds	r0, r1, #0
    26fa:	6023      	str	r3, [r4, #0]
    26fc:	f7ff f9ec 	bl	1ad8 <_isatty>
    2700:	1c43      	adds	r3, r0, #1
    2702:	d103      	bne.n	270c <_isatty_r+0x1c>
    2704:	6823      	ldr	r3, [r4, #0]
    2706:	2b00      	cmp	r3, #0
    2708:	d000      	beq.n	270c <_isatty_r+0x1c>
    270a:	602b      	str	r3, [r5, #0]
    270c:	bd38      	pop	{r3, r4, r5, pc}
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	20000190 	.word	0x20000190

00002714 <_lseek_r>:
    2714:	b538      	push	{r3, r4, r5, lr}
    2716:	1c05      	adds	r5, r0, #0
    2718:	2000      	movs	r0, #0
    271a:	4c07      	ldr	r4, [pc, #28]	; (2738 <_lseek_r+0x24>)
    271c:	6020      	str	r0, [r4, #0]
    271e:	1c08      	adds	r0, r1, #0
    2720:	1c11      	adds	r1, r2, #0
    2722:	1c1a      	adds	r2, r3, #0
    2724:	f7ff f9da 	bl	1adc <_lseek>
    2728:	1c43      	adds	r3, r0, #1
    272a:	d103      	bne.n	2734 <_lseek_r+0x20>
    272c:	6823      	ldr	r3, [r4, #0]
    272e:	2b00      	cmp	r3, #0
    2730:	d000      	beq.n	2734 <_lseek_r+0x20>
    2732:	602b      	str	r3, [r5, #0]
    2734:	bd38      	pop	{r3, r4, r5, pc}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	20000190 	.word	0x20000190

0000273c <_read_r>:
    273c:	b538      	push	{r3, r4, r5, lr}
    273e:	1c05      	adds	r5, r0, #0
    2740:	2000      	movs	r0, #0
    2742:	4c07      	ldr	r4, [pc, #28]	; (2760 <_read_r+0x24>)
    2744:	6020      	str	r0, [r4, #0]
    2746:	1c08      	adds	r0, r1, #0
    2748:	1c11      	adds	r1, r2, #0
    274a:	1c1a      	adds	r2, r3, #0
    274c:	f7ff f95e 	bl	1a0c <_read>
    2750:	1c43      	adds	r3, r0, #1
    2752:	d103      	bne.n	275c <_read_r+0x20>
    2754:	6823      	ldr	r3, [r4, #0]
    2756:	2b00      	cmp	r3, #0
    2758:	d000      	beq.n	275c <_read_r+0x20>
    275a:	602b      	str	r3, [r5, #0]
    275c:	bd38      	pop	{r3, r4, r5, pc}
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	20000190 	.word	0x20000190

00002764 <tc_interrupt_vectors.14330>:
    2764:	17161514 00000018 20656854 7074756f     ........The outp
    2774:	69207475 72742073 65676769 20646572     ut is triggered 
    2784:	54207962 6f632043 65746e75 00000d72     by TC counter...
    2794:	42000400 42000800 42000c00 42001000     ...B...B...B...B
    27a4:	42001400 42001800 0c0b0a09 00000e0d     ...B...B........
    27b4:	0000116e 0000116a 0000116a 0000119c     n...j...j.......
    27c4:	0000119c 00001186 00001174 0000118c     ........t.......
    27d4:	42003000 42003400 42003800 42003c00     .0.B.4.B.8.B.<.B
    27e4:	42004000 1f1f1e1e 00000020 00000002     .@.B.... .......
    27f4:	00001000 00000002 00002000 00000002     ......... ......
    2804:	00004000 00000002 00008000 00000002     .@..............
    2814:	00010000 20313243 72617453 20726574     ....C21 Starter 
    2824:	6a6f7250 0a746365 0000000a 00000043     Project.....C...

00002834 <_global_impure_ptr>:
    2834:	20000004                                ... 

00002838 <__sf_fake_stdin>:
	...

00002858 <__sf_fake_stdout>:
	...

00002878 <__sf_fake_stderr>:
	...

00002898 <_init>:
    2898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    289e:	bc08      	pop	{r3}
    28a0:	469e      	mov	lr, r3
    28a2:	4770      	bx	lr

000028a4 <__init_array_start>:
    28a4:	000000e5 	.word	0x000000e5

000028a8 <_fini>:
    28a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28aa:	46c0      	nop			; (mov r8, r8)
    28ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    28ae:	bc08      	pop	{r3}
    28b0:	469e      	mov	lr, r3
    28b2:	4770      	bx	lr

000028b4 <__fini_array_start>:
    28b4:	000000bd 	.word	0x000000bd
